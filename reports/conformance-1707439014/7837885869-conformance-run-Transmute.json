{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fc7d0b70-cfea-470c-b468-c12a6169e86f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fed4266b-b087-4621-8f64-ad0bda9890c3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81df3d48-fa47-4a99-aa7a-405b0ab8644b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "13e2cdc7-dd40-4ab7-9aa7-9acc96f7c770"
                }
              }
            ]
          },
          {
            "id": "25b5c4e1-f0b1-4e5e-b446-10358204d72a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c10bbaa-ff5a-4cba-b583-dce8ba3829fc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e12d46c-69c1-4735-a5c1-0343a370a3cc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4e8308b2-e337-4ee8-9bee-34cd443a182c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5086508f-7997-483e-b8e0-f6112a2c99bb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c2fb45d0-c641-495f-af52-e1cabc0f858d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15d41d53-2594-41df-8165-390bfbb232ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c90dd90d-3bab-4147-91a3-c354dce12469"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a347207-e11c-4d88-abae-d33b1641376c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "471355ec-6199-4017-8cef-b2543e15498e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40dbd85d-f0bb-4685-9eaa-0e261a29a705",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "23fb4b41-6fb2-4e82-9587-68bc7ee49aab"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fba525d8-816c-45a7-8d01-0417fe350cb0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "87cc09fa-9977-4882-95a1-4f8061e7436a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1558f72-1f8b-4ed6-8ae1-899743dbcf49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c71c3be1-c39a-4263-b973-b0d803ba70f4"
            }
          }
        ]
      },
      {
        "id": "4e957f51-19ca-4727-aa00-258346911637",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2cfa4278-3020-4543-af1b-4f36764bce83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5dfe51f-c94e-4028-969d-4e6778ae9895",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8e758726-8bfc-49c8-9403-f7bc06898b7d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de81b7e4-a864-4e55-bc41-94d4d031379d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2975ece-6234-461c-84d7-77dc9c41e41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02d3d9b-b808-4033-825d-7d7fde1b984f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88973e36-485d-4166-a1d2-d7eeb311f0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abde7afb-bc2f-4c1f-8177-d6096d451529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6714bf-d119-40df-acc0-2d870946e6cb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ddb47a6-ce7a-4912-9ab9-1485c7e87d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99b59a37-ac8f-48ee-9f69-179a923fa7c8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14c788c5-3861-4858-9812-7921ea89ff2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "738f6cc1-7d80-4de2-a353-e1e0122f30c3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b939fa0-328b-4a95-b8db-5e27c4ebbf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2ae4322-65ea-42fb-aef4-5576431b48a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19fb090-407f-4ecc-a7fb-395e0228e6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772e5755-485a-472e-9297-cea598a82e23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8f58e790-34b8-4c0c-8b00-a57ada378306",
            "name": "Positive Testing",
            "item": [
              {
                "id": "221c8030-4880-427d-accb-76c479c68ea4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c02c232e-1fb1-4496-bbc4-59fecdc45158",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bf365baa-1829-407e-ae03-73b81757e0ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9a0a432-5717-4d38-8ecd-4736a0765a15",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8ecd2740-8737-4f1d-a593-7b6c774339a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f388a25c-ca9e-4c9f-9c6f-bcf2e5042cd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1951e8be-9788-4839-a650-c256d5891ca2"
            }
          }
        ]
      },
      {
        "id": "ac96ce1d-06f6-471e-9483-efd2a42f7f92",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e50c7cdc-3790-4393-b944-ee850416fd56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78e037d3-06c0-4bdb-8b9d-c0167eb6ab7b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4df0b9aa-714b-4ae3-8e56-000ed8559fb2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c068dce-929b-444a-879c-3e8b0d4f3176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65961998-2bc2-4052-afee-f3611f342053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3e3785-0bbc-4017-a8ed-537452301f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "181bb304-76c2-42b7-a3c0-f5f7225c1363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bcc2ea-fc94-42b6-b014-4cd763115a8d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99353f3e-9ee4-444d-89a2-7e291f9ecb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7488e6ad-4cce-4fa7-97d0-ce561313e5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b862c0b-e04f-42a7-a6b7-01b90643c9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56be9098-e837-46e9-83f1-24541ca9192e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9405e834-f20e-48e6-988a-a3c38c1ca0e0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f279a381-f3ce-4cef-b6ec-ddfa19247936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30836028-5009-48ed-b033-de07250ac8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09635ee2-d5b6-45f6-b448-8638231c4304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e2eba41-bc5c-404f-bc44-af36afb0b29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1954fd91-0bb8-43b1-8372-d7064cff4004",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd40fd97-e891-4280-80cb-f14ca44f0291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ffa0d9-5cf8-4fb4-87a3-cce6f1c6b67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d109d9-3356-4c34-9d7d-78d5d24087ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f0a7c16-0bae-4225-b598-dfa039527c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925193fc-3f7c-454c-b41b-67f0863093a2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a75bb0-6b2a-468d-971a-5ab8a9b43234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cbef11-608e-45f9-872c-91f21b4275f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7df30c-436f-43b2-b117-4432453f016a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d7e877d-33f0-43a6-a256-960ec1954ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd48835-138a-4a0e-8f12-47cbb32f44ad",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1746f4c9-81c5-4a10-9931-72ae5f4c37d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d047da9d-d249-40e1-ad54-d2c82597e7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7e1d75-c217-4648-97a0-2d4b8eb07aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e80bcfd-09e8-4a82-a808-ec44d72df082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56706723-ee20-4164-9d91-a9a803b93490",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f582d65-ba4f-410a-8c9b-7ca72945bed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c863f5-069c-4c11-973b-9021e9d0499b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc0da42-3826-4b9c-b52e-c2f00ccf75d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89c08ef0-53af-433f-ba8e-d6b48ac0fd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29eb5b2a-2644-403c-8dd7-29ee11ee1aa4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384ad4a4-cd7f-424d-8a20-908b86a9d6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9793d804-f3dc-4bf7-bd5d-edb884298644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e481ff43-f66c-44fd-b1a5-c35ecc91734d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d14478dc-eb3b-448f-b94b-34645dc2a443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c408a49a-fe19-4d7b-8b49-f7f2259f5cfc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d92b213-064b-4138-bd54-6f9d23bf126d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d9f7e3-1adc-4a59-9260-6d6cf51f5a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f551bd-7be5-4783-b062-0340e8f9fd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31324854-ab87-4afa-9b2d-4e4d0f43f38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f46a4c-b4fd-4bb1-81bc-da2d18671229",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423a77e6-162c-432f-a719-9fc93ad9dceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf6fbe0-fe58-4966-8f5d-af0cda514b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89167dea-71f7-488a-b96c-42a7c3a8f49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b54825b-7d26-444f-97e2-0f05ae9e6c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51243387-b6ef-4122-b29a-08b2c96616ce",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efcc299-5f7c-4815-8fee-59c486345003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53444d7-505b-418c-b850-2a7f1b550a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d576cb-c016-4d31-8143-43f26c50ece1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca0e5347-e047-4395-bd64-78b05ff92467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b668f110-45a3-440b-b88c-3345df368915",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d50e3d5-9901-4d0f-83dc-759784cdbb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fbdefe-98df-4be8-8083-7e6824e1b1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67d4733-3d7d-4d29-b084-4f979fe8782e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7223abbb-0add-48f5-b9c8-238a098dd509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8951c7d-5887-4d10-b5d8-52569931c090",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fbd333-016a-454d-ada3-0e3477631297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe3a09d-72d3-43f8-8404-fbd35272d094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e1ad74-55e9-4752-909a-86c482a6825e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff761815-b47a-47c8-9944-e0be8c698af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b36b70-f685-4d9d-9e04-a1d5c0ac6a20",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d164c4-c4fe-4141-ab2c-b41a3dc46efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2ccd12-98c5-4c24-9b41-2fbf0c64230c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4d5f20-48ce-415e-9ec3-6a615b0a31b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6532a410-3e2a-4cd3-9aa1-fda0e2529286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbb5be8-61f5-4d58-9696-dd694987a3fb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8d239d-dbdd-4f77-ba42-a4b8c01338cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae29f400-adea-4725-b87a-06fd80bfe8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb428f1-e7d9-478b-9dcf-af642ec22183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81867b9a-90dd-4def-8b8a-d30aa21a7c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af0a1fb-1263-4140-83cd-18da62cd550a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411839a0-b3b0-4d5d-9721-20eab6e9461d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fc1358-35c5-4f56-9295-16f04c6916d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dc95c6-b3cf-4e35-9576-7653d5c9e59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5869d11e-cf9b-4aac-a2dc-1caad56a09c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6425d2a-a6e7-4670-90d0-8ddef964587d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d7970f-588e-49e3-acc3-2453c41d66e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc68c7ca-0e3b-4d51-b1a8-20fb98847443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592767cd-8c66-4579-9be4-cf993d0d5593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dda273c8-352a-4ff1-b1f2-fbd0ce33c057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9717e60-925d-4f85-b4db-c6537f570efd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d8dab0-de63-4970-b0a4-66431311e58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7484751-3d5b-4583-bc72-04ecedc8deb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d014218-0efa-48de-b806-6b9c10e4b0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f949330c-9357-4694-a555-65473b978a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51174f5-8b71-444c-bd35-2519ff696ca5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb88ca1a-1972-475a-ac9d-3cd306fe7551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5a7d0f-0935-4eff-a122-12447ee540ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01e8b3c-b38e-4872-a330-53f4348c41fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07b9211-9210-47b9-b9aa-66ff9eae3d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4594bf0-e53b-4f98-88e7-8e4489721a39",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39562314-2920-4012-9c9d-25069d4db748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76661a0-cc88-4b3c-9f02-594ded3c1ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c286c0-0c4c-43af-b43d-159963a24376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cad9b5a6-61e2-490c-87ed-f43f8325b24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d4d35e-6c98-4f5e-a846-00a2d51441fd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac5dd12-be6d-4224-b0b9-c7525429efbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e876e552-dc92-4437-81d2-0700c32e4424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d680730-cf95-424a-a965-e97eb99dfaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e44dac-24d8-4694-8fef-bcb5aecab903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb9f038-a487-448b-baed-0b20de46795f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7ae9db-1f27-4c42-9f67-8090cb184c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a7e6c5-2cdf-44d7-91e4-3e4e5be14250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5274abf6-334e-44a5-b5f2-0704929485df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93a8708f-c1a8-4d01-932b-7ab34bb1658d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7590f022-d0ae-40b4-ba60-56ad66daabe7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4b417b-4d95-4d21-8cca-a0ae20cabdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a553fcc-43c3-4fcf-b787-621c670a2793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d6a9ee-5439-4e80-a621-2db29892a909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29bc90e7-0af8-4dd9-b603-870d86517b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63731f1-cfb4-4d39-a6d6-6e8bbcf85db2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2218d4fe-9b5e-4970-b529-e93f96f6009c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3326f7-8bec-495d-8b14-7d75374a6f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe14555-a739-4ca8-b78e-6c23c22c5dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b04e1797-a872-4938-9743-0a8a8e4c1e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd92a62-1c15-40e9-9d51-13e20a081edf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f43f469-092d-4863-9b4d-58ffde78b00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cfe62a-192f-4e1f-8945-41d0d78ee414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7f9e42-c0ac-48ad-9505-9120270a7be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecfa32c-6ae3-42f5-b66e-652bc45f34db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd604283-edda-49d9-8b4b-ca5339c347c3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a59ce1-4819-42dd-ba3f-c9ede73a8be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d67fee3-6554-4da8-a823-4f85f6f0039d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1e0b03-3772-4586-8ed0-79a0aa0867b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3737a1d-b827-4256-ab26-6292e52e8e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b38e576-6d11-45c0-8ed3-bef739b032e9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af22dcc8-2b47-4e90-9c54-1c0b7b5114cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e3cd42-1c17-4f70-a54e-deb249e82818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14d1462-7fc8-4c13-8a6f-ff84dac46131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8148814b-3c4d-4edd-a2de-25f9709b32eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11395bf-f670-423a-a050-702d00852698",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c50015-dd9f-490a-8fad-f27d0f3b5c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ef6866-ec08-47be-8618-513662f78518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be278d1-35b2-416f-b596-f58fa3033fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "64f7e56f-8092-42fd-8d21-71120fd33278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f4e767-0897-434f-866b-84e5312da542",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e38ef1-f88c-4226-87c6-0898540ea160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff4f4ba-d9a2-4208-aad7-386c5cca3f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca04c7b-b369-4e6b-9010-a8b8d02237ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5193be37-203c-4e46-a2e6-a1db33e56516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7da5ce-f6fb-4009-9b61-7e669dc995e7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79b300b-3a3d-436b-9703-9755046e4479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ce28a7-5740-4949-8a81-3665a7efc216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d03f62-92fa-445e-be7d-981c2914ca9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "feaffd7d-523b-4840-bf68-94e51664b244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9e5a0e-2586-4435-85b9-f1f450231150",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e6aa7f-58c6-45b2-b2f9-c76d8b1a753a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4acd38-782f-4341-964c-53ecfd13ead6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35aec25-d728-48f2-aa13-99ba4e6bb539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8082456-39ce-4240-b5af-275615e813bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cfa99c-eae7-44a1-936e-00ab9c8e965e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66540b8-02aa-44c0-90d6-d038d6f3fa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd942b1-01fc-4331-b55f-8d73bc10858c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea3c5eb-d3df-4ea9-a40f-c4d083cb1542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb4082a-4ab9-40fb-8fd9-16f03c928336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a871791-1c0f-4ab5-9b9b-f738626d150f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237401ed-9206-4539-ab67-0abcbd0b7db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ed33be-204e-4eba-ae2c-72b1411b56d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7895629e-b5f6-44bb-9242-b4b1af6a6085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0835947-651b-4a5e-bc51-6224976a897d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57f105c-0a44-4c7c-9017-f6922e3ae1be",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767368b2-5e48-4400-9480-0efcfb9d137c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a1ebb1-59f8-4c6f-b263-7cf822d20343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12d0dcd-50b8-4170-84ec-cda90259c89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeeafcd7-aefd-4cfb-bba0-6f46ca3029f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94c3536-93e8-4148-b3e6-98f2525df74a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3869bd9-ec22-4d29-8deb-51a4a0b847e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf15a2e-87b4-4dbb-a79f-78a55f39c3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51ae0bd-a81d-40f7-8373-c683e5beff99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "95491950-8631-405d-bb4f-1ce9f285d289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689c7910-3c01-4fc3-96a0-76d40a371d74",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9ce3f5-b516-4f16-a989-d8f7ad736a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d954bb4-bdf1-4e3b-a07c-b810920fb97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f31ef15-cb41-4e29-a41a-3e8a56fdc164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "982c4447-7a0d-4ca9-bfc4-07f540e0b682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b5946a-3720-4faf-b980-4e7e0158bb95",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3e1cab-f264-4a08-91a4-6b1d7eb3a412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960a7c21-a4c1-4e67-a34a-39f201477027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a000df2-729b-43dd-8347-b6f42fa66218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc301eb-182b-4020-aa8c-4839304bd6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704a9178-b1ad-404a-93df-dde87d3623de",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be851ad-3048-4022-b084-27dcf79cd413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3021b38-9517-4b9f-b3b6-eb6ebaed5f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd274b6-ac75-4d40-92f6-0b15ec6230ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f966f7f5-bb72-46d0-8c2f-2f100049b583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15178f65-6acc-4f86-915f-964d2188709c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa52dabc-7319-46ce-b6c7-0f45e80c3e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628b6a7e-6b07-4abc-9ac7-7354e04ff07b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1ac811-96f3-4529-9796-5f2e85739198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4526239-fcfa-43de-88f6-0a822249630a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7687b6-8c8d-4b35-9034-48e6b161853d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef093de-cf87-485c-8dfe-c4fff670b53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0364a63-8638-4bc6-98b5-1b3d983c8085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef71f55-a322-4a55-979d-b6aa68bcc0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "959b8425-0b48-4709-9c08-b1dcc3c8aab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cefb97-2852-4bc2-8bfb-dcfef9a37a9b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d8fcc5-5f84-44ff-acc1-0bf207837a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3813c8-07fd-4e8b-ab64-9d0f873fb85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877fd72b-4ced-41f1-a795-71cfe2f5f05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b33c4294-e09c-4461-964b-b792a0dab9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef37615c-74c9-4de2-a4f3-0c5f22a703a6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9832e9ba-7103-41eb-ba1c-b866f061ef4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae4b3ef-6c35-4b39-aabd-630f35930fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79088aaa-3085-4437-8af8-630e66ae8c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "53868723-1e56-4a29-994c-9d6a8a273459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbf68fe-29a1-4854-8ebb-0836c2737a01",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cdb81d-ba07-4e7b-87ed-bb779725c15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efe2794-3c5d-4ddc-9772-5d19fc1cddb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5453eb37-6981-42f2-9187-171d7aec8855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bee683c-4687-4d43-bcec-74214f326bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb607ee-6ceb-4ec2-a309-7e8ad85a7f19",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd313433-609b-4a97-aa08-8f9dbca45c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1f9f17-ac14-47d1-9344-f6f9f3c663ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6f0724-bc48-46ea-9ff2-8acf7dfcf76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d24409e-b0a2-4ae2-a5d0-9ea5c57542dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7a3d14-5c10-4b8b-babd-18003195815a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8169a47e-875a-48eb-8c90-fbb2a80f9672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb668ad-727c-4487-9ba3-957a3d26c5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d965c6b4-b2d6-46df-b443-b126084ff01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "745b4e5e-d0de-47ed-8bce-ed5edd0ecd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf7a463-29e5-4e93-b349-1647e57ac437",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fff227-e071-4b99-8c33-952418bd7eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a31b3c0-1db9-4f13-9345-2e9a15fa2b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e8a038-7ad6-4c4a-89bf-fa2a82b40fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa910020-2e42-43e6-8842-87395b93a135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca4abd2-ed74-4001-9eb7-0c98436ec1bb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5b677c-6b33-46dc-b0cc-fb8942de8d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a4ea69-5f4d-47ba-b94c-f71b888d2a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ae6c30-a906-44e9-bc95-2caf9c2a8466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4537fbc8-9d46-4bc1-8f13-aa15dc01f18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4642227-be00-4929-b2f9-7a89a48956f1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e9e215-07bb-4a65-bb91-a4741b6fd41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6fc1906-97ab-43b6-b4ea-22409c54bdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894a19f3-74aa-47a2-b06f-f673998df6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b8a2eb-2d38-4651-85ee-7520cfc2e5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1553319b-bb35-4b1e-8472-5f215394f1c7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39200c7d-8cb5-4e9e-abee-8eed30f14c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d84988-3c85-4b27-9372-2a4e40c3d313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01811ebc-6601-43d4-800d-035fa3b3ca14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cfa0dc7-60c3-4acf-b4aa-4eeb236f7960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf90dfdf-1d5d-46b6-9cb7-c0ec2c538c16",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d585394-7b85-473b-bdf9-32f6e4635278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b426fed-e2fa-4d03-b8cd-1e988a1d33c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f14230-9c3a-4ab4-9611-bd7cfc9636c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca5567f-1b2c-4cae-bed5-aa5ad65dc316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c8194e-c4f0-4b70-840d-c459254b9495",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161e62be-90d1-4959-b212-b4a995cd4faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85f113c-1eac-4f2c-8d23-e1be4d3c40ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591626e1-8ef7-4f04-a73c-b3e153b184b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "16e58a9d-4ed9-42e3-9f81-0da53e03d2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3364ca-4e76-4e0f-8ca0-90ee1b9bc8f6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00f772f-ab0e-44c0-8d33-66ff28297683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa8e515-0741-41ad-bfcc-10a14d523d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aa8756-ff9d-4191-bd28-00bc7c0c4984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97bc5d02-2499-4612-a527-9c37c5a12e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e05959-3b85-40c4-ac3f-f9a5b545c6eb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc741b85-5e0b-4f5e-8e5a-1bbaad8aef9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50b174f-2a60-45ae-9b42-bd9d858f6063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db22351-c16d-4f8c-9c92-b05c16806669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5abb8f6d-1e6a-4ac5-96ae-edeb2d8bbe32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30971dfc-6f21-43c7-804b-a22e74c24d86",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b69af2-4ec6-43a2-97f2-e93fc697416d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1843f548-eebe-474b-aa83-fcc05991e822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3ff1f0-246a-4938-a43d-dba40808be33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d463f7cc-3d05-4a9c-88ee-332c38341686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95cc21f7-9254-4974-b9cf-9dad03bf1a9c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d780bece-d54e-4573-86cc-413ce644806a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52dd11b-fd1d-450c-8f36-c611ca8bb198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a23420-e169-4336-82ba-d4db61b3979f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53a3d08f-0450-4f4f-90a1-395f670e0f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17039cc3-98c8-4b1d-b587-04f57cb737a2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbca0ff0-4fe8-42ed-b604-4d204dcc0f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ff2634-893a-4489-9f50-103c2c1fd195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6b6a06-d6cd-4f9c-8579-3f8bf120526e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "da0a3696-7f7b-493f-b31f-15196caaa96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40224b2f-7666-48cb-88ab-f1d0fa9903e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfdc842-4730-48b9-9453-95428e84c649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e12e3ed-8cd5-4871-b1ae-543a6a6eacad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201bca76-f94f-443c-92fd-5475e087d714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d73df0af-7e99-4aca-822f-67ad02f9225b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedbc8d9-3fbc-434f-a240-972755554be5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4486920-e78f-47c9-a12a-6979540e8287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83db3ee-dbed-4f10-8607-fb0accd5aa28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2e91b5-3c2b-424e-b096-e1cc5fa4b283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eff1eff8-df72-4fa7-9b53-641ffa63067c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3345e2-668b-402d-95f5-021249cbe001",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81435b7a-48d7-400a-9217-835f5d20976a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4b6770-fa1c-4b20-a69b-8545826d17ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8c01a8-a646-4639-bf28-98cd0894d44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2084d19c-34e9-4f80-95a5-a9876f4bf6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3047e7-f3bd-4052-95d4-e662080f9ee0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f099d278-c70b-466a-a799-d7fb451fd3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d8632a1-976e-4ed6-b1b9-ae81dca5389c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9a7230-ccbb-42b7-b20d-1bad74836589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8facf94-3502-450e-92ba-abe24fcf2f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3ce1fe-752a-4610-a7fb-305d0a1ae02b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf718524-399a-4cbe-a81b-4a9722e6b968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8acf10-d30c-46b8-a9fe-6e754759d760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cd0dd7-9ccf-40fe-aadb-31d3d7b2e636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc9dfff-e3d0-48c8-ac84-36cd2cb4ceba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56569c7b-cd26-4e3c-9b59-ad0958d125a4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277723bc-bd1e-49f9-915e-9a3d5c2867ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a275c2-8202-447f-8ca1-f9dbbee2287a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48b06e2-6f6a-498b-bd35-f8a4430f8351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cad1f5d-3e51-408f-b51c-b754463c8296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d9df0b-17a4-413e-a935-fba45fafaab7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c546ff57-a36a-437b-bd73-f6ff79ffba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e744b6-5b41-46f7-8473-d1bd31db2efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3327e628-1ef6-4650-96c0-5c91e505f7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1955c65c-5124-4444-82df-5d8ab58d9fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7a3141-e694-42f4-89b1-ac77e6eff4f6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a62413-18ad-405e-8388-6ed8173f0609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39f6397-9de9-4d7d-8aef-37ded80b88be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5663a1f7-32d2-4300-9113-0671c52b7777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c87bdf-3322-429c-b212-af796ac652cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5baf078d-3dce-4a8d-8a27-15ea5e42bad2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0100038-4ebe-4c50-856c-caae3cf95562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89f63fb-4c68-439e-a8d9-eff6e614de66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed55c89e-ae1d-4191-b807-bd7c275e5b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b8b519-0a2e-4c5e-8685-449dbb800142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c3026c-88ee-4cba-b6b3-975dd302103a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1c2d41-1a6e-408a-9f10-21a76230ca57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9a842f-b0d1-4e44-94ef-cfc0cad66655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6529d919-a303-43fe-b166-c624a4de0b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "49050278-314b-4955-8e91-4b6623b0a322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb95eb1-4f18-4b53-a657-2cde52551b69",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe297c7-ad24-4b28-8f42-2cb4753e3e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a0bbb1-b257-40f5-bb4e-706876bee050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5296a0ec-5b6f-4026-bbef-3df2a14f487d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6626e6-e586-4e5e-92ab-a3edf3e44f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa07c0c4-9907-42a4-b92f-168078bb8e35",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c98104-b17e-43d6-8136-fa8375ddcb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cfc654-705d-4b7b-8015-df6baf57ba64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ec7ce-5005-40cd-a909-abd60d44f0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c2d0a51-8e1e-4c7e-b38f-8a8034d6790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf14176-b953-4cc5-8753-52e2eec3eeba",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c570d10-12a1-4c1f-a515-7a894266965f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57885005-1765-4bca-9d9d-7090dbfc6aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71505581-ceef-4a45-b423-d82a001060ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "688b06d5-74b6-42c2-9b12-23294d25eb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc67c0c-a420-49d4-bb56-6cb468ab26e5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6d5f95-7ec9-42cc-be35-d6bd42872a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b411ed7-d20c-468f-b2ea-44ad2fd16985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39be1a84-698a-4cc3-927c-a07c13dd209d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd59732-8b64-407a-8e8c-62c797c4b864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92221f36-a11e-4312-b284-b25d54701fa5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fbf14c-d89d-4843-a127-0436da84d521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616a6e19-892f-4c36-8fff-6dc2b73a37d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5474bc61-e5c3-4235-b86b-5817fc5c8d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71d2330-bb46-41a8-861e-2faae9b69c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5befd8-64a1-45b0-ad53-f178448c80b4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95cc08f-d43f-4480-a178-33b1e47e227b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43329ed-d67a-4d0f-b0a4-2a86baf65eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb0bb1a-5c06-45e0-b34a-d5810f57b44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11ab9f95-55c4-4d7b-9b72-cc0c6678acee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41cc266-84e1-4882-9b1c-08d9e01b4c5b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8452b71d-17c1-41f4-86f8-698e45486ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc95744-7983-49f0-9027-11b2ae64f4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aec453c-9b5a-4b0f-86dd-9463ac5b0991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7a30c7-2580-422b-b4cb-5de57dd0b7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c7ae74-c4d3-4b3a-b370-354e2d19f5c4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9dc155-f9a2-4939-97f7-4a7fb83a500c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5289b769-5ca5-4b64-b461-8518a06fbf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bce51c-99f2-47bf-96c5-fa82c924c8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2742f63a-a1e1-49c4-a22b-70e62f1d2541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c2e960-467e-4dad-a38d-1152b257a0e5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b750b536-e3b9-4f05-93d5-ed025d331a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6995f6bf-6cdb-4347-bd7d-c70e9630616f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188e5ae5-3507-4221-b269-298e0748f269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "608eeda6-a9d9-4c90-b9c5-1f063fcd2444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074a657e-aa19-44bb-a8db-f92f8108278e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7a118f-eaf6-40b8-bd2f-101ba828bf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d681a07f-bd33-4f5e-addd-e9c35088afa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868cfaf3-0330-4706-831e-d0914def04a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f20a59-2910-49d6-ac77-98927b808bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc44bf1-dae9-4fc3-9cf5-cfe43bc24a7f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d102f4c1-d020-445d-9615-e2f177854880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90cd228-f8ef-4f29-9a01-c2072c73ef69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1c03ad-2518-4af6-808c-d0ec2567301a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea41cbf-3f67-459d-ba29-0c3ce48ee479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8458b1cb-8e28-45bf-b575-57eba86ac543",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a34620-97d8-430c-bed0-59faea6d02cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9d2de2-6f2e-4d68-9fa2-8695636a5287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b584a7-036d-457c-9187-6109da754b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ab8298-ab2b-4c06-845a-a26bcc969900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77a6ff7-88f4-41fe-9a89-0bec31976357",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6264d860-76dc-4d20-93d6-3ca0a10dbffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62e3468-d219-4601-8e5b-a981bef3fb07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376f777e-2fac-4ead-b1db-3d9c3a837acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b458b892-65fc-4fd7-ac04-feed4195b50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589eb618-dd25-496f-8577-ed3ad3e6610a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2186dbf-4c5e-4203-97d8-5239c410fb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3e5f95-b081-449e-bdeb-c440d613d5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7696f771-1304-46d5-b773-5ed9d1452657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "586324c3-7c1f-4800-9d21-fe2e831892ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb057069-5a4e-4774-9fdd-5546d8aa00c0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386ad85c-c43a-4a38-9c28-5f8b291ac4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2a9fbd-b737-4d2b-bda7-4fc58dd05b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8caa59a-0276-4a2e-80ff-f6bfa4a70702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f600b290-bf24-40c8-8d30-4eaa76b42184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f797832-a1b1-48cb-aa04-a4b064d8cc7a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8aa3cd-f74d-4454-b897-b91fb4083223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5b8ded-f9da-4a8a-9e0e-e44d01eaa13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912271b9-ae03-4562-9e74-3340d0805082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1dae21f-1dbb-41bc-9a66-86222a75a8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c157c7-60e7-4e48-bc3f-879aecd881a8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7391ec84-df78-489d-87de-21e683768e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b3baf3-695a-4080-8e6a-7182f4872ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b355d0-2f6b-4022-9270-3ea2a2e4d92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dfe1225-1acd-4b79-928a-dc56dd80fa26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da236b3a-9d58-4b55-9df4-dbe54807593b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d415d1-d672-4c31-bb57-40ab3438ea4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c83ccd-22fa-454a-a185-2f9388fd9ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a8df0a-0e57-4326-b6d7-a7951912dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0d9f47-0c82-42fd-8394-2ca078ae14d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cc21ee-b9bc-40ae-9f96-ed8378f31408",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c64995-966e-4059-b1a2-7ee1ed1006bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d48dd1-b4ce-4818-bc7c-164a13448197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a727ad-0796-4452-9e68-f4d21290ed11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f832f810-28f0-465a-af04-3964040f4acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511b71da-d4af-4a87-8bfa-2332cfe4e781",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5061889-dc85-458b-9f63-68552f44a263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1598b30-b18c-4f71-9e03-8b860ea475de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203ded81-4ff0-44dc-85b7-f67b33740f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b53d7382-3dd4-4e6b-8757-f8dd12738c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9907dc-8b85-4ec0-aa6c-4cb9eec7c20b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f3270b-c61c-4068-9d00-e343af8a16dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d819aea-3bf1-48b7-bb2e-3cf6e23ab9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcf9a26-f560-4dee-ad02-4657c83172f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc28c3cf-6592-4b7f-895a-cb02a877e723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e000652e-7c43-4b9f-ad4c-3d5aae09248d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab610cc5-97d6-4b92-a4ca-cc3825782799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b4f91c-e585-46ef-8da7-720e774aee6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2211733-bc8d-414d-a27e-0587b752a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9ee450-98f9-4db4-b765-6efa5fbc7f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3674eb5d-e10e-4e41-9178-e3b43d11b824",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea57d45-e186-4b2c-859a-07d199aca6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0aaa6f9-101f-4790-ba17-8c42e011cb44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728e6efb-fc0c-46dd-9e2e-b79077b960bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "715d8472-aafc-4253-b82e-e1a90061ba33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e53221f-47f7-47e9-8684-3bab23a06d7a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ea9d9f-cd5d-4588-b11d-7452c29f5d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a67537-5327-4eb0-9c42-f28f49921060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f1526c-4422-4edf-8623-ba352d664d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1834f3-c362-4ecf-add6-8d6e0fe8c44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d163e279-56f5-4095-9260-355f3f01807b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8506fac-c9e2-4661-9b73-3d9d0014f0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cbd3e21-19e8-4070-8f18-1cf2c1c6ad2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0f36dc-29c7-4794-b17d-de3ffb019f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b136dc13-471d-4d82-ae59-55a2773f5800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2538b9d-7c9a-465f-9ab6-47aba8f4e989",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cff398-3588-4a83-98c1-fa049a343578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48f0150a-fc3b-47f8-b078-47c023c15d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a0174b-7c92-4783-aa23-6de88463f921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b673bed9-0d4c-4942-8006-59dc0219cffb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f87936c8-9517-4c3a-9abf-4f8cca8dd6e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "062f73de-f266-4a98-a13e-3d96c90fefde",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c41dbdc-c4b2-478f-8b99-79ca4471a50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c39544f4-4e07-408c-9ead-2daad1f1e8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d29b897-4380-4cce-94b0-b46fbc1f46dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9604de27-e2d6-4f18-9199-a6834a5290b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d67791e3-f864-4f48-bbd3-7021f3fbcae4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bafda7f-d8f3-468f-b786-7e9811d98c03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfd79257-54da-4548-b9c7-e3f529864d3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31759f8c-6e64-4e14-9a0f-64f11350639f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2366b96d-d02c-4846-b073-29d325828a5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58a349f2-d6d4-41be-b8cf-788fb056f539"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34a169f2-7b24-4b13-a0e9-af622f1d4c64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "91caebc8-bf8b-4fb0-aaf8-05e4207cfcce"
                }
              }
            ]
          },
          {
            "id": "c44f9896-cbcf-415d-a5eb-eb854eb27d98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e0d0450-56cb-41d2-b47e-db7cac81132c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "684e8a33-ebf2-43b4-92bd-059d3f92da98",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc70f2ef-ec57-4ef8-8a6d-2ad6700288e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "85d1e1d2-8eda-4ec7-ab9e-936fb535c1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13d17e9-bdc2-442b-aae3-bb54c19ce0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a12d25-4849-4a3a-b756-49df23aad604"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "23d2fbdb-f14f-4acd-ae0e-45ea869fb8ad",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "027c7022-6041-43f3-b004-a87f386e6b68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aae1e528-2f76-4bb9-a4cb-30f7b6a85140"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fd238fc-8ace-4a2f-ab4e-fce38f43196a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "934e7cdd-242b-411e-8655-d1950133a8c0"
                    }
                  }
                ]
              },
              {
                "id": "9993bbdb-f42d-471f-8593-3ac044a5fc15",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8578fe42-a6b8-49ef-b9df-fd94ed05c4b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe29d1bc-9ef9-4dab-a2e6-24f3823a1182"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ea180f5-1850-40d0-8e0a-895a2298d1e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ba8651f-f555-44ae-a35c-96429a864243"
                    }
                  }
                ]
              },
              {
                "id": "ca8c5e55-2447-406f-973d-be7f6d3b4faa",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9113dcc4-d419-420b-8647-412e1f88501a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee5d3792-33cf-483d-8961-c8d99a3bd7c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6142ab4-7ed6-4964-be44-0f20bfab0d5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ed03f3a-c9a1-4116-b8f6-92e6a0c51db4"
                    }
                  }
                ]
              },
              {
                "id": "abda0c22-5ba9-4e6c-a2e6-116a18ca437b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "380e8b73-4b5a-4f96-922c-127f060a920f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d15a30d-5c2e-4cf5-81da-7e8036407ae6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "355e9b97-6534-4c9e-8aab-fb8cbebf0d92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "519bc14c-d8c6-4779-9552-b2fb0efdfcc6"
                    }
                  }
                ]
              },
              {
                "id": "f270fa6d-6d53-4c92-b3ef-839bed323f9f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3afd4559-f728-48d9-9fee-0357c02faa15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ac51eb2-1175-41b1-8ff0-4459b50953eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ebb0e32-6212-475f-8ab5-1c98bb824741",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "081e9be8-9e2a-4c0a-9899-6a84942a54e7"
                    }
                  }
                ]
              },
              {
                "id": "2b4d2f84-1245-471d-82b5-3cd960a7a102",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f40a04d6-a2e5-495c-b95f-6661b6b9e9b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "333cd404-6787-45fd-bf55-8008164faf0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8fd9863-757d-4bc1-954a-b36fd0463cf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36218a2d-385a-40ff-8d06-3fc60f88e103"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "462179e2-67f7-4a2b-a61d-5a4b89e5b20c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d7c20f6-214d-47f6-b045-eb0c8405d83e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c2ee7f31-01a3-4530-8268-2cb534d3a309",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fd76d96-6143-45e0-8044-3c9425fa07fb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2de81f23-1ac1-41e4-9b1a-fa299c57f5cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "af497e65-e0a5-461c-b69c-e8711a47b410"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01ef60c3-679c-40cb-920f-4ecb9f8ef9bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dd12aff-ef77-4571-ac2b-1c11357e625b"
            }
          }
        ]
      },
      {
        "id": "68c0fc17-c224-420e-bbef-e0d10e14fced",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bb594f48-1664-4897-8e50-c1ffdc90b997",
            "name": "Negative Testing",
            "item": [
              {
                "id": "357a19b9-f65f-4828-9b93-bd77410aa4de",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b5c18e82-3240-4fcb-9d0b-55a5c2adaa44",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe43dae-8f2d-4512-a448-596e240d3c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35ee491-3276-41be-aa91-d7011c8f7b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5691fa35-dd31-4290-aead-5aa062b6a6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d641b37f-1017-4f31-a221-0892932ee12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d616d41-5e00-45f6-8a8e-f3fc5b68f88f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43d9979-4efe-451a-9f61-e0e7d8140d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74359b66-627f-4236-81d1-a66dbbf7cb5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff03c07-27be-45f5-a1d9-bb63e3784628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3015713d-d588-4068-8f28-a24a400eaecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c848455-b363-46c8-a992-285747c7d541",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaf88fa-d7a5-4a7d-8055-94eda1bfd0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fadbffd-0176-4144-9d1b-6013718c520d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc05314b-f2c3-4590-87e4-a7d631e9aa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57cfd004-866e-44c8-9eec-8db7e09d9260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4426d3-7a10-4c9b-b039-e32e858b36fb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df79f48-e8a8-4c5f-948a-5edd02f2ca4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3c4aeb-3c31-445c-befb-e974e2ba3bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f056767-5ee9-4bbf-8a7a-29447e98c88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30d740ca-259b-424d-827d-b24244115239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ff4364-475a-4d12-bcd9-2a1a2bb2d972",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0319034d-9bf1-456d-950d-47052c1842e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c329ea-2087-4be5-9af5-51321d92e02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4580fa-57da-49be-a92b-1ccf5f7f0055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89313748-1f41-4716-a8bd-22d471893811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acfa7a4-f1c3-4728-a351-f7baf167bd40",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b3d962-3a1b-4879-a15c-659e88359df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6443b0-914b-4db1-920b-c714e7f43def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ab359d-6938-4239-ac4c-c1d7e855f4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16cb912f-54ca-41c0-a044-e4609b8b1e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5969ef-03bc-42db-a6da-1a7c2bd78b32",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4ed8ec-9085-406c-92ec-fea0314f189a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed6b69b-6df5-41c2-be56-18686afbc0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6787b66f-c400-46d4-b863-c588edd4b8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "80792b59-1cf9-4e02-94d6-7374ddce5128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869d2f7b-1e78-4f64-acab-fe44e41bb905",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35fffd2-b7b0-41ac-b247-888ec1553c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c43280e-e147-4040-8825-09b83d635ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fca50e6-70a1-403e-905a-c24bc07879fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "884b1f07-b63f-41e7-8d4e-2ba10669d1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfdefff-80f2-412c-96b2-a68d8bfeb3f1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbd8d95-5a6b-42de-b4dc-42f6b03e6854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4cf5ed-f30a-4068-b27d-3591ad34a1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8e87e7-4b9a-4779-a460-4cedca85c801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3fe5cfd-61eb-4d5d-93da-840d27947ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d2dbaa-a206-4dbf-8c7f-e45039044bd2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41874cd3-0b45-439b-b4f9-7c0ea5ce523e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa24937-93b8-413d-b294-aa930711b0fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6f454b-7659-41a4-91e5-27d61eee4961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0a37e8-61c5-4af5-9ae1-7308072a3ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095c08a4-c45e-4d1a-a857-9b4777d2ebec",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030f075f-497a-4181-a09c-27dbc1402813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54b7f71-d652-45cc-ba8b-e75c9955bda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8497393c-53fa-42b3-8ad5-0b07054a7703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8e48c2-74ca-481e-adf9-da04aac84c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df52a072-d5dc-4260-ba49-7bcc935cfc49",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1b90c9-99d1-4250-b8a0-628f2ba05949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4496f20b-24af-4b09-8dae-cf9c58c5107e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49dd3d6-f660-430a-b27b-8f356a23fa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "106da004-9c20-4145-af36-e5cdf4cca7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e85bdc-4c0d-4dc4-84d9-5275539256b3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbe74e4-b824-4bc8-bfe6-ddfc2bf6b3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba70e047-fabf-43a7-95a3-89753ffe31fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993849f0-f187-4eb1-9161-4afc54d01791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6d3df1-0096-4535-8735-2b0626725a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6401a25c-f980-411f-ab54-3b906abbc1d7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048e5cb9-8824-4bcd-8db6-a9b373cb5921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f73e7c-7a1c-4f82-8335-32d3af3dd96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32daf3d3-bb48-4a99-9c9d-7f98fa56a03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c07ef16f-cab0-4091-9a78-5fc9135fcc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203fc208-d55a-4a4a-b63c-ad6b8f06f173",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0ede48-6f2a-478a-b687-01069f568746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21ee511-e9a6-439b-bf49-a6f0a5c85804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c2cf95-f42d-41d3-8eb9-a71f0bd56203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1897a80-433d-4468-8384-361fe91126d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37240000-e72f-4a45-8cb0-2fc00af3f0dd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc42ab18-b22d-4975-b98c-339c2592431c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fdcb4b-2d7f-47c8-a9b0-5b7a1d8f0488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a87110-e32f-4e7e-95dc-66b3f92a812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5db55d6-03e9-486a-8b57-fa4780ac51a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5103c038-f9be-40af-9c3a-367ae3eaad03",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23975b55-737e-403c-903c-e827ecdfca18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c21e556-6e52-4856-a040-0de19a79b14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137fbfee-7dbe-454b-baae-526751a9c9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "21215930-1223-40a3-bd90-c2d4580d9276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45839495-a739-422e-9173-6b3e1d4047fb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cbe365-860f-48a8-9698-0210114a31e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53e9a9b-ce62-47ff-8d2f-1c7d9f563c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a23530-6f88-445b-bde5-84dca05e2b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "56b2fd9b-3cd7-4b04-b837-406389035174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c741a82-c0e3-4306-87de-01dad9066f14",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74681e96-fb2f-4ebf-b044-e3ca4c666811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cfd6d0-54a0-47a0-807c-84ef3e7fd170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d05176-0266-45df-8aa1-5540f3f20d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3092e2-5805-4a9d-b23b-9adf5d292388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ea118e-0670-4ffc-a8ee-e60c92239759",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253ea418-cf62-46c3-9eda-b9fdb96967d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fbd654-213b-4804-a5ca-05419de16a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6214f5d-8625-4081-8a48-4fd058510248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bdadc55-c653-49d8-a02f-670d47a8ab25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd52c74c-3739-40de-9b3c-902c916a1aa0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cdfcc9-d1de-4217-8daf-60991482c67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f186f28-be38-4c4b-9bed-5643a9933780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea7aef5-2095-4714-a8ef-5e75befc23ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f26408-4d72-4c3b-a207-c3039f1f1953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a50fc5-d8a0-4af1-a33d-7a4c4f01f84b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc942d15-d481-45a9-bffb-27f12557f60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7dc27e-fdf7-4c4d-9560-83cbd8c6f645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26aabd4a-8114-4bd6-b55d-f35c2eacb67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e72d885-cd90-4e02-bae5-8d3f69742fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe97d34-56ff-4191-9b54-4d592838ca2a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e80452-d2ae-4d2e-b9bb-f3a5e3814637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b990455-48af-471d-80ba-b1073e8810cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d3683e-77c4-4186-80a7-f0172f3daf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0dd664-9583-46d2-80e1-916015274d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3732e53d-fcd1-4dbb-a7f3-a19df3fe7aae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105c2dee-ecf5-43e0-b23f-ee90b8bd97da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27f95b1-2f43-4e6b-bdf4-6b6683bdc098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082ca50d-1800-4d19-97d4-10aaa7853d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa97938-4000-4aa6-adce-76f191ba7a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86be899c-3992-4447-a426-e95c138a8eca",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ad490c-de7e-4c0a-b0bb-cb65ec4b481e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46e46bd-a1ca-4a94-bb83-ac2c1c4a3429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da513f1c-fdd3-47c7-8b1d-6538c017d340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ee1bed-38ff-4a5d-b69b-000f71cf6ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b713960-5084-42e4-9b02-415771203622",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2356e6db-c0fb-41d8-8d86-8274e19de09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e40c7e5-2aac-4e3a-bc40-0b21bfa3d70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8067070-60b2-4e3a-95cb-0a3184bf847a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "529af5a1-7c90-4d72-9b5b-f5401ddc55c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6808003-5e94-448b-ad91-69c1f5cc58ca",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89211786-28c3-41f9-a32a-de93c67bd009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2dbc8c3-8258-45ce-a750-32eb6f9f4a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e7b97d-b7e9-4285-a1a6-12a12e16f216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee27028-757f-4e1f-8e28-816def35f56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0350627e-92e5-4f50-a556-a5fe40bd93d7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfca66c3-d191-4b53-87d7-2e85e8c87a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d23bf75-9d7a-4e58-b34b-155b4f0a5dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a817cf-8ab4-44f1-b5a6-bdf4e932195e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d420d36-5cbb-41d1-9fda-231872a5e9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122d524a-dfe7-4553-b4ba-52eccdb0dc64",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fe97c9-b933-4f4d-8d4a-29b7b8edab5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e30ec6-8608-4764-a692-0dde40a360f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94018649-f988-41fe-8816-dabe628dc368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3d98a5-40d3-4b7a-99d7-8bfe851a9db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a9b7cc-135e-40eb-b92d-7de730734448",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d9dbd1-54ca-41c2-847e-ab608ab9f884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c308a05-cf5d-455e-82f4-3778b5d0b5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487504b2-1930-4c1f-8615-d30c30c0b031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd26a67-4f15-44bb-a2dd-64ff7b62b0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c68adc-ceda-48b5-b20d-a1358c078eca",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71eb7d46-f70c-4efd-97f5-11c5cd9a8a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d82af7-5b36-49ee-b30c-7343b5b9fb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721a925d-20fb-4300-847b-db1ab3d19672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87b310c2-d3b5-4aa0-8a6f-defcd9a20839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bd1a9a-b0ca-40e4-ba00-4006027b4a74",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b21e4a-c3d5-4592-98fc-b15d01414f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf715db-046e-40c0-ad64-b6027873e783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbba35b-0ba8-4c57-a167-59f3ac698ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af586d7e-9021-4b64-aeec-bf465e7c15cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b978980-72e6-4f8f-8dba-093b2112bb48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66e2d28e-937e-43d8-ae80-9cb36d9cebf8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8daf37-60b9-44a7-952b-d6ca0daf8e44",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "39a455b0-2c32-4b7b-935d-5a08c315209b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06ff104-0a5d-4035-b2e5-9b25ce7753ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9e6fac9-ab5f-4efb-bc97-1e335066c623"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab83f7f2-00b4-40c1-a7f3-6886313ebd95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fd6dd3f-29ee-4985-94e9-7bca08e43009"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08eaaee1-3391-426b-ab28-4cb66c0f6d89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dcf43b4-f639-4e58-9a45-ac66cd0c45c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93fb6eb8-83fd-47f3-b3ca-24331ef1195e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3827d937-67a3-442a-8e0a-83f69038f72a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce0b16b5-8ae6-4764-b0d0-04add9c426e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5598f2a8-c28a-42c1-ae59-a38fb21314fc"
            }
          }
        ]
      },
      {
        "id": "b4946e03-b083-4322-bd2a-52d593402823",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1c00a9c1-e854-415e-980a-f65b5bdac3a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c32393c0-38fa-45d1-bbce-c0bd729d6241",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ba9bf843-37a1-468b-9f60-10f0904015df",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da98fe5-e931-404d-b9f7-612c1e7c87b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48a3311-3408-42a1-be2d-b596aa7bdd41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bec4aa4-6c9f-4c83-9622-9414bbdf76ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "274df629-ccc5-466e-a272-2571e76e838b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac79459-a962-4d5f-8b2a-e4d3ae9d0f3d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f52a1ce-18a3-4dda-b3a7-66af0b5f164a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646af3b2-1f48-42e8-befc-f6500c341232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c73415b-49fa-4ea6-a500-d98b39bf36d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8857a5e-0cff-49a2-bf84-4e1b030dcc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fccc7e-11ee-44ee-94e1-95772af7e81a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adad2264-0db7-4e9a-a23a-6ed2fb901b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b873e2d-4f7c-4d73-8302-c1a999dcd907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bc4d1e-b804-47ea-923c-83f810866450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7154e66b-4d53-4bd5-8b67-0e58c9dba320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c3e6b7-69c5-48e5-9df4-ef7d32f59618",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6bc299-ed99-475b-85f3-66dcea9301b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480ff0d4-8e45-4ae8-a4f0-aa5c7819ddcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17179896-3492-4870-84db-75e6edb03ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd2dd11-52bc-4746-a9df-d727d839da9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e86255-0934-4c4b-901a-a3998304724d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da3f7bb-92c4-468b-91cc-7b0d89b3e4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde3bdad-912e-4ac9-8cc3-132111f19331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be42188b-ab6c-44d8-b04c-5be2b7665a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb64eda4-b223-49d6-a7b1-072c6fb75923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e87a0fe-db74-4ae0-b1f8-e34b780db599",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5785ad-f7b5-4522-82a0-70192cf316a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043faa85-41ec-4d36-849c-7ab1aa92c61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89932f90-ca2b-4594-9cd1-81f5ec61d69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99218bc2-77a4-418f-a84c-ad86be6666dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8100465c-acdc-4204-bb79-2449d5c8c909",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c654e714-394b-445a-ab80-874b8ccc209c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b751af-1e4d-4021-8006-e2eefde7348c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2c4eae-ac65-4c37-a015-807c8738eb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c31c2e2d-48ef-46e3-90a7-ac40bc6d1037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8343fd4-b7bd-4d55-9f30-dedd437f82e5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503df559-8159-47a4-921e-79ee6e945389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d52e86-9660-4aa1-9bb2-9c0e597f35a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4fc311-1549-4cf1-a79e-ecac4ce360c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a87bbd20-0593-430e-8e08-d71ef970060f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530daade-839e-4ee7-9f44-d0d9fae752b1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9f6722-4263-4c12-bcc5-3d12485daac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560df0fb-fade-4d08-99e8-3239bc56ba37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6937f056-f9f5-427a-8a4a-a75f387d2c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f258469-4f2e-49c2-b7d2-6113ab99cfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bbcce5-41f7-4908-8f6e-b3a0cc43bb84",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b3d070-2f9e-40ab-9dcb-24b155e9992c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0fed25-152a-4226-85aa-554f178d25c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda2992f-cce0-44ce-95ba-a310dbd9513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae093e08-b695-4e00-bfea-ddc2b0c05af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490df6a3-c9e6-4e40-a3e8-240b7dbcb463",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad3a188-f335-493d-ab87-2491eddeba69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467504b9-b7d0-4ac1-ab97-dc5f9d208003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b1b46e-0fbf-4e8c-be8d-3ffbc06accfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1a65018a-cb72-4142-9988-eb90455fd0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81309e16-6ed3-4a91-a613-b517c9f131cd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b46cc65-3b4d-44d2-ac12-d81a20dcd18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235787c6-b31e-4b29-9dfc-d9ca531745fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd42ca5-302e-46d6-9792-f6e7e98887b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79cc9cfc-c005-4489-b85d-65386c945573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4cbae2-b3e0-4cc8-8d2e-f65e52bf1eca",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f74750-adaf-492a-a7d8-f81521bae44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a487694-a014-48a3-8af6-86e5182b8986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c03b97-58d5-4465-bd73-74b8f510cbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "959d2acb-4bc2-47d1-bec3-6dfc4331b94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fa050f-ad87-4f7b-8cc3-4a00b26ee7a7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cd572d-62b1-4a49-9b28-45b4e87837fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45890465-7af2-4839-bb83-3f5db8d63a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72731363-11f4-4eb7-bb7a-321e6ad82a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "edd8687e-e1f6-4810-a30a-2d213e449974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4359d071-e497-4381-9112-2b5b13bd8e30",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf580bd3-01bf-47bf-8a9e-ca747467c8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948942eb-af4a-4709-a84a-3bbd11561fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dac539-6dbd-4a8a-812b-2a00c05abb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "033ae0c9-3569-4d32-b016-c1a5a46f6e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad57fe67-cf3c-4f06-aa31-091b44041ab5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80268e6-ba6b-4bb7-b8e5-c22a4cb468f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9daf4714-1369-41e0-ab18-30a73ade4091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea61ee03-0569-4074-a30f-9ddf6d462034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e446ba94-de70-47db-95b5-0ef2ead068d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8e2e9c-a4f9-4332-9e05-3adcd7ad2347",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c8a1d4-f58e-413a-aa8e-17c9ccae99d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d0be28-5b69-4805-ab50-00fb59f78f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d44b852-bdf2-4454-9705-9f38a9e0b3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "95395996-6935-4545-b388-bb3d0e9641b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93212dc2-f278-4638-9469-36568c8f2125",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1caaf653-188b-4a7d-9ae1-e0fe61c6f699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62179bf-53aa-4a46-8972-8a02b1993e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811da4ba-dd3c-4777-bef8-d36867ea5adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0421f66-7984-4808-a3a7-2c752de0206f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d29ae8-e42e-4fd3-bff9-f6bd888e24d1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b91840-49ea-4229-ba23-03778edd413d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f65eae-9a1b-4d91-9da3-941cc2cdf300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911e11f5-8f33-4c0a-a70c-db17d548d8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba6e840-f9e6-416c-a319-d295aa9ad48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7e3313-1079-46ed-a56b-29fa5e681d0e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762ac170-2b63-4aaa-a3cd-29f7ce767961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c85418-9bf8-4609-82ff-effe1a9b48f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3e85d4-b1e5-41f2-9479-2c240cb77383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fddfe513-8bd0-480c-b97c-e0abbbab6d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f82678d-5a78-4dc7-92b2-101912ef2c9e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f116ba74-0e70-4956-8d6f-f8c7f63f3af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6344f7d-5343-4de5-be96-546771f25e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba17eda-ebcf-4528-8346-ff903deeba1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52b21bc5-4bec-4b5c-a92f-ed57a45cd89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63795687-df1f-416b-aaf7-62b98d736490",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bb4d0a-5060-44f7-83c5-60672c343c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e3722d-f5b8-4370-b993-a48a53382047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab13d36-141c-49bf-8f85-73a6cb771a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba5c726b-978a-41de-8a20-af0ba72300fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205ceeaf-c9d3-40d1-8e1a-8739867d6d7b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0446a05-9dc0-4a0f-9a53-58cbf8e645ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e573323-45a3-4537-a0b4-dfd83a401908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e6e92f-9227-4361-a14a-9899e1859343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f28d6b50-a755-46c4-877a-8874bb8d9502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739f1df4-a5d1-47d7-b725-fa66f506249e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bd7ec8-670c-4327-babc-1a2553aabe20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2643d677-2c7e-4430-96bb-72d4f0d59411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91a462e-9207-4f6f-a6ba-76f885b8ecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0901f497-1356-4920-8697-ec4d4816357f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e118f101-0f6b-4dca-a240-ce2f42473fdf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29038845-82cd-4f7f-a955-441181d7a126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca39c301-efdb-4667-8568-f7620612cd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cd550c-b65c-4861-97a1-bf630309a586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a84307c7-0e8d-4cbe-8910-f3967fc8e982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50a010a-2603-475c-905d-4cadd5fbe654",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88305d7c-4e6e-4b2b-855c-a0f02d56ec7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2ecf25-545c-42b0-a220-5dff82719394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21edc371-54e6-47d6-8af8-575fdf30d253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14bc6075-381f-4b89-ada2-e78239e6f55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e676a3-2bb4-469e-836b-9853bd47ce91",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84397e1a-fb30-415e-b2e4-18b7fa54d708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23d0773-b2bb-40e1-a82c-3eb3adaf73dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e646d42-3ea7-4c30-ab09-fe7b968d5087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b58127-9719-4ea4-801f-7161bf5b16c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57c206b-fee9-4c01-8a08-863ba7cbe9d0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5601b4fc-15e6-43bf-bbe7-899ec069cb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea19440-3884-431d-8e99-fcc9ec73f48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35041152-83ad-474b-9e02-8a724a4d2b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb18036-961f-427f-8778-4cee95ba7890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce8961e-bf23-4e1e-91ea-d5ca64488046",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c272fff1-6857-4836-bfd2-005a5fff5b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df09dfd6-1f6b-42d7-84a2-647907a13c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2ec106-bb4f-4731-97fc-e9fe6a69463c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e728bef-d56c-41a0-9ecf-760be711cf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930bcdbb-e21e-4604-8e93-b7e054bbf5da",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c70949a-b125-431c-9baf-5736a954ffc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cba3dba-640f-48e4-9fb6-2335187235b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763a60ee-9433-4215-a58a-35fcd7c4c354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05d35135-4f5a-455c-a71b-3e2f22770157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf57d5f-6587-4a7d-aaac-f3731156b860",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb2c3b0-befa-4bc4-9c1a-1853946d49f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efcfff9-1fc9-4e44-afae-6ebdddec13ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a093e0-5934-4d82-81f6-aa5ccb36614d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6499b42a-72ab-476d-b806-692920b469e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318e6c3d-11a4-400f-86f5-36a5d299ce82",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fceb5d6e-4209-4bcd-a389-aaabb947497d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6c7a31-e126-45b9-bef4-14cf283aeaa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b301ba-4034-4dcc-bafa-be9a0320f699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd517243-26ff-49c5-93ef-f00d77a43829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b73a34f-04e6-4f86-97b3-9b2d3d02ed88",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6549869a-3f81-4896-b96c-3cf141b4b8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2380e563-ab35-4b28-8fce-b12e0c589baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596ed6a1-78d3-40cd-824f-17dce680b0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d91d88-e312-4cf7-a453-4b9aeb523a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185390b4-a6d8-41c7-8251-0019091a0e85",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7675f4-c03c-4d6f-aeed-2c03877cc5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030b791e-5bb9-4f06-bc6c-b976b96b0351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce9ae2d-de17-40db-ac7e-0a6014d1b13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b128fad4-a3ab-461e-a189-3dcec53b431f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871cf4f0-2bc4-41d6-ae39-2994f10611c6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0615ca-3c6d-469d-83e7-2102db6b550f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f850ac26-df49-4703-9674-d8af22d281c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d93873-8910-4ae0-b958-557cc072a9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e9ea82-a6f3-4725-ab1c-d90df5858e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9716a47-f773-4e7f-a79e-7529ff9578bf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cfa276-9e8a-4049-a434-1b96ec9a5b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8478f0-2a99-4def-9a64-764eda95e992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3de1805-448a-437d-a313-bb7bc59c5576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2ad308-f8b6-4d89-975d-ecd777b40383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551dec49-40fd-4b12-8109-54404dc95e67",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30656c5-6211-4ae9-aa90-92f8b1eb4a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec937a4-c87c-4533-a3cc-62e7223b56c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f800ef8-7d4a-4f88-9686-4437fd8647fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "388aab62-3cd5-4647-8d08-79842261397a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a87ab96-39ce-492f-8dab-0779f49892f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7eef4d72-a1ed-449c-9562-2ef0d92ff407",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87f261f-679b-4f59-8299-1b0730f899dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c6b083-da7c-4c47-870e-3727097d9252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c592ea01-483d-4617-a309-f38f10e96d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7076ea82-d7d8-4ea8-b897-33b2520cca0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31344f5f-2beb-4b8b-a9f3-12838c666194",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80f78160-b558-4dcb-98a1-b82475a50f74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b36bf05-6af5-41e4-8a39-8edb0145f820",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dccb4dfa-0e1e-499e-b251-53c2b66ee89f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cd73005-ed76-4b82-a8b9-f050e04e2371",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c7875241-6bf9-4711-b8f3-786da76ad55d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ced5ea48-275d-47c8-8913-bdf5e78d32d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21b2e5aa-7c85-420b-b558-cbdea6c63bc1"
            }
          }
        ]
      },
      {
        "id": "3ff8e70c-29e2-4959-a677-544b72b045a4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3eaab7c0-3cc7-4d34-a4d6-0db58d2b2816",
            "name": "Negative Testing",
            "item": [
              {
                "id": "419238f2-d0aa-4c3b-b0f5-d0891805e311",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dd07156a-7c0a-4b71-9355-5918fb89a590",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251341da-a11a-40f0-b1f4-110a2ca18992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fff3e4a-cce3-4d98-a271-8247e10c272c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997b8c3d-40d4-4681-8c2c-c295a0cbf629",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd7efbe-519b-4523-b86f-171eedf0fa0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe652594-12d5-49e0-a436-d308a6e85a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8575e33-e962-479a-8e8b-7abb1a6be2d0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7139abf-13ce-4106-956a-f7e28dd66be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c138adf-1615-41ea-809a-2d6cf0dfa10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387dbc4f-ef21-4012-8ed0-fa28b1f56575",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929238f6-987d-4eb7-bd99-be23783863b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9f8a5d-8191-44d9-b32a-154b1367a14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3097e09e-3f9c-429b-b640-18fd94a19d2a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f057c762-5ec0-48e3-8c37-fa00e72d33e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142222ab-aa9f-41dd-a8c8-dc40226227b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6742c5b-c1f7-45e4-95cf-b789d5f3da67",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d58e21f-29d8-4ffe-a43e-79f608ea8320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e38de02-4249-4bd1-bfc0-ea726130364a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62eb2e73-e263-41c2-88d9-ea35d4ce57e5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d72439-e866-4a0b-92d1-deb4d3ac28d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc033910-5e15-4c27-a33f-83471e16c8f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93022675-cdd1-47cb-8fe2-19966c2b7350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf3abb6f-a67b-4b7a-b86a-6aae289c077f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f395e721-debf-45d7-878c-30cf96734c65",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6367cb76-44fd-4d21-8d16-d9b6f82a038f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79f5a72-1385-451e-b061-f68fd6bf513c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca5c57e-6e5e-4df3-b1f9-eca7b0ab2ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85d71f4-2f6c-4b2c-92dd-81cee841a3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c44e1b0-6193-4ab9-b665-f8eb51e6b733",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3adf7b1-eeb0-4f6c-891f-7be68c12d634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19bbcb63-76f7-4196-be75-6a09ea5d288d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb68d71f-c057-402b-8fb5-ee2e3b2e5a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfde8c6d-ded9-4536-8b44-1c709a3c43e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7082a0d8-10f4-4cd7-9f22-ddc273ee8de3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201f096d-2029-4af4-8e03-9809e49595b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fa31fb3-baef-4a1b-a365-662ebb44373c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606c99d1-0d51-42c4-a797-b5972fa63f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b70ab7c-a9e1-45e9-b2fa-2777980ecd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b57d6ea-b6e4-4e55-9ac3-cd9b2b5a4033",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d90af2e-1e86-4152-be43-771b49b361e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efef0ff7-d62a-4f5b-9190-0f91474d2a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f34aa3-0759-4c73-a294-d584fa51afed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290e6c72-923c-45c4-93f1-a2ad03f83b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904cc20e-d316-462f-9463-a9f38b165731",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35e8dcf-4eba-401a-ae5b-89b7f51f6427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8d3615-4fb7-4da0-891a-9572f8a0e8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0102247-d1d4-42c7-ba12-c0298902051e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff1358d-88ee-46bc-a8ee-610e9bbd47fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94a38a4-9166-4125-8a00-5fcdf89ea300",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd06ec85-54c0-4ca0-b50c-00c07bb9ac0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb09a08a-c58a-4d95-81bd-77191c30b270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef1d722-d1ff-4293-9f90-4fa27c7b4fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64bec8b-7be1-48d4-9506-eb1f360b4bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5c8958-9f26-4e1b-ac60-2a2a57c4e771",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc3d42f-3eb6-4721-be76-9f8cb76e8cf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e40c69fc-5cfe-49b4-a24a-757fbac141ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "927f7e24-2bdf-4ffc-8f60-cf21068bcd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0024c4a8-55a5-4adf-96fe-803743284c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9ac89c-01d8-4979-9be8-0e9b47100493",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4ff2b5-21fd-40c2-bafa-49ca709d40d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d30400d-cf54-4f22-ac94-cc8cb91f5a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408730d7-2758-4e14-8148-3a5f8ff739b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cab327-17b5-44ac-9425-e9d7d8e0aad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a153bbb2-1b62-4135-8687-43934b32f402",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8666b8f6-0d5e-48c8-962d-2311cd9cb8dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e94b2e97-175e-4fc2-b0ad-4cb4290a8c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3553e6-7c77-411f-b65c-037e55ad9d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02d1027-27e7-4286-8e3e-363913478622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7704de0-d750-4aa8-8f22-61cfff41a982",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88fb6f8-e4df-46c7-99c8-68dce4ce98d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c59015-848f-47e6-a899-74c0cfc882db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf889e5-8e53-4e23-8694-0d48456dbb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bde089-79de-491e-b711-aeaf7833222e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fe5e68-c6ca-4460-b467-41bea51e126c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7405030f-e38a-4b50-827c-4b803b71c272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196cd8cb-fe95-4529-a6e8-c9a04241701a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9645b92-d374-444f-aad7-867fb43b19b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef22bde8-068b-4a58-8075-00174205eca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33da662-40c5-43ee-829b-91639368d80f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cd92ca-a254-486f-b493-776e4e98b1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a72b234-5459-4ff5-9eb3-d0bfc2deb515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2169d9db-f2a2-4519-96ab-29f573a0d9a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d8cee4-a218-4cc5-9b10-41b5266c2c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592a7e67-d564-4287-9f22-f493495839e4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6258e0ed-b74d-426b-8245-00c0a43794b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a02983-8ba6-4428-9877-78710ca1c720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007df208-4ca4-4290-8ab9-0c03d2e9fc82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55723a29-57f1-4cb0-8323-94e0112f3b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2261fa4-f0b1-4589-ab71-8f61f40ede09",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0cf3fc-5a0b-4e08-bdcf-35c00775c158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b8b34a-f623-439c-b1d6-71cb3a348a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b48e09-01c0-4753-b410-a6e3a7942adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e894fa-19c4-4c39-aa90-1863df14581d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d38f2d-7b0e-455f-ba48-e6e7d1004657",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fb3e91-994b-4315-a968-ecc0f9f95501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf857527-b46c-4baf-9448-74fceb7c7d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7be9386-8acb-469e-a296-46e248139d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d480a5-1c6f-44cc-bb31-1581602e183c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbd8a8a-bd49-466d-9e85-eef8f919e085",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a894e1-c614-4dbd-a682-3ccbddf2741f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b8d290-42e6-4057-bda5-1d3cca5df359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fa4e5a-f5e3-4147-bd48-b3083327deee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83eb834-6014-49d9-a701-d9b39b01ade1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5de4b82-949b-45eb-ade7-4ff135987525",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6f0e3f-6b39-4862-808a-52f7417d1900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d61b4b-277a-4c5e-bb6d-e84cc614caf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b83d26-24c5-4682-85af-94df3dbdda2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9966e81b-fb1e-4126-9c93-1aff2447f613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb53fc3-c461-4bef-881f-d676911ca5d6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f876b4-3fe7-45df-a5a1-8a3493a11cc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5010904b-b8d4-4b58-bc92-6cbee7989b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c396d9f5-4284-404a-8e67-e0853e05a80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c757a64e-4915-4a73-b8c8-565b4454185d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b79e8c-b65a-4ca9-a7a8-049f22d795bb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9761f972-cbb6-49e5-b92b-e9dde2ebca61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba0e83b-d5e8-45d8-b6fe-566950f0d03f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a314583-b637-43ed-b078-97fe39c1a5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a97e55-a6ca-40e3-9d5d-ab9a5516df12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870854c5-eb5c-4052-8cd4-f7f5066856c8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f446b39-2137-47f5-a9fd-66c5d86d655b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e32c85-3625-4c09-a4dc-ef1deae05956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1611d7e4-e07c-480e-a816-3ad65d4b61e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3309d7d-cc6b-4931-b572-b5f53ead9aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b90c17c-3b43-4716-af49-91a171e13c62",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79b3f73-0bcd-48b1-b4eb-4992a93712fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fd2ec2-b008-4e77-bd93-e43d7c0330f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c387c2f6-c38c-4886-a5b8-71c0d7974aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0f511e-f464-4502-ae8d-227b7c19e164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dc3720-f126-43c3-95bc-27743ca319c0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897472bb-99c3-4610-bbef-aea550600c55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb4a3ce-1f2c-4816-b5f6-7a1dfb7e014b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e01c375-33e1-4723-bf45-28df5851e533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446f838e-4e16-44e2-80b4-0a5f04f2563b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e09bff-e7ab-48ee-9115-dc123532171a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30efdff6-024a-4edb-b8f0-9561a49e167b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f1348a5-c7bd-475c-a265-75a516baa4ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a631154-6db1-431d-ae85-8adee461aa73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680b3900-66ba-4cff-b7b2-a3e3118cb6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588caa3c-3f14-47b9-a681-dc3f5c2d84b4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ded5471-22f1-41fb-85a5-3d6c3324e94a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faea3eef-eb44-4083-99e6-2d5fe312f7f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326bb42c-a78e-4cd3-ab84-27cc01435f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c965481b-c378-483c-b5a2-a819341ee98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dd8af1-9a44-4b0d-8c78-bec3b5630c86",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e3b804-55f6-49f9-bbf3-319c9e75ed17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3fb31c1-9cb6-4958-99d5-b9878e4e88a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078b2b84-a5d5-48fd-84df-fff72449c460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35a7190-d7b1-45ac-aeeb-6a4cc7bba110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8804a945-a3e1-4c6e-a0e5-f2b94acc00e0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de27fd1-6400-4656-a878-b915e3276d4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46f0da3-6aaf-457a-9890-355bd6744c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0655ff5-cdde-4460-ac6f-0f954076d52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909aeee9-a15a-4ad9-b085-9a66d59c6128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee96173-e4ba-4fdd-9542-f3d0ecbea0d4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4dd57f-0227-40ba-af7e-beccfa8c5361",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "553f46f2-7c2f-4173-8fec-9bec19a87446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18f593c-5129-4302-92b8-ca299891c4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a270f45a-557f-432d-b2f2-9531ad5cc653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385cc7e8-b3f4-4d88-83c8-806cb200f9a1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b101d92-6128-4c1a-b060-8df35fb76319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a8b023-d247-4649-b168-5bd9869a1b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "313a4a83-0b79-4d48-acd0-309e3b7c5e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f405002-a473-4e8f-8c82-36c21ae0a9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032b4b09-f581-4e2e-ae46-721e96f5b456",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ca96a9-4532-4ee5-b482-cefc617a54fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41788d74-c805-4d73-af80-4a28ceb48466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0560ac-0705-4a9c-9f91-71ddb5818f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb7697c-ee53-4ae8-a73c-ce32167f38b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa7b125-befb-49a1-9a1a-e4e94085825a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc314cd-eae0-45a2-8965-a8a443aa9f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a21c7c-afb3-4ad3-a3b3-0f6a62b3e04d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc11d59-49e4-45dc-aa4c-c46d48314fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff00af15-b4fd-44ad-b7c1-b8409f2ceb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc6815b-9754-46fb-afb9-6903250ff4da",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be02d381-637d-4c28-8211-d95f0a2d45fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9476cce-5e5d-445e-8c8f-35f8795f05ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af78f64-3f2e-486f-8598-a4b77cb11295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99841047-0561-41ad-b4eb-b19367859ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa99aad-5312-4e61-8bce-e57ba2d22d45",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0403cb6c-b2d4-4a0c-8bb2-2c597ed8b816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533b5ff4-4d78-4c50-82e9-351458dbe78d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ed111d-fcfc-44a1-bb86-9547179da22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec2c1f3-1a4e-4727-8c52-6ff4b1587eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9969d4db-009e-42dc-a130-f00b7ce8ec2a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33693f4a-764b-4275-9c9f-ea78a5c0f316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7815bb3-887b-43ad-a128-0f1ea7ee13f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96951dd-abb7-4c97-9a02-9588bc1e9cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce4593e-46f9-4416-aaa1-1c0e38688e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89aac613-95b9-4870-8148-0841644070bf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0dbb07-f5a5-4979-b4e7-47ceb1410b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d905f56-1cb5-4974-bf3a-8f707ef0c491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a457c8aa-843a-477e-aa31-91007ac80c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c303c425-983d-43fe-ae2b-430bfd51039c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39544f63-ed5e-4114-b655-4ff366a1fbb2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bd9a36-1e7e-4dea-aa56-2d92491cca2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6dd803-1339-4d35-a2d9-2831759e41e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e5b726-895f-4a55-af84-e91e74813a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d1fa15-bbca-4473-9590-c592e3a4a467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87cf0cf-49a8-4355-9948-06f104141201",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd241633-21e7-4b8b-b609-7ee556f1c209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d1519a-34f7-48c0-aa22-c21adee8add5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a33faf6-e09b-4e06-aecc-41e21e111820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596b18ab-0907-48f7-8f48-5230b527f6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98240943-5e90-49f8-8f89-aa2697176d55",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4aab11-543f-4684-b4f2-a39afe0ceebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e1ac1e-fce3-4e69-b599-265898254fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9d02be-37ad-40e3-92b3-58b8956ac47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e97212d-50dc-4eca-a539-9bfb07f81b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4d826e-72a1-4605-b85d-725a2004e8ad",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fdf5b5-1038-4ab3-8727-c1ea707f70dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ceaa7f2-b30e-4d45-9b02-97d6bdb9e041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9d2ca5-e8d5-4a2b-aee6-77aa64425742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad66425-76d1-4d26-9b2c-8a998c47a8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de26bd2c-4b1a-4ec9-a281-b143a4bc316e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e636d8c4-ad22-48b4-811a-a43b6b378102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f91373-6f5b-42e9-bad3-af217d903632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdefd379-63e6-4ec1-9e62-d054fdd1d8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f5e2e7-6ada-47fd-a2cd-4f88cabf5d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67b138f-45fa-4ad2-bb15-08e6cc49644e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4ef4fb-27ec-4e04-b9ec-e563153525b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12571442-0b67-488d-ae5a-5221166cb9a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01088422-6695-443e-abca-1712f6d3a144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb68f8f-08b5-4646-8a7c-87bc7dea79b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779a23d1-0f9e-4fea-9ce4-8076faa33d72",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74646ce5-8cde-49d5-a0b3-6d1d8eb34617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572af211-7c82-4b7c-8741-86a9c8a56917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2277a429-c537-4c5f-b95d-45887d55b20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70dc0b5-d8cc-4211-b20e-9b29189a287e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5e05d1-1639-424a-8823-8e1a959ece79",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de04796-f0e1-4f73-8bc9-7fad9634bf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e5725f-78f9-4b86-b42f-39b848c91e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63864554-e1f3-44b3-9832-ac3299f4e3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4961facd-8f95-4af8-81a0-68355f865187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028829e9-6d62-416b-bfd2-3c9c733f9128",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3794c17-685a-4cb3-8e93-b48bc727e1e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5504efff-c981-42a9-9925-48b4bcc879ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a532a684-0325-4237-b788-11e507176086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9854d1e7-8802-4c37-9c43-e47f1b04d042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf91997c-51f4-4ab4-8007-502fdf35e421",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429448f1-5334-4386-8f04-f7f33a8fb005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c0978e-e81a-4c70-8b9a-3698ba0e9592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51323ade-0f73-4f2e-bbd2-3379d8b09fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3dc97e-cf84-41d1-9772-a9d931c8ef26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec362b72-4040-44fd-b73f-6e4590677d1e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1f93a7-9c76-451c-bdf1-fbbe704068d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48a939b-0d86-4a82-ad90-1ed56983f58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f523961e-14ef-40b6-b95c-1a603c1021d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb204f4-8794-4070-bece-7ea053f28e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6c593f-0ed4-4a9a-8062-520a38627d81",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374cdc9f-99ea-47a2-be74-a8068d90932c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b3ce6a-819a-4f6f-88cf-4b9544a58ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a9af4a-4f05-4b94-aefd-7c0d52bf5fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a72ef1-5ff9-4d15-8c4e-f52d76cee98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd89675-def9-4f4f-a4bf-73ee88b61308",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad868d5a-64ad-4510-b90b-1741ff389f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2648f82d-e308-4694-a95e-c8fba30d84fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f25699-cf32-4097-9464-0276071e3a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc6601b-895a-4315-99b3-5938c9e738ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f0a51e-577e-49be-842c-97ecdf49aa9a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d68b612-2e3a-432a-8a55-830866846cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b53a88-83cd-444e-9871-2dc4e3f2bb87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd9ab61-0aec-44e3-8089-87bcd64f232a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea54d5f-ea1f-4ff2-868b-51ffb26f3bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7c84fd-9615-438e-9c9c-863aa94aabeb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcedbec9-49db-4762-b3bc-35f228a15ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6122fd85-d798-48b5-86cf-5ac722dbdd0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4defe737-dc71-41c9-9a37-cbf67b75a68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b22ba9b-2def-41b2-8267-9d8bc9a6a681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1ba84c-5d9b-4f14-ae1e-fe7ce33b2fa6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaadf1d8-8e63-4040-ba38-0f1488374557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89ecf91-4b18-445c-b329-faebad491bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee00a39-65bf-4f26-977a-5f8f1b984697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1f5fff-c201-4492-85c7-f6f8f6f407a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c80439-37fa-4a18-b699-ed2f94d96aaf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a73a3d-101a-4655-abce-6d3233245f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdefb295-7dbe-4174-a034-3a34e835c9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cde4ad-8c29-4fb0-9b90-b0a7e3ab8c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0312c096-f04b-48e8-bb3f-618203a1f06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decaabb4-f4d0-4d84-9cc1-15cbded25c8b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92702ac1-cac6-405c-8407-3f138ee8b3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5b58ff-f100-4bf3-8eb7-fd1367e8fe06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fed462-3a23-4328-84dd-bbf758ba3c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b54b6f-0711-4e8b-9a26-37bfda4f89bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43bbb35-c4cd-4d15-81cd-62ff82b24fae",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b98e7a-2ff2-45ed-8c28-646506a3833b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8305a329-2526-4d21-ade3-46dd5d3ad2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433dbbc2-e22c-4b32-88d7-2589e9f95581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d55bbd-59e7-47d4-a882-84b2b63eec42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b05ee7-af9b-4f76-a978-ba2546270a2b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4368493-23b1-459e-9951-27c0765e8983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0028c0f-246b-4af3-b272-31247da44048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70356055-3bb3-4cda-a652-f2166783d228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678f7e32-1713-46f9-ac81-74b7d2d4b06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d30b6ff-a30e-498f-bfdf-6da7d8df04af",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b26594-8c20-4712-8b14-857e575ea771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b95c99-a24b-459c-ae5f-2717b56adf29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99870546-7084-4aea-b271-6f056a0817a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e5e976-cc8f-45a8-9b5b-cdec7c78b00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdec447-4715-46ae-abd6-eb3f64a3c3b3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baa7a86-8acc-4b70-af74-4c0dc1fae333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6757b74d-9a31-437b-a20a-f5b67ba0ec07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deef6e55-374b-4e0b-9040-40c3e15620a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec17617-98a7-4efd-90c0-e69453cbaea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9b8e16-9903-4ea3-9946-e8c94e4aeca3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df920bf-3516-41bb-be93-0f66ca476517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dda7bd6-4fb5-4b01-961b-0ce9b39bd3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e832c1f-b9c9-4c90-a196-92a7aa16e4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e915ab6f-8e53-41bf-9eb3-4747ce8034e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85a9e96-7050-40d9-883e-59f3b1da6c79",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc84614-8934-472c-a4ae-f561943c8cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "656ee79b-0dc9-4450-a45a-ec43765b02ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc15720-5e72-4215-a46f-68bb72105482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81555899-c672-421b-94e5-5a90582afcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53440f1b-235e-4dd2-a71d-b5863597dabe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194020dd-cf27-4676-8c27-7cb1b886fe46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cd86853-c548-4875-a8c7-059952e16e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1334e256-a1ab-4c5e-b884-51000a5a9d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8490da-2455-4fdb-a10a-02970daa1f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b022b17-f51d-4f93-8db1-b6ed2958e557",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e9aff1-a42e-4900-ac13-35abf0b6e274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61775258-bc36-4f7d-b77f-daebef1774dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d331e80-f91e-4cfa-83bd-5dc8912aa3a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3200d86f-5e49-4e51-84fc-546c1884b4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdbe7c6-3791-4702-a32b-4336f06eef22",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24131e9d-549a-482e-849a-2ac515a76de1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4acfdfa-75dd-4e3e-82a0-d27b2b0bb5e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6fbfe7-3dfd-47da-bdee-f8f081cd3a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0bd363-ac88-4706-a98b-5e184523e2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32766f5-1cd8-4cc1-b74f-7ba5929d233e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bc0405-e334-4af5-a1e6-70cd5b5da845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1a5925-07b6-455a-ade2-6e0a03e2e211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98457d04-2d94-4679-91a3-86fbf84ace24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aac897b-8a03-45ea-bee4-64ce98c7e351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a293cb17-b5e8-4c4e-ae35-edc17ce7c707",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3598282c-b0e0-4010-acb7-c4402bb24c31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "757cbc6f-37f8-43cd-b209-b34d3ef619cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bd2f38-bc98-45e9-a952-3eeac40deaaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d313e7-45bf-43bd-aa93-0ff2ff4e2837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c2839e-5ed0-4290-adb8-219a059e31fa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01e191a-ca5f-444b-acde-bc9d247c93aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727d181d-a075-41ff-b798-e1b6cd72169c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077e40cc-b92a-4025-b104-0a059b9d8f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925887ab-34ee-45d0-a010-be7f47a79cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8225c257-c5b4-4b08-933e-239afc68b540",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf66603f-583a-4770-8c3c-427badb143a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62dc46ed-3fc8-47f1-93ed-1ed904243ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c90bd0-8b2f-4180-894c-a7e4b01de16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7b1f51-d56d-422d-b00a-2500801797bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd836275-9481-4590-8c4f-cf5a2c2f561e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21f023c-77f3-41fc-afa5-21c554a041ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8c9390c-da45-4260-86c3-d1d8e38d7eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591247ce-ff44-4211-a11d-65909e2e3f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32023b9e-4cf5-48ab-88c0-67e1617e051c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a54ba2-ced3-43e7-8775-2a36e5ee3182",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09da0ac0-5567-4e22-9161-6e878bd9f514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d2b1a3-2f30-47cb-9d5b-bbb55a36cf6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beae34d1-403f-42d0-aebb-971efa80cf4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbf794d-c41e-4b93-ac42-64f9dd89c0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8d182c-21e1-4a7d-821d-9631657d7151",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d89721b-4c99-4bdf-b9ee-8703d6c70c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0506513c-c56e-48ad-98bf-c65505bd1b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071abf1b-567c-48df-979f-48cdd128287a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5b41a6-e6ab-4b42-bb65-e86ec3a26093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ca0570-6e20-4906-83ac-747cc0f49814",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564ba155-8df8-46dc-96d2-0bcf2ad5b535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c73930-aa63-416e-b061-377a21bc68cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6393e6f8-5a86-4333-8b56-fd5484ba6712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46102b05-0e04-43e9-bffc-a96bc39a6ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc1a0a3-c542-4e2e-90eb-a196feddb3ef",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efec412-1963-48ca-9ad0-adfb2c000912",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "938ad080-6e81-4500-a3f8-1b51c98edba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a75471-eae5-4c5e-82ff-589b9f156be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f80300-2fcb-47d6-96d9-7b0d8acbf800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba394ca-158b-4c1c-95f4-de7412cda430",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828effed-5e2b-4688-9d8a-ca770cec2e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "071f17df-2e1a-4471-bcc7-cd4add0ec36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287fd254-8ba8-4822-8343-f479176087d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b5a565-2853-4ab8-9201-5be357931790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80be509-6ebb-47d8-8db4-aff399c3c69b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ba7d8c-6e12-4739-90df-75bec457cb82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca2d9c8-4a11-49fd-af4e-7cd5bd4afbc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d18e511-45e6-41eb-9a9c-5c2a456aaa72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9216672f-7bef-4128-8a68-3cac2c8ef4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe76cc6-5bf3-4567-a2f2-7d505d391921",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d584aed-7c5b-4bcf-895c-bf298c608581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc97b81b-2fb0-4634-afe8-8a8cf83bcbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6856dced-9706-4060-96ec-534052725ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2554a4-0609-443c-81b6-43027598a6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3145ff6-2e25-4503-a4d0-ca5d69e5aa3d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c235f49-23ad-4dd2-8882-0cd3a3201489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee8060f4-8579-4406-98ef-0801ded75058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418315ee-ee0f-4ff1-9286-b59cb333a3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c74565-5050-4a6c-a0c3-b40b83f35c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea0b3d7-0217-4daa-9fe4-49dd43c90cf5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6f7c19-03c8-47fe-9e08-6242dff11399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e01224d0-21f6-4307-9b91-99fb3a43bf44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16930c5-fddd-455b-93d6-e814cb25d9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ab2e4b-7e9f-485e-9f5c-c9a8c1b5dd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb808f1-9633-471a-971b-b21029ae65e7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e5f1c0-40fe-49a2-97c9-e166803e9180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e93a5c-6dd9-437e-bea3-bd5315faf019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b6871d-10ce-4200-9180-6486b3ce4dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bc9552-b685-4c1f-8295-12cec0b2858d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ed1324-dab7-4766-8fe2-3b167a958704",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0188370b-d498-43ad-adcc-16f98250d373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "056ddbd1-e3ff-4fd3-a9b8-591ed2dc2aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b47f13c-c37c-4c1b-973a-1c21eec4a171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98462e5-a24a-4c09-badb-91a17079e1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82060037-cac5-4ed3-bd26-526fe4660128",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7cd639-e89c-42af-a9a4-587ab5faf9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf3d9ebb-ab9d-41de-ba73-26de9197adb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1a532e-e280-49aa-bc75-cd97b37b3500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6a5a83-a475-45a1-95d8-1306588fc102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7145d6b2-a706-4ce7-ba32-051aa7429753",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892f13fe-5447-47f8-94ee-1659e403fc68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3783e1ac-77b7-48ee-8554-3afae692b91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849a1f35-4a2b-46d2-843c-40339a7b4bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ab03e0-5c0b-4a89-aa62-52446b26ebe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5118199-ce3c-4fa3-8774-778ac816ce9e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c27085-47d9-42cc-b136-b497a2786925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2737edf-fd0d-40da-8f2d-0b97b30b069b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379549db-0759-461f-b27e-894d1439b458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f0ce0b-74c8-4c8c-8d92-8235eac71b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7879fd2a-25ba-4789-87e4-8089d9f7818a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8867a6ca-3cb9-4ea4-99c2-516860e043f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "449663d8-8988-4ed7-bc3c-2ed7a5ae2248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bad8e5-ce3a-4984-8a6d-5956d89ab81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508cb105-1d62-42e7-9a48-f6883e3a0913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e40e24d-766a-4875-a722-e6d629ed5370",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b9ed4b-def8-4ae0-bd79-7b40eed40eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d69634ad-0cf6-4528-8d5b-ee87f7c231e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f871d70-daf1-49ab-b313-ae08fb3534de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d5a772-2ac9-4956-aaf2-a7434b79ba54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f28455-6c24-44a0-8ce6-d80485958b4d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6581d3-c133-4654-be5c-8ea2941db632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5fd94be-8fcf-4b1f-8eaf-e03bd24066f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2736eb3d-8886-4ca2-8959-da2fa09b0d98",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a47d81a-ca6e-4e3c-a7d9-f4c86b76fdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9485ad-bf50-4c5f-88ea-9a56ba308e76",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823751dd-b898-4903-bde2-6cbd12b582ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daf4a1fa-03ee-48d0-8c08-16c8929fcf98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7776a324-c901-4623-8f5e-e6a867f622cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7423846e-4a4a-4125-ba64-21a93046d3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f339b0-be71-44fc-abba-52c7c2e01f38",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba50a837-f1f2-4226-bac7-1bddd0ae25e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3024b44-a1ae-4a99-b9f1-22c0e2a3e54e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd39d7f-8850-4bed-be30-46bb7f5db95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4816900d-d1ee-4f72-811a-a9df5ad77cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813c982a-75ff-4b19-b97e-1a80fc4aea02",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11f1602-6a41-4aec-bc29-f8689f778737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673602c4-1e12-4a4f-bad7-0b734197d3a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc6765c-1d7b-4724-8a15-3b7baf25f5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6b4e8b-6e82-4a9a-abee-24a66ec01562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f3f6a0-dcf4-4521-8fb4-4e350a459a2d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038b2cc8-484c-4bda-bbbd-33a6b8fff89f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe891107-0c7c-4273-866a-8070048dc37d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399c3d2c-390b-42dd-bb56-b312a41119b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27dcc482-d440-4a73-b650-c6b7cb00dbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0e54f7-e787-499c-ab9a-6d577edd12b4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed0b4e7-93d0-4fdb-93fc-300a9e89d885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5adfacdd-b9f6-4699-ae1c-79fe3eade788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f963df3-5e53-4e53-963e-7b76cdbb437b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f27a90-74f4-463c-985a-00a16dd6235a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1961a6b-8b35-4921-ab85-a3c41d41835d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7457560-2f9a-47d2-8daf-ffa97e5c01f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef6b1d9a-3710-462d-a2ab-aa41947e3492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38bc82d-ff12-4b82-8a86-5ddb275d0d63",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149e574d-d725-4e39-91c3-9fb739d0894d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3094eea7-559a-4cf3-81fd-f141b5f1b25d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45299311-f03e-4126-bac5-8f6d77cd04ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b76bfba6-a068-4386-82ad-5a4f289d657a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1ebc0e-4ab3-4b33-aab3-abab13fb8392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb07e95-bce0-4c10-9076-69e64672cf98"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ef965ee-9aec-4d3e-bc4c-0dde54f60c96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85ad9428-f337-466d-b863-9c76ba278b34"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7b69e62-db09-4e34-9367-ac1877145f1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b836c9c7-f462-4627-947e-b87037568abb"
                    }
                  }
                ]
              },
              {
                "id": "511cb718-213b-465b-9471-a390f3b8422d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a08edaa-9568-424c-818e-fb1efbfccc8d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59769c71-54b2-4bfe-89f5-0bc245322067",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7cc0d982-a65e-4eab-96a9-eb752e6effd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "003d6ee2-5d49-41a9-a04c-a5a4a4bece70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd0abfdd-2b50-417c-91bb-e429c95ec3f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "526c3d27-9334-4312-9378-690490b01a6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d9c9022-e264-4793-b374-816f9afc77a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce897305-9838-4286-b2bd-1a61ff695dc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1c40906-3e6d-4b37-ac16-2ee4a60c8b2d"
                    }
                  }
                ]
              },
              {
                "id": "a4e60ed7-3139-4309-8641-4838fb43c6cb",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "feb26399-adca-49bb-a1d2-1cd7c54d87dd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a1c898-ee39-45d5-9ed4-ca424f3a66fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e8237667-dd89-40c3-9f79-3a9846915a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14578474-5d88-4521-a304-18a949de54bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe1bbe6-e023-4f80-8ee4-61c2c24f57ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "07759266-e615-48e2-8e8d-065efb163192",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2218c793-3df4-4989-89f8-d85a5fd6a289",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fb386de-02f5-48ab-9a2d-1faf02f4583a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a122ed27-9cc2-48ca-991b-7ac44125e8d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98a92f8a-a3c5-4682-81fc-5bd88921795d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce44d3c1-4e24-41dc-9c83-8359434178b6"
                    }
                  }
                ]
              },
              {
                "id": "90e7ddcb-18b9-4b10-8605-e91c95ae78f9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b258874-f043-4cc0-bb99-7ada8204a498",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ad1ad97b-a741-4f4b-9ba8-1e42cbf97d38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a2de222-aeb0-4302-b8aa-51b85982265d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab362351-600a-4a78-aa32-2be7a911e7f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81ba9b1b-3292-4d6c-b23c-5dc9dc759109",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "89bd7e89-7989-4d32-a5fb-05bef85e02e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "464abbbf-f8b3-4de0-9281-3481ee3af794",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cffde07-ae7a-4b8f-968f-82100249f858"
            }
          }
        ]
      },
      {
        "id": "caefea99-9d01-4376-9ad5-33957d631f84",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2bff9728-bf65-41d3-a58d-c7d6062e9e34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37e906ca-0b82-40a1-a59b-07a0a9a99367",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f745266-8eb5-4424-841b-205e659ba819",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d5e42f-0d0a-4e81-b3d9-dc048d076c51",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8af61140-472e-4bab-a2b0-317bdf646c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b881fc-78b7-4bc5-9aa8-048776f000b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dee54937-346e-4263-a8b3-ca56529536cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abd2add8-a784-4cb6-b374-8e95c8c72c9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5daaf975-fe11-4209-ab75-1675c6077d76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d091b28a-c1a7-40f4-8dfc-cada9ff3af80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da73bd29-40cc-46a9-b6fb-7d0c3d45a66b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20e02afe-ab7f-4a66-b415-dfefd1aa85c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dcddc888-3b51-49b4-a511-e93bc3a2edb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aaf6e00e-f8e4-4eb9-9ce0-cfff9ace6dd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d421cbff-df27-4013-923e-e77259747624"
            }
          }
        ]
      },
      {
        "id": "22d1bb60-7c04-42de-8ad2-74255c02292a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0e683c86-6965-4455-8b92-5348d066b0bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1c53b96-42ff-480f-b2fb-f249b1649aa1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "042e7687-3f03-4580-b332-1e02ab230a0d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df930735-96f5-425f-9e6f-decf6b31dec2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c0465fe-8a80-46b9-bf05-8ce26b017649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6b9b88-719d-41b4-a862-57a4b90b65b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "972bd2a4-3ddc-4624-9585-15fa47bc8454"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a5387e0-ab6a-40e7-af47-681f1b625b92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "036d6324-fc39-412a-9bd7-6e7bea076639"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29a2330e-a23b-4b34-a362-5029a89f059e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06b61e04-bf36-4d90-bca6-7a17434965df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9be327cb-aab2-4cee-8645-5686cd8028bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0441108c-3633-4040-98fe-322cbffce682"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa2c47d4-0386-4de6-9877-c2195f978fa3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9855642d-a73f-4b0f-938e-9ad76a77b15c"
            }
          }
        ]
      },
      {
        "id": "f3517db6-4ae1-4c9f-9465-27d07b906647",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5192bb51-b2a7-411c-b73a-3c9669b0712d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95eb7555-c64e-4d4e-90c9-8310558d8d64",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebaf8b18-db22-46b1-b2bd-882fb1e11d8a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f2bca8-a87b-4d37-9b8c-147511a9112b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eb26f51-d55f-4394-b33e-d57a7e7cf84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3eadbcd-731a-44b8-be72-3c7c28b04d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d431621-df6f-4025-ae2d-71793b3a4e43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d77ce9b-5e40-49bf-a185-a6f18d8d8595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50366a43-cafa-43d8-a13b-cd893cf39c41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3d05b44-9551-4728-841b-69dd64b22354",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b4d2b85-0cfc-4af8-b4c2-aaccf15fbe57"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fb0c0dd-5192-45d9-8132-1d1ba41797a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d65e3a4-e9c4-41df-8e15-b12bd5a45f1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb32bfe0-b7d6-4ae6-bf28-e23d3f4435eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cca2d953-5dbe-463d-b7f2-f89b0667f443"
            }
          }
        ]
      },
      {
        "id": "eb24aa14-ca4f-4edf-b216-a150ff4c8762",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c12e5e3-4e74-4dfe-884a-23bbf6e3349f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3477518-b5fa-44ad-a040-fae7096ee2b7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "08fc3f6b-8282-4745-9ca1-d2b2f8cfadbb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45b94a00-a7ec-41e3-a80a-96cbeb393883",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e750372e-658b-423f-89d4-b89bd173bf0b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.24645390070919,
      "responseMin": 6,
      "responseMax": 874,
      "responseSd": 50.15088480067354,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707438792927,
      "completed": 1707438837943
    },
    "executions": [
      {
        "id": "fed4266b-b087-4621-8f64-ad0bda9890c3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8ca05f39-0145-44b3-a7c3-74cc5dd80c8c",
          "httpRequestId": "4be69364-2fc6-4821-a426-fe6a9af5c4e7"
        },
        "item": {
          "id": "fed4266b-b087-4621-8f64-ad0bda9890c3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dbee9bcb-956b-4dc7-a438-68e12de6b968",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "25b5c4e1-f0b1-4e5e-b446-10358204d72a",
        "cursor": {
          "ref": "22f86413-8933-43d6-a02f-d6d74424cb6a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "66cb4caf-bf9e-4f59-b186-5227adb04b26"
        },
        "item": {
          "id": "25b5c4e1-f0b1-4e5e-b446-10358204d72a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8b9512c3-65a2-4a80-8ba6-3cdcb503c073",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "c2fb45d0-c641-495f-af52-e1cabc0f858d",
        "cursor": {
          "ref": "1b82f54a-8e79-4168-9108-9aee7ad8163a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "513e1f10-fd4c-4d25-b430-4c1ee54a7b81"
        },
        "item": {
          "id": "c2fb45d0-c641-495f-af52-e1cabc0f858d",
          "name": "did_json"
        },
        "response": {
          "id": "18e12afd-e7dd-45f4-b6de-fe71257ff9a2",
          "status": "OK",
          "code": 200,
          "responseTime": 559,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e758726-8bfc-49c8-9403-f7bc06898b7d",
        "cursor": {
          "ref": "c5690a22-6184-43d8-9f0d-0201cbef6a49",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "181b2294-e470-41ac-b0e5-74ce977b8ecc"
        },
        "item": {
          "id": "8e758726-8bfc-49c8-9403-f7bc06898b7d",
          "name": "did:invalid"
        },
        "response": {
          "id": "753846e3-1f8f-42c9-85c1-341e302f79f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e758726-8bfc-49c8-9403-f7bc06898b7d",
        "cursor": {
          "ref": "c5690a22-6184-43d8-9f0d-0201cbef6a49",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "181b2294-e470-41ac-b0e5-74ce977b8ecc"
        },
        "item": {
          "id": "8e758726-8bfc-49c8-9403-f7bc06898b7d",
          "name": "did:invalid"
        },
        "response": {
          "id": "753846e3-1f8f-42c9-85c1-341e302f79f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02d3d9b-b808-4033-825d-7d7fde1b984f",
        "cursor": {
          "ref": "1b95202b-b99f-475f-92db-d02952ba7c0a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e05b2361-ea27-4896-8783-9d7c1fa1291c"
        },
        "item": {
          "id": "a02d3d9b-b808-4033-825d-7d7fde1b984f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0f966b70-48c3-46b7-a0a6-514524585a4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02d3d9b-b808-4033-825d-7d7fde1b984f",
        "cursor": {
          "ref": "1b95202b-b99f-475f-92db-d02952ba7c0a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e05b2361-ea27-4896-8783-9d7c1fa1291c"
        },
        "item": {
          "id": "a02d3d9b-b808-4033-825d-7d7fde1b984f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0f966b70-48c3-46b7-a0a6-514524585a4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6714bf-d119-40df-acc0-2d870946e6cb",
        "cursor": {
          "ref": "038e6db9-1891-43b7-b658-6a915fa09341",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0eb4a128-ce04-4c01-b1fe-db8007109804"
        },
        "item": {
          "id": "9e6714bf-d119-40df-acc0-2d870946e6cb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ab805638-c98c-4e56-9c82-e9ef945d4d8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6714bf-d119-40df-acc0-2d870946e6cb",
        "cursor": {
          "ref": "038e6db9-1891-43b7-b658-6a915fa09341",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0eb4a128-ce04-4c01-b1fe-db8007109804"
        },
        "item": {
          "id": "9e6714bf-d119-40df-acc0-2d870946e6cb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ab805638-c98c-4e56-9c82-e9ef945d4d8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738f6cc1-7d80-4de2-a353-e1e0122f30c3",
        "cursor": {
          "ref": "1fb8d259-a6b4-4b8e-9acb-ba9812215e0d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "50b9257c-6d28-4954-a796-228b7ee008b2"
        },
        "item": {
          "id": "738f6cc1-7d80-4de2-a353-e1e0122f30c3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "79343833-3780-464b-9f06-0dbf8b9956ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738f6cc1-7d80-4de2-a353-e1e0122f30c3",
        "cursor": {
          "ref": "1fb8d259-a6b4-4b8e-9acb-ba9812215e0d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "50b9257c-6d28-4954-a796-228b7ee008b2"
        },
        "item": {
          "id": "738f6cc1-7d80-4de2-a353-e1e0122f30c3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "79343833-3780-464b-9f06-0dbf8b9956ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221c8030-4880-427d-accb-76c479c68ea4",
        "cursor": {
          "ref": "dd679f21-8186-4b4b-ba51-596db061e256",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8ab4aa5e-435f-4662-9f23-d9018c70f959"
        },
        "item": {
          "id": "221c8030-4880-427d-accb-76c479c68ea4",
          "name": "identifiers"
        },
        "response": {
          "id": "549c0e04-4781-420c-a792-d49fc70d70a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "221c8030-4880-427d-accb-76c479c68ea4",
        "cursor": {
          "ref": "dd679f21-8186-4b4b-ba51-596db061e256",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8ab4aa5e-435f-4662-9f23-d9018c70f959"
        },
        "item": {
          "id": "221c8030-4880-427d-accb-76c479c68ea4",
          "name": "identifiers"
        },
        "response": {
          "id": "549c0e04-4781-420c-a792-d49fc70d70a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4df0b9aa-714b-4ae3-8e56-000ed8559fb2",
        "cursor": {
          "ref": "bb355d2c-6c37-43ef-bf90-d3577d32ef1a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3f51449f-0f46-4028-b76d-7453ee9c1447"
        },
        "item": {
          "id": "4df0b9aa-714b-4ae3-8e56-000ed8559fb2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7f9ef62b-2b38-4af2-b926-47b0914c84c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 103,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df0b9aa-714b-4ae3-8e56-000ed8559fb2",
        "cursor": {
          "ref": "bb355d2c-6c37-43ef-bf90-d3577d32ef1a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3f51449f-0f46-4028-b76d-7453ee9c1447"
        },
        "item": {
          "id": "4df0b9aa-714b-4ae3-8e56-000ed8559fb2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7f9ef62b-2b38-4af2-b926-47b0914c84c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 103,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bcc2ea-fc94-42b6-b014-4cd763115a8d",
        "cursor": {
          "ref": "4acae548-3233-453f-bf1f-59ea25ad4ae7",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2e7a0be6-37b6-40fb-a1f8-91d917e64bb5"
        },
        "item": {
          "id": "b9bcc2ea-fc94-42b6-b014-4cd763115a8d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b83fec46-bec8-4c85-800e-ef06f3e7cb08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bcc2ea-fc94-42b6-b014-4cd763115a8d",
        "cursor": {
          "ref": "4acae548-3233-453f-bf1f-59ea25ad4ae7",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2e7a0be6-37b6-40fb-a1f8-91d917e64bb5"
        },
        "item": {
          "id": "b9bcc2ea-fc94-42b6-b014-4cd763115a8d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b83fec46-bec8-4c85-800e-ef06f3e7cb08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9405e834-f20e-48e6-988a-a3c38c1ca0e0",
        "cursor": {
          "ref": "45aeb4ca-5831-4a67-af61-00e331a7bbd1",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2fa376af-edef-4dca-99ef-adefb6ac0128"
        },
        "item": {
          "id": "9405e834-f20e-48e6-988a-a3c38c1ca0e0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "68026b3a-d0e5-4246-9d35-ebb082933c63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9405e834-f20e-48e6-988a-a3c38c1ca0e0",
        "cursor": {
          "ref": "45aeb4ca-5831-4a67-af61-00e331a7bbd1",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2fa376af-edef-4dca-99ef-adefb6ac0128"
        },
        "item": {
          "id": "9405e834-f20e-48e6-988a-a3c38c1ca0e0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "68026b3a-d0e5-4246-9d35-ebb082933c63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1954fd91-0bb8-43b1-8372-d7064cff4004",
        "cursor": {
          "ref": "a6e52907-25af-4b3b-a4a8-33ca5015a577",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6a2e67d2-9ce7-4c40-b4f4-38b9b7e18cef"
        },
        "item": {
          "id": "1954fd91-0bb8-43b1-8372-d7064cff4004",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "eedd3ba3-3dd4-441d-b2ae-3f2a42888c08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1954fd91-0bb8-43b1-8372-d7064cff4004",
        "cursor": {
          "ref": "a6e52907-25af-4b3b-a4a8-33ca5015a577",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6a2e67d2-9ce7-4c40-b4f4-38b9b7e18cef"
        },
        "item": {
          "id": "1954fd91-0bb8-43b1-8372-d7064cff4004",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "eedd3ba3-3dd4-441d-b2ae-3f2a42888c08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925193fc-3f7c-454c-b41b-67f0863093a2",
        "cursor": {
          "ref": "87b100f5-cad3-4a9e-be27-0d267e3e8b2b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ad5098fb-56f3-4164-b236-9e36fb33f4b9"
        },
        "item": {
          "id": "925193fc-3f7c-454c-b41b-67f0863093a2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9c9b1a2b-60cf-4c54-892f-266871bfc33c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925193fc-3f7c-454c-b41b-67f0863093a2",
        "cursor": {
          "ref": "87b100f5-cad3-4a9e-be27-0d267e3e8b2b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ad5098fb-56f3-4164-b236-9e36fb33f4b9"
        },
        "item": {
          "id": "925193fc-3f7c-454c-b41b-67f0863093a2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9c9b1a2b-60cf-4c54-892f-266871bfc33c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd48835-138a-4a0e-8f12-47cbb32f44ad",
        "cursor": {
          "ref": "232e111a-1942-4b35-a44a-08a373c29b29",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "da129c96-d2fb-4fbe-a93a-32d4882f0613"
        },
        "item": {
          "id": "9dd48835-138a-4a0e-8f12-47cbb32f44ad",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8178f0ae-d2f5-4465-9b47-ad5b8f177b25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd48835-138a-4a0e-8f12-47cbb32f44ad",
        "cursor": {
          "ref": "232e111a-1942-4b35-a44a-08a373c29b29",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "da129c96-d2fb-4fbe-a93a-32d4882f0613"
        },
        "item": {
          "id": "9dd48835-138a-4a0e-8f12-47cbb32f44ad",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8178f0ae-d2f5-4465-9b47-ad5b8f177b25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56706723-ee20-4164-9d91-a9a803b93490",
        "cursor": {
          "ref": "1a42fa2c-58c7-4708-9e53-a6fddb939bd4",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "22f9c5aa-db19-4946-a231-308502b73c17"
        },
        "item": {
          "id": "56706723-ee20-4164-9d91-a9a803b93490",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2b2da758-7b6f-4254-bf75-a4626eca2fa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56706723-ee20-4164-9d91-a9a803b93490",
        "cursor": {
          "ref": "1a42fa2c-58c7-4708-9e53-a6fddb939bd4",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "22f9c5aa-db19-4946-a231-308502b73c17"
        },
        "item": {
          "id": "56706723-ee20-4164-9d91-a9a803b93490",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2b2da758-7b6f-4254-bf75-a4626eca2fa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29eb5b2a-2644-403c-8dd7-29ee11ee1aa4",
        "cursor": {
          "ref": "ebdd1613-04fc-4c71-99d8-57e225aee17c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "18eaa9ca-1081-43f8-9a51-8890defa65c8"
        },
        "item": {
          "id": "29eb5b2a-2644-403c-8dd7-29ee11ee1aa4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "031da26a-bb2f-4d20-a557-78c15e6a1bcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29eb5b2a-2644-403c-8dd7-29ee11ee1aa4",
        "cursor": {
          "ref": "ebdd1613-04fc-4c71-99d8-57e225aee17c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "18eaa9ca-1081-43f8-9a51-8890defa65c8"
        },
        "item": {
          "id": "29eb5b2a-2644-403c-8dd7-29ee11ee1aa4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "031da26a-bb2f-4d20-a557-78c15e6a1bcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c408a49a-fe19-4d7b-8b49-f7f2259f5cfc",
        "cursor": {
          "ref": "dbe6185c-0a61-45c7-b596-33f5d2afbf1d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "81f094d6-c045-4053-93be-caf53c5bff60"
        },
        "item": {
          "id": "c408a49a-fe19-4d7b-8b49-f7f2259f5cfc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "912e1be9-dfb2-4e1b-a7a7-a0c4498d2bdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c408a49a-fe19-4d7b-8b49-f7f2259f5cfc",
        "cursor": {
          "ref": "dbe6185c-0a61-45c7-b596-33f5d2afbf1d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "81f094d6-c045-4053-93be-caf53c5bff60"
        },
        "item": {
          "id": "c408a49a-fe19-4d7b-8b49-f7f2259f5cfc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "912e1be9-dfb2-4e1b-a7a7-a0c4498d2bdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f46a4c-b4fd-4bb1-81bc-da2d18671229",
        "cursor": {
          "ref": "88f6c582-f24e-4ad9-b915-d5cea70e2c0f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "195d46c1-d4b6-48d2-b241-3cb1c576350e"
        },
        "item": {
          "id": "14f46a4c-b4fd-4bb1-81bc-da2d18671229",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e5f78469-1e60-4d8e-8fa6-c3a3195eba63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f46a4c-b4fd-4bb1-81bc-da2d18671229",
        "cursor": {
          "ref": "88f6c582-f24e-4ad9-b915-d5cea70e2c0f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "195d46c1-d4b6-48d2-b241-3cb1c576350e"
        },
        "item": {
          "id": "14f46a4c-b4fd-4bb1-81bc-da2d18671229",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e5f78469-1e60-4d8e-8fa6-c3a3195eba63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51243387-b6ef-4122-b29a-08b2c96616ce",
        "cursor": {
          "ref": "cd64df93-669b-48bb-b50f-7d2da36372db",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4bc16922-12a2-4cf3-9205-6f79edb62e7a"
        },
        "item": {
          "id": "51243387-b6ef-4122-b29a-08b2c96616ce",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "70d8519e-33e6-4592-8f7e-39aa558e7601",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51243387-b6ef-4122-b29a-08b2c96616ce",
        "cursor": {
          "ref": "cd64df93-669b-48bb-b50f-7d2da36372db",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4bc16922-12a2-4cf3-9205-6f79edb62e7a"
        },
        "item": {
          "id": "51243387-b6ef-4122-b29a-08b2c96616ce",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "70d8519e-33e6-4592-8f7e-39aa558e7601",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b668f110-45a3-440b-b88c-3345df368915",
        "cursor": {
          "ref": "aeed3141-4cc1-49d5-b356-1b4e570a533d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "27df86f9-b49e-413f-a0b1-218063a2bc4f"
        },
        "item": {
          "id": "b668f110-45a3-440b-b88c-3345df368915",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2d5c05db-4628-4092-a1b1-76cc81dbf30d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b668f110-45a3-440b-b88c-3345df368915",
        "cursor": {
          "ref": "aeed3141-4cc1-49d5-b356-1b4e570a533d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "27df86f9-b49e-413f-a0b1-218063a2bc4f"
        },
        "item": {
          "id": "b668f110-45a3-440b-b88c-3345df368915",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2d5c05db-4628-4092-a1b1-76cc81dbf30d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8951c7d-5887-4d10-b5d8-52569931c090",
        "cursor": {
          "ref": "e5ec293d-1365-4970-8833-4d6645297c7f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "db021c7a-3e06-4d42-b8fd-691208a1835c"
        },
        "item": {
          "id": "d8951c7d-5887-4d10-b5d8-52569931c090",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "62d52295-bc74-48e9-9ff5-0914a22d135b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8951c7d-5887-4d10-b5d8-52569931c090",
        "cursor": {
          "ref": "e5ec293d-1365-4970-8833-4d6645297c7f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "db021c7a-3e06-4d42-b8fd-691208a1835c"
        },
        "item": {
          "id": "d8951c7d-5887-4d10-b5d8-52569931c090",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "62d52295-bc74-48e9-9ff5-0914a22d135b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b36b70-f685-4d9d-9e04-a1d5c0ac6a20",
        "cursor": {
          "ref": "2a4c3275-ea0a-4309-95da-ecd727274de6",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e5d528ed-333f-451a-9dc0-f565fe66a4a8"
        },
        "item": {
          "id": "d1b36b70-f685-4d9d-9e04-a1d5c0ac6a20",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1001e3d2-907d-4b45-8e6c-d83e7154d9ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b36b70-f685-4d9d-9e04-a1d5c0ac6a20",
        "cursor": {
          "ref": "2a4c3275-ea0a-4309-95da-ecd727274de6",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e5d528ed-333f-451a-9dc0-f565fe66a4a8"
        },
        "item": {
          "id": "d1b36b70-f685-4d9d-9e04-a1d5c0ac6a20",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1001e3d2-907d-4b45-8e6c-d83e7154d9ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbb5be8-61f5-4d58-9696-dd694987a3fb",
        "cursor": {
          "ref": "a74abfa4-a9db-45bd-8e03-b31dd385e73b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e35490f1-fdf2-43c6-9434-03d238b63abe"
        },
        "item": {
          "id": "5cbb5be8-61f5-4d58-9696-dd694987a3fb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "43f03d2a-89c2-450c-be4c-3d0378d6897a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbb5be8-61f5-4d58-9696-dd694987a3fb",
        "cursor": {
          "ref": "a74abfa4-a9db-45bd-8e03-b31dd385e73b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e35490f1-fdf2-43c6-9434-03d238b63abe"
        },
        "item": {
          "id": "5cbb5be8-61f5-4d58-9696-dd694987a3fb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "43f03d2a-89c2-450c-be4c-3d0378d6897a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af0a1fb-1263-4140-83cd-18da62cd550a",
        "cursor": {
          "ref": "7b07637d-8763-4932-9b79-7aecd269ac37",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0a599492-3c63-47a0-88d6-0ec2e69ceb9d"
        },
        "item": {
          "id": "4af0a1fb-1263-4140-83cd-18da62cd550a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2327e149-45fa-4b9b-b02d-8fbcb30a816b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af0a1fb-1263-4140-83cd-18da62cd550a",
        "cursor": {
          "ref": "7b07637d-8763-4932-9b79-7aecd269ac37",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0a599492-3c63-47a0-88d6-0ec2e69ceb9d"
        },
        "item": {
          "id": "4af0a1fb-1263-4140-83cd-18da62cd550a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2327e149-45fa-4b9b-b02d-8fbcb30a816b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6425d2a-a6e7-4670-90d0-8ddef964587d",
        "cursor": {
          "ref": "e9891a29-b074-4033-a3c6-374bdd6eea33",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f85319fc-eaeb-404e-bd2f-b6093b7d4601"
        },
        "item": {
          "id": "b6425d2a-a6e7-4670-90d0-8ddef964587d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "da190c81-9b0e-4bed-9b98-627388a94bd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6425d2a-a6e7-4670-90d0-8ddef964587d",
        "cursor": {
          "ref": "e9891a29-b074-4033-a3c6-374bdd6eea33",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f85319fc-eaeb-404e-bd2f-b6093b7d4601"
        },
        "item": {
          "id": "b6425d2a-a6e7-4670-90d0-8ddef964587d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "da190c81-9b0e-4bed-9b98-627388a94bd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9717e60-925d-4f85-b4db-c6537f570efd",
        "cursor": {
          "ref": "1b8c51c2-2360-4069-88cd-9f59d4ba664f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1be3d6ec-3d29-48ce-a8c4-0c65465c8ba9"
        },
        "item": {
          "id": "f9717e60-925d-4f85-b4db-c6537f570efd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "afec0fc3-0f76-41a8-acaa-58d53a8ed93f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9717e60-925d-4f85-b4db-c6537f570efd",
        "cursor": {
          "ref": "1b8c51c2-2360-4069-88cd-9f59d4ba664f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1be3d6ec-3d29-48ce-a8c4-0c65465c8ba9"
        },
        "item": {
          "id": "f9717e60-925d-4f85-b4db-c6537f570efd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "afec0fc3-0f76-41a8-acaa-58d53a8ed93f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51174f5-8b71-444c-bd35-2519ff696ca5",
        "cursor": {
          "ref": "e4e77703-0de8-4de3-a58d-9a93bcbf54b0",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b644ff92-ff40-4eba-a82b-d93cb21c1a2f"
        },
        "item": {
          "id": "e51174f5-8b71-444c-bd35-2519ff696ca5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "62b832f4-76cc-46e7-a595-18d966986833",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51174f5-8b71-444c-bd35-2519ff696ca5",
        "cursor": {
          "ref": "e4e77703-0de8-4de3-a58d-9a93bcbf54b0",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b644ff92-ff40-4eba-a82b-d93cb21c1a2f"
        },
        "item": {
          "id": "e51174f5-8b71-444c-bd35-2519ff696ca5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "62b832f4-76cc-46e7-a595-18d966986833",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4594bf0-e53b-4f98-88e7-8e4489721a39",
        "cursor": {
          "ref": "099b066d-84b9-4ed9-b0fa-2136fa74f60d",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5ed1723f-604f-4bd2-be2f-cc4b5e9d6735"
        },
        "item": {
          "id": "b4594bf0-e53b-4f98-88e7-8e4489721a39",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "facbe389-a34c-4c66-ae3f-007877d2dd8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4594bf0-e53b-4f98-88e7-8e4489721a39",
        "cursor": {
          "ref": "099b066d-84b9-4ed9-b0fa-2136fa74f60d",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5ed1723f-604f-4bd2-be2f-cc4b5e9d6735"
        },
        "item": {
          "id": "b4594bf0-e53b-4f98-88e7-8e4489721a39",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "facbe389-a34c-4c66-ae3f-007877d2dd8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d4d35e-6c98-4f5e-a846-00a2d51441fd",
        "cursor": {
          "ref": "93bac018-cd8f-422a-8589-226fdf8360ca",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9247f480-004e-456a-bd43-cfdae7201ac8"
        },
        "item": {
          "id": "25d4d35e-6c98-4f5e-a846-00a2d51441fd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fbf69313-a41a-478d-b06d-61deda4edd56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d4d35e-6c98-4f5e-a846-00a2d51441fd",
        "cursor": {
          "ref": "93bac018-cd8f-422a-8589-226fdf8360ca",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9247f480-004e-456a-bd43-cfdae7201ac8"
        },
        "item": {
          "id": "25d4d35e-6c98-4f5e-a846-00a2d51441fd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fbf69313-a41a-478d-b06d-61deda4edd56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb9f038-a487-448b-baed-0b20de46795f",
        "cursor": {
          "ref": "f63a1d22-626c-40ce-b4ef-b44de146709b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4cbb849b-465e-4104-a288-954d5a5be440"
        },
        "item": {
          "id": "efb9f038-a487-448b-baed-0b20de46795f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4c63cd50-15ec-4e2f-82e4-15e781c5620e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb9f038-a487-448b-baed-0b20de46795f",
        "cursor": {
          "ref": "f63a1d22-626c-40ce-b4ef-b44de146709b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4cbb849b-465e-4104-a288-954d5a5be440"
        },
        "item": {
          "id": "efb9f038-a487-448b-baed-0b20de46795f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4c63cd50-15ec-4e2f-82e4-15e781c5620e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7590f022-d0ae-40b4-ba60-56ad66daabe7",
        "cursor": {
          "ref": "9d82ebfe-4244-4aa1-826e-2a5b5dfd05a0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fca41f42-b6d5-4f31-a034-c8892aafcb36"
        },
        "item": {
          "id": "7590f022-d0ae-40b4-ba60-56ad66daabe7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ed61e137-e5c5-4047-9583-92545d43e95f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7590f022-d0ae-40b4-ba60-56ad66daabe7",
        "cursor": {
          "ref": "9d82ebfe-4244-4aa1-826e-2a5b5dfd05a0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fca41f42-b6d5-4f31-a034-c8892aafcb36"
        },
        "item": {
          "id": "7590f022-d0ae-40b4-ba60-56ad66daabe7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ed61e137-e5c5-4047-9583-92545d43e95f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63731f1-cfb4-4d39-a6d6-6e8bbcf85db2",
        "cursor": {
          "ref": "f681d22a-6c88-46d2-b15e-89f2621b65c0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b48824fe-6375-4fcc-98d0-7581123536e2"
        },
        "item": {
          "id": "d63731f1-cfb4-4d39-a6d6-6e8bbcf85db2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9b1da37-90fa-4714-b3b6-9021fec95d9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63731f1-cfb4-4d39-a6d6-6e8bbcf85db2",
        "cursor": {
          "ref": "f681d22a-6c88-46d2-b15e-89f2621b65c0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b48824fe-6375-4fcc-98d0-7581123536e2"
        },
        "item": {
          "id": "d63731f1-cfb4-4d39-a6d6-6e8bbcf85db2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9b1da37-90fa-4714-b3b6-9021fec95d9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd92a62-1c15-40e9-9d51-13e20a081edf",
        "cursor": {
          "ref": "2ad3fe11-e03d-422b-9343-ecd5843028e8",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "34aff03d-f9d2-4c3f-873d-c3840f16e359"
        },
        "item": {
          "id": "8fd92a62-1c15-40e9-9d51-13e20a081edf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a0d67c8c-0362-4be3-8243-72c9fd10361d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd92a62-1c15-40e9-9d51-13e20a081edf",
        "cursor": {
          "ref": "2ad3fe11-e03d-422b-9343-ecd5843028e8",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "34aff03d-f9d2-4c3f-873d-c3840f16e359"
        },
        "item": {
          "id": "8fd92a62-1c15-40e9-9d51-13e20a081edf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a0d67c8c-0362-4be3-8243-72c9fd10361d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd604283-edda-49d9-8b4b-ca5339c347c3",
        "cursor": {
          "ref": "9d07c643-af46-4fd6-917b-a3178eb5efe0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e9c21b9f-b45b-4fe8-99b9-40ef2bf1e46e"
        },
        "item": {
          "id": "fd604283-edda-49d9-8b4b-ca5339c347c3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "12fb6582-3c65-4200-8b55-bfcb50e377d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd604283-edda-49d9-8b4b-ca5339c347c3",
        "cursor": {
          "ref": "9d07c643-af46-4fd6-917b-a3178eb5efe0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e9c21b9f-b45b-4fe8-99b9-40ef2bf1e46e"
        },
        "item": {
          "id": "fd604283-edda-49d9-8b4b-ca5339c347c3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "12fb6582-3c65-4200-8b55-bfcb50e377d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b38e576-6d11-45c0-8ed3-bef739b032e9",
        "cursor": {
          "ref": "0a757e4e-1c9d-4f58-ac17-964a9171399b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "625d7c8f-86d3-4e9d-baa1-bec5789404e5"
        },
        "item": {
          "id": "1b38e576-6d11-45c0-8ed3-bef739b032e9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3e631c52-6fcf-4d43-a2d7-18f259ef9be6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b38e576-6d11-45c0-8ed3-bef739b032e9",
        "cursor": {
          "ref": "0a757e4e-1c9d-4f58-ac17-964a9171399b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "625d7c8f-86d3-4e9d-baa1-bec5789404e5"
        },
        "item": {
          "id": "1b38e576-6d11-45c0-8ed3-bef739b032e9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3e631c52-6fcf-4d43-a2d7-18f259ef9be6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11395bf-f670-423a-a050-702d00852698",
        "cursor": {
          "ref": "11fb055a-3eb8-43db-b717-03969af83f29",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "295ca254-f742-4c8b-aa05-4e3e31c0c34d"
        },
        "item": {
          "id": "c11395bf-f670-423a-a050-702d00852698",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0b57ed16-1009-4e9e-a129-508d6641b6c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11395bf-f670-423a-a050-702d00852698",
        "cursor": {
          "ref": "11fb055a-3eb8-43db-b717-03969af83f29",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "295ca254-f742-4c8b-aa05-4e3e31c0c34d"
        },
        "item": {
          "id": "c11395bf-f670-423a-a050-702d00852698",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0b57ed16-1009-4e9e-a129-508d6641b6c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f4e767-0897-434f-866b-84e5312da542",
        "cursor": {
          "ref": "cd637912-af15-4006-ae09-7dc8285a92fa",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e8d9247c-f750-4118-884e-863d0049e746"
        },
        "item": {
          "id": "b1f4e767-0897-434f-866b-84e5312da542",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3a3903ed-08ce-44c6-abea-13f2f05b2307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f4e767-0897-434f-866b-84e5312da542",
        "cursor": {
          "ref": "cd637912-af15-4006-ae09-7dc8285a92fa",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e8d9247c-f750-4118-884e-863d0049e746"
        },
        "item": {
          "id": "b1f4e767-0897-434f-866b-84e5312da542",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3a3903ed-08ce-44c6-abea-13f2f05b2307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7da5ce-f6fb-4009-9b61-7e669dc995e7",
        "cursor": {
          "ref": "e0288fd9-7f4d-474a-af99-d33fbd3c6ece",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "10a5215d-4696-40df-b0d6-bebcb589236b"
        },
        "item": {
          "id": "ca7da5ce-f6fb-4009-9b61-7e669dc995e7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "11ea50b8-afba-44a5-b392-ac0a7098dec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7da5ce-f6fb-4009-9b61-7e669dc995e7",
        "cursor": {
          "ref": "e0288fd9-7f4d-474a-af99-d33fbd3c6ece",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "10a5215d-4696-40df-b0d6-bebcb589236b"
        },
        "item": {
          "id": "ca7da5ce-f6fb-4009-9b61-7e669dc995e7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "11ea50b8-afba-44a5-b392-ac0a7098dec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9e5a0e-2586-4435-85b9-f1f450231150",
        "cursor": {
          "ref": "ec43edf5-41bf-4005-a517-1b703bc323fa",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a4d99418-5f0c-4e38-9f5f-931523d4a0af"
        },
        "item": {
          "id": "5a9e5a0e-2586-4435-85b9-f1f450231150",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b5cdc563-4b96-4a9d-9d10-406ea7bf40ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9e5a0e-2586-4435-85b9-f1f450231150",
        "cursor": {
          "ref": "ec43edf5-41bf-4005-a517-1b703bc323fa",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a4d99418-5f0c-4e38-9f5f-931523d4a0af"
        },
        "item": {
          "id": "5a9e5a0e-2586-4435-85b9-f1f450231150",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b5cdc563-4b96-4a9d-9d10-406ea7bf40ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cfa99c-eae7-44a1-936e-00ab9c8e965e",
        "cursor": {
          "ref": "17b6d0d2-888c-4558-82f6-9a77197746a2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3306539a-44bc-4d45-9f59-63a7d6eec6d9"
        },
        "item": {
          "id": "62cfa99c-eae7-44a1-936e-00ab9c8e965e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "19181392-1cb7-4efc-a9a2-78fe0ae0f726",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cfa99c-eae7-44a1-936e-00ab9c8e965e",
        "cursor": {
          "ref": "17b6d0d2-888c-4558-82f6-9a77197746a2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3306539a-44bc-4d45-9f59-63a7d6eec6d9"
        },
        "item": {
          "id": "62cfa99c-eae7-44a1-936e-00ab9c8e965e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "19181392-1cb7-4efc-a9a2-78fe0ae0f726",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a871791-1c0f-4ab5-9b9b-f738626d150f",
        "cursor": {
          "ref": "b5b4a732-fec1-41d7-b9d2-a341a81ce1dd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b577031a-4b99-4a1b-978b-c7553a3d624e"
        },
        "item": {
          "id": "0a871791-1c0f-4ab5-9b9b-f738626d150f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d7a1baf8-b460-4c4d-b55e-d2fce5a4223e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a871791-1c0f-4ab5-9b9b-f738626d150f",
        "cursor": {
          "ref": "b5b4a732-fec1-41d7-b9d2-a341a81ce1dd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b577031a-4b99-4a1b-978b-c7553a3d624e"
        },
        "item": {
          "id": "0a871791-1c0f-4ab5-9b9b-f738626d150f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d7a1baf8-b460-4c4d-b55e-d2fce5a4223e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57f105c-0a44-4c7c-9017-f6922e3ae1be",
        "cursor": {
          "ref": "330b4d0b-aaca-41f1-88cf-f76608b8967b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "16231e3c-ce96-46af-8438-edf25f720720"
        },
        "item": {
          "id": "e57f105c-0a44-4c7c-9017-f6922e3ae1be",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a0f4f499-a57e-42d2-86ea-20da3ae9601b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57f105c-0a44-4c7c-9017-f6922e3ae1be",
        "cursor": {
          "ref": "330b4d0b-aaca-41f1-88cf-f76608b8967b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "16231e3c-ce96-46af-8438-edf25f720720"
        },
        "item": {
          "id": "e57f105c-0a44-4c7c-9017-f6922e3ae1be",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a0f4f499-a57e-42d2-86ea-20da3ae9601b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94c3536-93e8-4148-b3e6-98f2525df74a",
        "cursor": {
          "ref": "986fdaab-0f19-4d4e-bbf9-4052274e1328",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e500c7b1-d08e-4ae6-962c-b24ba43fbe46"
        },
        "item": {
          "id": "d94c3536-93e8-4148-b3e6-98f2525df74a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5f816c79-a306-4a5a-80e1-31919063aeb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94c3536-93e8-4148-b3e6-98f2525df74a",
        "cursor": {
          "ref": "986fdaab-0f19-4d4e-bbf9-4052274e1328",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e500c7b1-d08e-4ae6-962c-b24ba43fbe46"
        },
        "item": {
          "id": "d94c3536-93e8-4148-b3e6-98f2525df74a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5f816c79-a306-4a5a-80e1-31919063aeb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689c7910-3c01-4fc3-96a0-76d40a371d74",
        "cursor": {
          "ref": "6729055d-592d-4067-a0ff-3f6e4bdac671",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "87e59fb5-e65f-40a9-b8aa-14e305260cdc"
        },
        "item": {
          "id": "689c7910-3c01-4fc3-96a0-76d40a371d74",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6ee01e8d-bfaf-41c1-a1cd-0b8ee0aeaf20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689c7910-3c01-4fc3-96a0-76d40a371d74",
        "cursor": {
          "ref": "6729055d-592d-4067-a0ff-3f6e4bdac671",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "87e59fb5-e65f-40a9-b8aa-14e305260cdc"
        },
        "item": {
          "id": "689c7910-3c01-4fc3-96a0-76d40a371d74",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6ee01e8d-bfaf-41c1-a1cd-0b8ee0aeaf20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b5946a-3720-4faf-b980-4e7e0158bb95",
        "cursor": {
          "ref": "07360c30-5f2b-4215-ac15-c9a1b0a5fdac",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2d9d8d3b-eec1-4ba9-87af-c95fee466390"
        },
        "item": {
          "id": "c6b5946a-3720-4faf-b980-4e7e0158bb95",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bac923b6-a577-4f5d-a287-31550632a019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b5946a-3720-4faf-b980-4e7e0158bb95",
        "cursor": {
          "ref": "07360c30-5f2b-4215-ac15-c9a1b0a5fdac",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2d9d8d3b-eec1-4ba9-87af-c95fee466390"
        },
        "item": {
          "id": "c6b5946a-3720-4faf-b980-4e7e0158bb95",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bac923b6-a577-4f5d-a287-31550632a019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704a9178-b1ad-404a-93df-dde87d3623de",
        "cursor": {
          "ref": "fbf4ef17-8a21-416a-b8a5-81e0db5c3d68",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fed6bbc3-0cc7-4c6d-b177-f099c91d509a"
        },
        "item": {
          "id": "704a9178-b1ad-404a-93df-dde87d3623de",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b1afa88e-f45b-4e52-ba8a-e90a794fea5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704a9178-b1ad-404a-93df-dde87d3623de",
        "cursor": {
          "ref": "fbf4ef17-8a21-416a-b8a5-81e0db5c3d68",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fed6bbc3-0cc7-4c6d-b177-f099c91d509a"
        },
        "item": {
          "id": "704a9178-b1ad-404a-93df-dde87d3623de",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b1afa88e-f45b-4e52-ba8a-e90a794fea5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15178f65-6acc-4f86-915f-964d2188709c",
        "cursor": {
          "ref": "688e44af-f15c-4012-9c8c-15781ae7720d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3092f1cd-045e-4594-b80e-164c9419ba8e"
        },
        "item": {
          "id": "15178f65-6acc-4f86-915f-964d2188709c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c44bfde2-0553-4652-81c5-cea01fba3d09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15178f65-6acc-4f86-915f-964d2188709c",
        "cursor": {
          "ref": "688e44af-f15c-4012-9c8c-15781ae7720d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3092f1cd-045e-4594-b80e-164c9419ba8e"
        },
        "item": {
          "id": "15178f65-6acc-4f86-915f-964d2188709c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c44bfde2-0553-4652-81c5-cea01fba3d09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7687b6-8c8d-4b35-9034-48e6b161853d",
        "cursor": {
          "ref": "fe73b6dc-67d8-4510-9b7a-483d10f360fd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "550bd9da-2fc7-49a0-8461-23425ea0170c"
        },
        "item": {
          "id": "dc7687b6-8c8d-4b35-9034-48e6b161853d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cd227c44-4795-42fd-80f7-fc48e203385d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7687b6-8c8d-4b35-9034-48e6b161853d",
        "cursor": {
          "ref": "fe73b6dc-67d8-4510-9b7a-483d10f360fd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "550bd9da-2fc7-49a0-8461-23425ea0170c"
        },
        "item": {
          "id": "dc7687b6-8c8d-4b35-9034-48e6b161853d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cd227c44-4795-42fd-80f7-fc48e203385d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cefb97-2852-4bc2-8bfb-dcfef9a37a9b",
        "cursor": {
          "ref": "28e41e29-efb4-40ab-969a-7973b9eb82ed",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c9ef16ba-7dff-42b5-b776-dc33ba862b29"
        },
        "item": {
          "id": "63cefb97-2852-4bc2-8bfb-dcfef9a37a9b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d505b248-b79a-4ee3-ae43-e5b6f695aa42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cefb97-2852-4bc2-8bfb-dcfef9a37a9b",
        "cursor": {
          "ref": "28e41e29-efb4-40ab-969a-7973b9eb82ed",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c9ef16ba-7dff-42b5-b776-dc33ba862b29"
        },
        "item": {
          "id": "63cefb97-2852-4bc2-8bfb-dcfef9a37a9b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d505b248-b79a-4ee3-ae43-e5b6f695aa42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef37615c-74c9-4de2-a4f3-0c5f22a703a6",
        "cursor": {
          "ref": "54c62a80-1c32-45db-bf7b-64a7c44a4eeb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f7378385-95da-4ede-a195-0b7849224c10"
        },
        "item": {
          "id": "ef37615c-74c9-4de2-a4f3-0c5f22a703a6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "819c0d74-ddf8-45bb-9053-e07690799ee4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef37615c-74c9-4de2-a4f3-0c5f22a703a6",
        "cursor": {
          "ref": "54c62a80-1c32-45db-bf7b-64a7c44a4eeb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f7378385-95da-4ede-a195-0b7849224c10"
        },
        "item": {
          "id": "ef37615c-74c9-4de2-a4f3-0c5f22a703a6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "819c0d74-ddf8-45bb-9053-e07690799ee4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbf68fe-29a1-4854-8ebb-0836c2737a01",
        "cursor": {
          "ref": "8b4c2d3f-4085-47de-878d-b149fce4e786",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0746a84c-fd29-4ff9-ac93-97a247899f60"
        },
        "item": {
          "id": "1bbf68fe-29a1-4854-8ebb-0836c2737a01",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "56bf1417-4b4f-444b-a011-ef4e3d1ef343",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbf68fe-29a1-4854-8ebb-0836c2737a01",
        "cursor": {
          "ref": "8b4c2d3f-4085-47de-878d-b149fce4e786",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0746a84c-fd29-4ff9-ac93-97a247899f60"
        },
        "item": {
          "id": "1bbf68fe-29a1-4854-8ebb-0836c2737a01",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "56bf1417-4b4f-444b-a011-ef4e3d1ef343",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb607ee-6ceb-4ec2-a309-7e8ad85a7f19",
        "cursor": {
          "ref": "3bcaf670-89d3-4d78-a2ad-6a4640211359",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1a9f7f5d-3ce0-4a71-810e-6bb3b806e817"
        },
        "item": {
          "id": "ddb607ee-6ceb-4ec2-a309-7e8ad85a7f19",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "076babba-26d4-43e3-9dd2-583e28c515ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb607ee-6ceb-4ec2-a309-7e8ad85a7f19",
        "cursor": {
          "ref": "3bcaf670-89d3-4d78-a2ad-6a4640211359",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1a9f7f5d-3ce0-4a71-810e-6bb3b806e817"
        },
        "item": {
          "id": "ddb607ee-6ceb-4ec2-a309-7e8ad85a7f19",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "076babba-26d4-43e3-9dd2-583e28c515ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7a3d14-5c10-4b8b-babd-18003195815a",
        "cursor": {
          "ref": "445834fc-dc42-4d9a-8b1f-d18fdf0b823b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "02875d6a-4535-4092-b2ba-208a7323e951"
        },
        "item": {
          "id": "6b7a3d14-5c10-4b8b-babd-18003195815a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fd3e0063-bb8f-49be-8f07-d6e26780b124",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7a3d14-5c10-4b8b-babd-18003195815a",
        "cursor": {
          "ref": "445834fc-dc42-4d9a-8b1f-d18fdf0b823b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "02875d6a-4535-4092-b2ba-208a7323e951"
        },
        "item": {
          "id": "6b7a3d14-5c10-4b8b-babd-18003195815a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fd3e0063-bb8f-49be-8f07-d6e26780b124",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf7a463-29e5-4e93-b349-1647e57ac437",
        "cursor": {
          "ref": "fb960bc2-30df-4111-99cc-2de603c3b54c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c9af2491-5bc5-4ad7-a898-5f590d458e67"
        },
        "item": {
          "id": "ebf7a463-29e5-4e93-b349-1647e57ac437",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0e3b47fb-d830-4a0e-b748-1e6573e1bb3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf7a463-29e5-4e93-b349-1647e57ac437",
        "cursor": {
          "ref": "fb960bc2-30df-4111-99cc-2de603c3b54c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c9af2491-5bc5-4ad7-a898-5f590d458e67"
        },
        "item": {
          "id": "ebf7a463-29e5-4e93-b349-1647e57ac437",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0e3b47fb-d830-4a0e-b748-1e6573e1bb3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca4abd2-ed74-4001-9eb7-0c98436ec1bb",
        "cursor": {
          "ref": "0d5fda2e-f472-4135-b134-80cb6eaa81e3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7dc05f61-113e-4c34-a47b-b91b306326c7"
        },
        "item": {
          "id": "2ca4abd2-ed74-4001-9eb7-0c98436ec1bb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ab739cf8-45bb-4964-940f-340fa7497241",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca4abd2-ed74-4001-9eb7-0c98436ec1bb",
        "cursor": {
          "ref": "0d5fda2e-f472-4135-b134-80cb6eaa81e3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7dc05f61-113e-4c34-a47b-b91b306326c7"
        },
        "item": {
          "id": "2ca4abd2-ed74-4001-9eb7-0c98436ec1bb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ab739cf8-45bb-4964-940f-340fa7497241",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4642227-be00-4929-b2f9-7a89a48956f1",
        "cursor": {
          "ref": "a70c5b28-56c5-4047-8eec-002c0b49a437",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9891530e-e9a2-4db4-a4d4-7b7ce575b7d1"
        },
        "item": {
          "id": "c4642227-be00-4929-b2f9-7a89a48956f1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ab8bdea5-dae1-43f6-87c9-7fbfd27a4bf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4642227-be00-4929-b2f9-7a89a48956f1",
        "cursor": {
          "ref": "a70c5b28-56c5-4047-8eec-002c0b49a437",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9891530e-e9a2-4db4-a4d4-7b7ce575b7d1"
        },
        "item": {
          "id": "c4642227-be00-4929-b2f9-7a89a48956f1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ab8bdea5-dae1-43f6-87c9-7fbfd27a4bf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1553319b-bb35-4b1e-8472-5f215394f1c7",
        "cursor": {
          "ref": "fd1d8ac5-bf26-46b8-9b14-2687d65e40eb",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3ee917c5-2a38-434d-a041-49ecea6df214"
        },
        "item": {
          "id": "1553319b-bb35-4b1e-8472-5f215394f1c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b59233fe-91e7-4973-99e0-b582327bae32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1553319b-bb35-4b1e-8472-5f215394f1c7",
        "cursor": {
          "ref": "fd1d8ac5-bf26-46b8-9b14-2687d65e40eb",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3ee917c5-2a38-434d-a041-49ecea6df214"
        },
        "item": {
          "id": "1553319b-bb35-4b1e-8472-5f215394f1c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b59233fe-91e7-4973-99e0-b582327bae32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf90dfdf-1d5d-46b6-9cb7-c0ec2c538c16",
        "cursor": {
          "ref": "72729f75-265f-4cb1-806b-78d52016f39a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "817298ac-ba37-4775-96ca-24f4d2209890"
        },
        "item": {
          "id": "cf90dfdf-1d5d-46b6-9cb7-c0ec2c538c16",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "975fa482-a239-4020-9126-a3adb3313a5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf90dfdf-1d5d-46b6-9cb7-c0ec2c538c16",
        "cursor": {
          "ref": "72729f75-265f-4cb1-806b-78d52016f39a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "817298ac-ba37-4775-96ca-24f4d2209890"
        },
        "item": {
          "id": "cf90dfdf-1d5d-46b6-9cb7-c0ec2c538c16",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "975fa482-a239-4020-9126-a3adb3313a5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c8194e-c4f0-4b70-840d-c459254b9495",
        "cursor": {
          "ref": "df876505-3d23-4709-8344-6dc8118f22a9",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a4c206df-d3a7-414d-9f31-dab4a87db49c"
        },
        "item": {
          "id": "26c8194e-c4f0-4b70-840d-c459254b9495",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "444c3dbc-f110-4cdf-8bd0-4e2e1808269a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c8194e-c4f0-4b70-840d-c459254b9495",
        "cursor": {
          "ref": "df876505-3d23-4709-8344-6dc8118f22a9",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a4c206df-d3a7-414d-9f31-dab4a87db49c"
        },
        "item": {
          "id": "26c8194e-c4f0-4b70-840d-c459254b9495",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "444c3dbc-f110-4cdf-8bd0-4e2e1808269a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3364ca-4e76-4e0f-8ca0-90ee1b9bc8f6",
        "cursor": {
          "ref": "43178a9f-b1e1-4c38-849c-aa7f9008d364",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f6ad2192-78f6-4df8-bc1d-c6f15ce80a62"
        },
        "item": {
          "id": "df3364ca-4e76-4e0f-8ca0-90ee1b9bc8f6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8ef55f1a-0630-4a28-9b9f-02803d01eb44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3364ca-4e76-4e0f-8ca0-90ee1b9bc8f6",
        "cursor": {
          "ref": "43178a9f-b1e1-4c38-849c-aa7f9008d364",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f6ad2192-78f6-4df8-bc1d-c6f15ce80a62"
        },
        "item": {
          "id": "df3364ca-4e76-4e0f-8ca0-90ee1b9bc8f6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8ef55f1a-0630-4a28-9b9f-02803d01eb44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e05959-3b85-40c4-ac3f-f9a5b545c6eb",
        "cursor": {
          "ref": "90cb3ded-3c77-4c7d-8abd-4192c32fc023",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "340ee0a1-128f-422b-8841-ed993d857f91"
        },
        "item": {
          "id": "f9e05959-3b85-40c4-ac3f-f9a5b545c6eb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f354b576-22d9-48e7-981a-17ec36b8672b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e05959-3b85-40c4-ac3f-f9a5b545c6eb",
        "cursor": {
          "ref": "90cb3ded-3c77-4c7d-8abd-4192c32fc023",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "340ee0a1-128f-422b-8841-ed993d857f91"
        },
        "item": {
          "id": "f9e05959-3b85-40c4-ac3f-f9a5b545c6eb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f354b576-22d9-48e7-981a-17ec36b8672b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30971dfc-6f21-43c7-804b-a22e74c24d86",
        "cursor": {
          "ref": "53aa2d3c-31bf-4d44-b391-bafd6e601781",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1a1d31a4-8cbd-4557-9a67-d9a73d44f587"
        },
        "item": {
          "id": "30971dfc-6f21-43c7-804b-a22e74c24d86",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5515adb6-1b3c-4250-9474-92138115fdfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30971dfc-6f21-43c7-804b-a22e74c24d86",
        "cursor": {
          "ref": "53aa2d3c-31bf-4d44-b391-bafd6e601781",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1a1d31a4-8cbd-4557-9a67-d9a73d44f587"
        },
        "item": {
          "id": "30971dfc-6f21-43c7-804b-a22e74c24d86",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5515adb6-1b3c-4250-9474-92138115fdfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95cc21f7-9254-4974-b9cf-9dad03bf1a9c",
        "cursor": {
          "ref": "a738e930-13d4-4fcf-a158-3f292af65a4e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bfc456ed-ad71-46ee-b6e0-b39ec9225645"
        },
        "item": {
          "id": "95cc21f7-9254-4974-b9cf-9dad03bf1a9c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "63cac35d-f6f6-4800-b5ba-3c1b2cd298fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95cc21f7-9254-4974-b9cf-9dad03bf1a9c",
        "cursor": {
          "ref": "a738e930-13d4-4fcf-a158-3f292af65a4e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bfc456ed-ad71-46ee-b6e0-b39ec9225645"
        },
        "item": {
          "id": "95cc21f7-9254-4974-b9cf-9dad03bf1a9c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "63cac35d-f6f6-4800-b5ba-3c1b2cd298fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17039cc3-98c8-4b1d-b587-04f57cb737a2",
        "cursor": {
          "ref": "9bf1fc2f-f0c2-43fd-83b1-684b46aed4ca",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7f90d824-9f3a-4ef0-95e5-ea17fe0537b7"
        },
        "item": {
          "id": "17039cc3-98c8-4b1d-b587-04f57cb737a2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e5b59df3-41e1-4eff-8305-29ba829b6d88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17039cc3-98c8-4b1d-b587-04f57cb737a2",
        "cursor": {
          "ref": "9bf1fc2f-f0c2-43fd-83b1-684b46aed4ca",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7f90d824-9f3a-4ef0-95e5-ea17fe0537b7"
        },
        "item": {
          "id": "17039cc3-98c8-4b1d-b587-04f57cb737a2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e5b59df3-41e1-4eff-8305-29ba829b6d88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40224b2f-7666-48cb-88ab-f1d0fa9903e2",
        "cursor": {
          "ref": "b02e3c91-cfda-4e2c-8648-6663e94d4295",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fa24f405-fd8a-4ecf-a7e0-19a0ffd106c6"
        },
        "item": {
          "id": "40224b2f-7666-48cb-88ab-f1d0fa9903e2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0b2c3e69-c4d8-4a85-a486-652e8f71b693",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40224b2f-7666-48cb-88ab-f1d0fa9903e2",
        "cursor": {
          "ref": "b02e3c91-cfda-4e2c-8648-6663e94d4295",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fa24f405-fd8a-4ecf-a7e0-19a0ffd106c6"
        },
        "item": {
          "id": "40224b2f-7666-48cb-88ab-f1d0fa9903e2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0b2c3e69-c4d8-4a85-a486-652e8f71b693",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedbc8d9-3fbc-434f-a240-972755554be5",
        "cursor": {
          "ref": "f698be6d-ddf2-4216-b862-9b652a012963",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ca2064f2-ed85-466b-be9d-948aaf5210e9"
        },
        "item": {
          "id": "eedbc8d9-3fbc-434f-a240-972755554be5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "03204f25-82cc-4249-b60f-a5f8c59dcaa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedbc8d9-3fbc-434f-a240-972755554be5",
        "cursor": {
          "ref": "f698be6d-ddf2-4216-b862-9b652a012963",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ca2064f2-ed85-466b-be9d-948aaf5210e9"
        },
        "item": {
          "id": "eedbc8d9-3fbc-434f-a240-972755554be5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "03204f25-82cc-4249-b60f-a5f8c59dcaa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3345e2-668b-402d-95f5-021249cbe001",
        "cursor": {
          "ref": "5961b4c3-a99c-4110-a953-9d22f2020f45",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "50042bb5-4bb0-4a4b-9a46-cb071818c1c6"
        },
        "item": {
          "id": "bd3345e2-668b-402d-95f5-021249cbe001",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cf48d7c8-2a1c-445a-817b-8dece48d34e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3345e2-668b-402d-95f5-021249cbe001",
        "cursor": {
          "ref": "5961b4c3-a99c-4110-a953-9d22f2020f45",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "50042bb5-4bb0-4a4b-9a46-cb071818c1c6"
        },
        "item": {
          "id": "bd3345e2-668b-402d-95f5-021249cbe001",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cf48d7c8-2a1c-445a-817b-8dece48d34e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3047e7-f3bd-4052-95d4-e662080f9ee0",
        "cursor": {
          "ref": "c0dd4e06-2cc9-4da8-b0b5-df6ceb9c9644",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cf52a6db-cc26-41fd-82fd-556de247a4dd"
        },
        "item": {
          "id": "5c3047e7-f3bd-4052-95d4-e662080f9ee0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "05ca2614-7711-4849-bd79-44cbbf421a89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3047e7-f3bd-4052-95d4-e662080f9ee0",
        "cursor": {
          "ref": "c0dd4e06-2cc9-4da8-b0b5-df6ceb9c9644",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cf52a6db-cc26-41fd-82fd-556de247a4dd"
        },
        "item": {
          "id": "5c3047e7-f3bd-4052-95d4-e662080f9ee0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "05ca2614-7711-4849-bd79-44cbbf421a89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3ce1fe-752a-4610-a7fb-305d0a1ae02b",
        "cursor": {
          "ref": "5b0ec0e3-3043-49fb-a24f-b0afa37b4130",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f1cdba48-acab-4231-b18f-21cc44017540"
        },
        "item": {
          "id": "5d3ce1fe-752a-4610-a7fb-305d0a1ae02b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fcdaf0c4-67b2-4e74-b3b5-fbf312a56f35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3ce1fe-752a-4610-a7fb-305d0a1ae02b",
        "cursor": {
          "ref": "5b0ec0e3-3043-49fb-a24f-b0afa37b4130",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f1cdba48-acab-4231-b18f-21cc44017540"
        },
        "item": {
          "id": "5d3ce1fe-752a-4610-a7fb-305d0a1ae02b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fcdaf0c4-67b2-4e74-b3b5-fbf312a56f35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56569c7b-cd26-4e3c-9b59-ad0958d125a4",
        "cursor": {
          "ref": "a16fbba6-5eda-4a1f-ab19-5420a312e4d6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8233443b-d3a9-44de-b8b9-501716b191e2"
        },
        "item": {
          "id": "56569c7b-cd26-4e3c-9b59-ad0958d125a4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1114672f-c806-4b2f-b56f-04cbc3bfcc85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56569c7b-cd26-4e3c-9b59-ad0958d125a4",
        "cursor": {
          "ref": "a16fbba6-5eda-4a1f-ab19-5420a312e4d6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8233443b-d3a9-44de-b8b9-501716b191e2"
        },
        "item": {
          "id": "56569c7b-cd26-4e3c-9b59-ad0958d125a4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1114672f-c806-4b2f-b56f-04cbc3bfcc85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d9df0b-17a4-413e-a935-fba45fafaab7",
        "cursor": {
          "ref": "7fe636aa-d4ec-4537-bd97-8726c001f419",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9dec573b-600e-4e7a-b875-70a4e87080eb"
        },
        "item": {
          "id": "a1d9df0b-17a4-413e-a935-fba45fafaab7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "851903f5-ae68-4013-a56c-c9c96595c033",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d9df0b-17a4-413e-a935-fba45fafaab7",
        "cursor": {
          "ref": "7fe636aa-d4ec-4537-bd97-8726c001f419",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9dec573b-600e-4e7a-b875-70a4e87080eb"
        },
        "item": {
          "id": "a1d9df0b-17a4-413e-a935-fba45fafaab7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "851903f5-ae68-4013-a56c-c9c96595c033",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7a3141-e694-42f4-89b1-ac77e6eff4f6",
        "cursor": {
          "ref": "b3ad719e-c2b5-4df6-9990-afc0bd93bb12",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3c0643f0-67d4-4c46-8328-1949ca0b5b60"
        },
        "item": {
          "id": "bb7a3141-e694-42f4-89b1-ac77e6eff4f6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "16d0b7ba-353c-4f16-b1aa-393499effe18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7a3141-e694-42f4-89b1-ac77e6eff4f6",
        "cursor": {
          "ref": "b3ad719e-c2b5-4df6-9990-afc0bd93bb12",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3c0643f0-67d4-4c46-8328-1949ca0b5b60"
        },
        "item": {
          "id": "bb7a3141-e694-42f4-89b1-ac77e6eff4f6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "16d0b7ba-353c-4f16-b1aa-393499effe18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baf078d-3dce-4a8d-8a27-15ea5e42bad2",
        "cursor": {
          "ref": "83b2f197-7bd9-4aa7-bc00-bb01b3bb465a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b41429ad-9146-4cb7-8fae-26db55b5dacb"
        },
        "item": {
          "id": "5baf078d-3dce-4a8d-8a27-15ea5e42bad2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f69006c5-a5db-4a26-8713-959c3bc5eea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baf078d-3dce-4a8d-8a27-15ea5e42bad2",
        "cursor": {
          "ref": "83b2f197-7bd9-4aa7-bc00-bb01b3bb465a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b41429ad-9146-4cb7-8fae-26db55b5dacb"
        },
        "item": {
          "id": "5baf078d-3dce-4a8d-8a27-15ea5e42bad2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f69006c5-a5db-4a26-8713-959c3bc5eea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c3026c-88ee-4cba-b6b3-975dd302103a",
        "cursor": {
          "ref": "1d28a53e-7717-45b7-8c61-aacfe2d02eec",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c39c72a2-7bf8-49db-bd86-389976ae1b94"
        },
        "item": {
          "id": "19c3026c-88ee-4cba-b6b3-975dd302103a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "778c863b-c7a0-4e43-94b3-9bf5d5d935a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c3026c-88ee-4cba-b6b3-975dd302103a",
        "cursor": {
          "ref": "1d28a53e-7717-45b7-8c61-aacfe2d02eec",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c39c72a2-7bf8-49db-bd86-389976ae1b94"
        },
        "item": {
          "id": "19c3026c-88ee-4cba-b6b3-975dd302103a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "778c863b-c7a0-4e43-94b3-9bf5d5d935a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb95eb1-4f18-4b53-a657-2cde52551b69",
        "cursor": {
          "ref": "9e736f55-90ce-470e-80c4-c4250042d068",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0d9bb39d-2ba3-4f57-a7eb-e66b364ea4e8"
        },
        "item": {
          "id": "ccb95eb1-4f18-4b53-a657-2cde52551b69",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7a485b71-e731-4021-88ef-5f54232059f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb95eb1-4f18-4b53-a657-2cde52551b69",
        "cursor": {
          "ref": "9e736f55-90ce-470e-80c4-c4250042d068",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0d9bb39d-2ba3-4f57-a7eb-e66b364ea4e8"
        },
        "item": {
          "id": "ccb95eb1-4f18-4b53-a657-2cde52551b69",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7a485b71-e731-4021-88ef-5f54232059f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa07c0c4-9907-42a4-b92f-168078bb8e35",
        "cursor": {
          "ref": "c2924635-8e1f-4730-a3f4-b6ffb0880dbb",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3f33ffa4-18c6-40a6-8f20-1071b6acf58d"
        },
        "item": {
          "id": "aa07c0c4-9907-42a4-b92f-168078bb8e35",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0a2bbc76-8946-47bf-a651-23124810240e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa07c0c4-9907-42a4-b92f-168078bb8e35",
        "cursor": {
          "ref": "c2924635-8e1f-4730-a3f4-b6ffb0880dbb",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3f33ffa4-18c6-40a6-8f20-1071b6acf58d"
        },
        "item": {
          "id": "aa07c0c4-9907-42a4-b92f-168078bb8e35",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0a2bbc76-8946-47bf-a651-23124810240e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf14176-b953-4cc5-8753-52e2eec3eeba",
        "cursor": {
          "ref": "5a8e5ea5-d43b-4ebb-b368-528fba8df675",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c60b55cc-0d86-4b88-92aa-e90414f48a51"
        },
        "item": {
          "id": "fdf14176-b953-4cc5-8753-52e2eec3eeba",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ba49c2b5-b2aa-4bb1-bf1c-101584775b66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf14176-b953-4cc5-8753-52e2eec3eeba",
        "cursor": {
          "ref": "5a8e5ea5-d43b-4ebb-b368-528fba8df675",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c60b55cc-0d86-4b88-92aa-e90414f48a51"
        },
        "item": {
          "id": "fdf14176-b953-4cc5-8753-52e2eec3eeba",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ba49c2b5-b2aa-4bb1-bf1c-101584775b66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc67c0c-a420-49d4-bb56-6cb468ab26e5",
        "cursor": {
          "ref": "c27357e8-40cc-406e-9e0e-a4a8a0a04957",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "22151e94-6d26-49cc-aecd-62d43b809797"
        },
        "item": {
          "id": "2cc67c0c-a420-49d4-bb56-6cb468ab26e5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b0c8b9c7-b7ad-47fe-810e-2b7723b519e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc67c0c-a420-49d4-bb56-6cb468ab26e5",
        "cursor": {
          "ref": "c27357e8-40cc-406e-9e0e-a4a8a0a04957",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "22151e94-6d26-49cc-aecd-62d43b809797"
        },
        "item": {
          "id": "2cc67c0c-a420-49d4-bb56-6cb468ab26e5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b0c8b9c7-b7ad-47fe-810e-2b7723b519e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92221f36-a11e-4312-b284-b25d54701fa5",
        "cursor": {
          "ref": "e2fcec2b-4ee9-4618-b622-e2dcac494944",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "633dcb08-3799-479b-a08a-868b2e42a3bb"
        },
        "item": {
          "id": "92221f36-a11e-4312-b284-b25d54701fa5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ad3d3527-5a0c-4e79-adbe-18b860ea73a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92221f36-a11e-4312-b284-b25d54701fa5",
        "cursor": {
          "ref": "e2fcec2b-4ee9-4618-b622-e2dcac494944",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "633dcb08-3799-479b-a08a-868b2e42a3bb"
        },
        "item": {
          "id": "92221f36-a11e-4312-b284-b25d54701fa5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ad3d3527-5a0c-4e79-adbe-18b860ea73a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5befd8-64a1-45b0-ad53-f178448c80b4",
        "cursor": {
          "ref": "c346abf2-3381-405c-a17c-e7a52bf9a1cc",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7f11beb6-5013-46f2-9f57-be5457b0c8c1"
        },
        "item": {
          "id": "da5befd8-64a1-45b0-ad53-f178448c80b4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "10439541-2f96-4cbe-b10c-74589a3177c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5befd8-64a1-45b0-ad53-f178448c80b4",
        "cursor": {
          "ref": "c346abf2-3381-405c-a17c-e7a52bf9a1cc",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7f11beb6-5013-46f2-9f57-be5457b0c8c1"
        },
        "item": {
          "id": "da5befd8-64a1-45b0-ad53-f178448c80b4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "10439541-2f96-4cbe-b10c-74589a3177c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41cc266-84e1-4882-9b1c-08d9e01b4c5b",
        "cursor": {
          "ref": "f476eade-891b-494d-9048-ab65484a8176",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b41e7247-f152-4015-952c-25927fea47db"
        },
        "item": {
          "id": "b41cc266-84e1-4882-9b1c-08d9e01b4c5b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0010ddf1-0574-4ad4-a369-77ba5710a7bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41cc266-84e1-4882-9b1c-08d9e01b4c5b",
        "cursor": {
          "ref": "f476eade-891b-494d-9048-ab65484a8176",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b41e7247-f152-4015-952c-25927fea47db"
        },
        "item": {
          "id": "b41cc266-84e1-4882-9b1c-08d9e01b4c5b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0010ddf1-0574-4ad4-a369-77ba5710a7bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c7ae74-c4d3-4b3a-b370-354e2d19f5c4",
        "cursor": {
          "ref": "51b487b9-34b9-4d8f-bac5-f8cda26b5e5e",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3e4e3d3b-53ee-4205-b4b6-3677447f97c8"
        },
        "item": {
          "id": "78c7ae74-c4d3-4b3a-b370-354e2d19f5c4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "68960ce0-863e-4f40-a2e9-5e8adbee2227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c7ae74-c4d3-4b3a-b370-354e2d19f5c4",
        "cursor": {
          "ref": "51b487b9-34b9-4d8f-bac5-f8cda26b5e5e",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3e4e3d3b-53ee-4205-b4b6-3677447f97c8"
        },
        "item": {
          "id": "78c7ae74-c4d3-4b3a-b370-354e2d19f5c4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "68960ce0-863e-4f40-a2e9-5e8adbee2227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c2e960-467e-4dad-a38d-1152b257a0e5",
        "cursor": {
          "ref": "330d9599-a6ab-4e80-9ca3-1dc91836e40c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4a7750ac-f194-490e-ab8a-caebe6601373"
        },
        "item": {
          "id": "29c2e960-467e-4dad-a38d-1152b257a0e5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9e4e5a76-610a-43fe-8574-3c4e6c58d0b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c2e960-467e-4dad-a38d-1152b257a0e5",
        "cursor": {
          "ref": "330d9599-a6ab-4e80-9ca3-1dc91836e40c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4a7750ac-f194-490e-ab8a-caebe6601373"
        },
        "item": {
          "id": "29c2e960-467e-4dad-a38d-1152b257a0e5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9e4e5a76-610a-43fe-8574-3c4e6c58d0b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074a657e-aa19-44bb-a8db-f92f8108278e",
        "cursor": {
          "ref": "cdc96dde-6345-481d-984a-1f9e00695b3d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "264efb6a-4bec-450a-92ab-12e066e57938"
        },
        "item": {
          "id": "074a657e-aa19-44bb-a8db-f92f8108278e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "da90e859-88ac-4078-9421-34a97ae27271",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074a657e-aa19-44bb-a8db-f92f8108278e",
        "cursor": {
          "ref": "cdc96dde-6345-481d-984a-1f9e00695b3d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "264efb6a-4bec-450a-92ab-12e066e57938"
        },
        "item": {
          "id": "074a657e-aa19-44bb-a8db-f92f8108278e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "da90e859-88ac-4078-9421-34a97ae27271",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc44bf1-dae9-4fc3-9cf5-cfe43bc24a7f",
        "cursor": {
          "ref": "763a420e-b39e-4fe9-951c-e87298e3f43a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a7957131-0676-44ca-8103-33ae58e39735"
        },
        "item": {
          "id": "9bc44bf1-dae9-4fc3-9cf5-cfe43bc24a7f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9d9986a9-7df3-4998-8ef7-d1a8b80eebf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc44bf1-dae9-4fc3-9cf5-cfe43bc24a7f",
        "cursor": {
          "ref": "763a420e-b39e-4fe9-951c-e87298e3f43a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a7957131-0676-44ca-8103-33ae58e39735"
        },
        "item": {
          "id": "9bc44bf1-dae9-4fc3-9cf5-cfe43bc24a7f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9d9986a9-7df3-4998-8ef7-d1a8b80eebf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8458b1cb-8e28-45bf-b575-57eba86ac543",
        "cursor": {
          "ref": "82bb34d4-f2a0-4bc6-b764-b9094245315c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "66b51ec0-0f35-4d3a-91ec-733504d911f7"
        },
        "item": {
          "id": "8458b1cb-8e28-45bf-b575-57eba86ac543",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d78c2040-1fa7-4196-bd89-023366fca7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8458b1cb-8e28-45bf-b575-57eba86ac543",
        "cursor": {
          "ref": "82bb34d4-f2a0-4bc6-b764-b9094245315c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "66b51ec0-0f35-4d3a-91ec-733504d911f7"
        },
        "item": {
          "id": "8458b1cb-8e28-45bf-b575-57eba86ac543",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d78c2040-1fa7-4196-bd89-023366fca7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77a6ff7-88f4-41fe-9a89-0bec31976357",
        "cursor": {
          "ref": "3386bee7-b451-4633-9450-962dd90fed1d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1c2590a9-76ee-44f3-98a7-420a44711edb"
        },
        "item": {
          "id": "f77a6ff7-88f4-41fe-9a89-0bec31976357",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a256131b-12df-494e-bd6d-173c7eae3f52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77a6ff7-88f4-41fe-9a89-0bec31976357",
        "cursor": {
          "ref": "3386bee7-b451-4633-9450-962dd90fed1d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1c2590a9-76ee-44f3-98a7-420a44711edb"
        },
        "item": {
          "id": "f77a6ff7-88f4-41fe-9a89-0bec31976357",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a256131b-12df-494e-bd6d-173c7eae3f52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589eb618-dd25-496f-8577-ed3ad3e6610a",
        "cursor": {
          "ref": "3f440dd3-f3fb-4691-9343-8b26ff41d21b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "058312c4-d1ad-4069-bc2d-562cc926f9ff"
        },
        "item": {
          "id": "589eb618-dd25-496f-8577-ed3ad3e6610a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e1987749-cf01-4682-8775-eb5c9bf46a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589eb618-dd25-496f-8577-ed3ad3e6610a",
        "cursor": {
          "ref": "3f440dd3-f3fb-4691-9343-8b26ff41d21b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "058312c4-d1ad-4069-bc2d-562cc926f9ff"
        },
        "item": {
          "id": "589eb618-dd25-496f-8577-ed3ad3e6610a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e1987749-cf01-4682-8775-eb5c9bf46a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb057069-5a4e-4774-9fdd-5546d8aa00c0",
        "cursor": {
          "ref": "264dfbcb-3960-41a9-ba67-1aa8a2b14c33",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5420a002-6c43-4c17-984e-8cfc28702fce"
        },
        "item": {
          "id": "cb057069-5a4e-4774-9fdd-5546d8aa00c0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b71fc435-49df-4842-86cf-790223a55c92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb057069-5a4e-4774-9fdd-5546d8aa00c0",
        "cursor": {
          "ref": "264dfbcb-3960-41a9-ba67-1aa8a2b14c33",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5420a002-6c43-4c17-984e-8cfc28702fce"
        },
        "item": {
          "id": "cb057069-5a4e-4774-9fdd-5546d8aa00c0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b71fc435-49df-4842-86cf-790223a55c92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f797832-a1b1-48cb-aa04-a4b064d8cc7a",
        "cursor": {
          "ref": "044a63fe-10d1-4c8e-9fa6-0f843c082fe6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "235c120a-3586-4d83-aa68-c1089ae907c3"
        },
        "item": {
          "id": "5f797832-a1b1-48cb-aa04-a4b064d8cc7a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "869e77c3-750c-46ff-a2c9-0ad87dd800c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f797832-a1b1-48cb-aa04-a4b064d8cc7a",
        "cursor": {
          "ref": "044a63fe-10d1-4c8e-9fa6-0f843c082fe6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "235c120a-3586-4d83-aa68-c1089ae907c3"
        },
        "item": {
          "id": "5f797832-a1b1-48cb-aa04-a4b064d8cc7a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "869e77c3-750c-46ff-a2c9-0ad87dd800c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c157c7-60e7-4e48-bc3f-879aecd881a8",
        "cursor": {
          "ref": "9934a389-41c9-4e7c-9464-967f8abe4ebc",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "313c6117-bf1f-4394-9e17-a08dca3d6e3f"
        },
        "item": {
          "id": "19c157c7-60e7-4e48-bc3f-879aecd881a8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e81effd6-54d5-4ca5-bef1-caf68f7b8dca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c157c7-60e7-4e48-bc3f-879aecd881a8",
        "cursor": {
          "ref": "9934a389-41c9-4e7c-9464-967f8abe4ebc",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "313c6117-bf1f-4394-9e17-a08dca3d6e3f"
        },
        "item": {
          "id": "19c157c7-60e7-4e48-bc3f-879aecd881a8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e81effd6-54d5-4ca5-bef1-caf68f7b8dca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da236b3a-9d58-4b55-9df4-dbe54807593b",
        "cursor": {
          "ref": "097b568c-c506-42fd-9e78-810fc4d27957",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e5906d2e-651a-4f1b-994e-2d0a3cf179af"
        },
        "item": {
          "id": "da236b3a-9d58-4b55-9df4-dbe54807593b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9e97b2ba-64c6-42d4-abca-3479b06ce781",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da236b3a-9d58-4b55-9df4-dbe54807593b",
        "cursor": {
          "ref": "097b568c-c506-42fd-9e78-810fc4d27957",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e5906d2e-651a-4f1b-994e-2d0a3cf179af"
        },
        "item": {
          "id": "da236b3a-9d58-4b55-9df4-dbe54807593b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9e97b2ba-64c6-42d4-abca-3479b06ce781",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cc21ee-b9bc-40ae-9f96-ed8378f31408",
        "cursor": {
          "ref": "888ff61a-75f8-43f0-b994-bd33f74c939e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "46e979f8-36eb-4e7b-ba02-4d493b5bff77"
        },
        "item": {
          "id": "19cc21ee-b9bc-40ae-9f96-ed8378f31408",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7bc9794c-1ffa-49a2-adb2-da0313a8280d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cc21ee-b9bc-40ae-9f96-ed8378f31408",
        "cursor": {
          "ref": "888ff61a-75f8-43f0-b994-bd33f74c939e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "46e979f8-36eb-4e7b-ba02-4d493b5bff77"
        },
        "item": {
          "id": "19cc21ee-b9bc-40ae-9f96-ed8378f31408",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7bc9794c-1ffa-49a2-adb2-da0313a8280d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511b71da-d4af-4a87-8bfa-2332cfe4e781",
        "cursor": {
          "ref": "0f1b1082-4501-4d10-8c88-c0c2ad4d5228",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "713b814a-9228-4820-90f2-c5516fcc8488"
        },
        "item": {
          "id": "511b71da-d4af-4a87-8bfa-2332cfe4e781",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ff9957b9-6ac1-48a6-8ce8-c4d0bd79b45a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511b71da-d4af-4a87-8bfa-2332cfe4e781",
        "cursor": {
          "ref": "0f1b1082-4501-4d10-8c88-c0c2ad4d5228",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "713b814a-9228-4820-90f2-c5516fcc8488"
        },
        "item": {
          "id": "511b71da-d4af-4a87-8bfa-2332cfe4e781",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ff9957b9-6ac1-48a6-8ce8-c4d0bd79b45a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9907dc-8b85-4ec0-aa6c-4cb9eec7c20b",
        "cursor": {
          "ref": "c971fe23-9a1f-4950-a13a-b9fc09c85922",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9e5bd492-a738-4782-be01-a5b246164acb"
        },
        "item": {
          "id": "df9907dc-8b85-4ec0-aa6c-4cb9eec7c20b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "30e9f913-8e1e-4d3b-be17-6b1303530714",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9907dc-8b85-4ec0-aa6c-4cb9eec7c20b",
        "cursor": {
          "ref": "c971fe23-9a1f-4950-a13a-b9fc09c85922",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9e5bd492-a738-4782-be01-a5b246164acb"
        },
        "item": {
          "id": "df9907dc-8b85-4ec0-aa6c-4cb9eec7c20b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "30e9f913-8e1e-4d3b-be17-6b1303530714",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e000652e-7c43-4b9f-ad4c-3d5aae09248d",
        "cursor": {
          "ref": "4d8a02a1-8021-46c5-9d79-bc37ebc033de",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "30984992-946d-4f08-a92e-253b349cd6d1"
        },
        "item": {
          "id": "e000652e-7c43-4b9f-ad4c-3d5aae09248d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cc06407a-4026-4f33-af64-fb108907e4ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e000652e-7c43-4b9f-ad4c-3d5aae09248d",
        "cursor": {
          "ref": "4d8a02a1-8021-46c5-9d79-bc37ebc033de",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "30984992-946d-4f08-a92e-253b349cd6d1"
        },
        "item": {
          "id": "e000652e-7c43-4b9f-ad4c-3d5aae09248d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cc06407a-4026-4f33-af64-fb108907e4ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3674eb5d-e10e-4e41-9178-e3b43d11b824",
        "cursor": {
          "ref": "20c8762f-d985-49f1-84d9-61f8fc9c1296",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e715ace9-b7eb-44a0-98fa-6c74882e7527"
        },
        "item": {
          "id": "3674eb5d-e10e-4e41-9178-e3b43d11b824",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "53b1bdd0-83ff-4ec2-a936-a5e63362d7c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3674eb5d-e10e-4e41-9178-e3b43d11b824",
        "cursor": {
          "ref": "20c8762f-d985-49f1-84d9-61f8fc9c1296",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e715ace9-b7eb-44a0-98fa-6c74882e7527"
        },
        "item": {
          "id": "3674eb5d-e10e-4e41-9178-e3b43d11b824",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "53b1bdd0-83ff-4ec2-a936-a5e63362d7c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e53221f-47f7-47e9-8684-3bab23a06d7a",
        "cursor": {
          "ref": "5fac302b-2749-4bb3-83a9-7a4463e86818",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0743da9c-bccc-4b9d-99a2-c70af759fbc3"
        },
        "item": {
          "id": "2e53221f-47f7-47e9-8684-3bab23a06d7a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "704b1c36-cbda-4b5f-92aa-25c408154c99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e53221f-47f7-47e9-8684-3bab23a06d7a",
        "cursor": {
          "ref": "5fac302b-2749-4bb3-83a9-7a4463e86818",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0743da9c-bccc-4b9d-99a2-c70af759fbc3"
        },
        "item": {
          "id": "2e53221f-47f7-47e9-8684-3bab23a06d7a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "704b1c36-cbda-4b5f-92aa-25c408154c99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d163e279-56f5-4095-9260-355f3f01807b",
        "cursor": {
          "ref": "358562d6-67f3-4847-b238-f6574c6f0e6f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "035ea0e3-c0e4-45bc-82a2-80a3bf8ece55"
        },
        "item": {
          "id": "d163e279-56f5-4095-9260-355f3f01807b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5a5f0378-1097-4747-939c-7de25667470a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d163e279-56f5-4095-9260-355f3f01807b",
        "cursor": {
          "ref": "358562d6-67f3-4847-b238-f6574c6f0e6f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "035ea0e3-c0e4-45bc-82a2-80a3bf8ece55"
        },
        "item": {
          "id": "d163e279-56f5-4095-9260-355f3f01807b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5a5f0378-1097-4747-939c-7de25667470a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2538b9d-7c9a-465f-9ab6-47aba8f4e989",
        "cursor": {
          "ref": "1ddbc309-0e51-4997-bc8e-4fda1fd282fa",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e1e8be84-1dfd-44ad-922f-bdb9bb126600"
        },
        "item": {
          "id": "c2538b9d-7c9a-465f-9ab6-47aba8f4e989",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "53d80452-5917-4c79-b922-3604a06f50a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2538b9d-7c9a-465f-9ab6-47aba8f4e989",
        "cursor": {
          "ref": "1ddbc309-0e51-4997-bc8e-4fda1fd282fa",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e1e8be84-1dfd-44ad-922f-bdb9bb126600"
        },
        "item": {
          "id": "c2538b9d-7c9a-465f-9ab6-47aba8f4e989",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "53d80452-5917-4c79-b922-3604a06f50a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062f73de-f266-4a98-a13e-3d96c90fefde",
        "cursor": {
          "ref": "1983b406-81ac-4108-b6fb-518acaf5f2b4",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7b9630d5-de05-45fa-9ab7-ca58e92932f3"
        },
        "item": {
          "id": "062f73de-f266-4a98-a13e-3d96c90fefde",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a87b172c-7ce6-4b31-a2a4-101a4930e915",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062f73de-f266-4a98-a13e-3d96c90fefde",
        "cursor": {
          "ref": "1983b406-81ac-4108-b6fb-518acaf5f2b4",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7b9630d5-de05-45fa-9ab7-ca58e92932f3"
        },
        "item": {
          "id": "062f73de-f266-4a98-a13e-3d96c90fefde",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a87b172c-7ce6-4b31-a2a4-101a4930e915",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684e8a33-ebf2-43b4-92bd-059d3f92da98",
        "cursor": {
          "ref": "0915710c-f078-4155-8825-c2afe9d9fd9b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "463c5393-cccd-42b1-b1d4-5e38264cecfd"
        },
        "item": {
          "id": "684e8a33-ebf2-43b4-92bd-059d3f92da98",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ab265249-9f54-45b6-9fda-f594d143625e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "684e8a33-ebf2-43b4-92bd-059d3f92da98",
        "cursor": {
          "ref": "0915710c-f078-4155-8825-c2afe9d9fd9b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "463c5393-cccd-42b1-b1d4-5e38264cecfd"
        },
        "item": {
          "id": "684e8a33-ebf2-43b4-92bd-059d3f92da98",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ab265249-9f54-45b6-9fda-f594d143625e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "23d2fbdb-f14f-4acd-ae0e-45ea869fb8ad",
        "cursor": {
          "ref": "cdde4233-d9c1-4b37-aaaf-4e51fed08cc4",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3ad1e56e-daf9-4d2a-b1d0-d117622f7547"
        },
        "item": {
          "id": "23d2fbdb-f14f-4acd-ae0e-45ea869fb8ad",
          "name": "credentials_issue"
        },
        "response": {
          "id": "baddd934-f2df-47f4-a9c4-1e23278cd460",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "23d2fbdb-f14f-4acd-ae0e-45ea869fb8ad",
        "cursor": {
          "ref": "cdde4233-d9c1-4b37-aaaf-4e51fed08cc4",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3ad1e56e-daf9-4d2a-b1d0-d117622f7547"
        },
        "item": {
          "id": "23d2fbdb-f14f-4acd-ae0e-45ea869fb8ad",
          "name": "credentials_issue"
        },
        "response": {
          "id": "baddd934-f2df-47f4-a9c4-1e23278cd460",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "9993bbdb-f42d-471f-8593-3ac044a5fc15",
        "cursor": {
          "ref": "969e69bb-c164-4d19-8f07-604697f4e7ea",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e9600650-3afd-4bdd-859f-4da04f5b112b"
        },
        "item": {
          "id": "9993bbdb-f42d-471f-8593-3ac044a5fc15",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "400f39b2-0635-4d10-8fc1-2066ae989bd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "9993bbdb-f42d-471f-8593-3ac044a5fc15",
        "cursor": {
          "ref": "969e69bb-c164-4d19-8f07-604697f4e7ea",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e9600650-3afd-4bdd-859f-4da04f5b112b"
        },
        "item": {
          "id": "9993bbdb-f42d-471f-8593-3ac044a5fc15",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "400f39b2-0635-4d10-8fc1-2066ae989bd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "ca8c5e55-2447-406f-973d-be7f6d3b4faa",
        "cursor": {
          "ref": "75a4195b-ff06-476c-898d-36a85aa54ec8",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "db06f57a-7c63-4007-8dc0-0a219a73952d"
        },
        "item": {
          "id": "ca8c5e55-2447-406f-973d-be7f6d3b4faa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ac13bfba-e657-45f5-8a13-90bf08d5f16b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ca8c5e55-2447-406f-973d-be7f6d3b4faa",
        "cursor": {
          "ref": "75a4195b-ff06-476c-898d-36a85aa54ec8",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "db06f57a-7c63-4007-8dc0-0a219a73952d"
        },
        "item": {
          "id": "ca8c5e55-2447-406f-973d-be7f6d3b4faa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ac13bfba-e657-45f5-8a13-90bf08d5f16b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "abda0c22-5ba9-4e6c-a2e6-116a18ca437b",
        "cursor": {
          "ref": "234708f2-1f2a-4ed8-b6b4-87857a6396a7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "365198c9-0780-4cbf-8324-a87280196721"
        },
        "item": {
          "id": "abda0c22-5ba9-4e6c-a2e6-116a18ca437b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b22af357-a4c8-4142-bad0-b53b2b96391f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "abda0c22-5ba9-4e6c-a2e6-116a18ca437b",
        "cursor": {
          "ref": "234708f2-1f2a-4ed8-b6b4-87857a6396a7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "365198c9-0780-4cbf-8324-a87280196721"
        },
        "item": {
          "id": "abda0c22-5ba9-4e6c-a2e6-116a18ca437b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b22af357-a4c8-4142-bad0-b53b2b96391f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "f270fa6d-6d53-4c92-b3ef-839bed323f9f",
        "cursor": {
          "ref": "bc975546-2795-48ca-9f1e-78469f154689",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6bd95453-fcec-4bb3-8fd3-000af8553982"
        },
        "item": {
          "id": "f270fa6d-6d53-4c92-b3ef-839bed323f9f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d4bd5f7c-4b4b-4571-a218-32ceaa6aa9f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f270fa6d-6d53-4c92-b3ef-839bed323f9f",
        "cursor": {
          "ref": "bc975546-2795-48ca-9f1e-78469f154689",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6bd95453-fcec-4bb3-8fd3-000af8553982"
        },
        "item": {
          "id": "f270fa6d-6d53-4c92-b3ef-839bed323f9f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d4bd5f7c-4b4b-4571-a218-32ceaa6aa9f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2b4d2f84-1245-471d-82b5-3cd960a7a102",
        "cursor": {
          "ref": "add0ead5-8a93-41ee-b8c8-5856abf637bc",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f7d98359-85ba-4ca9-ae5f-9f956efbf813"
        },
        "item": {
          "id": "2b4d2f84-1245-471d-82b5-3cd960a7a102",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0134f5f0-7250-4ed9-a622-4835b1a5a97b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "2b4d2f84-1245-471d-82b5-3cd960a7a102",
        "cursor": {
          "ref": "add0ead5-8a93-41ee-b8c8-5856abf637bc",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f7d98359-85ba-4ca9-ae5f-9f956efbf813"
        },
        "item": {
          "id": "2b4d2f84-1245-471d-82b5-3cd960a7a102",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0134f5f0-7250-4ed9-a622-4835b1a5a97b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "b5c18e82-3240-4fcb-9d0b-55a5c2adaa44",
        "cursor": {
          "ref": "f3df678e-d367-401a-8dc8-4cbfee54829f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4a066eca-864d-45de-a499-9e7c2c086a85"
        },
        "item": {
          "id": "b5c18e82-3240-4fcb-9d0b-55a5c2adaa44",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4d7ed266-d8e9-4fe4-8392-07f963396096",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c18e82-3240-4fcb-9d0b-55a5c2adaa44",
        "cursor": {
          "ref": "f3df678e-d367-401a-8dc8-4cbfee54829f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4a066eca-864d-45de-a499-9e7c2c086a85"
        },
        "item": {
          "id": "b5c18e82-3240-4fcb-9d0b-55a5c2adaa44",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4d7ed266-d8e9-4fe4-8392-07f963396096",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d616d41-5e00-45f6-8a8e-f3fc5b68f88f",
        "cursor": {
          "ref": "4da7b80a-7ba6-4f8c-97d7-e7344282bda6",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "de8f6f22-da8a-4f7d-8885-6b2df1c468b5"
        },
        "item": {
          "id": "4d616d41-5e00-45f6-8a8e-f3fc5b68f88f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a3f4f4b5-7887-47e8-9684-9cfda88a9b6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d616d41-5e00-45f6-8a8e-f3fc5b68f88f",
        "cursor": {
          "ref": "4da7b80a-7ba6-4f8c-97d7-e7344282bda6",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "de8f6f22-da8a-4f7d-8885-6b2df1c468b5"
        },
        "item": {
          "id": "4d616d41-5e00-45f6-8a8e-f3fc5b68f88f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a3f4f4b5-7887-47e8-9684-9cfda88a9b6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c848455-b363-46c8-a992-285747c7d541",
        "cursor": {
          "ref": "30b00c68-055b-4c32-bc66-99399fa6b2f2",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "122d83bb-977b-4638-9d25-86f353d15313"
        },
        "item": {
          "id": "9c848455-b363-46c8-a992-285747c7d541",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8e5321e0-3038-4ab6-8bd6-25d9cc6bb86e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c848455-b363-46c8-a992-285747c7d541",
        "cursor": {
          "ref": "30b00c68-055b-4c32-bc66-99399fa6b2f2",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "122d83bb-977b-4638-9d25-86f353d15313"
        },
        "item": {
          "id": "9c848455-b363-46c8-a992-285747c7d541",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8e5321e0-3038-4ab6-8bd6-25d9cc6bb86e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4426d3-7a10-4c9b-b039-e32e858b36fb",
        "cursor": {
          "ref": "4e85786b-60b1-4ed1-b33d-b5ef64b80c20",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5eab58b9-d684-4a8f-8c6a-a50e6f8a271c"
        },
        "item": {
          "id": "fe4426d3-7a10-4c9b-b039-e32e858b36fb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "faac2d0d-896e-4dea-b494-f2cea3901763",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4426d3-7a10-4c9b-b039-e32e858b36fb",
        "cursor": {
          "ref": "4e85786b-60b1-4ed1-b33d-b5ef64b80c20",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5eab58b9-d684-4a8f-8c6a-a50e6f8a271c"
        },
        "item": {
          "id": "fe4426d3-7a10-4c9b-b039-e32e858b36fb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "faac2d0d-896e-4dea-b494-f2cea3901763",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ff4364-475a-4d12-bcd9-2a1a2bb2d972",
        "cursor": {
          "ref": "0971d369-ed2e-46ff-9d2b-c3399029338b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7b167078-37c1-4370-903b-ae26aeb30a61"
        },
        "item": {
          "id": "c7ff4364-475a-4d12-bcd9-2a1a2bb2d972",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4f2859a6-1f5f-417c-a174-3375c4a87322",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ff4364-475a-4d12-bcd9-2a1a2bb2d972",
        "cursor": {
          "ref": "0971d369-ed2e-46ff-9d2b-c3399029338b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7b167078-37c1-4370-903b-ae26aeb30a61"
        },
        "item": {
          "id": "c7ff4364-475a-4d12-bcd9-2a1a2bb2d972",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4f2859a6-1f5f-417c-a174-3375c4a87322",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acfa7a4-f1c3-4728-a351-f7baf167bd40",
        "cursor": {
          "ref": "58f5206f-8d02-41e5-bdd0-0c268ad487fe",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3422acdf-03b5-4c6d-9879-30fee66a2a02"
        },
        "item": {
          "id": "3acfa7a4-f1c3-4728-a351-f7baf167bd40",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8d54e80a-a034-4194-b3a0-7b2aef925f8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acfa7a4-f1c3-4728-a351-f7baf167bd40",
        "cursor": {
          "ref": "58f5206f-8d02-41e5-bdd0-0c268ad487fe",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3422acdf-03b5-4c6d-9879-30fee66a2a02"
        },
        "item": {
          "id": "3acfa7a4-f1c3-4728-a351-f7baf167bd40",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8d54e80a-a034-4194-b3a0-7b2aef925f8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5969ef-03bc-42db-a6da-1a7c2bd78b32",
        "cursor": {
          "ref": "8f605db3-26c5-4d86-91bf-069a8dd78ae9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b02ee038-7833-4ab8-84d7-1750776f5760"
        },
        "item": {
          "id": "ff5969ef-03bc-42db-a6da-1a7c2bd78b32",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bc5c2eb6-9140-4c97-b7fe-c5882c691acf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5969ef-03bc-42db-a6da-1a7c2bd78b32",
        "cursor": {
          "ref": "8f605db3-26c5-4d86-91bf-069a8dd78ae9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b02ee038-7833-4ab8-84d7-1750776f5760"
        },
        "item": {
          "id": "ff5969ef-03bc-42db-a6da-1a7c2bd78b32",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bc5c2eb6-9140-4c97-b7fe-c5882c691acf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869d2f7b-1e78-4f64-acab-fe44e41bb905",
        "cursor": {
          "ref": "21d51e05-fcc6-4c2a-af1c-52efc9a8b7fc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "92154766-f037-40e7-89a9-7b2db7bad294"
        },
        "item": {
          "id": "869d2f7b-1e78-4f64-acab-fe44e41bb905",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "acacf396-c97f-4aa7-9064-83e532630301",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869d2f7b-1e78-4f64-acab-fe44e41bb905",
        "cursor": {
          "ref": "21d51e05-fcc6-4c2a-af1c-52efc9a8b7fc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "92154766-f037-40e7-89a9-7b2db7bad294"
        },
        "item": {
          "id": "869d2f7b-1e78-4f64-acab-fe44e41bb905",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "acacf396-c97f-4aa7-9064-83e532630301",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfdefff-80f2-412c-96b2-a68d8bfeb3f1",
        "cursor": {
          "ref": "79ba59f0-93cb-47fc-9400-129c62677136",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ba9a5e9d-6746-4814-8c73-d88ddeaae675"
        },
        "item": {
          "id": "7bfdefff-80f2-412c-96b2-a68d8bfeb3f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e074e03d-e3fd-44b4-85db-b601024befc8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfdefff-80f2-412c-96b2-a68d8bfeb3f1",
        "cursor": {
          "ref": "79ba59f0-93cb-47fc-9400-129c62677136",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ba9a5e9d-6746-4814-8c73-d88ddeaae675"
        },
        "item": {
          "id": "7bfdefff-80f2-412c-96b2-a68d8bfeb3f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e074e03d-e3fd-44b4-85db-b601024befc8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d2dbaa-a206-4dbf-8c7f-e45039044bd2",
        "cursor": {
          "ref": "c98eeaf0-443d-49a0-883c-3fe1a439e806",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d8a89482-98bf-4c3e-a034-b3a0a548ce1b"
        },
        "item": {
          "id": "25d2dbaa-a206-4dbf-8c7f-e45039044bd2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "52e12e0f-5607-4fe7-a4f9-1b7a7f1a423e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d2dbaa-a206-4dbf-8c7f-e45039044bd2",
        "cursor": {
          "ref": "c98eeaf0-443d-49a0-883c-3fe1a439e806",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d8a89482-98bf-4c3e-a034-b3a0a548ce1b"
        },
        "item": {
          "id": "25d2dbaa-a206-4dbf-8c7f-e45039044bd2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "52e12e0f-5607-4fe7-a4f9-1b7a7f1a423e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095c08a4-c45e-4d1a-a857-9b4777d2ebec",
        "cursor": {
          "ref": "c8e0a2fb-8b9f-4082-b289-3fbfe12e62bd",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9fdb9bd4-81a0-4120-bf9d-87e9b650318c"
        },
        "item": {
          "id": "095c08a4-c45e-4d1a-a857-9b4777d2ebec",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6a92702f-283b-4186-a0f1-39714a708b03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095c08a4-c45e-4d1a-a857-9b4777d2ebec",
        "cursor": {
          "ref": "c8e0a2fb-8b9f-4082-b289-3fbfe12e62bd",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9fdb9bd4-81a0-4120-bf9d-87e9b650318c"
        },
        "item": {
          "id": "095c08a4-c45e-4d1a-a857-9b4777d2ebec",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6a92702f-283b-4186-a0f1-39714a708b03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df52a072-d5dc-4260-ba49-7bcc935cfc49",
        "cursor": {
          "ref": "c11a21d9-c2c6-450d-9f90-b3aaa9f8d393",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1fad1ea2-c2f6-44c1-80a9-b3c528a8dcc1"
        },
        "item": {
          "id": "df52a072-d5dc-4260-ba49-7bcc935cfc49",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7796ec8a-dbec-4431-bd48-712a1192f3dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df52a072-d5dc-4260-ba49-7bcc935cfc49",
        "cursor": {
          "ref": "c11a21d9-c2c6-450d-9f90-b3aaa9f8d393",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1fad1ea2-c2f6-44c1-80a9-b3c528a8dcc1"
        },
        "item": {
          "id": "df52a072-d5dc-4260-ba49-7bcc935cfc49",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7796ec8a-dbec-4431-bd48-712a1192f3dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e85bdc-4c0d-4dc4-84d9-5275539256b3",
        "cursor": {
          "ref": "93913f90-127d-4734-b4c3-e800590a900a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "dbb4cb3f-455f-405d-be20-5aa8f9e0e0df"
        },
        "item": {
          "id": "20e85bdc-4c0d-4dc4-84d9-5275539256b3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "434fdcdc-f358-4885-9dce-6c8189a69d56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e85bdc-4c0d-4dc4-84d9-5275539256b3",
        "cursor": {
          "ref": "93913f90-127d-4734-b4c3-e800590a900a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "dbb4cb3f-455f-405d-be20-5aa8f9e0e0df"
        },
        "item": {
          "id": "20e85bdc-4c0d-4dc4-84d9-5275539256b3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "434fdcdc-f358-4885-9dce-6c8189a69d56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6401a25c-f980-411f-ab54-3b906abbc1d7",
        "cursor": {
          "ref": "f8c3e167-3653-4d8c-bdd2-da1541da145d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a0b81397-d79e-495a-957b-bd1adf90206e"
        },
        "item": {
          "id": "6401a25c-f980-411f-ab54-3b906abbc1d7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fa005ae1-8c6f-436c-a590-f829717ce247",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6401a25c-f980-411f-ab54-3b906abbc1d7",
        "cursor": {
          "ref": "f8c3e167-3653-4d8c-bdd2-da1541da145d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a0b81397-d79e-495a-957b-bd1adf90206e"
        },
        "item": {
          "id": "6401a25c-f980-411f-ab54-3b906abbc1d7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fa005ae1-8c6f-436c-a590-f829717ce247",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203fc208-d55a-4a4a-b63c-ad6b8f06f173",
        "cursor": {
          "ref": "3a868448-4efb-47de-8405-f381a30bb56c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "aa93e523-82e0-4eec-9316-ed71a15739e8"
        },
        "item": {
          "id": "203fc208-d55a-4a4a-b63c-ad6b8f06f173",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e45d0dd6-b320-4a87-a68f-54d5be8e3efe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203fc208-d55a-4a4a-b63c-ad6b8f06f173",
        "cursor": {
          "ref": "3a868448-4efb-47de-8405-f381a30bb56c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "aa93e523-82e0-4eec-9316-ed71a15739e8"
        },
        "item": {
          "id": "203fc208-d55a-4a4a-b63c-ad6b8f06f173",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e45d0dd6-b320-4a87-a68f-54d5be8e3efe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37240000-e72f-4a45-8cb0-2fc00af3f0dd",
        "cursor": {
          "ref": "f5ee9e22-da1c-4dc8-a83e-3197c6a0d521",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "72adb426-d91d-47f7-9a0f-8670dd922c00"
        },
        "item": {
          "id": "37240000-e72f-4a45-8cb0-2fc00af3f0dd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "47dea2cb-aae6-4a03-be60-6cd8c0c13804",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37240000-e72f-4a45-8cb0-2fc00af3f0dd",
        "cursor": {
          "ref": "f5ee9e22-da1c-4dc8-a83e-3197c6a0d521",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "72adb426-d91d-47f7-9a0f-8670dd922c00"
        },
        "item": {
          "id": "37240000-e72f-4a45-8cb0-2fc00af3f0dd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "47dea2cb-aae6-4a03-be60-6cd8c0c13804",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5103c038-f9be-40af-9c3a-367ae3eaad03",
        "cursor": {
          "ref": "2243cb89-d93d-4ca4-a392-96e48917bb99",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "23c16e52-a9f6-4231-9c8a-e4063bcc27ac"
        },
        "item": {
          "id": "5103c038-f9be-40af-9c3a-367ae3eaad03",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8e48dee9-6736-41f9-9a63-908fd0bb4e9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5103c038-f9be-40af-9c3a-367ae3eaad03",
        "cursor": {
          "ref": "2243cb89-d93d-4ca4-a392-96e48917bb99",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "23c16e52-a9f6-4231-9c8a-e4063bcc27ac"
        },
        "item": {
          "id": "5103c038-f9be-40af-9c3a-367ae3eaad03",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8e48dee9-6736-41f9-9a63-908fd0bb4e9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45839495-a739-422e-9173-6b3e1d4047fb",
        "cursor": {
          "ref": "8ae8d39d-0112-4da8-b7c4-9fd90534f142",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "033ac361-d8b0-4480-bf6a-53cdb30c2ef3"
        },
        "item": {
          "id": "45839495-a739-422e-9173-6b3e1d4047fb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "681fb2a6-3495-4bf3-9fa4-d091a66b878c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45839495-a739-422e-9173-6b3e1d4047fb",
        "cursor": {
          "ref": "8ae8d39d-0112-4da8-b7c4-9fd90534f142",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "033ac361-d8b0-4480-bf6a-53cdb30c2ef3"
        },
        "item": {
          "id": "45839495-a739-422e-9173-6b3e1d4047fb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "681fb2a6-3495-4bf3-9fa4-d091a66b878c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c741a82-c0e3-4306-87de-01dad9066f14",
        "cursor": {
          "ref": "1efdc939-82e2-4b9b-bd1d-398a6f558a87",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "51600e14-9f8e-406c-a07e-49095d7c5779"
        },
        "item": {
          "id": "4c741a82-c0e3-4306-87de-01dad9066f14",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6b03834e-b693-4ee2-acfb-b7f4db5849a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c741a82-c0e3-4306-87de-01dad9066f14",
        "cursor": {
          "ref": "1efdc939-82e2-4b9b-bd1d-398a6f558a87",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "51600e14-9f8e-406c-a07e-49095d7c5779"
        },
        "item": {
          "id": "4c741a82-c0e3-4306-87de-01dad9066f14",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6b03834e-b693-4ee2-acfb-b7f4db5849a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ea118e-0670-4ffc-a8ee-e60c92239759",
        "cursor": {
          "ref": "536a34db-463f-49e1-9b9c-6f09b0164c8f",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f76ab6ad-48fd-4b47-8f3f-e3933091d7ee"
        },
        "item": {
          "id": "49ea118e-0670-4ffc-a8ee-e60c92239759",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "caced032-d6be-47e7-8a58-9732c313c0c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ea118e-0670-4ffc-a8ee-e60c92239759",
        "cursor": {
          "ref": "536a34db-463f-49e1-9b9c-6f09b0164c8f",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f76ab6ad-48fd-4b47-8f3f-e3933091d7ee"
        },
        "item": {
          "id": "49ea118e-0670-4ffc-a8ee-e60c92239759",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "caced032-d6be-47e7-8a58-9732c313c0c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd52c74c-3739-40de-9b3c-902c916a1aa0",
        "cursor": {
          "ref": "ed4cb878-ac17-4af3-9c3f-4f4e8426ce5e",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1236a12d-1d75-415d-b33e-53438bee099a"
        },
        "item": {
          "id": "fd52c74c-3739-40de-9b3c-902c916a1aa0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1be1bc37-168b-4309-aa3b-ed40113b67a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd52c74c-3739-40de-9b3c-902c916a1aa0",
        "cursor": {
          "ref": "ed4cb878-ac17-4af3-9c3f-4f4e8426ce5e",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1236a12d-1d75-415d-b33e-53438bee099a"
        },
        "item": {
          "id": "fd52c74c-3739-40de-9b3c-902c916a1aa0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1be1bc37-168b-4309-aa3b-ed40113b67a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a50fc5-d8a0-4af1-a33d-7a4c4f01f84b",
        "cursor": {
          "ref": "897da331-3701-456a-88cf-556d01a0e25f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6e883cd0-55f7-43f3-9562-d0316ab7be18"
        },
        "item": {
          "id": "c8a50fc5-d8a0-4af1-a33d-7a4c4f01f84b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5f92b27e-6f75-4080-9c2c-7a854a09fef4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a50fc5-d8a0-4af1-a33d-7a4c4f01f84b",
        "cursor": {
          "ref": "897da331-3701-456a-88cf-556d01a0e25f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6e883cd0-55f7-43f3-9562-d0316ab7be18"
        },
        "item": {
          "id": "c8a50fc5-d8a0-4af1-a33d-7a4c4f01f84b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5f92b27e-6f75-4080-9c2c-7a854a09fef4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe97d34-56ff-4191-9b54-4d592838ca2a",
        "cursor": {
          "ref": "253fa65e-134c-4cd2-8370-016be87bf092",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "72cdb748-ecb3-417e-ab20-e299c85cba49"
        },
        "item": {
          "id": "2fe97d34-56ff-4191-9b54-4d592838ca2a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ef7e56a5-d7fd-4aa6-ad25-4ac541289732",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe97d34-56ff-4191-9b54-4d592838ca2a",
        "cursor": {
          "ref": "253fa65e-134c-4cd2-8370-016be87bf092",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "72cdb748-ecb3-417e-ab20-e299c85cba49"
        },
        "item": {
          "id": "2fe97d34-56ff-4191-9b54-4d592838ca2a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ef7e56a5-d7fd-4aa6-ad25-4ac541289732",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3732e53d-fcd1-4dbb-a7f3-a19df3fe7aae",
        "cursor": {
          "ref": "473844ce-78ae-4c06-a56f-165c3b3fb62d",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c37422ad-c32e-4295-872a-5a09469d316d"
        },
        "item": {
          "id": "3732e53d-fcd1-4dbb-a7f3-a19df3fe7aae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2a3b4446-a8d0-40b4-8d32-f40d16d41da6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3732e53d-fcd1-4dbb-a7f3-a19df3fe7aae",
        "cursor": {
          "ref": "473844ce-78ae-4c06-a56f-165c3b3fb62d",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c37422ad-c32e-4295-872a-5a09469d316d"
        },
        "item": {
          "id": "3732e53d-fcd1-4dbb-a7f3-a19df3fe7aae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2a3b4446-a8d0-40b4-8d32-f40d16d41da6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86be899c-3992-4447-a426-e95c138a8eca",
        "cursor": {
          "ref": "fd56dcb8-4f77-4ff8-a3d8-ef1d90b4d79a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "88e95c85-a91b-4dce-9925-4db1558f0385"
        },
        "item": {
          "id": "86be899c-3992-4447-a426-e95c138a8eca",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "87b0b5e1-ef7f-4b33-a2fe-59ecbec86fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86be899c-3992-4447-a426-e95c138a8eca",
        "cursor": {
          "ref": "fd56dcb8-4f77-4ff8-a3d8-ef1d90b4d79a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "88e95c85-a91b-4dce-9925-4db1558f0385"
        },
        "item": {
          "id": "86be899c-3992-4447-a426-e95c138a8eca",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "87b0b5e1-ef7f-4b33-a2fe-59ecbec86fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b713960-5084-42e4-9b02-415771203622",
        "cursor": {
          "ref": "19e0911e-328e-4a4c-86c2-b688413fe0a9",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7b57c130-cd01-43e0-ad29-bc9ef8bee10d"
        },
        "item": {
          "id": "0b713960-5084-42e4-9b02-415771203622",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b2fe0789-97bf-49f6-b426-f87f9653f70e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b713960-5084-42e4-9b02-415771203622",
        "cursor": {
          "ref": "19e0911e-328e-4a4c-86c2-b688413fe0a9",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7b57c130-cd01-43e0-ad29-bc9ef8bee10d"
        },
        "item": {
          "id": "0b713960-5084-42e4-9b02-415771203622",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b2fe0789-97bf-49f6-b426-f87f9653f70e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6808003-5e94-448b-ad91-69c1f5cc58ca",
        "cursor": {
          "ref": "fdc66974-1269-4780-a1d4-2b19d96a60ee",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4d663155-dcea-4baf-b846-d2c5e6129610"
        },
        "item": {
          "id": "b6808003-5e94-448b-ad91-69c1f5cc58ca",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1e5d5175-806a-47c5-95a1-cf42199fe74c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6808003-5e94-448b-ad91-69c1f5cc58ca",
        "cursor": {
          "ref": "fdc66974-1269-4780-a1d4-2b19d96a60ee",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4d663155-dcea-4baf-b846-d2c5e6129610"
        },
        "item": {
          "id": "b6808003-5e94-448b-ad91-69c1f5cc58ca",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1e5d5175-806a-47c5-95a1-cf42199fe74c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0350627e-92e5-4f50-a556-a5fe40bd93d7",
        "cursor": {
          "ref": "1098be12-06a4-4d98-8452-086ae0a009f1",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b08c03a9-cb33-4652-b63b-6e59e4c9d562"
        },
        "item": {
          "id": "0350627e-92e5-4f50-a556-a5fe40bd93d7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97373f8e-423f-4799-bbd5-42f011ae67ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0350627e-92e5-4f50-a556-a5fe40bd93d7",
        "cursor": {
          "ref": "1098be12-06a4-4d98-8452-086ae0a009f1",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b08c03a9-cb33-4652-b63b-6e59e4c9d562"
        },
        "item": {
          "id": "0350627e-92e5-4f50-a556-a5fe40bd93d7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97373f8e-423f-4799-bbd5-42f011ae67ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122d524a-dfe7-4553-b4ba-52eccdb0dc64",
        "cursor": {
          "ref": "5b02d663-7d5d-4b35-92e8-89a5e5a93f0d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a19db687-395e-4bce-aac0-331c7c3ab8a5"
        },
        "item": {
          "id": "122d524a-dfe7-4553-b4ba-52eccdb0dc64",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "052394e7-3995-42d8-b1ec-a2dfb9122a43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122d524a-dfe7-4553-b4ba-52eccdb0dc64",
        "cursor": {
          "ref": "5b02d663-7d5d-4b35-92e8-89a5e5a93f0d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a19db687-395e-4bce-aac0-331c7c3ab8a5"
        },
        "item": {
          "id": "122d524a-dfe7-4553-b4ba-52eccdb0dc64",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "052394e7-3995-42d8-b1ec-a2dfb9122a43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a9b7cc-135e-40eb-b92d-7de730734448",
        "cursor": {
          "ref": "6dbbdcbd-9a66-47d4-9de7-e1c70f2c6fe2",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4fc16576-0094-415a-8e33-bf3f35794208"
        },
        "item": {
          "id": "76a9b7cc-135e-40eb-b92d-7de730734448",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1b2552c6-8dfd-4605-9684-a59868a1e834",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a9b7cc-135e-40eb-b92d-7de730734448",
        "cursor": {
          "ref": "6dbbdcbd-9a66-47d4-9de7-e1c70f2c6fe2",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4fc16576-0094-415a-8e33-bf3f35794208"
        },
        "item": {
          "id": "76a9b7cc-135e-40eb-b92d-7de730734448",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1b2552c6-8dfd-4605-9684-a59868a1e834",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c68adc-ceda-48b5-b20d-a1358c078eca",
        "cursor": {
          "ref": "b5cd87b2-3c67-4134-8d07-b4bdf35a4e06",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5b70408d-d5a8-41f2-85dc-e830c3c36cb6"
        },
        "item": {
          "id": "53c68adc-ceda-48b5-b20d-a1358c078eca",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "29b33180-fd17-4ff2-9974-b8a04f2c6d7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c68adc-ceda-48b5-b20d-a1358c078eca",
        "cursor": {
          "ref": "b5cd87b2-3c67-4134-8d07-b4bdf35a4e06",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5b70408d-d5a8-41f2-85dc-e830c3c36cb6"
        },
        "item": {
          "id": "53c68adc-ceda-48b5-b20d-a1358c078eca",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "29b33180-fd17-4ff2-9974-b8a04f2c6d7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bd1a9a-b0ca-40e4-ba00-4006027b4a74",
        "cursor": {
          "ref": "531d38d7-6d72-445f-8380-e13d7c34ec44",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "26d07ca6-3e73-4677-978b-17d6c55c5ecc"
        },
        "item": {
          "id": "82bd1a9a-b0ca-40e4-ba00-4006027b4a74",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a8e67b92-7485-45b2-9847-b51eedadd830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bd1a9a-b0ca-40e4-ba00-4006027b4a74",
        "cursor": {
          "ref": "531d38d7-6d72-445f-8380-e13d7c34ec44",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "26d07ca6-3e73-4677-978b-17d6c55c5ecc"
        },
        "item": {
          "id": "82bd1a9a-b0ca-40e4-ba00-4006027b4a74",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a8e67b92-7485-45b2-9847-b51eedadd830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e2d28e-937e-43d8-ae80-9cb36d9cebf8",
        "cursor": {
          "ref": "f2466271-1312-406d-92ea-53804ea4675f",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "baaec2e0-7369-406f-ad97-fbbba49cb584"
        },
        "item": {
          "id": "66e2d28e-937e-43d8-ae80-9cb36d9cebf8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c73bf084-12fd-47b0-9f58-332f9fa61ce4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e2d28e-937e-43d8-ae80-9cb36d9cebf8",
        "cursor": {
          "ref": "f2466271-1312-406d-92ea-53804ea4675f",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "baaec2e0-7369-406f-ad97-fbbba49cb584"
        },
        "item": {
          "id": "66e2d28e-937e-43d8-ae80-9cb36d9cebf8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c73bf084-12fd-47b0-9f58-332f9fa61ce4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9bf843-37a1-468b-9f60-10f0904015df",
        "cursor": {
          "ref": "df6c3f7d-0f52-4869-8e88-145ceb0d585b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "779fac02-8f2b-45da-ae3d-49e86b459d86"
        },
        "item": {
          "id": "ba9bf843-37a1-468b-9f60-10f0904015df",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4556d649-118d-4d57-a9c8-965d02019aab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9bf843-37a1-468b-9f60-10f0904015df",
        "cursor": {
          "ref": "df6c3f7d-0f52-4869-8e88-145ceb0d585b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "779fac02-8f2b-45da-ae3d-49e86b459d86"
        },
        "item": {
          "id": "ba9bf843-37a1-468b-9f60-10f0904015df",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4556d649-118d-4d57-a9c8-965d02019aab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac79459-a962-4d5f-8b2a-e4d3ae9d0f3d",
        "cursor": {
          "ref": "c228da41-9cb4-4565-bc92-4c973bc94342",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b53b49bb-a697-45be-bec1-cbec4ee6c2ff"
        },
        "item": {
          "id": "5ac79459-a962-4d5f-8b2a-e4d3ae9d0f3d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9940b3a7-4a0e-4023-ab22-8afac952080e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac79459-a962-4d5f-8b2a-e4d3ae9d0f3d",
        "cursor": {
          "ref": "c228da41-9cb4-4565-bc92-4c973bc94342",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b53b49bb-a697-45be-bec1-cbec4ee6c2ff"
        },
        "item": {
          "id": "5ac79459-a962-4d5f-8b2a-e4d3ae9d0f3d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9940b3a7-4a0e-4023-ab22-8afac952080e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fccc7e-11ee-44ee-94e1-95772af7e81a",
        "cursor": {
          "ref": "93f6a5e4-6361-4b76-ac59-f9cee94f5f84",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a76f4da-d5b8-4992-a499-a277e54a6937"
        },
        "item": {
          "id": "08fccc7e-11ee-44ee-94e1-95772af7e81a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3cd51836-bccc-4c81-9aeb-473c2cfbe288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fccc7e-11ee-44ee-94e1-95772af7e81a",
        "cursor": {
          "ref": "93f6a5e4-6361-4b76-ac59-f9cee94f5f84",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a76f4da-d5b8-4992-a499-a277e54a6937"
        },
        "item": {
          "id": "08fccc7e-11ee-44ee-94e1-95772af7e81a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3cd51836-bccc-4c81-9aeb-473c2cfbe288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c3e6b7-69c5-48e5-9df4-ef7d32f59618",
        "cursor": {
          "ref": "4226ee43-fff0-4380-bdae-7014579d64f5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "195d1749-352b-4221-891b-af59535ba192"
        },
        "item": {
          "id": "63c3e6b7-69c5-48e5-9df4-ef7d32f59618",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "82c51f04-fb15-49e1-a76a-9cdf49a3d4f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c3e6b7-69c5-48e5-9df4-ef7d32f59618",
        "cursor": {
          "ref": "4226ee43-fff0-4380-bdae-7014579d64f5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "195d1749-352b-4221-891b-af59535ba192"
        },
        "item": {
          "id": "63c3e6b7-69c5-48e5-9df4-ef7d32f59618",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "82c51f04-fb15-49e1-a76a-9cdf49a3d4f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e86255-0934-4c4b-901a-a3998304724d",
        "cursor": {
          "ref": "62a3b03a-2cd7-425a-9c1d-69467bc250c4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1626e54b-4843-4c23-b5f8-a524bf4ae144"
        },
        "item": {
          "id": "34e86255-0934-4c4b-901a-a3998304724d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ca30963f-fe5f-469b-bd8a-69ff37b8b04c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e86255-0934-4c4b-901a-a3998304724d",
        "cursor": {
          "ref": "62a3b03a-2cd7-425a-9c1d-69467bc250c4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1626e54b-4843-4c23-b5f8-a524bf4ae144"
        },
        "item": {
          "id": "34e86255-0934-4c4b-901a-a3998304724d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ca30963f-fe5f-469b-bd8a-69ff37b8b04c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e87a0fe-db74-4ae0-b1f8-e34b780db599",
        "cursor": {
          "ref": "b60df430-fb0b-4882-bdad-58cc1171e5ab",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b197bb61-f295-487c-819e-77a7ad2f6829"
        },
        "item": {
          "id": "3e87a0fe-db74-4ae0-b1f8-e34b780db599",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "671ee6e9-48fe-4336-9919-2377d8d454e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e87a0fe-db74-4ae0-b1f8-e34b780db599",
        "cursor": {
          "ref": "b60df430-fb0b-4882-bdad-58cc1171e5ab",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b197bb61-f295-487c-819e-77a7ad2f6829"
        },
        "item": {
          "id": "3e87a0fe-db74-4ae0-b1f8-e34b780db599",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "671ee6e9-48fe-4336-9919-2377d8d454e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8100465c-acdc-4204-bb79-2449d5c8c909",
        "cursor": {
          "ref": "a52d9fb4-9a99-4f18-9688-5acea5bb53b7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3390a7a4-bb4f-4a63-8cfb-7171bfa654d3"
        },
        "item": {
          "id": "8100465c-acdc-4204-bb79-2449d5c8c909",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1746d9e3-5eb5-4402-8ae9-bc3b144a5b62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8100465c-acdc-4204-bb79-2449d5c8c909",
        "cursor": {
          "ref": "a52d9fb4-9a99-4f18-9688-5acea5bb53b7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3390a7a4-bb4f-4a63-8cfb-7171bfa654d3"
        },
        "item": {
          "id": "8100465c-acdc-4204-bb79-2449d5c8c909",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1746d9e3-5eb5-4402-8ae9-bc3b144a5b62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8343fd4-b7bd-4d55-9f30-dedd437f82e5",
        "cursor": {
          "ref": "a33bfca7-b534-44d5-9f32-894347ea2ecc",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3f6fcb13-feec-4c00-a29c-d6702e6d3544"
        },
        "item": {
          "id": "a8343fd4-b7bd-4d55-9f30-dedd437f82e5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "25d684c9-8793-4b2c-a328-ac42b4bc42c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8343fd4-b7bd-4d55-9f30-dedd437f82e5",
        "cursor": {
          "ref": "a33bfca7-b534-44d5-9f32-894347ea2ecc",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3f6fcb13-feec-4c00-a29c-d6702e6d3544"
        },
        "item": {
          "id": "a8343fd4-b7bd-4d55-9f30-dedd437f82e5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "25d684c9-8793-4b2c-a328-ac42b4bc42c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530daade-839e-4ee7-9f44-d0d9fae752b1",
        "cursor": {
          "ref": "b1811533-2417-41f9-92ba-064cd214fe28",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7517199e-45d6-4322-8880-c7479b4fb9f2"
        },
        "item": {
          "id": "530daade-839e-4ee7-9f44-d0d9fae752b1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c5d22b7a-83d3-49f0-8804-10519f88d5ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530daade-839e-4ee7-9f44-d0d9fae752b1",
        "cursor": {
          "ref": "b1811533-2417-41f9-92ba-064cd214fe28",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7517199e-45d6-4322-8880-c7479b4fb9f2"
        },
        "item": {
          "id": "530daade-839e-4ee7-9f44-d0d9fae752b1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c5d22b7a-83d3-49f0-8804-10519f88d5ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bbcce5-41f7-4908-8f6e-b3a0cc43bb84",
        "cursor": {
          "ref": "3b293c2b-193a-43f2-9a70-57d7dc958744",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f3e7ee1e-2599-4876-8582-34baab02a1f6"
        },
        "item": {
          "id": "a9bbcce5-41f7-4908-8f6e-b3a0cc43bb84",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "71604a19-8ebe-4ecb-b016-375c382382fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bbcce5-41f7-4908-8f6e-b3a0cc43bb84",
        "cursor": {
          "ref": "3b293c2b-193a-43f2-9a70-57d7dc958744",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f3e7ee1e-2599-4876-8582-34baab02a1f6"
        },
        "item": {
          "id": "a9bbcce5-41f7-4908-8f6e-b3a0cc43bb84",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "71604a19-8ebe-4ecb-b016-375c382382fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490df6a3-c9e6-4e40-a3e8-240b7dbcb463",
        "cursor": {
          "ref": "503006ef-6913-4171-9430-f9a415811148",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "894250bd-f35b-46c5-9c13-87ebb9914536"
        },
        "item": {
          "id": "490df6a3-c9e6-4e40-a3e8-240b7dbcb463",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "67edbd0f-5bc8-407d-878c-bde7f3ddbeee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490df6a3-c9e6-4e40-a3e8-240b7dbcb463",
        "cursor": {
          "ref": "503006ef-6913-4171-9430-f9a415811148",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "894250bd-f35b-46c5-9c13-87ebb9914536"
        },
        "item": {
          "id": "490df6a3-c9e6-4e40-a3e8-240b7dbcb463",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "67edbd0f-5bc8-407d-878c-bde7f3ddbeee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81309e16-6ed3-4a91-a613-b517c9f131cd",
        "cursor": {
          "ref": "89180003-43ba-4a05-bef2-cb225b291a66",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "538f90c4-9bb0-4b82-aca9-e7b229891372"
        },
        "item": {
          "id": "81309e16-6ed3-4a91-a613-b517c9f131cd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b69e56e6-0223-4a68-a6fb-0ad1ba076802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81309e16-6ed3-4a91-a613-b517c9f131cd",
        "cursor": {
          "ref": "89180003-43ba-4a05-bef2-cb225b291a66",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "538f90c4-9bb0-4b82-aca9-e7b229891372"
        },
        "item": {
          "id": "81309e16-6ed3-4a91-a613-b517c9f131cd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b69e56e6-0223-4a68-a6fb-0ad1ba076802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4cbae2-b3e0-4cc8-8d2e-f65e52bf1eca",
        "cursor": {
          "ref": "481b08cd-adc4-423b-9561-7af6f345c990",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a9981dfc-00c3-42fd-ae5e-0ae8ba657f8d"
        },
        "item": {
          "id": "4e4cbae2-b3e0-4cc8-8d2e-f65e52bf1eca",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e26874f3-8158-4c7d-9fa9-cc6b240014fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4cbae2-b3e0-4cc8-8d2e-f65e52bf1eca",
        "cursor": {
          "ref": "481b08cd-adc4-423b-9561-7af6f345c990",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a9981dfc-00c3-42fd-ae5e-0ae8ba657f8d"
        },
        "item": {
          "id": "4e4cbae2-b3e0-4cc8-8d2e-f65e52bf1eca",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e26874f3-8158-4c7d-9fa9-cc6b240014fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fa050f-ad87-4f7b-8cc3-4a00b26ee7a7",
        "cursor": {
          "ref": "211c0a02-36b5-4aea-8531-13df63ff4703",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3bf90dbb-0c08-4f0e-8108-9e8e1a1d3f91"
        },
        "item": {
          "id": "99fa050f-ad87-4f7b-8cc3-4a00b26ee7a7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9cdd61ef-5efd-4e9a-a5eb-42c7a1afbab8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fa050f-ad87-4f7b-8cc3-4a00b26ee7a7",
        "cursor": {
          "ref": "211c0a02-36b5-4aea-8531-13df63ff4703",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3bf90dbb-0c08-4f0e-8108-9e8e1a1d3f91"
        },
        "item": {
          "id": "99fa050f-ad87-4f7b-8cc3-4a00b26ee7a7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9cdd61ef-5efd-4e9a-a5eb-42c7a1afbab8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4359d071-e497-4381-9112-2b5b13bd8e30",
        "cursor": {
          "ref": "bcf27208-d340-4aac-b7ee-c5a2201f4487",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "58427ce5-dc87-4996-be6b-c5d8822be7ae"
        },
        "item": {
          "id": "4359d071-e497-4381-9112-2b5b13bd8e30",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8f814f33-8f9d-44d1-b7ad-64ef09ac280a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4359d071-e497-4381-9112-2b5b13bd8e30",
        "cursor": {
          "ref": "bcf27208-d340-4aac-b7ee-c5a2201f4487",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "58427ce5-dc87-4996-be6b-c5d8822be7ae"
        },
        "item": {
          "id": "4359d071-e497-4381-9112-2b5b13bd8e30",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8f814f33-8f9d-44d1-b7ad-64ef09ac280a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad57fe67-cf3c-4f06-aa31-091b44041ab5",
        "cursor": {
          "ref": "52c43f8c-27fc-48c8-b58d-0f58e3855c75",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e42bd9ad-88f9-4a58-a4be-887392dc7814"
        },
        "item": {
          "id": "ad57fe67-cf3c-4f06-aa31-091b44041ab5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b877f816-a068-412a-9089-5efe03f3ca4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad57fe67-cf3c-4f06-aa31-091b44041ab5",
        "cursor": {
          "ref": "52c43f8c-27fc-48c8-b58d-0f58e3855c75",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e42bd9ad-88f9-4a58-a4be-887392dc7814"
        },
        "item": {
          "id": "ad57fe67-cf3c-4f06-aa31-091b44041ab5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b877f816-a068-412a-9089-5efe03f3ca4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8e2e9c-a4f9-4332-9e05-3adcd7ad2347",
        "cursor": {
          "ref": "7ac66e83-794e-4bcb-9a1f-85a8ce9a19fb",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "93a80173-3cf2-40a4-971e-149994a34c38"
        },
        "item": {
          "id": "ab8e2e9c-a4f9-4332-9e05-3adcd7ad2347",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "69c8f06f-bb75-45cf-aafd-8bf1f3bb5f53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8e2e9c-a4f9-4332-9e05-3adcd7ad2347",
        "cursor": {
          "ref": "7ac66e83-794e-4bcb-9a1f-85a8ce9a19fb",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "93a80173-3cf2-40a4-971e-149994a34c38"
        },
        "item": {
          "id": "ab8e2e9c-a4f9-4332-9e05-3adcd7ad2347",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "69c8f06f-bb75-45cf-aafd-8bf1f3bb5f53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93212dc2-f278-4638-9469-36568c8f2125",
        "cursor": {
          "ref": "9e3ec4de-9a39-4572-8c12-83e01fcddda4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e0f0895e-e841-4aaf-902d-80a08008a5f1"
        },
        "item": {
          "id": "93212dc2-f278-4638-9469-36568c8f2125",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4a30b8b9-5b37-4b19-acfa-beb27702998e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93212dc2-f278-4638-9469-36568c8f2125",
        "cursor": {
          "ref": "9e3ec4de-9a39-4572-8c12-83e01fcddda4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e0f0895e-e841-4aaf-902d-80a08008a5f1"
        },
        "item": {
          "id": "93212dc2-f278-4638-9469-36568c8f2125",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4a30b8b9-5b37-4b19-acfa-beb27702998e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d29ae8-e42e-4fd3-bff9-f6bd888e24d1",
        "cursor": {
          "ref": "c3012b39-7165-4236-9115-54e5fc41751f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f40a31d6-e0c9-4585-9e02-0b7cd12ba926"
        },
        "item": {
          "id": "91d29ae8-e42e-4fd3-bff9-f6bd888e24d1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "94415f40-ba66-4b4a-9943-b1a03d2b1b0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d29ae8-e42e-4fd3-bff9-f6bd888e24d1",
        "cursor": {
          "ref": "c3012b39-7165-4236-9115-54e5fc41751f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f40a31d6-e0c9-4585-9e02-0b7cd12ba926"
        },
        "item": {
          "id": "91d29ae8-e42e-4fd3-bff9-f6bd888e24d1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "94415f40-ba66-4b4a-9943-b1a03d2b1b0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7e3313-1079-46ed-a56b-29fa5e681d0e",
        "cursor": {
          "ref": "d76779f3-2598-4e88-a735-39d9ddd234b7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d01aaf38-a0e0-4a3f-bdce-40eedcee5c90"
        },
        "item": {
          "id": "ca7e3313-1079-46ed-a56b-29fa5e681d0e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1ae92d68-d30c-4da7-b530-db262adf2e90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7e3313-1079-46ed-a56b-29fa5e681d0e",
        "cursor": {
          "ref": "d76779f3-2598-4e88-a735-39d9ddd234b7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d01aaf38-a0e0-4a3f-bdce-40eedcee5c90"
        },
        "item": {
          "id": "ca7e3313-1079-46ed-a56b-29fa5e681d0e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1ae92d68-d30c-4da7-b530-db262adf2e90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f82678d-5a78-4dc7-92b2-101912ef2c9e",
        "cursor": {
          "ref": "6bf66a97-e7d6-4403-af6c-5abf014e2746",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7737c88b-2894-466f-8353-624cc0c892e2"
        },
        "item": {
          "id": "5f82678d-5a78-4dc7-92b2-101912ef2c9e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80535d67-924c-4fbc-826f-0d6476e162d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f82678d-5a78-4dc7-92b2-101912ef2c9e",
        "cursor": {
          "ref": "6bf66a97-e7d6-4403-af6c-5abf014e2746",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7737c88b-2894-466f-8353-624cc0c892e2"
        },
        "item": {
          "id": "5f82678d-5a78-4dc7-92b2-101912ef2c9e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80535d67-924c-4fbc-826f-0d6476e162d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63795687-df1f-416b-aaf7-62b98d736490",
        "cursor": {
          "ref": "c42c9dea-9e06-4868-a169-7e07688e494e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ab568789-aa76-4ac0-87bc-cc44da54e4b3"
        },
        "item": {
          "id": "63795687-df1f-416b-aaf7-62b98d736490",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8cda200e-fe44-4491-8266-0dac0490a880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63795687-df1f-416b-aaf7-62b98d736490",
        "cursor": {
          "ref": "c42c9dea-9e06-4868-a169-7e07688e494e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ab568789-aa76-4ac0-87bc-cc44da54e4b3"
        },
        "item": {
          "id": "63795687-df1f-416b-aaf7-62b98d736490",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8cda200e-fe44-4491-8266-0dac0490a880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205ceeaf-c9d3-40d1-8e1a-8739867d6d7b",
        "cursor": {
          "ref": "85a8cc83-6208-4b5b-871a-593d66172815",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b80cd667-4ef6-475d-92cd-9aedcaaf0c73"
        },
        "item": {
          "id": "205ceeaf-c9d3-40d1-8e1a-8739867d6d7b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e8633f6f-e6ae-4de8-b047-3126378c7cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205ceeaf-c9d3-40d1-8e1a-8739867d6d7b",
        "cursor": {
          "ref": "85a8cc83-6208-4b5b-871a-593d66172815",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b80cd667-4ef6-475d-92cd-9aedcaaf0c73"
        },
        "item": {
          "id": "205ceeaf-c9d3-40d1-8e1a-8739867d6d7b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e8633f6f-e6ae-4de8-b047-3126378c7cad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739f1df4-a5d1-47d7-b725-fa66f506249e",
        "cursor": {
          "ref": "df4303f9-8683-4547-aad0-4e64634f9f93",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "76d6d4da-43cf-4bc6-96e0-79aa5c24059a"
        },
        "item": {
          "id": "739f1df4-a5d1-47d7-b725-fa66f506249e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b7fe679c-37f3-47db-bd61-ffc9f68b43b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739f1df4-a5d1-47d7-b725-fa66f506249e",
        "cursor": {
          "ref": "df4303f9-8683-4547-aad0-4e64634f9f93",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "76d6d4da-43cf-4bc6-96e0-79aa5c24059a"
        },
        "item": {
          "id": "739f1df4-a5d1-47d7-b725-fa66f506249e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b7fe679c-37f3-47db-bd61-ffc9f68b43b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e118f101-0f6b-4dca-a240-ce2f42473fdf",
        "cursor": {
          "ref": "8ec13a61-9833-488e-9f42-ddec014958f6",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b679b3e7-116b-492a-b197-4084edb5d7dc"
        },
        "item": {
          "id": "e118f101-0f6b-4dca-a240-ce2f42473fdf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "90f8d4b2-d53e-47e4-8845-6e792ce328ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e118f101-0f6b-4dca-a240-ce2f42473fdf",
        "cursor": {
          "ref": "8ec13a61-9833-488e-9f42-ddec014958f6",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b679b3e7-116b-492a-b197-4084edb5d7dc"
        },
        "item": {
          "id": "e118f101-0f6b-4dca-a240-ce2f42473fdf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "90f8d4b2-d53e-47e4-8845-6e792ce328ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50a010a-2603-475c-905d-4cadd5fbe654",
        "cursor": {
          "ref": "7359b5c3-1c1b-4d43-9c17-afdecd0fe94c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e3b3c35a-84f1-4d09-9340-33f940fb2aa6"
        },
        "item": {
          "id": "a50a010a-2603-475c-905d-4cadd5fbe654",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5ae7f462-60a3-40e5-a209-ec61d3d3f91b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50a010a-2603-475c-905d-4cadd5fbe654",
        "cursor": {
          "ref": "7359b5c3-1c1b-4d43-9c17-afdecd0fe94c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e3b3c35a-84f1-4d09-9340-33f940fb2aa6"
        },
        "item": {
          "id": "a50a010a-2603-475c-905d-4cadd5fbe654",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5ae7f462-60a3-40e5-a209-ec61d3d3f91b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e676a3-2bb4-469e-836b-9853bd47ce91",
        "cursor": {
          "ref": "b6526cc6-6002-4488-9c56-8ffe4631caa2",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "33a2eb94-2801-4920-b337-28ae5a1e1221"
        },
        "item": {
          "id": "68e676a3-2bb4-469e-836b-9853bd47ce91",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "225c5258-6271-41e4-9e79-5e6620626c9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e676a3-2bb4-469e-836b-9853bd47ce91",
        "cursor": {
          "ref": "b6526cc6-6002-4488-9c56-8ffe4631caa2",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "33a2eb94-2801-4920-b337-28ae5a1e1221"
        },
        "item": {
          "id": "68e676a3-2bb4-469e-836b-9853bd47ce91",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "225c5258-6271-41e4-9e79-5e6620626c9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57c206b-fee9-4c01-8a08-863ba7cbe9d0",
        "cursor": {
          "ref": "8eeed4b4-ca15-4f00-be5e-d64272791dc2",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dc64b816-9bd9-401a-97c3-e6307b1e82d4"
        },
        "item": {
          "id": "b57c206b-fee9-4c01-8a08-863ba7cbe9d0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61f5ea99-e281-4fa6-b3bb-19dd163a8123",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57c206b-fee9-4c01-8a08-863ba7cbe9d0",
        "cursor": {
          "ref": "8eeed4b4-ca15-4f00-be5e-d64272791dc2",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dc64b816-9bd9-401a-97c3-e6307b1e82d4"
        },
        "item": {
          "id": "b57c206b-fee9-4c01-8a08-863ba7cbe9d0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61f5ea99-e281-4fa6-b3bb-19dd163a8123",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce8961e-bf23-4e1e-91ea-d5ca64488046",
        "cursor": {
          "ref": "fc256c22-0234-4f12-ae54-fb6b390505a4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bb6e3e63-0949-4f12-94a5-aa71e89ea07d"
        },
        "item": {
          "id": "1ce8961e-bf23-4e1e-91ea-d5ca64488046",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9e09553d-523a-43d4-8465-c993c7a04cb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce8961e-bf23-4e1e-91ea-d5ca64488046",
        "cursor": {
          "ref": "fc256c22-0234-4f12-ae54-fb6b390505a4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bb6e3e63-0949-4f12-94a5-aa71e89ea07d"
        },
        "item": {
          "id": "1ce8961e-bf23-4e1e-91ea-d5ca64488046",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9e09553d-523a-43d4-8465-c993c7a04cb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930bcdbb-e21e-4604-8e93-b7e054bbf5da",
        "cursor": {
          "ref": "95650cb9-dd6b-4008-9bc8-7a70906f8199",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2f7b5c65-660d-4ba7-84b7-68bfb61afdf8"
        },
        "item": {
          "id": "930bcdbb-e21e-4604-8e93-b7e054bbf5da",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c2b2c26e-02b4-4431-b085-5beb1cdcebc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930bcdbb-e21e-4604-8e93-b7e054bbf5da",
        "cursor": {
          "ref": "95650cb9-dd6b-4008-9bc8-7a70906f8199",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2f7b5c65-660d-4ba7-84b7-68bfb61afdf8"
        },
        "item": {
          "id": "930bcdbb-e21e-4604-8e93-b7e054bbf5da",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c2b2c26e-02b4-4431-b085-5beb1cdcebc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf57d5f-6587-4a7d-aaac-f3731156b860",
        "cursor": {
          "ref": "2c332456-4848-4f6e-a1b3-92900dd97135",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "12e42dbb-bc4f-470c-aa3f-aa441c9af627"
        },
        "item": {
          "id": "abf57d5f-6587-4a7d-aaac-f3731156b860",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2432667e-a683-4b5e-91dd-72a4e0287ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf57d5f-6587-4a7d-aaac-f3731156b860",
        "cursor": {
          "ref": "2c332456-4848-4f6e-a1b3-92900dd97135",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "12e42dbb-bc4f-470c-aa3f-aa441c9af627"
        },
        "item": {
          "id": "abf57d5f-6587-4a7d-aaac-f3731156b860",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2432667e-a683-4b5e-91dd-72a4e0287ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318e6c3d-11a4-400f-86f5-36a5d299ce82",
        "cursor": {
          "ref": "00d186cc-4b79-407b-a2a4-7706da7f9d29",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e1889932-7c19-4665-b305-638b7033ccb9"
        },
        "item": {
          "id": "318e6c3d-11a4-400f-86f5-36a5d299ce82",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "76738451-19c5-45d1-9d2e-4ef41dc92651",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318e6c3d-11a4-400f-86f5-36a5d299ce82",
        "cursor": {
          "ref": "00d186cc-4b79-407b-a2a4-7706da7f9d29",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e1889932-7c19-4665-b305-638b7033ccb9"
        },
        "item": {
          "id": "318e6c3d-11a4-400f-86f5-36a5d299ce82",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "76738451-19c5-45d1-9d2e-4ef41dc92651",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b73a34f-04e6-4f86-97b3-9b2d3d02ed88",
        "cursor": {
          "ref": "5b7f2ee6-557a-4a75-8f16-01cff831db63",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "50d9fa63-e7c1-4295-8b61-722c899f4b0b"
        },
        "item": {
          "id": "3b73a34f-04e6-4f86-97b3-9b2d3d02ed88",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "823f44b5-8de2-41ef-96d2-8a2792765ad3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b73a34f-04e6-4f86-97b3-9b2d3d02ed88",
        "cursor": {
          "ref": "5b7f2ee6-557a-4a75-8f16-01cff831db63",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "50d9fa63-e7c1-4295-8b61-722c899f4b0b"
        },
        "item": {
          "id": "3b73a34f-04e6-4f86-97b3-9b2d3d02ed88",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "823f44b5-8de2-41ef-96d2-8a2792765ad3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185390b4-a6d8-41c7-8251-0019091a0e85",
        "cursor": {
          "ref": "da40da30-4e5a-42aa-8c62-7018633d60e0",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a7dbda9c-6b0e-4733-b349-c285fcb529c2"
        },
        "item": {
          "id": "185390b4-a6d8-41c7-8251-0019091a0e85",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a6d8fd17-0811-4b79-b09a-9bcc588f33e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185390b4-a6d8-41c7-8251-0019091a0e85",
        "cursor": {
          "ref": "da40da30-4e5a-42aa-8c62-7018633d60e0",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a7dbda9c-6b0e-4733-b349-c285fcb529c2"
        },
        "item": {
          "id": "185390b4-a6d8-41c7-8251-0019091a0e85",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a6d8fd17-0811-4b79-b09a-9bcc588f33e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871cf4f0-2bc4-41d6-ae39-2994f10611c6",
        "cursor": {
          "ref": "40b85679-48ef-4103-aea1-e25b9e53f3f0",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0b0d9748-c782-49f9-a6d7-b865d31459b4"
        },
        "item": {
          "id": "871cf4f0-2bc4-41d6-ae39-2994f10611c6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f5fd1bca-2fd3-47e0-980d-0cd2aaa20c1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871cf4f0-2bc4-41d6-ae39-2994f10611c6",
        "cursor": {
          "ref": "40b85679-48ef-4103-aea1-e25b9e53f3f0",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0b0d9748-c782-49f9-a6d7-b865d31459b4"
        },
        "item": {
          "id": "871cf4f0-2bc4-41d6-ae39-2994f10611c6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f5fd1bca-2fd3-47e0-980d-0cd2aaa20c1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9716a47-f773-4e7f-a79e-7529ff9578bf",
        "cursor": {
          "ref": "a38b7705-6aeb-452a-903c-67b7b4234992",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "983f9576-dc57-4861-8c89-ca0fc769bc52"
        },
        "item": {
          "id": "f9716a47-f773-4e7f-a79e-7529ff9578bf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b361078d-81d5-49c0-96dc-c03964279d49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9716a47-f773-4e7f-a79e-7529ff9578bf",
        "cursor": {
          "ref": "a38b7705-6aeb-452a-903c-67b7b4234992",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "983f9576-dc57-4861-8c89-ca0fc769bc52"
        },
        "item": {
          "id": "f9716a47-f773-4e7f-a79e-7529ff9578bf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b361078d-81d5-49c0-96dc-c03964279d49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551dec49-40fd-4b12-8109-54404dc95e67",
        "cursor": {
          "ref": "4b9c55db-8b59-42c1-be93-71ddccc3d246",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2c12331b-14f2-49db-9bf6-f63631c53aa0"
        },
        "item": {
          "id": "551dec49-40fd-4b12-8109-54404dc95e67",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "044e5ddb-4885-483c-a36a-5741d3bbf412",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551dec49-40fd-4b12-8109-54404dc95e67",
        "cursor": {
          "ref": "4b9c55db-8b59-42c1-be93-71ddccc3d246",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2c12331b-14f2-49db-9bf6-f63631c53aa0"
        },
        "item": {
          "id": "551dec49-40fd-4b12-8109-54404dc95e67",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "044e5ddb-4885-483c-a36a-5741d3bbf412",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eef4d72-a1ed-449c-9562-2ef0d92ff407",
        "cursor": {
          "ref": "586ece98-d442-42cf-8fb5-0cd656351159",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4fa99150-e447-4a1f-ba54-4704568ea3e1"
        },
        "item": {
          "id": "7eef4d72-a1ed-449c-9562-2ef0d92ff407",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cff16926-be0b-473f-a74f-2f74cedc12ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eef4d72-a1ed-449c-9562-2ef0d92ff407",
        "cursor": {
          "ref": "586ece98-d442-42cf-8fb5-0cd656351159",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4fa99150-e447-4a1f-ba54-4704568ea3e1"
        },
        "item": {
          "id": "7eef4d72-a1ed-449c-9562-2ef0d92ff407",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cff16926-be0b-473f-a74f-2f74cedc12ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd07156a-7c0a-4b71-9355-5918fb89a590",
        "cursor": {
          "ref": "d72bec55-b343-4dfa-8965-97e7413104dd",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7bd05600-8de3-4b03-b789-700513233179"
        },
        "item": {
          "id": "dd07156a-7c0a-4b71-9355-5918fb89a590",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "89aec48b-a988-486b-b387-82ada99ff68b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd07156a-7c0a-4b71-9355-5918fb89a590",
        "cursor": {
          "ref": "d72bec55-b343-4dfa-8965-97e7413104dd",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7bd05600-8de3-4b03-b789-700513233179"
        },
        "item": {
          "id": "dd07156a-7c0a-4b71-9355-5918fb89a590",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "89aec48b-a988-486b-b387-82ada99ff68b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997b8c3d-40d4-4681-8c2c-c295a0cbf629",
        "cursor": {
          "ref": "51152a0e-9222-4578-87ee-f2b17aa7caad",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5ef95399-8e1e-495b-ba8d-a79b5087e026"
        },
        "item": {
          "id": "997b8c3d-40d4-4681-8c2c-c295a0cbf629",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e77e6e17-101c-4423-a48f-8399e400f054",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997b8c3d-40d4-4681-8c2c-c295a0cbf629",
        "cursor": {
          "ref": "51152a0e-9222-4578-87ee-f2b17aa7caad",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5ef95399-8e1e-495b-ba8d-a79b5087e026"
        },
        "item": {
          "id": "997b8c3d-40d4-4681-8c2c-c295a0cbf629",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e77e6e17-101c-4423-a48f-8399e400f054",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8575e33-e962-479a-8e8b-7abb1a6be2d0",
        "cursor": {
          "ref": "47b5dddd-9765-4793-85d9-5ef89622f5cb",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cfa45f39-eb14-40bf-bbd6-1e8d9aaff8b8"
        },
        "item": {
          "id": "d8575e33-e962-479a-8e8b-7abb1a6be2d0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fa2e3f68-fe92-4a76-8818-a61cc03bccd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8575e33-e962-479a-8e8b-7abb1a6be2d0",
        "cursor": {
          "ref": "47b5dddd-9765-4793-85d9-5ef89622f5cb",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cfa45f39-eb14-40bf-bbd6-1e8d9aaff8b8"
        },
        "item": {
          "id": "d8575e33-e962-479a-8e8b-7abb1a6be2d0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fa2e3f68-fe92-4a76-8818-a61cc03bccd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387dbc4f-ef21-4012-8ed0-fa28b1f56575",
        "cursor": {
          "ref": "a1b18013-26c3-4245-aa0c-5b55697b38d0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "168562bf-b906-4a43-88c1-7095a28a7c82"
        },
        "item": {
          "id": "387dbc4f-ef21-4012-8ed0-fa28b1f56575",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a6200cd0-b3fb-4d97-ad06-751bb7799f85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387dbc4f-ef21-4012-8ed0-fa28b1f56575",
        "cursor": {
          "ref": "a1b18013-26c3-4245-aa0c-5b55697b38d0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "168562bf-b906-4a43-88c1-7095a28a7c82"
        },
        "item": {
          "id": "387dbc4f-ef21-4012-8ed0-fa28b1f56575",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a6200cd0-b3fb-4d97-ad06-751bb7799f85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3097e09e-3f9c-429b-b640-18fd94a19d2a",
        "cursor": {
          "ref": "45835236-642a-4597-8e75-6d7fc70e3f42",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0e60d3e3-2955-4437-866c-81f5a7435590"
        },
        "item": {
          "id": "3097e09e-3f9c-429b-b640-18fd94a19d2a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a11443a7-dc35-406b-a9ee-9904167e73c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3097e09e-3f9c-429b-b640-18fd94a19d2a",
        "cursor": {
          "ref": "45835236-642a-4597-8e75-6d7fc70e3f42",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0e60d3e3-2955-4437-866c-81f5a7435590"
        },
        "item": {
          "id": "3097e09e-3f9c-429b-b640-18fd94a19d2a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a11443a7-dc35-406b-a9ee-9904167e73c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6742c5b-c1f7-45e4-95cf-b789d5f3da67",
        "cursor": {
          "ref": "72a444b6-0f8d-4029-ac2b-932791467d03",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cf339256-b10c-479c-a726-9bc07965ac89"
        },
        "item": {
          "id": "e6742c5b-c1f7-45e4-95cf-b789d5f3da67",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f7b4a10-fa03-4f6e-a7ed-33283faa2ce4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6742c5b-c1f7-45e4-95cf-b789d5f3da67",
        "cursor": {
          "ref": "72a444b6-0f8d-4029-ac2b-932791467d03",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cf339256-b10c-479c-a726-9bc07965ac89"
        },
        "item": {
          "id": "e6742c5b-c1f7-45e4-95cf-b789d5f3da67",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f7b4a10-fa03-4f6e-a7ed-33283faa2ce4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62eb2e73-e263-41c2-88d9-ea35d4ce57e5",
        "cursor": {
          "ref": "ab09a88d-5d58-4334-b535-f6641600976b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d83c4b07-6850-43f2-bf84-a7a65afbad3d"
        },
        "item": {
          "id": "62eb2e73-e263-41c2-88d9-ea35d4ce57e5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5b3abb2f-34cd-48da-b882-a0b776ec44fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62eb2e73-e263-41c2-88d9-ea35d4ce57e5",
        "cursor": {
          "ref": "ab09a88d-5d58-4334-b535-f6641600976b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d83c4b07-6850-43f2-bf84-a7a65afbad3d"
        },
        "item": {
          "id": "62eb2e73-e263-41c2-88d9-ea35d4ce57e5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5b3abb2f-34cd-48da-b882-a0b776ec44fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f395e721-debf-45d7-878c-30cf96734c65",
        "cursor": {
          "ref": "f7bc6f0b-0cc4-470f-abf8-f424667d2d1d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "980c584f-3bc8-4058-bfeb-1ffef3c05820"
        },
        "item": {
          "id": "f395e721-debf-45d7-878c-30cf96734c65",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d1a56240-ffde-448c-a5f7-e68ad79e8030",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f395e721-debf-45d7-878c-30cf96734c65",
        "cursor": {
          "ref": "f7bc6f0b-0cc4-470f-abf8-f424667d2d1d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "980c584f-3bc8-4058-bfeb-1ffef3c05820"
        },
        "item": {
          "id": "f395e721-debf-45d7-878c-30cf96734c65",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d1a56240-ffde-448c-a5f7-e68ad79e8030",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c44e1b0-6193-4ab9-b665-f8eb51e6b733",
        "cursor": {
          "ref": "d4a98c46-f2c2-4edd-bd03-d62f324e69bc",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fc256a9e-5699-4ee7-b8d7-30dd06f2d2f6"
        },
        "item": {
          "id": "0c44e1b0-6193-4ab9-b665-f8eb51e6b733",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3c5b4599-f071-48e1-84cd-40a5d925780e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c44e1b0-6193-4ab9-b665-f8eb51e6b733",
        "cursor": {
          "ref": "d4a98c46-f2c2-4edd-bd03-d62f324e69bc",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fc256a9e-5699-4ee7-b8d7-30dd06f2d2f6"
        },
        "item": {
          "id": "0c44e1b0-6193-4ab9-b665-f8eb51e6b733",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3c5b4599-f071-48e1-84cd-40a5d925780e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7082a0d8-10f4-4cd7-9f22-ddc273ee8de3",
        "cursor": {
          "ref": "58c62f6e-7c78-48c9-a81c-5b5c57334869",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0ebee66e-9464-4edc-92c6-b672a60dc0c7"
        },
        "item": {
          "id": "7082a0d8-10f4-4cd7-9f22-ddc273ee8de3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "134c8b7f-40ad-4ff1-a1b8-956ec3bc5d7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7082a0d8-10f4-4cd7-9f22-ddc273ee8de3",
        "cursor": {
          "ref": "58c62f6e-7c78-48c9-a81c-5b5c57334869",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0ebee66e-9464-4edc-92c6-b672a60dc0c7"
        },
        "item": {
          "id": "7082a0d8-10f4-4cd7-9f22-ddc273ee8de3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "134c8b7f-40ad-4ff1-a1b8-956ec3bc5d7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b57d6ea-b6e4-4e55-9ac3-cd9b2b5a4033",
        "cursor": {
          "ref": "acb3800d-3e3c-4c1d-bcb8-3febf2d1d160",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "93ccfd4d-b97b-43f2-9d36-6193def5f1e9"
        },
        "item": {
          "id": "6b57d6ea-b6e4-4e55-9ac3-cd9b2b5a4033",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f9225278-4b15-4f26-a932-641aeb161fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b57d6ea-b6e4-4e55-9ac3-cd9b2b5a4033",
        "cursor": {
          "ref": "acb3800d-3e3c-4c1d-bcb8-3febf2d1d160",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "93ccfd4d-b97b-43f2-9d36-6193def5f1e9"
        },
        "item": {
          "id": "6b57d6ea-b6e4-4e55-9ac3-cd9b2b5a4033",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f9225278-4b15-4f26-a932-641aeb161fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904cc20e-d316-462f-9463-a9f38b165731",
        "cursor": {
          "ref": "85b206ad-fc37-458b-8075-b3a38272a273",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "482d84de-f90c-4bfc-aa2c-030ff72f071c"
        },
        "item": {
          "id": "904cc20e-d316-462f-9463-a9f38b165731",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aff940fe-173c-405c-8dbf-9663dfcb3ee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904cc20e-d316-462f-9463-a9f38b165731",
        "cursor": {
          "ref": "85b206ad-fc37-458b-8075-b3a38272a273",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "482d84de-f90c-4bfc-aa2c-030ff72f071c"
        },
        "item": {
          "id": "904cc20e-d316-462f-9463-a9f38b165731",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aff940fe-173c-405c-8dbf-9663dfcb3ee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94a38a4-9166-4125-8a00-5fcdf89ea300",
        "cursor": {
          "ref": "14ae9120-9441-4bf9-9a18-1957eb993808",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "123e74b3-2cf4-4748-be55-347f990bf83d"
        },
        "item": {
          "id": "a94a38a4-9166-4125-8a00-5fcdf89ea300",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "29a18abf-caed-40d1-99fe-151592869f38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94a38a4-9166-4125-8a00-5fcdf89ea300",
        "cursor": {
          "ref": "14ae9120-9441-4bf9-9a18-1957eb993808",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "123e74b3-2cf4-4748-be55-347f990bf83d"
        },
        "item": {
          "id": "a94a38a4-9166-4125-8a00-5fcdf89ea300",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "29a18abf-caed-40d1-99fe-151592869f38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5c8958-9f26-4e1b-ac60-2a2a57c4e771",
        "cursor": {
          "ref": "0b48075f-f42a-47a0-8d95-ac514c1260a3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4af54b01-efaa-4752-9813-37a745aa348c"
        },
        "item": {
          "id": "dd5c8958-9f26-4e1b-ac60-2a2a57c4e771",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "650e34a0-6b29-458e-adf5-dfa57de293e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5c8958-9f26-4e1b-ac60-2a2a57c4e771",
        "cursor": {
          "ref": "0b48075f-f42a-47a0-8d95-ac514c1260a3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4af54b01-efaa-4752-9813-37a745aa348c"
        },
        "item": {
          "id": "dd5c8958-9f26-4e1b-ac60-2a2a57c4e771",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "650e34a0-6b29-458e-adf5-dfa57de293e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9ac89c-01d8-4979-9be8-0e9b47100493",
        "cursor": {
          "ref": "2bbc76b9-12a4-4da9-ba58-e2f7d951e767",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "173625e4-6587-4b08-b780-64daf9af8a4b"
        },
        "item": {
          "id": "fe9ac89c-01d8-4979-9be8-0e9b47100493",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6762bfc8-5ae0-45d1-8dad-963268bf76a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9ac89c-01d8-4979-9be8-0e9b47100493",
        "cursor": {
          "ref": "2bbc76b9-12a4-4da9-ba58-e2f7d951e767",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "173625e4-6587-4b08-b780-64daf9af8a4b"
        },
        "item": {
          "id": "fe9ac89c-01d8-4979-9be8-0e9b47100493",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6762bfc8-5ae0-45d1-8dad-963268bf76a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a153bbb2-1b62-4135-8687-43934b32f402",
        "cursor": {
          "ref": "1207a03c-7f09-4879-a870-c14d625865fa",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b053cb29-e89c-4384-9d67-24bed45cc36a"
        },
        "item": {
          "id": "a153bbb2-1b62-4135-8687-43934b32f402",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "92cd4bb8-229a-42c4-9469-c2cf2541c69d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a153bbb2-1b62-4135-8687-43934b32f402",
        "cursor": {
          "ref": "1207a03c-7f09-4879-a870-c14d625865fa",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b053cb29-e89c-4384-9d67-24bed45cc36a"
        },
        "item": {
          "id": "a153bbb2-1b62-4135-8687-43934b32f402",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "92cd4bb8-229a-42c4-9469-c2cf2541c69d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7704de0-d750-4aa8-8f22-61cfff41a982",
        "cursor": {
          "ref": "6be29923-9423-41cc-aa58-f39f1956fca9",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1f5d7d1b-7206-493d-b8c5-a25c9839d09e"
        },
        "item": {
          "id": "e7704de0-d750-4aa8-8f22-61cfff41a982",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a30761c3-125f-435b-81f1-3af5534625b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7704de0-d750-4aa8-8f22-61cfff41a982",
        "cursor": {
          "ref": "6be29923-9423-41cc-aa58-f39f1956fca9",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1f5d7d1b-7206-493d-b8c5-a25c9839d09e"
        },
        "item": {
          "id": "e7704de0-d750-4aa8-8f22-61cfff41a982",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a30761c3-125f-435b-81f1-3af5534625b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fe5e68-c6ca-4460-b467-41bea51e126c",
        "cursor": {
          "ref": "58ee6dc7-38e6-43ce-954c-329898a32426",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3473455b-5a58-473f-8c75-841e0ed91216"
        },
        "item": {
          "id": "00fe5e68-c6ca-4460-b467-41bea51e126c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ac7d922b-961e-4659-8804-8325c5090f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fe5e68-c6ca-4460-b467-41bea51e126c",
        "cursor": {
          "ref": "58ee6dc7-38e6-43ce-954c-329898a32426",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3473455b-5a58-473f-8c75-841e0ed91216"
        },
        "item": {
          "id": "00fe5e68-c6ca-4460-b467-41bea51e126c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ac7d922b-961e-4659-8804-8325c5090f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33da662-40c5-43ee-829b-91639368d80f",
        "cursor": {
          "ref": "b7f7e181-0c36-40fe-960c-0614e3c4c28a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0044d993-9f91-41e7-816c-53a5028ea282"
        },
        "item": {
          "id": "c33da662-40c5-43ee-829b-91639368d80f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b58bd299-63e7-4b0a-979a-a1ac3bb33a0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33da662-40c5-43ee-829b-91639368d80f",
        "cursor": {
          "ref": "b7f7e181-0c36-40fe-960c-0614e3c4c28a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0044d993-9f91-41e7-816c-53a5028ea282"
        },
        "item": {
          "id": "c33da662-40c5-43ee-829b-91639368d80f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b58bd299-63e7-4b0a-979a-a1ac3bb33a0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592a7e67-d564-4287-9f22-f493495839e4",
        "cursor": {
          "ref": "66e4c7ea-3060-4ae4-95dc-cf9a4911075b",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c039ca6f-0670-43e0-89e3-bdabae35d274"
        },
        "item": {
          "id": "592a7e67-d564-4287-9f22-f493495839e4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "35dc671c-efad-4edd-92b8-ad0f8905c5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592a7e67-d564-4287-9f22-f493495839e4",
        "cursor": {
          "ref": "66e4c7ea-3060-4ae4-95dc-cf9a4911075b",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c039ca6f-0670-43e0-89e3-bdabae35d274"
        },
        "item": {
          "id": "592a7e67-d564-4287-9f22-f493495839e4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "35dc671c-efad-4edd-92b8-ad0f8905c5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2261fa4-f0b1-4589-ab71-8f61f40ede09",
        "cursor": {
          "ref": "6e6ed8ac-493d-4997-938b-6378710608c9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ab8749a1-4a99-4fb1-90e3-8ab861f28091"
        },
        "item": {
          "id": "a2261fa4-f0b1-4589-ab71-8f61f40ede09",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6ecdeb6e-2e2c-481b-81a4-22a57696fdf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2261fa4-f0b1-4589-ab71-8f61f40ede09",
        "cursor": {
          "ref": "6e6ed8ac-493d-4997-938b-6378710608c9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ab8749a1-4a99-4fb1-90e3-8ab861f28091"
        },
        "item": {
          "id": "a2261fa4-f0b1-4589-ab71-8f61f40ede09",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6ecdeb6e-2e2c-481b-81a4-22a57696fdf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d38f2d-7b0e-455f-ba48-e6e7d1004657",
        "cursor": {
          "ref": "06f921f5-5501-4f2e-98d2-1b032dee52d4",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6cb16737-3fb2-44a3-a011-3795dc74b159"
        },
        "item": {
          "id": "76d38f2d-7b0e-455f-ba48-e6e7d1004657",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fd29fff9-97b5-43e1-bcc8-a6bb41d860e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d38f2d-7b0e-455f-ba48-e6e7d1004657",
        "cursor": {
          "ref": "06f921f5-5501-4f2e-98d2-1b032dee52d4",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6cb16737-3fb2-44a3-a011-3795dc74b159"
        },
        "item": {
          "id": "76d38f2d-7b0e-455f-ba48-e6e7d1004657",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fd29fff9-97b5-43e1-bcc8-a6bb41d860e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbd8a8a-bd49-466d-9e85-eef8f919e085",
        "cursor": {
          "ref": "ed04e4ca-0fe3-47f3-9c60-9b8d7a75af79",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8ce80285-8118-4598-8978-3a09c7265cf4"
        },
        "item": {
          "id": "acbd8a8a-bd49-466d-9e85-eef8f919e085",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ca421fbc-dd87-4b5c-8966-ae3177d9ca3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbd8a8a-bd49-466d-9e85-eef8f919e085",
        "cursor": {
          "ref": "ed04e4ca-0fe3-47f3-9c60-9b8d7a75af79",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8ce80285-8118-4598-8978-3a09c7265cf4"
        },
        "item": {
          "id": "acbd8a8a-bd49-466d-9e85-eef8f919e085",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ca421fbc-dd87-4b5c-8966-ae3177d9ca3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5de4b82-949b-45eb-ade7-4ff135987525",
        "cursor": {
          "ref": "f6a72560-77ac-480d-873f-3929b5c9d620",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0cad6ffa-1d8e-4cf5-9862-4682632be2ad"
        },
        "item": {
          "id": "a5de4b82-949b-45eb-ade7-4ff135987525",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5d8730b5-a4e0-46a5-bc45-0b88094d27b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5de4b82-949b-45eb-ade7-4ff135987525",
        "cursor": {
          "ref": "f6a72560-77ac-480d-873f-3929b5c9d620",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0cad6ffa-1d8e-4cf5-9862-4682632be2ad"
        },
        "item": {
          "id": "a5de4b82-949b-45eb-ade7-4ff135987525",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5d8730b5-a4e0-46a5-bc45-0b88094d27b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb53fc3-c461-4bef-881f-d676911ca5d6",
        "cursor": {
          "ref": "ed3a21e7-7b77-4a68-a7dd-c6aa6ef0df99",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "67c04efb-465b-453b-84ef-ce3ed7f47a50"
        },
        "item": {
          "id": "fbb53fc3-c461-4bef-881f-d676911ca5d6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "00473199-a979-4d2c-9350-16f53a3e0675",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb53fc3-c461-4bef-881f-d676911ca5d6",
        "cursor": {
          "ref": "ed3a21e7-7b77-4a68-a7dd-c6aa6ef0df99",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "67c04efb-465b-453b-84ef-ce3ed7f47a50"
        },
        "item": {
          "id": "fbb53fc3-c461-4bef-881f-d676911ca5d6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "00473199-a979-4d2c-9350-16f53a3e0675",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b79e8c-b65a-4ca9-a7a8-049f22d795bb",
        "cursor": {
          "ref": "ffa8f934-738e-4564-8023-7f3a54f2bc91",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "22e94ad9-caec-4701-a738-ce3a53a3731c"
        },
        "item": {
          "id": "00b79e8c-b65a-4ca9-a7a8-049f22d795bb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d003b7b2-8671-4a88-a50a-952efc77a026",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b79e8c-b65a-4ca9-a7a8-049f22d795bb",
        "cursor": {
          "ref": "ffa8f934-738e-4564-8023-7f3a54f2bc91",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "22e94ad9-caec-4701-a738-ce3a53a3731c"
        },
        "item": {
          "id": "00b79e8c-b65a-4ca9-a7a8-049f22d795bb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d003b7b2-8671-4a88-a50a-952efc77a026",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870854c5-eb5c-4052-8cd4-f7f5066856c8",
        "cursor": {
          "ref": "dd8ad55f-a60c-4ba1-98c6-1c7d1de4b25e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3e9f73c7-c787-4553-8627-539e9d6592ce"
        },
        "item": {
          "id": "870854c5-eb5c-4052-8cd4-f7f5066856c8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8b9a6044-0fab-4b76-9fe4-27b9f1ad2d59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870854c5-eb5c-4052-8cd4-f7f5066856c8",
        "cursor": {
          "ref": "dd8ad55f-a60c-4ba1-98c6-1c7d1de4b25e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3e9f73c7-c787-4553-8627-539e9d6592ce"
        },
        "item": {
          "id": "870854c5-eb5c-4052-8cd4-f7f5066856c8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8b9a6044-0fab-4b76-9fe4-27b9f1ad2d59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b90c17c-3b43-4716-af49-91a171e13c62",
        "cursor": {
          "ref": "c9950a67-5179-414b-a73d-40bbaf1f4d55",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5f080849-fb7e-4f4a-b452-d9071eb02c31"
        },
        "item": {
          "id": "0b90c17c-3b43-4716-af49-91a171e13c62",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "40f28a82-0ea8-4b67-830c-8bedbd886766",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b90c17c-3b43-4716-af49-91a171e13c62",
        "cursor": {
          "ref": "c9950a67-5179-414b-a73d-40bbaf1f4d55",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5f080849-fb7e-4f4a-b452-d9071eb02c31"
        },
        "item": {
          "id": "0b90c17c-3b43-4716-af49-91a171e13c62",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "40f28a82-0ea8-4b67-830c-8bedbd886766",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dc3720-f126-43c3-95bc-27743ca319c0",
        "cursor": {
          "ref": "7b48f0a9-b795-487b-8094-21448d56f273",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fec3bad1-9302-4470-9cd2-09130117df27"
        },
        "item": {
          "id": "a6dc3720-f126-43c3-95bc-27743ca319c0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "de5a75eb-9858-4623-b3b5-6b14b7948de4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dc3720-f126-43c3-95bc-27743ca319c0",
        "cursor": {
          "ref": "7b48f0a9-b795-487b-8094-21448d56f273",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fec3bad1-9302-4470-9cd2-09130117df27"
        },
        "item": {
          "id": "a6dc3720-f126-43c3-95bc-27743ca319c0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "de5a75eb-9858-4623-b3b5-6b14b7948de4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e09bff-e7ab-48ee-9115-dc123532171a",
        "cursor": {
          "ref": "6546bcca-65f2-4a01-8405-87ab0f0f4dbe",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0b219513-87be-4150-83be-bff725eb77cb"
        },
        "item": {
          "id": "75e09bff-e7ab-48ee-9115-dc123532171a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ca1049ff-b54d-4ede-9a51-27acc11beafc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e09bff-e7ab-48ee-9115-dc123532171a",
        "cursor": {
          "ref": "6546bcca-65f2-4a01-8405-87ab0f0f4dbe",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0b219513-87be-4150-83be-bff725eb77cb"
        },
        "item": {
          "id": "75e09bff-e7ab-48ee-9115-dc123532171a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ca1049ff-b54d-4ede-9a51-27acc11beafc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588caa3c-3f14-47b9-a681-dc3f5c2d84b4",
        "cursor": {
          "ref": "e5ad1018-0bde-460c-8e1d-47f50a9d6356",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "088e7250-ac15-4f58-8f37-93b639be2824"
        },
        "item": {
          "id": "588caa3c-3f14-47b9-a681-dc3f5c2d84b4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b7ce644e-7871-4e91-83b8-293e12402338",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588caa3c-3f14-47b9-a681-dc3f5c2d84b4",
        "cursor": {
          "ref": "e5ad1018-0bde-460c-8e1d-47f50a9d6356",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "088e7250-ac15-4f58-8f37-93b639be2824"
        },
        "item": {
          "id": "588caa3c-3f14-47b9-a681-dc3f5c2d84b4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b7ce644e-7871-4e91-83b8-293e12402338",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dd8af1-9a44-4b0d-8c78-bec3b5630c86",
        "cursor": {
          "ref": "69ca7dad-aa6b-4392-995d-09d567177d71",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ac56a803-1ec5-4b74-a8c0-0ace3f494c57"
        },
        "item": {
          "id": "42dd8af1-9a44-4b0d-8c78-bec3b5630c86",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "690e3634-7ed6-46e5-80da-eb4bb26e4c99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dd8af1-9a44-4b0d-8c78-bec3b5630c86",
        "cursor": {
          "ref": "69ca7dad-aa6b-4392-995d-09d567177d71",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ac56a803-1ec5-4b74-a8c0-0ace3f494c57"
        },
        "item": {
          "id": "42dd8af1-9a44-4b0d-8c78-bec3b5630c86",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "690e3634-7ed6-46e5-80da-eb4bb26e4c99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8804a945-a3e1-4c6e-a0e5-f2b94acc00e0",
        "cursor": {
          "ref": "488de45c-1881-47c5-8a69-4292c9f8f2b4",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "81d690df-6fe1-41ee-b197-141d547f6217"
        },
        "item": {
          "id": "8804a945-a3e1-4c6e-a0e5-f2b94acc00e0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f01f7f90-3ac5-4781-bb2a-c0f8acacbf38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8804a945-a3e1-4c6e-a0e5-f2b94acc00e0",
        "cursor": {
          "ref": "488de45c-1881-47c5-8a69-4292c9f8f2b4",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "81d690df-6fe1-41ee-b197-141d547f6217"
        },
        "item": {
          "id": "8804a945-a3e1-4c6e-a0e5-f2b94acc00e0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f01f7f90-3ac5-4781-bb2a-c0f8acacbf38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee96173-e4ba-4fdd-9542-f3d0ecbea0d4",
        "cursor": {
          "ref": "cde0d71c-faa5-4ba9-a719-02c58e7932fb",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cf6280f6-5a69-465d-9837-e34e22907dcb"
        },
        "item": {
          "id": "1ee96173-e4ba-4fdd-9542-f3d0ecbea0d4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2ab4faf6-07b0-466d-8042-5a04334801ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee96173-e4ba-4fdd-9542-f3d0ecbea0d4",
        "cursor": {
          "ref": "cde0d71c-faa5-4ba9-a719-02c58e7932fb",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cf6280f6-5a69-465d-9837-e34e22907dcb"
        },
        "item": {
          "id": "1ee96173-e4ba-4fdd-9542-f3d0ecbea0d4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2ab4faf6-07b0-466d-8042-5a04334801ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385cc7e8-b3f4-4d88-83c8-806cb200f9a1",
        "cursor": {
          "ref": "6bc7c0dc-1cae-416c-82b1-4d548f9d70e6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "033a29f8-a873-487e-a405-400730df1a41"
        },
        "item": {
          "id": "385cc7e8-b3f4-4d88-83c8-806cb200f9a1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b92d7f8f-9e52-4e04-af73-0edc96b608a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385cc7e8-b3f4-4d88-83c8-806cb200f9a1",
        "cursor": {
          "ref": "6bc7c0dc-1cae-416c-82b1-4d548f9d70e6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "033a29f8-a873-487e-a405-400730df1a41"
        },
        "item": {
          "id": "385cc7e8-b3f4-4d88-83c8-806cb200f9a1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b92d7f8f-9e52-4e04-af73-0edc96b608a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032b4b09-f581-4e2e-ae46-721e96f5b456",
        "cursor": {
          "ref": "3bb42b23-03d0-43da-9b89-8ad697432c39",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ab6696a5-ef42-4d4f-a77e-4f9ad884dffc"
        },
        "item": {
          "id": "032b4b09-f581-4e2e-ae46-721e96f5b456",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4850db2d-b829-4a7b-8d5f-537dae6221bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032b4b09-f581-4e2e-ae46-721e96f5b456",
        "cursor": {
          "ref": "3bb42b23-03d0-43da-9b89-8ad697432c39",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ab6696a5-ef42-4d4f-a77e-4f9ad884dffc"
        },
        "item": {
          "id": "032b4b09-f581-4e2e-ae46-721e96f5b456",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4850db2d-b829-4a7b-8d5f-537dae6221bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa7b125-befb-49a1-9a1a-e4e94085825a",
        "cursor": {
          "ref": "da3b75e9-b44a-4cd5-947c-4c035cebe735",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "37b363b8-9272-4ca8-a060-8adb23ec4a7c"
        },
        "item": {
          "id": "efa7b125-befb-49a1-9a1a-e4e94085825a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8eff743a-dffb-4119-8170-74fadf4ff0c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa7b125-befb-49a1-9a1a-e4e94085825a",
        "cursor": {
          "ref": "da3b75e9-b44a-4cd5-947c-4c035cebe735",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "37b363b8-9272-4ca8-a060-8adb23ec4a7c"
        },
        "item": {
          "id": "efa7b125-befb-49a1-9a1a-e4e94085825a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8eff743a-dffb-4119-8170-74fadf4ff0c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc6815b-9754-46fb-afb9-6903250ff4da",
        "cursor": {
          "ref": "2c8dfb81-2189-42f6-afee-b504a5f2ad8c",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "335b8701-71f7-4ce2-bb1e-097ef3bb6f67"
        },
        "item": {
          "id": "0bc6815b-9754-46fb-afb9-6903250ff4da",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0ec151ef-6619-4e90-9039-f074d4a3c906",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc6815b-9754-46fb-afb9-6903250ff4da",
        "cursor": {
          "ref": "2c8dfb81-2189-42f6-afee-b504a5f2ad8c",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "335b8701-71f7-4ce2-bb1e-097ef3bb6f67"
        },
        "item": {
          "id": "0bc6815b-9754-46fb-afb9-6903250ff4da",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0ec151ef-6619-4e90-9039-f074d4a3c906",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa99aad-5312-4e61-8bce-e57ba2d22d45",
        "cursor": {
          "ref": "e734f37e-bf69-4a39-8a59-3f3edc26b32c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "30a72c4c-3e01-43f8-a402-257b9c5e7704"
        },
        "item": {
          "id": "1fa99aad-5312-4e61-8bce-e57ba2d22d45",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d586431f-ae5e-4a96-bb35-04a6a5cc808a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa99aad-5312-4e61-8bce-e57ba2d22d45",
        "cursor": {
          "ref": "e734f37e-bf69-4a39-8a59-3f3edc26b32c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "30a72c4c-3e01-43f8-a402-257b9c5e7704"
        },
        "item": {
          "id": "1fa99aad-5312-4e61-8bce-e57ba2d22d45",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d586431f-ae5e-4a96-bb35-04a6a5cc808a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9969d4db-009e-42dc-a130-f00b7ce8ec2a",
        "cursor": {
          "ref": "97572e77-eddf-4d81-b9ff-3caf6a8de821",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6b2958e0-c50a-4306-9241-6be7e2fc88b9"
        },
        "item": {
          "id": "9969d4db-009e-42dc-a130-f00b7ce8ec2a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "05e8aa22-ec7e-4326-b937-b9508aea9568",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9969d4db-009e-42dc-a130-f00b7ce8ec2a",
        "cursor": {
          "ref": "97572e77-eddf-4d81-b9ff-3caf6a8de821",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6b2958e0-c50a-4306-9241-6be7e2fc88b9"
        },
        "item": {
          "id": "9969d4db-009e-42dc-a130-f00b7ce8ec2a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "05e8aa22-ec7e-4326-b937-b9508aea9568",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89aac613-95b9-4870-8148-0841644070bf",
        "cursor": {
          "ref": "6869eaf5-23b3-4368-ab74-470175f8f877",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "79421265-7eb1-45e9-acae-7fa609cd2373"
        },
        "item": {
          "id": "89aac613-95b9-4870-8148-0841644070bf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "25fac0f2-b81e-4251-8595-e829310d24c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89aac613-95b9-4870-8148-0841644070bf",
        "cursor": {
          "ref": "6869eaf5-23b3-4368-ab74-470175f8f877",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "79421265-7eb1-45e9-acae-7fa609cd2373"
        },
        "item": {
          "id": "89aac613-95b9-4870-8148-0841644070bf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "25fac0f2-b81e-4251-8595-e829310d24c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39544f63-ed5e-4114-b655-4ff366a1fbb2",
        "cursor": {
          "ref": "3f846933-fd6a-4b5e-968d-8a6bd271d213",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "55b1ace1-3917-4423-82a5-be7d4f4a5294"
        },
        "item": {
          "id": "39544f63-ed5e-4114-b655-4ff366a1fbb2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "098f3789-0f7c-4927-bd05-094563fa5ec6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39544f63-ed5e-4114-b655-4ff366a1fbb2",
        "cursor": {
          "ref": "3f846933-fd6a-4b5e-968d-8a6bd271d213",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "55b1ace1-3917-4423-82a5-be7d4f4a5294"
        },
        "item": {
          "id": "39544f63-ed5e-4114-b655-4ff366a1fbb2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "098f3789-0f7c-4927-bd05-094563fa5ec6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87cf0cf-49a8-4355-9948-06f104141201",
        "cursor": {
          "ref": "574d2f64-2c1b-4201-9ad8-63c7ac8c7f79",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4ed68411-f6f6-4ca5-9ac0-48bcc761317e"
        },
        "item": {
          "id": "b87cf0cf-49a8-4355-9948-06f104141201",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1c9cbbfc-4f8e-49c9-9fa6-2cacaf7ac4d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87cf0cf-49a8-4355-9948-06f104141201",
        "cursor": {
          "ref": "574d2f64-2c1b-4201-9ad8-63c7ac8c7f79",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4ed68411-f6f6-4ca5-9ac0-48bcc761317e"
        },
        "item": {
          "id": "b87cf0cf-49a8-4355-9948-06f104141201",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1c9cbbfc-4f8e-49c9-9fa6-2cacaf7ac4d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98240943-5e90-49f8-8f89-aa2697176d55",
        "cursor": {
          "ref": "75846339-3a2c-4049-a185-f99116dc51ac",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "27a56185-a42a-4294-a9d1-725dad42d3dc"
        },
        "item": {
          "id": "98240943-5e90-49f8-8f89-aa2697176d55",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "74781597-d22b-449d-b9ca-1aaa6a0779af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98240943-5e90-49f8-8f89-aa2697176d55",
        "cursor": {
          "ref": "75846339-3a2c-4049-a185-f99116dc51ac",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "27a56185-a42a-4294-a9d1-725dad42d3dc"
        },
        "item": {
          "id": "98240943-5e90-49f8-8f89-aa2697176d55",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "74781597-d22b-449d-b9ca-1aaa6a0779af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4d826e-72a1-4605-b85d-725a2004e8ad",
        "cursor": {
          "ref": "106ea7cc-1f21-4d2f-a03e-46dedc763066",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f28405cd-432f-45b9-9b1c-c788ea632b05"
        },
        "item": {
          "id": "dd4d826e-72a1-4605-b85d-725a2004e8ad",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "85cf7c94-c0b8-4fee-b9d2-eaafc954a8dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4d826e-72a1-4605-b85d-725a2004e8ad",
        "cursor": {
          "ref": "106ea7cc-1f21-4d2f-a03e-46dedc763066",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f28405cd-432f-45b9-9b1c-c788ea632b05"
        },
        "item": {
          "id": "dd4d826e-72a1-4605-b85d-725a2004e8ad",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "85cf7c94-c0b8-4fee-b9d2-eaafc954a8dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de26bd2c-4b1a-4ec9-a281-b143a4bc316e",
        "cursor": {
          "ref": "8a836af0-e0df-43b5-af68-6bb27b70bdf0",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3f1379f5-8db5-4e03-b40d-32e39337f07d"
        },
        "item": {
          "id": "de26bd2c-4b1a-4ec9-a281-b143a4bc316e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f2f5d5ef-6514-44e5-9b25-9ad2b33ef96b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de26bd2c-4b1a-4ec9-a281-b143a4bc316e",
        "cursor": {
          "ref": "8a836af0-e0df-43b5-af68-6bb27b70bdf0",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3f1379f5-8db5-4e03-b40d-32e39337f07d"
        },
        "item": {
          "id": "de26bd2c-4b1a-4ec9-a281-b143a4bc316e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f2f5d5ef-6514-44e5-9b25-9ad2b33ef96b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67b138f-45fa-4ad2-bb15-08e6cc49644e",
        "cursor": {
          "ref": "3d42a193-14d6-436e-be51-7a2ec619d34b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0b9a2d3f-b170-41d2-8f6b-c42577b8e164"
        },
        "item": {
          "id": "e67b138f-45fa-4ad2-bb15-08e6cc49644e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6f7302e3-d48e-4fb2-8c26-8f64d2ad787c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67b138f-45fa-4ad2-bb15-08e6cc49644e",
        "cursor": {
          "ref": "3d42a193-14d6-436e-be51-7a2ec619d34b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0b9a2d3f-b170-41d2-8f6b-c42577b8e164"
        },
        "item": {
          "id": "e67b138f-45fa-4ad2-bb15-08e6cc49644e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6f7302e3-d48e-4fb2-8c26-8f64d2ad787c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779a23d1-0f9e-4fea-9ce4-8076faa33d72",
        "cursor": {
          "ref": "9a98b767-f09a-4d62-b16c-4d933dc79daa",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1b6a4573-fe01-4a82-9427-fbeb306e3346"
        },
        "item": {
          "id": "779a23d1-0f9e-4fea-9ce4-8076faa33d72",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2a6d6160-6afb-494a-b6fd-7dd3baa445f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779a23d1-0f9e-4fea-9ce4-8076faa33d72",
        "cursor": {
          "ref": "9a98b767-f09a-4d62-b16c-4d933dc79daa",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1b6a4573-fe01-4a82-9427-fbeb306e3346"
        },
        "item": {
          "id": "779a23d1-0f9e-4fea-9ce4-8076faa33d72",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2a6d6160-6afb-494a-b6fd-7dd3baa445f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5e05d1-1639-424a-8823-8e1a959ece79",
        "cursor": {
          "ref": "7a303111-f93e-44b5-b137-ddfb5bed260a",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "91a1af6e-96fe-4276-9065-e50b7c33dd94"
        },
        "item": {
          "id": "cf5e05d1-1639-424a-8823-8e1a959ece79",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d790e4b9-1b0f-47e3-b109-af6870cccfee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5e05d1-1639-424a-8823-8e1a959ece79",
        "cursor": {
          "ref": "7a303111-f93e-44b5-b137-ddfb5bed260a",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "91a1af6e-96fe-4276-9065-e50b7c33dd94"
        },
        "item": {
          "id": "cf5e05d1-1639-424a-8823-8e1a959ece79",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d790e4b9-1b0f-47e3-b109-af6870cccfee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028829e9-6d62-416b-bfd2-3c9c733f9128",
        "cursor": {
          "ref": "810b899a-c06b-43c1-a0b6-99ba34803da5",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ef5f5e40-27e0-4d58-9ed2-3e193324aadb"
        },
        "item": {
          "id": "028829e9-6d62-416b-bfd2-3c9c733f9128",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "197c2a43-d72e-4b28-b016-d5128044fc22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028829e9-6d62-416b-bfd2-3c9c733f9128",
        "cursor": {
          "ref": "810b899a-c06b-43c1-a0b6-99ba34803da5",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ef5f5e40-27e0-4d58-9ed2-3e193324aadb"
        },
        "item": {
          "id": "028829e9-6d62-416b-bfd2-3c9c733f9128",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "197c2a43-d72e-4b28-b016-d5128044fc22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf91997c-51f4-4ab4-8007-502fdf35e421",
        "cursor": {
          "ref": "22edc599-d132-4445-9f50-d3e13d9bdd5a",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4c0895ea-a808-4d1a-a94d-e678e03add9d"
        },
        "item": {
          "id": "cf91997c-51f4-4ab4-8007-502fdf35e421",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0033568b-625b-4c26-bbe0-384cbff468ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf91997c-51f4-4ab4-8007-502fdf35e421",
        "cursor": {
          "ref": "22edc599-d132-4445-9f50-d3e13d9bdd5a",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4c0895ea-a808-4d1a-a94d-e678e03add9d"
        },
        "item": {
          "id": "cf91997c-51f4-4ab4-8007-502fdf35e421",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0033568b-625b-4c26-bbe0-384cbff468ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec362b72-4040-44fd-b73f-6e4590677d1e",
        "cursor": {
          "ref": "ac5143ac-a4ba-4d17-b7d9-b7daca8275a7",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "641333f1-3db6-4548-b8b5-c5e986985690"
        },
        "item": {
          "id": "ec362b72-4040-44fd-b73f-6e4590677d1e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6ec4882c-6249-4bfd-88a0-89b688629ede",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec362b72-4040-44fd-b73f-6e4590677d1e",
        "cursor": {
          "ref": "ac5143ac-a4ba-4d17-b7d9-b7daca8275a7",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "641333f1-3db6-4548-b8b5-c5e986985690"
        },
        "item": {
          "id": "ec362b72-4040-44fd-b73f-6e4590677d1e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6ec4882c-6249-4bfd-88a0-89b688629ede",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6c593f-0ed4-4a9a-8062-520a38627d81",
        "cursor": {
          "ref": "c82766b7-ae44-4829-ac62-e124a4e74ff4",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7b6f4887-5275-4dd8-8f4d-038433d81ae9"
        },
        "item": {
          "id": "6f6c593f-0ed4-4a9a-8062-520a38627d81",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "20143e6c-55af-4d53-ac06-25d66e9826d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6c593f-0ed4-4a9a-8062-520a38627d81",
        "cursor": {
          "ref": "c82766b7-ae44-4829-ac62-e124a4e74ff4",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7b6f4887-5275-4dd8-8f4d-038433d81ae9"
        },
        "item": {
          "id": "6f6c593f-0ed4-4a9a-8062-520a38627d81",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "20143e6c-55af-4d53-ac06-25d66e9826d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd89675-def9-4f4f-a4bf-73ee88b61308",
        "cursor": {
          "ref": "327b7c88-8a36-4975-8b00-947d4fde05e3",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f7612042-9e06-4fad-b193-249c07605685"
        },
        "item": {
          "id": "bbd89675-def9-4f4f-a4bf-73ee88b61308",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2800fdf6-3e49-4dd9-a2ed-acb5de0be833",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd89675-def9-4f4f-a4bf-73ee88b61308",
        "cursor": {
          "ref": "327b7c88-8a36-4975-8b00-947d4fde05e3",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f7612042-9e06-4fad-b193-249c07605685"
        },
        "item": {
          "id": "bbd89675-def9-4f4f-a4bf-73ee88b61308",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2800fdf6-3e49-4dd9-a2ed-acb5de0be833",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f0a51e-577e-49be-842c-97ecdf49aa9a",
        "cursor": {
          "ref": "afd87b33-f0a1-483b-bcb2-1dc204278ab5",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2198060c-8af3-49b8-ab88-abc24205617b"
        },
        "item": {
          "id": "d5f0a51e-577e-49be-842c-97ecdf49aa9a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c4dae50e-e5e5-46d0-98b5-46161135bc2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f0a51e-577e-49be-842c-97ecdf49aa9a",
        "cursor": {
          "ref": "afd87b33-f0a1-483b-bcb2-1dc204278ab5",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2198060c-8af3-49b8-ab88-abc24205617b"
        },
        "item": {
          "id": "d5f0a51e-577e-49be-842c-97ecdf49aa9a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c4dae50e-e5e5-46d0-98b5-46161135bc2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7c84fd-9615-438e-9c9c-863aa94aabeb",
        "cursor": {
          "ref": "128188cb-a844-4e2a-b1ff-d01f9df98982",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b9a867aa-abeb-4c43-8943-e4189b48feb3"
        },
        "item": {
          "id": "bd7c84fd-9615-438e-9c9c-863aa94aabeb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b521550b-d0ee-43e8-8d86-a1ecf91f558b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7c84fd-9615-438e-9c9c-863aa94aabeb",
        "cursor": {
          "ref": "128188cb-a844-4e2a-b1ff-d01f9df98982",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b9a867aa-abeb-4c43-8943-e4189b48feb3"
        },
        "item": {
          "id": "bd7c84fd-9615-438e-9c9c-863aa94aabeb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b521550b-d0ee-43e8-8d86-a1ecf91f558b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1ba84c-5d9b-4f14-ae1e-fe7ce33b2fa6",
        "cursor": {
          "ref": "360392ce-8baa-4d3c-a425-da224ee967fa",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "876d5ef8-f10b-4a13-aea5-8a4d41f0e8ff"
        },
        "item": {
          "id": "cc1ba84c-5d9b-4f14-ae1e-fe7ce33b2fa6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1fa54d9e-f45f-456c-aa1b-04829961f40d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1ba84c-5d9b-4f14-ae1e-fe7ce33b2fa6",
        "cursor": {
          "ref": "360392ce-8baa-4d3c-a425-da224ee967fa",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "876d5ef8-f10b-4a13-aea5-8a4d41f0e8ff"
        },
        "item": {
          "id": "cc1ba84c-5d9b-4f14-ae1e-fe7ce33b2fa6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1fa54d9e-f45f-456c-aa1b-04829961f40d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c80439-37fa-4a18-b699-ed2f94d96aaf",
        "cursor": {
          "ref": "41504cb2-195e-46e8-9faf-853e90a1e2f2",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0f4e363f-0375-487e-8e2b-ccfec77fcec7"
        },
        "item": {
          "id": "20c80439-37fa-4a18-b699-ed2f94d96aaf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a65b54d6-43ba-44cd-80e1-d8627b568ce2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c80439-37fa-4a18-b699-ed2f94d96aaf",
        "cursor": {
          "ref": "41504cb2-195e-46e8-9faf-853e90a1e2f2",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0f4e363f-0375-487e-8e2b-ccfec77fcec7"
        },
        "item": {
          "id": "20c80439-37fa-4a18-b699-ed2f94d96aaf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a65b54d6-43ba-44cd-80e1-d8627b568ce2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decaabb4-f4d0-4d84-9cc1-15cbded25c8b",
        "cursor": {
          "ref": "f976625a-c587-419f-a1e3-014b8ad7d4d5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e66e5684-94ae-4cd7-8a89-f3496d3f3856"
        },
        "item": {
          "id": "decaabb4-f4d0-4d84-9cc1-15cbded25c8b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "919fae18-bca1-489f-80bd-e1a36a7e633d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decaabb4-f4d0-4d84-9cc1-15cbded25c8b",
        "cursor": {
          "ref": "f976625a-c587-419f-a1e3-014b8ad7d4d5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e66e5684-94ae-4cd7-8a89-f3496d3f3856"
        },
        "item": {
          "id": "decaabb4-f4d0-4d84-9cc1-15cbded25c8b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "919fae18-bca1-489f-80bd-e1a36a7e633d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43bbb35-c4cd-4d15-81cd-62ff82b24fae",
        "cursor": {
          "ref": "4cb6d508-24d4-43b0-9a3b-678f642d17b8",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d356e94c-f7f8-43d5-821b-0ae5c7d3d8b0"
        },
        "item": {
          "id": "e43bbb35-c4cd-4d15-81cd-62ff82b24fae",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aac6fa36-ae97-43c5-86f6-8f08e703b934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43bbb35-c4cd-4d15-81cd-62ff82b24fae",
        "cursor": {
          "ref": "4cb6d508-24d4-43b0-9a3b-678f642d17b8",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d356e94c-f7f8-43d5-821b-0ae5c7d3d8b0"
        },
        "item": {
          "id": "e43bbb35-c4cd-4d15-81cd-62ff82b24fae",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aac6fa36-ae97-43c5-86f6-8f08e703b934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b05ee7-af9b-4f76-a978-ba2546270a2b",
        "cursor": {
          "ref": "f6c220e5-2591-4aba-8c94-8de2471e7a33",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0995d9ee-4101-4389-a130-d25f98a22ce5"
        },
        "item": {
          "id": "94b05ee7-af9b-4f76-a978-ba2546270a2b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c79a9a56-374b-4bed-9a1a-c2869354af2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b05ee7-af9b-4f76-a978-ba2546270a2b",
        "cursor": {
          "ref": "f6c220e5-2591-4aba-8c94-8de2471e7a33",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0995d9ee-4101-4389-a130-d25f98a22ce5"
        },
        "item": {
          "id": "94b05ee7-af9b-4f76-a978-ba2546270a2b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c79a9a56-374b-4bed-9a1a-c2869354af2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d30b6ff-a30e-498f-bfdf-6da7d8df04af",
        "cursor": {
          "ref": "a491e486-9b2f-4daa-b140-eed34b1da79e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1f4378f6-1b84-4c12-959e-00c00ebbae08"
        },
        "item": {
          "id": "9d30b6ff-a30e-498f-bfdf-6da7d8df04af",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f91e814-5a86-4a88-b85c-0a7ec2653eb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d30b6ff-a30e-498f-bfdf-6da7d8df04af",
        "cursor": {
          "ref": "a491e486-9b2f-4daa-b140-eed34b1da79e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1f4378f6-1b84-4c12-959e-00c00ebbae08"
        },
        "item": {
          "id": "9d30b6ff-a30e-498f-bfdf-6da7d8df04af",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f91e814-5a86-4a88-b85c-0a7ec2653eb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdec447-4715-46ae-abd6-eb3f64a3c3b3",
        "cursor": {
          "ref": "5a294a68-acb0-4afe-ad0b-3161450eac76",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a8ac1ff0-becc-4d94-a2a1-4351cb98c87b"
        },
        "item": {
          "id": "bfdec447-4715-46ae-abd6-eb3f64a3c3b3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "612073b0-b0a0-445c-8801-123f33e4ab84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdec447-4715-46ae-abd6-eb3f64a3c3b3",
        "cursor": {
          "ref": "5a294a68-acb0-4afe-ad0b-3161450eac76",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a8ac1ff0-becc-4d94-a2a1-4351cb98c87b"
        },
        "item": {
          "id": "bfdec447-4715-46ae-abd6-eb3f64a3c3b3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "612073b0-b0a0-445c-8801-123f33e4ab84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9b8e16-9903-4ea3-9946-e8c94e4aeca3",
        "cursor": {
          "ref": "378be0f1-efa4-422a-955f-175614a47ef2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "19c9defd-368b-48bd-a95f-278c08302d1f"
        },
        "item": {
          "id": "fc9b8e16-9903-4ea3-9946-e8c94e4aeca3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3817cfea-c4c5-46ae-91c9-9844896f7e99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9b8e16-9903-4ea3-9946-e8c94e4aeca3",
        "cursor": {
          "ref": "378be0f1-efa4-422a-955f-175614a47ef2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "19c9defd-368b-48bd-a95f-278c08302d1f"
        },
        "item": {
          "id": "fc9b8e16-9903-4ea3-9946-e8c94e4aeca3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3817cfea-c4c5-46ae-91c9-9844896f7e99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85a9e96-7050-40d9-883e-59f3b1da6c79",
        "cursor": {
          "ref": "0268573f-3fd6-4ef9-9bb2-9798628acd87",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d1cb0b68-8524-48bd-9f0b-a04493005a08"
        },
        "item": {
          "id": "e85a9e96-7050-40d9-883e-59f3b1da6c79",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "29b1bc3b-6e96-4cf0-9870-03fa397a5299",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85a9e96-7050-40d9-883e-59f3b1da6c79",
        "cursor": {
          "ref": "0268573f-3fd6-4ef9-9bb2-9798628acd87",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d1cb0b68-8524-48bd-9f0b-a04493005a08"
        },
        "item": {
          "id": "e85a9e96-7050-40d9-883e-59f3b1da6c79",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "29b1bc3b-6e96-4cf0-9870-03fa397a5299",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53440f1b-235e-4dd2-a71d-b5863597dabe",
        "cursor": {
          "ref": "2d1f248a-d266-4742-805a-e92771428380",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c37faa30-e140-445c-b085-40309ebc11a6"
        },
        "item": {
          "id": "53440f1b-235e-4dd2-a71d-b5863597dabe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e5f1d9af-5423-4bf5-9fab-0ae0d34d6e35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53440f1b-235e-4dd2-a71d-b5863597dabe",
        "cursor": {
          "ref": "2d1f248a-d266-4742-805a-e92771428380",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c37faa30-e140-445c-b085-40309ebc11a6"
        },
        "item": {
          "id": "53440f1b-235e-4dd2-a71d-b5863597dabe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e5f1d9af-5423-4bf5-9fab-0ae0d34d6e35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b022b17-f51d-4f93-8db1-b6ed2958e557",
        "cursor": {
          "ref": "fcd3c845-e996-4ca8-8cff-d9b7839363b2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b6090cd1-6aed-4fbe-983d-4b01bd43f4db"
        },
        "item": {
          "id": "1b022b17-f51d-4f93-8db1-b6ed2958e557",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "18763f66-0766-47f7-af1e-3270a8784325",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b022b17-f51d-4f93-8db1-b6ed2958e557",
        "cursor": {
          "ref": "fcd3c845-e996-4ca8-8cff-d9b7839363b2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b6090cd1-6aed-4fbe-983d-4b01bd43f4db"
        },
        "item": {
          "id": "1b022b17-f51d-4f93-8db1-b6ed2958e557",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "18763f66-0766-47f7-af1e-3270a8784325",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdbe7c6-3791-4702-a32b-4336f06eef22",
        "cursor": {
          "ref": "713dd40a-1fb3-4aa4-a226-f35286ebaebb",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "32b5da15-09b8-44f6-b974-cd7678a80720"
        },
        "item": {
          "id": "fcdbe7c6-3791-4702-a32b-4336f06eef22",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "07c58e21-78dd-4542-9866-a1b73e71b540",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdbe7c6-3791-4702-a32b-4336f06eef22",
        "cursor": {
          "ref": "713dd40a-1fb3-4aa4-a226-f35286ebaebb",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "32b5da15-09b8-44f6-b974-cd7678a80720"
        },
        "item": {
          "id": "fcdbe7c6-3791-4702-a32b-4336f06eef22",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "07c58e21-78dd-4542-9866-a1b73e71b540",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32766f5-1cd8-4cc1-b74f-7ba5929d233e",
        "cursor": {
          "ref": "9c95906b-58f1-4634-b83b-8f9626c6347e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "70748c71-76ed-4324-b949-a307d8bf1f54"
        },
        "item": {
          "id": "a32766f5-1cd8-4cc1-b74f-7ba5929d233e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "643c30e7-8acc-41aa-87b2-90f369a5ed4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32766f5-1cd8-4cc1-b74f-7ba5929d233e",
        "cursor": {
          "ref": "9c95906b-58f1-4634-b83b-8f9626c6347e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "70748c71-76ed-4324-b949-a307d8bf1f54"
        },
        "item": {
          "id": "a32766f5-1cd8-4cc1-b74f-7ba5929d233e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "643c30e7-8acc-41aa-87b2-90f369a5ed4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a293cb17-b5e8-4c4e-ae35-edc17ce7c707",
        "cursor": {
          "ref": "130001b9-e010-45d5-a47d-96caf2d84bb2",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "74ef0393-5c0a-4881-8713-73fe3aea105f"
        },
        "item": {
          "id": "a293cb17-b5e8-4c4e-ae35-edc17ce7c707",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7ec595cc-a69e-463d-90ae-500077dc08d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a293cb17-b5e8-4c4e-ae35-edc17ce7c707",
        "cursor": {
          "ref": "130001b9-e010-45d5-a47d-96caf2d84bb2",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "74ef0393-5c0a-4881-8713-73fe3aea105f"
        },
        "item": {
          "id": "a293cb17-b5e8-4c4e-ae35-edc17ce7c707",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7ec595cc-a69e-463d-90ae-500077dc08d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c2839e-5ed0-4290-adb8-219a059e31fa",
        "cursor": {
          "ref": "2fd0c079-bd74-4a5b-bde3-6e84cd2ad550",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3aa95cb1-4b9b-4097-a64b-a2ea8854d050"
        },
        "item": {
          "id": "d6c2839e-5ed0-4290-adb8-219a059e31fa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0dc7bad9-bb48-4b01-b4dc-c13521da62cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c2839e-5ed0-4290-adb8-219a059e31fa",
        "cursor": {
          "ref": "2fd0c079-bd74-4a5b-bde3-6e84cd2ad550",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3aa95cb1-4b9b-4097-a64b-a2ea8854d050"
        },
        "item": {
          "id": "d6c2839e-5ed0-4290-adb8-219a059e31fa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0dc7bad9-bb48-4b01-b4dc-c13521da62cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8225c257-c5b4-4b08-933e-239afc68b540",
        "cursor": {
          "ref": "13dec64c-8857-42a5-90c9-e055196040bb",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "465e7916-4fae-4721-a85c-1ab985ff8b2f"
        },
        "item": {
          "id": "8225c257-c5b4-4b08-933e-239afc68b540",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fa97b2e1-7917-411d-a566-7aa9bc45ed58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8225c257-c5b4-4b08-933e-239afc68b540",
        "cursor": {
          "ref": "13dec64c-8857-42a5-90c9-e055196040bb",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "465e7916-4fae-4721-a85c-1ab985ff8b2f"
        },
        "item": {
          "id": "8225c257-c5b4-4b08-933e-239afc68b540",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fa97b2e1-7917-411d-a566-7aa9bc45ed58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd836275-9481-4590-8c4f-cf5a2c2f561e",
        "cursor": {
          "ref": "8eb1a84b-c25b-454d-9482-dd1a64f639fe",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "587c5a29-7ec5-4552-9ab0-f40974587877"
        },
        "item": {
          "id": "fd836275-9481-4590-8c4f-cf5a2c2f561e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "49213424-6c9d-4f52-8ec5-d092b21ad7d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd836275-9481-4590-8c4f-cf5a2c2f561e",
        "cursor": {
          "ref": "8eb1a84b-c25b-454d-9482-dd1a64f639fe",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "587c5a29-7ec5-4552-9ab0-f40974587877"
        },
        "item": {
          "id": "fd836275-9481-4590-8c4f-cf5a2c2f561e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "49213424-6c9d-4f52-8ec5-d092b21ad7d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a54ba2-ced3-43e7-8775-2a36e5ee3182",
        "cursor": {
          "ref": "f6be6425-422a-4ee6-a610-0cf0d1b69288",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "22a38592-61f0-4365-bacc-f595c26cdf12"
        },
        "item": {
          "id": "c0a54ba2-ced3-43e7-8775-2a36e5ee3182",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "83565d60-7cbe-43fb-8672-9de1a63d1462",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a54ba2-ced3-43e7-8775-2a36e5ee3182",
        "cursor": {
          "ref": "f6be6425-422a-4ee6-a610-0cf0d1b69288",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "22a38592-61f0-4365-bacc-f595c26cdf12"
        },
        "item": {
          "id": "c0a54ba2-ced3-43e7-8775-2a36e5ee3182",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "83565d60-7cbe-43fb-8672-9de1a63d1462",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8d182c-21e1-4a7d-821d-9631657d7151",
        "cursor": {
          "ref": "a171fee8-22a1-42a4-835e-c4c400f748ce",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f46bc540-fffd-4bc1-b6b5-bfc7a0b1a195"
        },
        "item": {
          "id": "7b8d182c-21e1-4a7d-821d-9631657d7151",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1b98a497-f45a-4d90-b77c-73ffae5af48b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8d182c-21e1-4a7d-821d-9631657d7151",
        "cursor": {
          "ref": "a171fee8-22a1-42a4-835e-c4c400f748ce",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f46bc540-fffd-4bc1-b6b5-bfc7a0b1a195"
        },
        "item": {
          "id": "7b8d182c-21e1-4a7d-821d-9631657d7151",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1b98a497-f45a-4d90-b77c-73ffae5af48b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ca0570-6e20-4906-83ac-747cc0f49814",
        "cursor": {
          "ref": "593d8229-df3e-4706-b06d-f35ec12a0b4f",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8d902112-a3d0-4069-9644-e5a2aa150fb2"
        },
        "item": {
          "id": "d5ca0570-6e20-4906-83ac-747cc0f49814",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fee949f5-8eab-45ed-96d2-e052161dc386",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ca0570-6e20-4906-83ac-747cc0f49814",
        "cursor": {
          "ref": "593d8229-df3e-4706-b06d-f35ec12a0b4f",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8d902112-a3d0-4069-9644-e5a2aa150fb2"
        },
        "item": {
          "id": "d5ca0570-6e20-4906-83ac-747cc0f49814",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fee949f5-8eab-45ed-96d2-e052161dc386",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc1a0a3-c542-4e2e-90eb-a196feddb3ef",
        "cursor": {
          "ref": "3e34d815-4f84-42f6-8be8-8c93bfbd5d9c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f5e6c335-cf75-4391-baba-aad1ac64aefb"
        },
        "item": {
          "id": "acc1a0a3-c542-4e2e-90eb-a196feddb3ef",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3d2e4118-6f0c-4e04-a67e-e630a199f933",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc1a0a3-c542-4e2e-90eb-a196feddb3ef",
        "cursor": {
          "ref": "3e34d815-4f84-42f6-8be8-8c93bfbd5d9c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f5e6c335-cf75-4391-baba-aad1ac64aefb"
        },
        "item": {
          "id": "acc1a0a3-c542-4e2e-90eb-a196feddb3ef",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3d2e4118-6f0c-4e04-a67e-e630a199f933",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba394ca-158b-4c1c-95f4-de7412cda430",
        "cursor": {
          "ref": "a33d70e0-df7e-4d86-90c0-0fbdd278a9a1",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3cf810d5-0ecb-4fec-8f88-2d6887ccdb15"
        },
        "item": {
          "id": "2ba394ca-158b-4c1c-95f4-de7412cda430",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d234bb7c-337b-45ba-8816-19e56467c533",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba394ca-158b-4c1c-95f4-de7412cda430",
        "cursor": {
          "ref": "a33d70e0-df7e-4d86-90c0-0fbdd278a9a1",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3cf810d5-0ecb-4fec-8f88-2d6887ccdb15"
        },
        "item": {
          "id": "2ba394ca-158b-4c1c-95f4-de7412cda430",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d234bb7c-337b-45ba-8816-19e56467c533",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80be509-6ebb-47d8-8db4-aff399c3c69b",
        "cursor": {
          "ref": "be55c554-ebb6-4158-9028-e2de1250dc30",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "520c63d0-b09a-47ef-8836-f3aae333dbc4"
        },
        "item": {
          "id": "a80be509-6ebb-47d8-8db4-aff399c3c69b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3161c4de-a1d6-469f-9484-e444a6cabd26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80be509-6ebb-47d8-8db4-aff399c3c69b",
        "cursor": {
          "ref": "be55c554-ebb6-4158-9028-e2de1250dc30",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "520c63d0-b09a-47ef-8836-f3aae333dbc4"
        },
        "item": {
          "id": "a80be509-6ebb-47d8-8db4-aff399c3c69b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3161c4de-a1d6-469f-9484-e444a6cabd26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe76cc6-5bf3-4567-a2f2-7d505d391921",
        "cursor": {
          "ref": "7cdba0dd-6949-4107-9ae4-3c8e28d98c16",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bb1e3055-0d32-4f26-815e-cbb4c735f639"
        },
        "item": {
          "id": "abe76cc6-5bf3-4567-a2f2-7d505d391921",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3e4ed829-9661-4b82-9ea1-0dab381b7bf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe76cc6-5bf3-4567-a2f2-7d505d391921",
        "cursor": {
          "ref": "7cdba0dd-6949-4107-9ae4-3c8e28d98c16",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bb1e3055-0d32-4f26-815e-cbb4c735f639"
        },
        "item": {
          "id": "abe76cc6-5bf3-4567-a2f2-7d505d391921",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3e4ed829-9661-4b82-9ea1-0dab381b7bf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3145ff6-2e25-4503-a4d0-ca5d69e5aa3d",
        "cursor": {
          "ref": "92d5a1f6-fcb6-4f8c-b618-591fc4c9571f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "401ede4b-3aa3-4f14-bd61-451691bf1297"
        },
        "item": {
          "id": "c3145ff6-2e25-4503-a4d0-ca5d69e5aa3d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e05610f8-4640-4466-bbaa-2d60fa7f3f72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3145ff6-2e25-4503-a4d0-ca5d69e5aa3d",
        "cursor": {
          "ref": "92d5a1f6-fcb6-4f8c-b618-591fc4c9571f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "401ede4b-3aa3-4f14-bd61-451691bf1297"
        },
        "item": {
          "id": "c3145ff6-2e25-4503-a4d0-ca5d69e5aa3d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e05610f8-4640-4466-bbaa-2d60fa7f3f72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea0b3d7-0217-4daa-9fe4-49dd43c90cf5",
        "cursor": {
          "ref": "7f332dc9-7b25-4400-9e77-c9eb79e6ff6b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c972e328-3481-41bc-aa23-71c1398146f0"
        },
        "item": {
          "id": "aea0b3d7-0217-4daa-9fe4-49dd43c90cf5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d84afc66-de5d-429c-b927-734dd575ec4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea0b3d7-0217-4daa-9fe4-49dd43c90cf5",
        "cursor": {
          "ref": "7f332dc9-7b25-4400-9e77-c9eb79e6ff6b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c972e328-3481-41bc-aa23-71c1398146f0"
        },
        "item": {
          "id": "aea0b3d7-0217-4daa-9fe4-49dd43c90cf5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d84afc66-de5d-429c-b927-734dd575ec4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb808f1-9633-471a-971b-b21029ae65e7",
        "cursor": {
          "ref": "6eae920c-6990-43e9-88dd-80e64c00472b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3781617d-eeb6-44bd-be4c-50d4a081ca06"
        },
        "item": {
          "id": "1fb808f1-9633-471a-971b-b21029ae65e7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9748e1ff-dfa7-4f10-b064-9c8eb285504f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb808f1-9633-471a-971b-b21029ae65e7",
        "cursor": {
          "ref": "6eae920c-6990-43e9-88dd-80e64c00472b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3781617d-eeb6-44bd-be4c-50d4a081ca06"
        },
        "item": {
          "id": "1fb808f1-9633-471a-971b-b21029ae65e7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9748e1ff-dfa7-4f10-b064-9c8eb285504f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ed1324-dab7-4766-8fe2-3b167a958704",
        "cursor": {
          "ref": "4f6c52e1-b73b-4858-ad28-9a2fde84f69a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fa7f4a97-f11b-4055-b24e-28d3b67ecf7c"
        },
        "item": {
          "id": "d6ed1324-dab7-4766-8fe2-3b167a958704",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "93bb610e-0011-4844-ab63-9b0f0492106b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ed1324-dab7-4766-8fe2-3b167a958704",
        "cursor": {
          "ref": "4f6c52e1-b73b-4858-ad28-9a2fde84f69a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fa7f4a97-f11b-4055-b24e-28d3b67ecf7c"
        },
        "item": {
          "id": "d6ed1324-dab7-4766-8fe2-3b167a958704",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "93bb610e-0011-4844-ab63-9b0f0492106b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82060037-cac5-4ed3-bd26-526fe4660128",
        "cursor": {
          "ref": "ce32752f-e36f-4ac6-a14e-748e069d1a3e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "79f0b1f6-ef52-4258-9deb-593366334b28"
        },
        "item": {
          "id": "82060037-cac5-4ed3-bd26-526fe4660128",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "23b7f777-6d46-4c9c-b348-c3ae2916d6f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82060037-cac5-4ed3-bd26-526fe4660128",
        "cursor": {
          "ref": "ce32752f-e36f-4ac6-a14e-748e069d1a3e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "79f0b1f6-ef52-4258-9deb-593366334b28"
        },
        "item": {
          "id": "82060037-cac5-4ed3-bd26-526fe4660128",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "23b7f777-6d46-4c9c-b348-c3ae2916d6f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7145d6b2-a706-4ce7-ba32-051aa7429753",
        "cursor": {
          "ref": "7d584582-df0f-4d62-92ea-5b293dc7e41d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3482395c-4770-4b2f-a4a4-978ce56767df"
        },
        "item": {
          "id": "7145d6b2-a706-4ce7-ba32-051aa7429753",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6cb68a0d-eb10-460b-bf22-a76af250bf18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7145d6b2-a706-4ce7-ba32-051aa7429753",
        "cursor": {
          "ref": "7d584582-df0f-4d62-92ea-5b293dc7e41d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3482395c-4770-4b2f-a4a4-978ce56767df"
        },
        "item": {
          "id": "7145d6b2-a706-4ce7-ba32-051aa7429753",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6cb68a0d-eb10-460b-bf22-a76af250bf18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5118199-ce3c-4fa3-8774-778ac816ce9e",
        "cursor": {
          "ref": "032d3579-e806-40fd-9301-c914e729307d",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0cbdaaaa-aaf9-49e5-8ea7-c8979f27b9f3"
        },
        "item": {
          "id": "a5118199-ce3c-4fa3-8774-778ac816ce9e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "de94a8bd-c185-48da-acc3-753ebb430672",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5118199-ce3c-4fa3-8774-778ac816ce9e",
        "cursor": {
          "ref": "032d3579-e806-40fd-9301-c914e729307d",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0cbdaaaa-aaf9-49e5-8ea7-c8979f27b9f3"
        },
        "item": {
          "id": "a5118199-ce3c-4fa3-8774-778ac816ce9e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "de94a8bd-c185-48da-acc3-753ebb430672",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7879fd2a-25ba-4789-87e4-8089d9f7818a",
        "cursor": {
          "ref": "f763597d-9d6f-4b46-8282-9446f5552381",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "12de0ed5-af0e-4aae-b147-dfabb5a18d17"
        },
        "item": {
          "id": "7879fd2a-25ba-4789-87e4-8089d9f7818a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d0bf9a81-c933-49fc-a495-f7986e04cb36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7879fd2a-25ba-4789-87e4-8089d9f7818a",
        "cursor": {
          "ref": "f763597d-9d6f-4b46-8282-9446f5552381",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "12de0ed5-af0e-4aae-b147-dfabb5a18d17"
        },
        "item": {
          "id": "7879fd2a-25ba-4789-87e4-8089d9f7818a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d0bf9a81-c933-49fc-a495-f7986e04cb36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e40e24d-766a-4875-a722-e6d629ed5370",
        "cursor": {
          "ref": "b0c42b67-2158-4a7f-939a-e6cbfa0ccd1c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4408f415-7501-4d41-8956-bb5ee1884860"
        },
        "item": {
          "id": "3e40e24d-766a-4875-a722-e6d629ed5370",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8080afeb-83fe-4556-948f-c2f99c5b0ec3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e40e24d-766a-4875-a722-e6d629ed5370",
        "cursor": {
          "ref": "b0c42b67-2158-4a7f-939a-e6cbfa0ccd1c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4408f415-7501-4d41-8956-bb5ee1884860"
        },
        "item": {
          "id": "3e40e24d-766a-4875-a722-e6d629ed5370",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8080afeb-83fe-4556-948f-c2f99c5b0ec3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f28455-6c24-44a0-8ce6-d80485958b4d",
        "cursor": {
          "ref": "c94c3c58-13ce-47f9-85a7-a6f0ffaae1c7",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "1536c61e-a96b-4db1-92f0-282f9e901dd3"
        },
        "item": {
          "id": "34f28455-6c24-44a0-8ce6-d80485958b4d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2eecd88d-0fe1-4d5a-b798-e2afc5c20c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f28455-6c24-44a0-8ce6-d80485958b4d",
        "cursor": {
          "ref": "c94c3c58-13ce-47f9-85a7-a6f0ffaae1c7",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "1536c61e-a96b-4db1-92f0-282f9e901dd3"
        },
        "item": {
          "id": "34f28455-6c24-44a0-8ce6-d80485958b4d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2eecd88d-0fe1-4d5a-b798-e2afc5c20c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9485ad-bf50-4c5f-88ea-9a56ba308e76",
        "cursor": {
          "ref": "ba35812a-b1e0-4fd0-a7cf-5280396acef2",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d003861a-1543-4214-b5cb-3af22160051a"
        },
        "item": {
          "id": "dc9485ad-bf50-4c5f-88ea-9a56ba308e76",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b17268d7-b43c-4aee-8a69-4aa4d7cdef2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9485ad-bf50-4c5f-88ea-9a56ba308e76",
        "cursor": {
          "ref": "ba35812a-b1e0-4fd0-a7cf-5280396acef2",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d003861a-1543-4214-b5cb-3af22160051a"
        },
        "item": {
          "id": "dc9485ad-bf50-4c5f-88ea-9a56ba308e76",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b17268d7-b43c-4aee-8a69-4aa4d7cdef2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f339b0-be71-44fc-abba-52c7c2e01f38",
        "cursor": {
          "ref": "6c93217a-ed56-4bcf-938e-d65552c1828b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3527bdeb-95ae-4f9e-981d-f6a08fda06c3"
        },
        "item": {
          "id": "81f339b0-be71-44fc-abba-52c7c2e01f38",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e08174aa-391a-47f4-885d-2dc0d6f7f263",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f339b0-be71-44fc-abba-52c7c2e01f38",
        "cursor": {
          "ref": "6c93217a-ed56-4bcf-938e-d65552c1828b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3527bdeb-95ae-4f9e-981d-f6a08fda06c3"
        },
        "item": {
          "id": "81f339b0-be71-44fc-abba-52c7c2e01f38",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e08174aa-391a-47f4-885d-2dc0d6f7f263",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813c982a-75ff-4b19-b97e-1a80fc4aea02",
        "cursor": {
          "ref": "29ad3403-afe7-4e35-b979-980d4d19ea20",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9ab8496c-520a-4195-9dab-dfcfbe1f1b0c"
        },
        "item": {
          "id": "813c982a-75ff-4b19-b97e-1a80fc4aea02",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "254a29fd-264e-4f87-a2ca-53c143b71376",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813c982a-75ff-4b19-b97e-1a80fc4aea02",
        "cursor": {
          "ref": "29ad3403-afe7-4e35-b979-980d4d19ea20",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9ab8496c-520a-4195-9dab-dfcfbe1f1b0c"
        },
        "item": {
          "id": "813c982a-75ff-4b19-b97e-1a80fc4aea02",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "254a29fd-264e-4f87-a2ca-53c143b71376",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f3f6a0-dcf4-4521-8fb4-4e350a459a2d",
        "cursor": {
          "ref": "73f6bde7-9223-4120-90ca-82feb9c832aa",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ebb186f5-0996-496b-be02-25c4d0926f71"
        },
        "item": {
          "id": "05f3f6a0-dcf4-4521-8fb4-4e350a459a2d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "140f71c1-5499-4b09-93b5-0d902b89e40e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f3f6a0-dcf4-4521-8fb4-4e350a459a2d",
        "cursor": {
          "ref": "73f6bde7-9223-4120-90ca-82feb9c832aa",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ebb186f5-0996-496b-be02-25c4d0926f71"
        },
        "item": {
          "id": "05f3f6a0-dcf4-4521-8fb4-4e350a459a2d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "140f71c1-5499-4b09-93b5-0d902b89e40e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0e54f7-e787-499c-ab9a-6d577edd12b4",
        "cursor": {
          "ref": "eaa1178b-a603-4049-a42d-20f8f2f93273",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "79e1d7b5-5927-4205-a4a9-d11dc1128727"
        },
        "item": {
          "id": "0e0e54f7-e787-499c-ab9a-6d577edd12b4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2e1202e-360e-405d-8388-3959892e2390",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0e54f7-e787-499c-ab9a-6d577edd12b4",
        "cursor": {
          "ref": "eaa1178b-a603-4049-a42d-20f8f2f93273",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "79e1d7b5-5927-4205-a4a9-d11dc1128727"
        },
        "item": {
          "id": "0e0e54f7-e787-499c-ab9a-6d577edd12b4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2e1202e-360e-405d-8388-3959892e2390",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1961a6b-8b35-4921-ab85-a3c41d41835d",
        "cursor": {
          "ref": "b04211af-8bbe-4257-8ff3-fdc197b15a70",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e1e65fa8-a816-4b62-8aa3-254b6af7d832"
        },
        "item": {
          "id": "d1961a6b-8b35-4921-ab85-a3c41d41835d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6083378e-89b1-4f87-9b12-808e7f6815cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1961a6b-8b35-4921-ab85-a3c41d41835d",
        "cursor": {
          "ref": "b04211af-8bbe-4257-8ff3-fdc197b15a70",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e1e65fa8-a816-4b62-8aa3-254b6af7d832"
        },
        "item": {
          "id": "d1961a6b-8b35-4921-ab85-a3c41d41835d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6083378e-89b1-4f87-9b12-808e7f6815cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3094eea7-559a-4cf3-81fd-f141b5f1b25d",
        "cursor": {
          "ref": "b07edd8d-934c-44c4-8536-e6bf3a3c8c1b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6d2fb48b-f503-4ed2-9546-544605c00a58"
        },
        "item": {
          "id": "3094eea7-559a-4cf3-81fd-f141b5f1b25d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4554fd5e-c86c-4f98-a99d-df4580a950b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3094eea7-559a-4cf3-81fd-f141b5f1b25d",
        "cursor": {
          "ref": "b07edd8d-934c-44c4-8536-e6bf3a3c8c1b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6d2fb48b-f503-4ed2-9546-544605c00a58"
        },
        "item": {
          "id": "3094eea7-559a-4cf3-81fd-f141b5f1b25d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4554fd5e-c86c-4f98-a99d-df4580a950b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a08edaa-9568-424c-818e-fb1efbfccc8d",
        "cursor": {
          "ref": "c00d5d2f-3c67-4dd9-981f-d469aeac7fe6",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6a6b52b1-a1c6-4162-99ac-394b81392dac"
        },
        "item": {
          "id": "9a08edaa-9568-424c-818e-fb1efbfccc8d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e2f97a5f-dfd6-4a1b-a97e-c79e2991a27d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a08edaa-9568-424c-818e-fb1efbfccc8d",
        "cursor": {
          "ref": "c00d5d2f-3c67-4dd9-981f-d469aeac7fe6",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6a6b52b1-a1c6-4162-99ac-394b81392dac"
        },
        "item": {
          "id": "9a08edaa-9568-424c-818e-fb1efbfccc8d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e2f97a5f-dfd6-4a1b-a97e-c79e2991a27d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb26399-adca-49bb-a1d2-1cd7c54d87dd",
        "cursor": {
          "ref": "ea528712-85b4-4417-91a4-9a342511bf37",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "559aee08-8b9a-4375-a978-5b923fe03d06"
        },
        "item": {
          "id": "feb26399-adca-49bb-a1d2-1cd7c54d87dd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "210ec25d-6e37-4042-85fb-9a847fc21558",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "feb26399-adca-49bb-a1d2-1cd7c54d87dd",
        "cursor": {
          "ref": "ea528712-85b4-4417-91a4-9a342511bf37",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "559aee08-8b9a-4375-a978-5b923fe03d06"
        },
        "item": {
          "id": "feb26399-adca-49bb-a1d2-1cd7c54d87dd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "210ec25d-6e37-4042-85fb-9a847fc21558",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2218c793-3df4-4989-89f8-d85a5fd6a289",
        "cursor": {
          "ref": "2770cff1-e8a7-4e43-8ef6-98a7780ccc79",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "cbb6590e-4062-4c7e-b710-163fe92b437a"
        },
        "item": {
          "id": "2218c793-3df4-4989-89f8-d85a5fd6a289",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1dade7b4-d7b2-4eb2-9ffd-5468e1a87111",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2218c793-3df4-4989-89f8-d85a5fd6a289",
        "cursor": {
          "ref": "2770cff1-e8a7-4e43-8ef6-98a7780ccc79",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "cbb6590e-4062-4c7e-b710-163fe92b437a"
        },
        "item": {
          "id": "2218c793-3df4-4989-89f8-d85a5fd6a289",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1dade7b4-d7b2-4eb2-9ffd-5468e1a87111",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "90e7ddcb-18b9-4b10-8605-e91c95ae78f9",
        "cursor": {
          "ref": "886178ea-fbe5-4a42-be77-c45bff1c4eb4",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "db6a0595-60f2-433d-9341-0541ca270a9b"
        },
        "item": {
          "id": "90e7ddcb-18b9-4b10-8605-e91c95ae78f9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "71af48c4-d04f-45f7-bfbc-a6336795d7fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "90e7ddcb-18b9-4b10-8605-e91c95ae78f9",
        "cursor": {
          "ref": "886178ea-fbe5-4a42-be77-c45bff1c4eb4",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "db6a0595-60f2-433d-9341-0541ca270a9b"
        },
        "item": {
          "id": "90e7ddcb-18b9-4b10-8605-e91c95ae78f9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "71af48c4-d04f-45f7-bfbc-a6336795d7fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "1f745266-8eb5-4424-841b-205e659ba819",
        "cursor": {
          "ref": "f505da8e-72ec-4d40-8c0e-fd0c73891a3b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fd10d988-5f7d-4233-af8e-d217f75e2f5a"
        },
        "item": {
          "id": "1f745266-8eb5-4424-841b-205e659ba819",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "26fbbe2e-a100-45a3-b721-e49dbd0f753d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f745266-8eb5-4424-841b-205e659ba819",
        "cursor": {
          "ref": "f505da8e-72ec-4d40-8c0e-fd0c73891a3b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fd10d988-5f7d-4233-af8e-d217f75e2f5a"
        },
        "item": {
          "id": "1f745266-8eb5-4424-841b-205e659ba819",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "26fbbe2e-a100-45a3-b721-e49dbd0f753d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f745266-8eb5-4424-841b-205e659ba819",
        "cursor": {
          "ref": "f505da8e-72ec-4d40-8c0e-fd0c73891a3b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fd10d988-5f7d-4233-af8e-d217f75e2f5a"
        },
        "item": {
          "id": "1f745266-8eb5-4424-841b-205e659ba819",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "26fbbe2e-a100-45a3-b721-e49dbd0f753d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042e7687-3f03-4580-b332-1e02ab230a0d",
        "cursor": {
          "ref": "941f79b9-9b37-4268-835d-0d7a213cb934",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "40125eb1-add4-484d-be8e-b73e8d67cbdc"
        },
        "item": {
          "id": "042e7687-3f03-4580-b332-1e02ab230a0d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d822d360-2576-435d-8d89-7dd761beebf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042e7687-3f03-4580-b332-1e02ab230a0d",
        "cursor": {
          "ref": "941f79b9-9b37-4268-835d-0d7a213cb934",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "40125eb1-add4-484d-be8e-b73e8d67cbdc"
        },
        "item": {
          "id": "042e7687-3f03-4580-b332-1e02ab230a0d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d822d360-2576-435d-8d89-7dd761beebf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebaf8b18-db22-46b1-b2bd-882fb1e11d8a",
        "cursor": {
          "ref": "694be732-97d0-4ebc-a4f8-583ffc310d5d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "da8faa8a-e054-45f6-908c-64a7065c07fd"
        },
        "item": {
          "id": "ebaf8b18-db22-46b1-b2bd-882fb1e11d8a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "845b46b6-5c85-4974-923a-234c5c172f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebaf8b18-db22-46b1-b2bd-882fb1e11d8a",
        "cursor": {
          "ref": "694be732-97d0-4ebc-a4f8-583ffc310d5d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "da8faa8a-e054-45f6-908c-64a7065c07fd"
        },
        "item": {
          "id": "ebaf8b18-db22-46b1-b2bd-882fb1e11d8a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "845b46b6-5c85-4974-923a-234c5c172f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}