{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8e831d9d-0069-4998-a48c-989ded98fca9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "16f0cfcd-76f1-4ffc-b196-6db0e6688a00",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8c94511-01c0-4b85-ac11-fb065247bf44",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cec287e9-33a1-4194-bda0-d985ae74a2d6"
                }
              }
            ]
          },
          {
            "id": "4d69d715-fc47-4511-8adf-14c8db0e35c5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4225fc9d-415f-4f6c-9da7-4abc54bc3e15",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a0b6ac15-2166-4109-bfdc-e0980aa7bf2e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1e3e5da5-0409-408c-bb2a-5850d9f22051",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "adb0de7b-ef9f-4654-abc0-2db2454a3d53",
            "name": "Positive Testing",
            "item": [
              {
                "id": "406d57fc-cabb-464f-8624-7259a744e705",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "453a384d-b6f3-4605-bf3e-f40f1bb4a50e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "416c71bb-d1f1-44a3-9080-19d943ba7bd2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c29be9d3-cee4-4081-bd27-06490cce87bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78df0723-a0d0-41c4-bf2f-a978e5833686"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bb207e2e-e344-4c23-b59a-2d548a2810fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba49a81e-aa6b-454a-a311-1119c456e83d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "580eebe3-a3f6-47f1-92d3-549a730e3408",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5c15ff90-23ad-4663-bbab-3e0bb13a4f48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1365b679-bffd-455a-bab4-90950a210d90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "343a9f62-f4b8-4dbc-a2ba-cf84e83a521b"
            }
          }
        ]
      },
      {
        "id": "e1b5ea30-cb8d-4250-8058-1056131b5d54",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8f3de797-042a-46ca-b432-b529e8ad55b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2035dae-3c92-4bb3-b3e4-633c2d24df6c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "efe41db4-7b80-4542-ac5f-7807a90a0634",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fb471a-6927-468d-a899-3fe0fde91106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac2d958f-bdb0-43bf-aea4-e1eebf7a7652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab048b4-e8f2-4701-83a5-2d6ca21b1f7d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f64d47-bc10-4b94-a23d-0cad6fc5943b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30ebd4a1-3536-436a-bfe7-4031d7e466bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75303c6-10a0-4fc7-b673-7a7f3b571841",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1fa3f2-26f4-494f-956e-65632d474958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f6321e8-cfaf-40fb-aaee-ee3fce5830bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "93668a26-2628-4d05-84d5-939b740a88a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2754092-da37-43c7-a6c6-bd57f777fba8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09970b0-d42c-4ed4-bc2d-a6ca10106960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f32e985d-0ea9-487a-ba55-2231fad57e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182785a2-82ca-43d5-8790-bae96b6ecb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41fc327-cbe8-418c-9d4f-7e33f34cf59f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d76e12a8-c1a6-4314-84c7-ee4852b4a4af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7094573-7923-4fd7-a81f-8be93138adde",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5c7a939-2377-485c-a2a3-8f53ca7dfbe0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "63ad8b35-3a93-4844-8dcb-ec5dbee1be38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fda44c6-a567-480d-ae16-698e7c4c9c17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9cfd5c15-797f-418f-b6f1-8fb81b03c0c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e10f1b84-b41f-424d-9aec-6f0e89570da8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab9080e4-a17e-4dbc-9a89-2a3a3f6f8de2"
            }
          }
        ]
      },
      {
        "id": "ca32f15f-be15-41bc-8c76-6742fb67993a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ca3b5991-7db1-415e-afee-6a6cb3ce0d11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8faed1fb-c53d-4a30-b8ee-d8c738466f93",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f4905fa1-85a8-4952-9dcf-368603295dbe",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09a71be-3eb3-4a5e-ae8e-97fceda8259f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f983fb1a-0ef2-4a43-97af-b27df002709f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba301e75-84d8-4cb8-aeeb-d61c56bfeafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4091c281-98fc-4db8-a989-65120f6daa34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84f4bda-a79d-4e5c-a851-9f8ed568945d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6ffd67-91b3-4414-8ebd-d7254cbb8265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507f6013-8ee0-4512-86a5-c636b41be507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7929a0-29c0-455a-8a7b-4721e67e142d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e851032-2e55-4bb3-9c8d-49d36e3c2d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9dc4ee-3206-4d6a-b4f9-2a5d4c7e51db",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a90e03-52e4-4808-a5c3-0ad47b07fa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233bdba0-8c62-4bad-a196-222cfacc078d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9639697-f8e3-44a7-9a4d-299c5c391824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85292361-0409-458f-8b5b-60099143b3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e257f373-84fb-4ca6-b2e1-359dd7c330ab",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff606e1-9760-4298-9b6e-37d098c82ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbec33e8-03bd-4e09-9ea6-ce16d03e3e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9510f289-4764-4b58-bf82-0daf224eef6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de3fa089-cce1-4586-862f-9df453cf5607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09200dcf-e230-4eaf-8dc3-d3df0479aa8c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8ba3af-a852-470c-b452-d16e950ea3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f202c9-8a75-4bdc-9b03-6cf6d7a7cae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d407f248-5b72-4082-94e1-05ff27fd5a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd1ee418-e6d4-4583-ab49-23c25d43eee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1de2d9-aa69-48f7-bb18-6a89756dad55",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b483e5-3b30-40d3-b340-4b9cc8f71863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3fcdb7-ee90-4f90-a629-3627a5360f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946d523d-f39b-422c-ae1b-c97a4df85bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c809e44a-67b4-42ae-a035-98f14f76fe4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02f8ec6-fae1-46b3-aeb2-ececd67d5136",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28edde0d-3c65-4b9f-b87c-bc1f6ee0dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bde99a4-590b-432f-b3ba-a35d597d3736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d65722c-24d6-4161-b99c-4c213220a303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24303e79-7935-4faf-a967-ab84a77d28cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f6a82c-2c61-43a2-814f-c9cbaa710708",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d835f6c-f7dc-4939-8221-a5d1dfb58a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e374bf07-213e-4f9d-a3de-048ccce6bf66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d3d740-7a19-4fdc-90bf-f0390c5372c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24be9161-f2e1-4ef0-b54c-e35cdfe0b638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05107756-549e-478c-96ab-83db6e5c3045",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f88378-f2fe-4998-a96d-40e407a4f620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13e8ba5-3bdd-4d10-8862-21e2d2f03444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88833db3-eb5d-43d8-afb9-01f571683ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e30d778-d897-48d6-a960-87ad811d6b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e75d83-64b1-4805-91e2-b4978afc29d3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7f48b3-b1d0-4667-b85e-aa8bfea7a5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24356723-176e-4514-a0bb-166b5896f92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c85fd63-14cd-4808-a281-5c20a06ae44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f2331db-95c0-4cf8-b3a4-625801b6bc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eab6bc0-4ded-4c2e-8fcf-e93154f19965",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6dee18-9822-4740-bc58-8098847738aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d75f4b9-7af5-4d5a-8b06-7c045ab589ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45bf709-95e1-49cc-a27b-a5579ca1f9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8652863-f477-4219-834b-911ee52c72ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d59383-adfd-4275-8dbb-8cc45157766d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78812b30-4787-498b-8f86-7a09ec749ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89db5e68-e314-4b10-a27e-ab4a816c79e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edc3de9-6f11-42c9-9d19-6258e97e2d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1eae65f-19de-428e-bc46-226a5724c468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7b640a-0019-40c0-8100-b413cb36c3f0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ed302e-773b-4579-91f9-486d96a79596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa25f9b-ec74-41a7-9b36-b48064f122e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959f4e96-97ac-4f43-af35-f5e1ab68a7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f17dcf1-6d64-44bb-b242-5510c6f65194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebbd1c9-9ce4-4877-ab82-4825faee1c9c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146a85f2-9113-488a-a8d6-18930ea9d3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead9ad5c-f823-4eed-9666-b04dbfc66277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640a88de-6635-4e34-a717-11e9a5f2a1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cd5e328-89bc-4b65-a6a0-85f84ec09d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf01410-f7cd-4f89-b7d5-465f09076b3c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abff2f7a-b8fe-4e25-9c09-ff1147e5a4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd60f5f3-e516-4885-a2b4-ef3e50be0d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea335a8f-1c3c-42df-a6ac-9124ff72d029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35d83bf0-9497-491c-b4e3-6c2fc9a6038a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2e8baf-b69b-40fd-ad0c-14ca3f2452c9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0d03aa-79b8-436f-a21a-0b3dc8245423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0077a72d-a534-41ed-a898-2ab734f473c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11bc211-6377-458c-9c22-3270abee35cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fef401f-3a37-49df-b33c-6f5811e2653c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9af9c8-d44c-4f95-adef-4e88d80f6e77",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1313eb9-95ed-443b-b49f-a2c4e4095039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70f7333-1077-4fe4-81d7-cda23f2dae66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6241aeac-fa42-4bf5-9d25-c3163eabf7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81ab6e7e-b32c-4bfe-bd0d-72c7b1b57dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd500d8-c21c-42ea-8a85-77d00992da2b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdaeffe-5bd4-4411-818b-cee9f2bd8712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bfaa42-f779-47e2-bafe-491285a0c6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1012cef5-c0e5-4847-a77b-5f0365ddf033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "24625b70-ed0f-4943-8469-5328b5e411a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa81755-1083-4cf6-90f2-46a326b832aa",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9754a0c9-4f85-4d5c-a389-f4293a6afa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e232da6-ffc3-476e-925e-0ea5a7ce6e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8116b2e-3dc6-48df-bdf8-c6f61f9376d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d17ddaf4-8bdb-4c0f-945f-99e6eb19779b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d3df6d-b6b6-4a3c-b385-0c5a4f5a27c8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fa29cb-53f3-4706-af7d-1071f47a3840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74648574-5520-4d0c-a20c-5027bc644377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c862b11c-238e-417b-a0d3-8690c20b0a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c476e8-20b2-4ab3-a9e8-13df55a3d341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397db4cf-5d2f-4780-bbfc-be1ecb2dfa37",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59155e99-4e22-4dbc-a701-4a2752d3c55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877b321e-ed69-45dd-9ec5-306552ea1b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2d7527-a4d7-4ce8-a678-ca33f0fdfaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08ff0911-42ed-4043-9fdf-a2d496cf7ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5465ef-3359-4a2d-8e2e-6ba006f03a88",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4146a8d4-0b31-40a9-bfc5-90e9b3b19cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c4ee8e-db63-438b-93cf-cce8384c1906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29a4887-30fe-4903-b1bb-3b63ecd0d3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c8b834-411f-411a-b526-d177a5b8bf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb5aad0-16a2-4c92-8378-879425628f24",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05fae99-5b78-40db-8bf0-ca8bf8ed44fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508a2e68-1bbd-430d-a51c-fc6814f48f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c31730-042e-4e71-a074-fe5549617244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fcc8eb7-4705-4bf5-a391-383a813e74a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be199d86-f549-47a9-8652-a7ac2b9e7915",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc37584-430f-421f-8230-cc03e70263ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0b88a6-ad03-4891-8e0e-a32488efe8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b0dc10-f166-4c68-8c6f-08ac178c6bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2b5df7-797c-4911-bb83-a4a890d9e559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b3dacd-cf64-4c94-8c8e-b42c0624cc23",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344bdba3-d4d1-4b0a-9728-30dbec81cc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830a2ce8-983d-4e25-95bc-d606a8731d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8080e9cb-6b89-45c7-8ba3-ace617d05b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95ebfd3a-db19-4ef6-a472-37b47410c360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3b17d8-fb5e-40ce-b5ee-b1fa9f7c22b0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3c5621-eac1-46a5-ad13-267697991916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb6bf5d-f1e2-46a2-9a49-d3dbaea22a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd77b231-6648-4152-a835-bd8bb54fd4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c3337c-584c-486c-8529-33345aaadb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6121f7e3-aa41-4fab-bf76-8c37fe3765fe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f001fd3-b211-4da7-9816-ee2fc3501911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f98e637-dc66-44be-a57b-db1757c90481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6902561b-4f45-487c-bddf-dfdc1d781e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "681ae57e-3da7-47d5-bfbd-c8aa9061c49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdafe47-c042-42c3-8a43-e6b3e6dcfb19",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9331473-120c-47f2-9f44-01116b4d5f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7b62d9-8dab-4f7a-b2ba-e2817abeba33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b791327b-4232-4628-a8fe-07c2dd3f3cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb1dea9a-6946-4a62-b789-6989d95ed6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a1550e-4238-4163-ae10-942581732a90",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e83998-a607-452d-aaba-6490f6c727cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a24c80d-ec3f-4224-82b0-c89f90943a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d4e61e-7450-462e-88f4-51117be89687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "382b4408-67d1-4d7c-989e-4e922221b4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccce386a-30fc-465a-a49d-e766827faa3a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7436c79-3e60-4c60-a876-eb2cc14f518c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb63870-45fe-4e43-8d32-2da35bbffbf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527d4a2c-f173-43c7-9507-4416f0325c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a7ee92-3e48-42f0-8994-7e60b11ea4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21eadd4c-13cb-4844-9f12-53b38814de4e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63575742-225d-4c52-8611-05699fd4605c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c477a8b-2a09-414e-92dc-778a6f130a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ec5987-22cf-4d7a-a1fe-5dadc9edcc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de69d761-d515-4938-9c83-a0eedb1c762a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8344da4b-893e-4940-9356-07f6a9029f81",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001fc803-7ded-4287-8e16-30d06ee0af7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc127fef-403b-4bd6-b23f-7b6dd0687d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af393512-cbdd-4b07-a235-51e9682467d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "436fe81c-e722-45af-b070-e8a4c81f1076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5c065e-642d-4d52-b122-c6fe673a9c51",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ee2064-ef71-4266-be17-2f75a0081238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8dd2c6-19b8-449b-acab-42a8066c3097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4d05cc-e28d-4224-bf1a-a976c39edbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b7e1b6-c327-4e7b-9416-a0b80a0cb366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f54513f-42df-4d6c-9c08-b01fc732796b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aeacc5-4444-4f23-8ddd-480f72532388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb31228a-2a26-4ee1-8579-70cb27cf144d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86716974-3207-46b4-99c3-15dd6d136026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb79fde-204c-4b0a-a6f8-254b2172e2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b4b936-c318-4c3f-acc9-c0175015926f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac1c6b6-1ef1-46e6-adf2-095b70987eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6503ca8d-5e43-4eb1-a061-415e49a0999d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b116a3-1b65-45fa-bcf7-8dfe5aeaee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5d62c94e-e66c-4c17-b29b-0bab0974c671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2594925-8c59-4c40-bbc4-d42274690916",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4a01bd-53d4-43d8-bd6e-54fc32a6e577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44e94d66-9d19-4583-9b58-ee93d0d5e459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f2f17e-da3c-40b0-a60f-4df1af9d6e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce234446-87b1-4c93-9574-46236005cd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c48a5b-2956-4469-a7c1-7a09680459c6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db51d6e-f903-468e-a274-c5ac76899933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e27744d-1167-421f-906e-365c3e3ac26f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2575d4c9-b229-40ef-ae9c-ff0803f0c612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e938cdf-6354-454f-bb51-65da501c19e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184befec-d999-447a-9441-4c9876143344",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e171bb-8ade-4251-aa3b-cae92d7db4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec67844-ca6a-416b-abc2-beabb071ddfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca452c99-f131-4fef-a3f3-6853fbfd9a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8433da34-9e34-4ebc-8c21-1848395b365d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e130323c-5285-4077-b747-f3bfcbbc8515",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91548229-9a03-440f-8122-66dcd8b9f82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56cc26f-fb8a-4745-8a3b-3f4d3d7b9a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9d2b27-dd68-4869-bf67-13ba73046207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3739ef2-102d-4c50-9b6c-489a470a808e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f8a6b1-8bb1-4632-b55e-02106edc270a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241d4e66-9e5f-4944-bd73-7e300487c3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63867a16-545d-4331-9d71-6b420acde5ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdd72bc-5b5a-456a-868c-fa4ea431ce16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29efdd83-2e63-46c4-a33f-bf97e3fea03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b2bb2c-8eef-47de-8344-8c26da5f2513",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81714527-7412-4dbf-b456-8fcc9a790cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47a82db-c14b-4cbe-8bfc-b0c71b4648cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4da8ae-1bc4-4311-9d45-bd4d5ba1720b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f222af1-fe39-43f4-a3c5-a5ab9ce012e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d81d1e0-0e1b-49d3-b108-a4f70e362ca5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd74b35-3fc8-4d65-a2c5-551770a9bb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1324a339-55bc-4742-be13-7e94ead860a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9556291f-7108-4d15-9086-7ef77eec32c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c1311d44-d9e9-4755-954a-bace5d84dbf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f3aa6c-0ad4-4759-93dd-e59b6245fdae",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdc4d67-a073-4d77-b2d3-61ddb3092278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd841c92-5e8d-4458-9a72-bb57429e84de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8a3c6a-9303-4464-bdba-00cd7267d841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee283085-c983-4967-abfc-62672553e2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5811c7-5d5d-432d-abf0-f6ce04a4fd5f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb35c11-2b28-4618-be6c-3b9e8324b03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704a9094-51da-4883-bcde-7ec80b3c9382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fee7c6d-aba6-4f88-aff4-97389f42fdde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9713c81-f5e0-4a54-99c9-4f320da8fc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821f1b16-9560-45e2-b441-fbc458df0384",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6835b1-eda5-4dba-a40a-c46eef84defa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3509e4da-f435-4a26-aff9-0efefae216e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c3c437-23bc-4559-b437-9b22ecfaceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd500d53-48f3-4f4b-a3cb-5a30111ec5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bf8511-07b2-431e-8b2a-a717221486c9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fc945d-0526-4f53-9ed7-bf5d62971b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb143cce-3beb-4099-931c-f17deb504f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d7cd1a-a46f-41a0-9e35-74fa98c7675d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d53b19f1-74be-466f-ac29-923345c47723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a777368-1fc5-4b7c-8df0-f0c4ff8256f1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4c9355-a0f1-4538-bdcd-bc4910195f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed71d6b-889b-49a5-bb12-ed4b0d342536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815f1bbe-a193-418c-90c8-4ee9550c8932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7129287f-724a-45a7-becb-51c0684add82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4f897c-0e6d-433e-809c-d191f0aa8f6e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f871079b-0efd-459d-a62c-dafebf4489ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeacc0cf-255b-4d90-91a6-ca5fd63b7056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593d9958-12fa-4291-8fac-6aa80016fe02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17f7992e-371b-4361-adb8-bca4d8f68ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d671067b-7547-493c-9f0e-972f22bf689e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdaf5cd-39e5-420d-9d17-08456e492bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0c6261-82ca-4576-a2ca-e7c74436f8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50167557-b87f-4ebb-82c3-0182aa392c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "718b166d-acd3-4f1d-a977-d03bda52cc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4718e7-d26c-45a0-8b34-d31d5f0f173b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fbdcac-7d41-4a9a-b630-395ba9862c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53a6fdd-b604-4b60-b90a-57f18f5a1d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddb7921-8ea7-4c67-827c-96d54fc51a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8eac9f5-bf9e-485d-893d-bcbe4ddea838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8780cf-4e8a-4104-980d-5c028a7b8c2c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea1319d-4bf3-4e75-b7f8-c6d6fd73acde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa1f30b-42e3-45ba-b240-13024f16377a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1181d2d-362d-4504-92b7-da844fabe84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3194c61-8b08-4b8b-920e-a5d3afb6fb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0772eaf1-08b9-43cb-a6df-8f1bcca72fe0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbcb0b9-f188-49d9-9fe5-e7e58d5479a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cae1ce-84c3-443b-9b43-e31b8fe24693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0b5106-407c-4cab-999c-d42fafaaf8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e885948f-3e1a-45a0-8772-76041b13978f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee5b481-8ff1-4b1f-9fbe-0cb6c50a95ef",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b820cd-f0aa-4b87-8294-7afbe10caef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfad2fcf-3502-4c7c-a6d0-c33242ab7296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0644e13-1455-421b-8bcc-afdf1648995f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab7f12a-d514-4c89-a90d-5de19eec4fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8c8718-3c86-4d3b-be62-b7255bb4495f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c1bf97-5dcf-4e68-9b24-312f75dc148d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fdb67e-1206-485a-8f46-b27e71a10685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47207ac-f06a-4720-a6b5-708a5abc1449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d92a481-5a67-4d50-8d9c-b24c94e757bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbb79a8-6878-488b-9b2c-e22a64a4c893",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809f32bb-9b30-4441-af4d-b60f18263722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f9697c-59e3-4853-ad7f-7117cd908e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811cb62f-cf5b-445f-bca0-e706035444f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0a168b-32ff-47fc-982c-0a935f62ed3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf6fc47-7497-421b-b4f8-bc8bc3986087",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04728808-cf7f-45c1-9c68-4faa3e61b30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5735da38-ca96-447e-8da7-70cb383220a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bc7166-06a8-4951-9a0c-01ffc20fce16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5a79dd1d-49a5-4457-ae9e-b04fcbdff929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827a4733-3f81-4f9d-a6df-c3329bccb055",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b05f1f-3651-4a84-a6f3-6f76a4ec744f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae516f4-98fc-4f61-b6f3-c6b7b66f2260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75f7a98-1c08-43ec-a154-41b28606c27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "36c10e26-0a7d-4d8f-a3bb-0611dae3fd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0642ac20-b5bb-4370-a226-e51ca8be6bb5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7406c2-6b1d-4e1d-9b51-517f595b5987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656d7637-66cb-4384-8e53-18d42a1442a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdcc7e6-06f0-437c-bc61-a5ee963211c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "67098e75-c4a3-4cd4-8738-c9f0df6de739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167d7b2d-d683-4ae9-8721-f27aa6ff25fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3152f8-45cd-4fd1-aae5-fc75e142290c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7596c0bc-469c-4555-8116-68335d011540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da6ee3d-b259-4cf6-be7f-5c99c0fec846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab3ab89-4a11-4a58-8288-95ac7bd4a0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603285be-bf64-4d9a-8b90-3b9f9bce37ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87252ba-435d-469e-a0a2-877b824e85b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112351a9-b59e-49f2-a8e4-0bcc18ef72bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17792852-74d5-4c95-ad3b-48c4f9c357ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "18235256-3aea-4947-82e2-68fb00b6d850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fb9851-57e4-4ce4-82e0-677eb6bf829e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287b7117-be76-4558-862b-1e015909218a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb48dc9-e275-48c8-95f3-01ec8100ecaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93ac629-cbf7-4590-93a7-d68bb16310a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7cb5a9f-d200-45fb-87e5-af656c2f3ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79c7056-0cea-4d0b-b684-405b08948819",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8de7790-2b84-462e-8c47-3c3e0bd43b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8932c070-464d-451c-a934-e069482b61b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f2c2b0-7600-4b80-84d9-48d11ca24168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7b179d-5cb6-4573-a087-1b0f3d43fd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c463c48-ebea-4807-bb4e-bfa1759c4ad8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e3e9e2-0398-4340-9993-3a9cba0e4eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0353d099-254a-4e9e-a666-47eaf4458291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d61c071-d5a6-4504-b39f-ec7f1415a268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "033f1b39-8792-4205-a907-aa42350d09d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe9c304-6435-4e3f-bbb7-9d2a37909f86",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9837cf0b-ec94-4f36-82b1-1d1733bd58f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd9a337-c915-4045-8367-02ae1860d4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffca7804-2641-4cdd-bdcf-b939573e2090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2542e398-184d-4300-98c4-63c3e80b9a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbbd85c-aa2c-4213-a404-dbb08a36774c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623b4c42-53a1-4089-bc4f-4b6112869d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c717b622-53b8-443b-9fe8-0f5afde90377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09551d8d-67ff-4396-a0dd-650f29b638af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41922e83-4fba-4643-9389-24d379e36f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc96c702-198a-442d-b262-e0d0aa4306dd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01837707-255b-4e5a-9594-f257b9bf3a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc70f0a-e399-491e-9050-60a925c3e33a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856d7b47-df0d-49ab-9044-68f06b8af1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70bb311f-30ad-444c-aead-8a53d023bee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c31052-2b36-4abb-a841-5a8669fb07c3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8513dacc-eef8-4010-b716-221540d12178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2137fd18-f01f-4945-b25e-0c13b5b4260c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2a67df-fc70-4329-8366-8ddf28b2a296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c85a4cb-4330-42c5-891e-7a96cb108291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ccde6c-827d-4b58-8ef7-c23e0a96c89b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f980c5c-1a93-4340-9ce8-2f0ac24395ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e111fed8-fe8f-4a74-8ee1-a6b60cd9dbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca7fe02-7d7a-4dbc-8b45-e3b372ba6182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb13bd4-d3da-43da-8b30-2627511bbcd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bf83e4-61f6-4267-82fc-b6914f7d5a5c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc55827-c9d8-4644-986f-b072b9cf2b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee73bab2-11cd-4f39-b648-95f6e71a205b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc32c9f-58b9-4320-9a8d-dc5dbd3ce81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "600af545-edc3-4495-8019-586a7bd8f5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac416c0-0aae-4f37-8fc6-3d5b672767e8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f989155-61bb-4f73-8dcf-c85fd4a8b636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489c2722-f958-49a9-be74-8051d12c10d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f01d417-cd9b-41d8-8973-553f2d7e4d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75ead06e-559c-4ba4-bef6-ce6973961b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8e3bb0-1316-4983-aa60-a1d36216ea0c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefacb04-f247-44cd-bfca-1a059b74d857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6415b5-2793-47e4-935b-9297a5d72147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa4d3df-d22b-4c73-b844-ce8d095d75d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa88cfb5-bd74-449b-be89-1378ed247781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc17181-c358-40a9-88b6-11eca5247c9f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b97188-1a92-487f-91bd-a8d9d817bf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93192200-e7ea-4ad6-b047-0e906aa739b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d42727-8d15-4d9e-a607-4833ec55119c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9797dbf-1af4-42df-9ade-87c7ab3f3fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3eeb1eb-a1f7-40db-87da-ab0b774f0ad1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8178ac-17e3-4fdf-8854-842512303e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69f442e-5e39-4aa6-b200-3a0c2c6f26bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4169df-d94d-4ed5-ab70-f28e7513986e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c082c45-5f57-403f-91c8-d633f925983d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5760ff0-7e71-4fa8-a99f-5deccc0cfb04",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d3e9a2-746c-435c-9bd1-650dc8485b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac5b172-d9e1-4280-a87f-9e0f23af2c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1186643-53dd-44c5-846c-00cf7127c37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61d62a70-e595-4d67-a891-8d94f4510ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b4dc6d-7e14-4341-be03-c4f6ea73718e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b77c84-cd34-4baf-98d9-4d8e9c208fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfca4787-3f2a-4389-8f66-311d93e9f930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66da4c8-faa0-4326-8d81-0ae5e49e194c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd6c067-fc0c-4d0c-9a57-5613c74f1e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01ca981-26d4-4448-8007-ea3973cc42b2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb075c8-f470-4a51-b074-dbbb4b1739d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac0d731-db26-4cbd-bde7-f613462b2f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72899c48-6c5f-4fd9-8183-c0c3f687c8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e28c983d-fa01-4ca5-826a-57eb30841b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab7e948-4613-415f-9167-d8561207c2d1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4642724b-67ea-41d9-9a6a-5dd3073a6478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c08183-bce5-4530-95d4-fe299de8a9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec7543c-32a7-4de9-99a4-0b7875f61bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "254f6fe5-89a5-4558-a3e0-8bcf0544fd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7defdf0e-9dee-4708-8453-b7495b8c4559",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2a9f93-79b8-430e-8da5-42682eec0a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3f3e82-d30e-4cd3-955c-96d281ae3ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf20a33-26a5-456d-a90d-cab94e86ec45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4cafeb-8755-466e-ac21-19b10f395a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ebd50c-8539-407e-aae4-5bca88cb1c0d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a580e7-6d26-43a3-954c-72c1fd78f7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe365ea6-7a3d-414a-8055-1fdb891cc0cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795724f3-270a-4d9a-b96f-63732a4f5775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f52846d9-4279-43d4-af33-1cbaf1d0c733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd5b83c-1984-4942-97ca-35fa1ef611b0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53da67ec-a7ed-40e0-9067-58ce95af6343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f8a9ce-1b7f-4878-a7b9-df34ac4b51bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7577d2-dcfe-4232-93c4-39d2b6457da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a920d7c4-b11f-499a-93f7-6a4f43b1e79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff5538f-afa4-4503-b187-1cf3c13b0c4e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d14055-0f33-47bc-9f54-56e02b05195a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0861a92a-7032-4ca8-9b30-4e0aa88d5e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff8f20d-af54-4f52-b4e6-b3a7eabc9a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8347332e-9b83-4118-b04d-43c133b21cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f070e7-9c6b-4305-9412-528a7d634826",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73053de7-4898-4df8-8b84-c52d2d90ae84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3661953b-b75c-4371-8f95-55500de00914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2a26ec-41c6-4a48-9501-47a3dd8bf058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "251b0829-12b0-4e2e-8c88-244ff620f73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b89a816-42cd-4e21-a478-51aa4d4cb203",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97b6f28-b723-4685-a279-80bf112d6ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e77254a-9a3c-4588-a9ec-25a9f96f70c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29920e6c-53ad-4950-acd7-8eb2bbec38c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2feb825f-194b-4724-a64f-e23ab98eb15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdc5820-f5a7-4656-9069-8a352bcfab4a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7570c4-52c9-46c4-ac5f-2aaf3b1b04ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9f0e77-8f2e-4adb-8e8b-66c1c32b7f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02084e0a-2d7c-44f8-b305-a0e7077f62c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13df1ed7-a6b5-4331-a560-f1ee1b24288f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b41f865-88f1-4934-a6c4-0d0376b43582",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a93ed81-2141-4a07-9bc7-5b015009b3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1aaa81-b61c-442f-9983-b39ca957a43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700b34fd-ba5d-459e-bf7e-3abb2560d25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf1a214-53f6-4a1e-a84a-a6f16c21d500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b3da2e-a917-4487-9b44-cc3940f4b9a5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4d94ab-7f2f-46d7-8e91-fee22ae5a782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd07d2da-b594-45cb-b443-106218b3dc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19245a1a-9943-427e-aa23-a52e876c65cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0730f10f-6a79-4e46-955d-69648c4644b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d9e981-cafa-492d-a03c-ef9a3802c04a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fa7b61-f77b-423e-a91f-e6864bb70117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b82bc76-d844-44b1-ba8a-a1d672396989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa043c41-bedf-4d92-8a36-48fc78406088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fafa9a80-88e9-4d0c-bae3-0f2f4202f46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b420da-3938-48ac-afb6-cc81bd58fca5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cadc23-730d-4b4e-b10f-22f4ce01934a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16296520-f38a-4d60-b554-f8b19f17e2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b1f26b-4e79-417f-b9cb-bd8d0adefefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "71b45b0f-9acb-4c43-a601-3a7358fbd6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c5d657-a15c-4d93-a0a2-3c3142c9234a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa36f009-f463-44cd-8aff-9e23334edf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0658b0e6-9c38-405c-86f7-2d3e98266df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6320cd42-5ac3-4b69-bb9c-e7ad99e1d17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "758bf14a-119a-493c-b7e0-c4fdca2a1f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcaf3986-77c8-4f2c-8df8-1c60902956c6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b181142-dd6f-4720-88c6-854703c23b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05612b70-549b-4633-be41-8f1b0d42438f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36635510-9c49-4649-839a-c7251264c500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d561106-f867-4a19-9d87-9537d1d7a6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2e7b07-8fe2-4162-8411-bf0ed4ae18cd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe7056d-0613-4f9d-ba16-819e1b17736f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abdeb28-54d0-4c51-9776-a1d7c0eda6ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3649a5f-5d88-4828-af2e-f0d164fb96ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c8e941-4ec3-4a5a-ae7c-d5fda1a69f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5a405a-e3aa-4708-a3f2-5500c229bd59",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c99dfd6-9800-4f68-aeda-a6d41dd8f1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0c9a2b9e-8359-44ba-b152-126771689364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa5e3c9-5307-40ca-ae6b-7983c51eaa64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7d6016-1539-440d-aab3-f3129a7fbfd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46474360-24e7-4163-85c9-741f1fa3848c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c828ee5e-f302-41ec-b82c-98067aeaf1b0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce0c2a3-60f4-4fa5-95c8-5c6794b2f706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12113de3-bba4-498c-bac4-365d7879af01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7b4114-3876-4b00-ae30-51d1ea6e743a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40a25af4-78e9-4b12-a0b3-ba499651581c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8a806f4-eeda-4eeb-8205-a1d6f50019e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfa36f9d-71e0-47ee-9b89-51d183c63f53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac85ade0-f438-490e-928e-e5c80ee6500f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cc1f60f-daa4-4cfd-90d4-04794e34317a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e25cc3b5-828c-4798-8dbc-abb1d204277d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f28a6ce-2aca-4782-887c-5cdc010baffd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a833144-efec-4f7c-82e2-cf561f1ea954",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db3e0478-6fc0-49a4-a324-8521addadb8b"
                }
              }
            ]
          },
          {
            "id": "86e11eb0-f470-4a68-b45e-9652117b8a78",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4688cf42-fa43-4b3e-a909-3fb50566c261",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "afc23e83-c2ff-47f6-8f27-77fd0ae776d9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5bf096-d564-48ad-8793-d182ce629271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "db152ea5-b49f-491d-9626-baf15051d8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3620d751-3fcd-42a1-ba71-0e75f0530ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044d7f9a-a840-4a68-9868-dd93262aeb12"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0d215480-e556-45ed-8b49-626367f2c442",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e230ad6-ce99-450b-a7ba-4c69de51763b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16833414-9deb-4e79-9b6f-ea7d5ed648e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d56d358e-151d-47c2-854f-a3cd620a4768",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4f19aa5-b08a-42d6-984d-31136f78fe06"
                    }
                  }
                ]
              },
              {
                "id": "286534ba-d4ba-483b-9214-e4846823967b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c46ad5f4-bcbc-4cde-8425-6ba19fda6f3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "190b216c-374c-484a-bd14-eeac654ed066"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bc7a7db-954d-4d48-960e-e4bee7f4c211",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c615c44-5a6b-4503-b234-15d4aaa5e12f"
                    }
                  }
                ]
              },
              {
                "id": "7c808828-4927-41d9-bbcb-b6dcd49defee",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb0c32f3-f11c-47b8-958c-4ea09c4b46d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ed9cb14-1266-4d38-b9f3-0a19a70988bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "267f1d6c-110f-4c41-83a9-b7426e9d86cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6ab15014-e11c-4a5b-94a3-33fc1f94cd18"
                    }
                  }
                ]
              },
              {
                "id": "7fb7e311-a46b-4f1f-a1bb-7adddf81f5c0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0461a11b-2592-4711-a310-287b0a7304dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa217f57-4356-4f9b-9c68-4651173a08a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6256bdd7-0daf-42a1-8f9b-ed07327e742c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fab7fea1-8b0c-4a17-b656-b17fda8fe80b"
                    }
                  }
                ]
              },
              {
                "id": "2c33d521-39b3-43a5-9a19-fc340909160c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "597ec12a-6374-4215-8ae5-91e44294f901",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aed73b2d-dce7-4d3a-8537-8bbb066c07c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81fb7aa3-7448-4dd7-8d0a-bf1acec0e38a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9b1a60bc-5025-41fb-9aae-611126230bb0"
                    }
                  }
                ]
              },
              {
                "id": "fe469126-baaa-4873-b077-53cc1a7a9b39",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e739e8fe-7479-45e9-a673-8b516d210412",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "514a8fb7-dd75-4afe-8c3e-7cd0b927150b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a361dae7-9f09-4e3e-86b4-dd88e946a9cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ac67b8c-4c3a-4bd2-9acb-2ecf5b118b99"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6b45420-0b8d-4634-b6b3-084728248c8d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f54123a8-5e5d-4d83-8c68-3f6a983b4313"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4d62fe69-9877-4d28-b82d-01f212aa398e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e768a8d7-bc6a-471d-b519-81df4ab2fb07"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06298bf9-6f84-4c74-b776-0a0440082638",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ab487ad5-4e9f-49e0-8a92-b85fcd8f07c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b814acc8-f951-4950-9c79-97d8f6453c6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edb7c152-4833-43b5-b551-5dedfb74ccaa"
            }
          }
        ]
      },
      {
        "id": "abe78d54-cbb3-4604-bc34-1108af098416",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "da696920-20a9-4a47-bd51-5cf4d6643560",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6835e976-c24f-45a3-85ff-501a1b6f0733",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "34a398e8-aecb-4005-8e2f-118f4a994fe3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b25cd3-533e-40b2-b088-bfaf0af71445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413822f5-a806-469e-99b7-843c85859c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdf0e50-1b8d-4962-bb50-f549ad06a8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e501b77d-947c-4599-89aa-2c7dddfe5924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a822000f-e801-45cc-9ddb-965ea23b523e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07ddeef-256a-4d96-b4db-918eac12dc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d8d3df-93f5-4ff6-87d6-f8acc361c415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9316a228-7fe4-4adb-b33c-5debc9daefc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a84881-7aa5-4ba7-8e6c-9c209c1e3976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc62e7d-f8dd-423d-b640-78fc61838171",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623761bd-dcf7-41c8-b2df-82dc08aa323f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1c0a71-b39a-4d39-be7c-e6577ebc4f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ca8a72-62be-41f3-983c-e757e2cf870a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc9bdd8-fab3-4a6b-8201-2ec4c7fa6484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97eb50e-65a4-47b9-bca6-9d7d1acfa534",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc3399e-8f42-4cbf-a8aa-bce8d5b8523c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8a3364-bf14-4485-9c3e-56bff16615ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9164958-14ba-4dc4-accb-aab09fc12ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8262ae44-c844-4610-a512-e2213c48ba0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d589c6a6-ab44-4dae-aaf6-8de54345dbd0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4bc4b1-c653-41dc-897e-cd1b3a4762f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e628cb-bfc8-4981-9ad2-fccebd084a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ec3a5f-dc2d-4c11-97f2-83c3315d5b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd097164-213b-449b-9937-982d41562119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e99986-f2d8-4ed0-a85a-3deac78c636f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad849836-c122-4820-8331-f93be9593d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3cd30c-3ef2-4009-ba98-5c1a9d019650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a26e84d-e191-429f-8f21-d370aacd7fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc95c3b-e489-4d9b-b53b-05a833e2e71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4102da42-a84c-4889-8e98-1617860bde81",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad783df-48a0-4dbd-800e-58044c790c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c936d13-de9b-4c6e-96f5-51a538e53644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d1522e-6ed6-4762-933b-283270397e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce78aa19-e2fb-4414-b552-9854e2afa853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a9d61b-9fc6-4558-8f2f-f3080d39b185",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ae281c-4857-43e6-a0ba-78e358469161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b421161c-9c71-4769-bb23-492101ecb9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4620f083-b286-42b6-85e5-798b1203122f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6972e3-074b-4dd4-98d7-39d6f6785882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7559047f-0bb4-4cf2-9867-25feca79743a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b069593a-9979-4174-a0b5-c3ab0ea3059e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba70d95-ffaa-4a7b-b1b8-4b4fa34eaa04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af8a437-ef4a-4ea8-a83d-1cb3647b4b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d424a85a-7c34-44f3-8da0-9ad25b6757f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dfe492-d74b-4f32-a812-f397542b18eb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480da4ac-3c0c-47b0-884f-4e1d1ebd9d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2de82bd-063f-4358-8eaf-2a90e122bf95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413e895b-19e1-450d-a03e-84aec06db3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b93bc45-d4fd-478b-9f6b-2d6a5a3d2fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f316448-7b87-4a71-b19c-3c701b65359c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "242f12ac-f532-4a08-9518-8cccdb786b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4f1ef9-e04c-498f-9125-a72203a33f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f5d1e1-f483-4ade-8561-33ca2a9afe73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc510e6-4977-49a7-9c13-c6e1fbd76b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7002fa-4474-4505-a919-db9c3f2909b5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f0bc5c-1d9a-4d5d-bf13-d977673e5f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec11f56b-d549-4595-8ec7-e135939429fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f142536e-a3d5-4f5f-9586-e2da0079aeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af2e10d0-9af8-454e-9869-b7a7d8a05fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21df5e51-f1cb-4468-ac18-c66c1593ad56",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c35cb3c-e437-44e2-9fc9-cfc975d30641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709e461c-e4eb-4dec-aae6-bb4c23f77fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f118f72d-abe2-484d-87fc-a68e251a7960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8149cc9e-4c13-4da3-af26-0fa53a18cea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5df791b-b3ce-4fcc-b460-821da73c0bbf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a40fa7-9ebf-49ee-ae22-0cae97832697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa8f3a8-5344-45de-8fea-0d29d15ffc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef072ed6-30e3-43dc-a651-75960b1c9112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c091cd6-e0a2-4a2c-a2ab-048ebc4cbce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51d72a8-83ce-49dd-a90b-4b2abde97951",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a21ed1-dd7b-488c-8b71-c187d669f86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed48053b-310e-4304-8699-6ef1562bf45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb4ec29-805f-47ee-a2a6-c42ff4cc2472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9a63f4-f868-42ad-90c9-2cf7dee504d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d882d056-5f6b-41ae-9abf-fb1ba9275d59",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2070d365-16c9-4228-96aa-61c93ef66f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366095fb-b8f9-4741-b183-3e0ed58a1460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1006c5-89da-4ceb-9b78-759b56fc1d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "895fb9cc-a462-47f7-a26e-cbe3d6584a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f94b4e-764a-444d-9611-31d38aa993c0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e959b2-4985-4a34-a370-7fec207e0491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6132c36d-0017-4711-b3e8-faded7ca3ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7e050c-3062-46c9-9d85-ef4dc8ec0dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9081c309-627b-4030-867d-afd9e10f0672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510ccdbd-d963-4af6-afb1-ac9cf86124b9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293680f0-d616-425b-85fd-70b86e5610c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fb7bb3-c644-4e1a-a4c3-d47501a1c095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6641bb-b6e9-4cb2-91c8-14fdbcb96f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d61aa55c-6f19-430a-ab68-4b2719404149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da044eb9-d072-4623-880c-5358f3605b16",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db3e02c-88c5-48bd-bf7f-0eafcaae1ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41e78fe-2ee8-4fc0-bc89-c9108b79111b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227356a9-b9f5-4244-b40b-811aa990a945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d01843de-d9c9-4094-bfaa-675d151b6ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9847ce08-bf5f-4d2a-a3f0-c1c2b11aa673",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da7bc6d-fe7e-4e34-8b5b-7d3fb740ad37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2146e0-14f4-4ff6-b7a5-86e44e0d7539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0737d3a3-ef9e-4d4d-a98a-36ddbab7bd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78783085-cef3-4909-9993-c5245e882823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b3c983-2fef-4ae0-89c1-99827138dbfc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9faca3-721d-49f2-aad3-6d83f13cb64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490bea78-18be-4efe-82ac-0f88917a5eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce94e31c-9487-4f87-81fb-46dcd7c5aeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2caf52f7-d405-41cf-bd57-5229e59886c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e18843-f2bd-4373-ae9d-873bab7a4190",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06775c8d-a266-4fb1-8bfb-9711903e1fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd20a257-17db-4ee8-899a-ca9c759dc630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fc3d27-e098-462f-aca1-eac1acee7e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e2dc8ac-3430-4b52-818f-4f30c7ad5e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ab4841-706b-417d-a5b0-183ec397087f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14532081-fb3d-4102-b91d-c10682a61c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bb2435-8b7d-44f9-94a9-271ea087af7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd43934e-c68d-4245-9343-85bd3bdf25e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd55c4e-8103-4f92-bd1c-2436ef3bfb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d2a403-2d6d-46bd-9e6d-1ed88ad3a2ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a727f8-f168-4a82-8c64-e17c74ec7e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b198eb6c-16ad-4e3c-9f60-bd4ecbd2f971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dae4aa5-13d0-4ad7-8fb0-f68fdb06dc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "244c74ce-3d39-443c-93bb-ef35d4e2ab35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dbfaa6-2e95-4108-8504-faf51d855dc6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacf4813-6ee0-4435-af08-e4c94da8833e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc7add6-4b83-4bf1-bd8f-6ed388ce2ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557bd6cc-0429-4142-960f-15e624795230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e54ca98-dbef-45d3-9a6b-7259ad041236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe4bfb2-2e47-41d7-9358-284193003384",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6fed1e-ab35-4393-b4c7-0adaaa7b8b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc118f9-6bcf-4904-9825-b9ec644bb7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea88cc9-03e4-45a4-9374-9e9944953b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b033bf57-afae-46db-8b04-744ac4af86d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c1a055-fc0d-4f66-950f-23c286d1637d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ba2cf8-b943-444c-9ea0-20419b75af73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7057ae8-9eac-4bd6-a601-44fb9b058d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84a81f9-eeb1-497d-bfa6-c5db5eeee4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f26d973-eb04-417b-8c6c-e6739b678a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a629fb-4c6e-44ff-b8c1-ee8f35a3f5d1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9f62a9-8194-4c01-9b93-eaae17ed22bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be193114-9be0-4f37-b13e-c37bf50792bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a9c426-0954-4596-9635-ab5a72ac89e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c96e237d-1c8e-4368-93a7-e81531cd5b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96098481-0069-4c37-a626-2fbd5324052b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98671b99-b597-4b1b-8675-b0902e4a336d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc811f4-b39e-4741-9101-bac9476b2ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51a718a-8bb9-4d4a-8fb1-708fee30c196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2c2b50-40e9-400b-964b-c74f710c2626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231c5904-a7fb-44cb-ad53-7afb581b7bcb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a760126-6ce5-4460-adb2-dca783a7651b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698606bc-bb29-4b0d-a45a-e349de2c7010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fb3c6a-e1d1-4305-9850-36fd8a7fd885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86818bdb-2c01-4ec7-be40-c3e5110ea08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ca6ec7-64ae-486f-b48b-5433ae0b9066",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ca9f60-6e6f-48a1-a991-17be780098ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b221ee-9178-4f76-b265-0942d6242d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db52141-8aa8-4121-a001-f974469c995e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3d1791-5711-4ca1-898d-3196cfc1c62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b28575-a9ff-42d3-9073-c6fbb2bf9f01",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5107369a-f97a-4291-9e8b-5e128b064884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6104fa9-c49f-4efd-8e0f-e27be628a14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3c8dc1-1402-4f02-8f16-5fccd7b6366c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11fca630-985f-4097-b464-784cfb5f311a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "93d11ae6-934a-4a0b-a8be-60aca97b11c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f819473-93c0-4129-b8e2-61937d690907",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ef8f6f-8d1e-4050-80bb-deaefa3f2b72",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fa818c8e-94d4-4490-88a0-8f97a8231e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65076aff-d728-45a8-94e0-51fd9eb4866e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41595523-2a6d-465d-920e-f52f4f8fcf88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15d52fe4-b83b-4c58-a84a-a19401836908",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57f4b8c7-c3b1-406e-bb3d-faa1e4540870"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb8129c4-b791-47e7-8bfb-1e7a195b10a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5bef272-5bde-4f3b-8282-8bdb0add93aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87ca824f-5025-454f-8a5c-26234a6bdbed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "924e8242-660a-4c2a-9017-babc24960ff1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f111bf72-10bc-4d94-b9b3-623b72e825e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59ba354b-ddd2-4235-a133-9b4dd4b4805c"
            }
          }
        ]
      },
      {
        "id": "d6c87c4e-0a1d-4e77-9e45-e99512447f8d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "52985140-9d69-4d91-bb0d-01acd60bf10f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61eb8bdb-85d5-4072-bb85-eaa4addf1450",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "152fe03b-25af-490f-a493-f6ff295ef558",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a90f5b-7f2e-4b06-b452-f070059c4883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c29e4b-2590-4fcc-9ac2-4962d35feeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cb33df-42a0-4d0b-84a2-6e71c6b3d28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aabf5c9-a318-4a7e-9376-98a651152d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054217b7-bb6d-48f6-8d21-69ed9abbc87c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c896548e-2866-4959-99ae-d967fe6a0991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67b2adc-3b85-4343-9c43-2b2b3ebc7a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1696e2-d9d3-460d-9e67-2c5a6e48e3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "baf7f8c9-9432-4f4f-9dd8-0e51d985b9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32aa3ba5-f457-4a75-b962-a430ccb98eb4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e66bdf-a1fd-4f75-964f-3e9a730899b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2200089e-6c30-439f-b12d-d756d6f2b6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b893c41-db9f-4443-9241-58f8ed4e1634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad9c343-decb-4fc7-8b9c-e8e56ea9ced5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0383704-fff2-4aeb-9084-61ddd4cdd3ff",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d349a074-290c-4eeb-babc-6743b5bdac00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1c4652-9477-4d1c-88c2-312b936a6eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d70f3c2-8f49-4e9e-ba7f-f5c21dd39e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "226e5cf1-e7d8-418f-8509-0cd3bedb0028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f633446b-3e60-46f5-bcc6-72e809cff4e2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d69690-af1b-4aef-9b5d-6ee509052e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e282f334-3edb-466f-b916-2af02ff741da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d1c3f1-8435-45f7-b609-92a9746bd52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18f6d2ca-91bf-414a-9814-173eea40b203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb7a93b-d0fe-4ec9-b5b1-0c07aa861a07",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705b59e9-91b5-4389-b125-7190ae09b598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cb99f9-e0c6-4bbd-b6b0-240747b7b6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdb6fe8-7766-4cb4-9b01-94e156f5bb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc4811c-1b60-4faa-9ad5-f77a767bbe61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c55f95-a72a-45da-8611-b4c91979ed07",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00257e17-d8ce-4954-8f25-a94ca80265d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4495bfa4-c276-4522-a90c-adddb6d161fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90ef4ae-e359-4d59-82db-3b153d4cc505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a626026-514b-4b12-a890-34fcbe858fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699b0264-3636-4a28-b600-76c7569ef6f5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e14bb1-fb92-44b5-9e6d-8567b13f2844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f70d6b-c808-4b27-8a55-496d94416416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552237e5-c290-4644-8702-077708ce068d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84cae4c1-5608-4c72-8250-d3b4f6e3eafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de880ca-a3ee-428e-9cc8-7bdd00bb5d6f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17342e6d-8549-43a3-95b5-6bb20d26d721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3f30fa-b2d5-45ac-8c37-3a15377a5f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5577de9f-b1ed-4c35-b244-98b8755f039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc52763c-fdff-43cd-84b0-40b595ddebda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1f036d-fa40-4a6a-9677-1b338fa95d2c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5c8686-451a-4efe-84d6-90fedb6cd2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64cc0cf-d1d9-48ea-bb3f-c36bc94225e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e232e8ed-715f-44c5-b5ba-c74afa8af94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29475d56-51b6-4fb4-bafc-1f2e3f487105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dc5b4b-7217-4032-abaf-5da78e286cd1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad66d195-ef9f-4a95-ac58-2f2d8502eba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72999247-b822-4992-a2aa-9121acfbeb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b509bee6-5a5a-40ae-bfc6-d826a26dc017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ac9641-cb10-450e-9b7a-e8396d36dc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642d64c8-c696-454a-af2a-254900a76297",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57839909-73e5-4d8d-8bff-8a54f1410d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176cead9-4637-4dee-bdbb-79ec3fb3a620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7f7618-8dc0-4e39-8127-5ad115fb3861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec5e93a-b22d-43f8-8030-c77b9328eea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0ccd1a-e3a0-4cd9-928f-c2b0d1f4fdce",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e2fa55-7777-4eb9-b11f-15a6a663c5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57af58da-eff6-4ab0-9ee9-eca71e85ef7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f55e8f-c983-497b-9728-92076ba87abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02f4c372-4dc0-484e-bef8-242b3dce824d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebbecb1-4359-4ee3-b868-af7da1b337f1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501330e5-eb5a-4c75-9264-db983055d7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774f9095-b098-440f-8f92-fdf05bf362e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8da84e-56b8-48b3-a3b1-404741d752dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d162116-00c2-4686-a259-263dac08f214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8645e9a-305c-4772-a024-88057dc9f9ba",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc383a9-c498-4006-96e3-a32eccac04ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50418143-1a07-4ec2-a934-1dfb28a16592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b613eb-3b70-47f2-8780-058a94fba041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f58bfb-620e-4546-a3aa-dc5b6eb29232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61afe86e-28bc-48ca-8d98-f29aafdf2781",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf1cbfd-942d-4e5f-b0ad-5024bcff9547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8446b2b3-6f41-451b-b9e4-f18dd5b6aac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d462ec4a-488b-45af-81ed-9919502500da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "06b83eb7-711b-4dbc-8eb7-2088e093cb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6820edf-75bf-4551-ad2e-9189dcf06e00",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef6081a-1a77-4a5f-80f7-fcfbf9cdd5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d37426-5eff-484a-bf88-82cd476f1be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5525419-88b4-4c09-a1b4-1fcffcf8f6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "758f1cd5-41f8-46a7-b389-fc4ee893a675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951598e3-2385-4d7c-8064-ec634760b75f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e58bcfb-9b51-4fe8-8ab9-46e172733432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7843e787-92b8-42a4-8b77-a6a5fd752cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb376be-ae41-43b3-810b-82096bc05fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f22289d8-c0ec-4c98-8115-ce7436a7f9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445001c4-b335-4bb6-af47-f7d951aa7a6e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1190c23d-c9fa-46e3-bbdb-987f8b47f6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b44d67-1ffb-4642-8066-2136e3c1acf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61ede92-55ca-4a9e-a903-702506bdd381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aabcd248-e207-467e-a3b6-e82b7a7e44e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6442873e-75e7-4d89-b81f-874b0de4fe64",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763acd79-6609-4e90-84ea-e06a7611007f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0567f28-5302-40f8-a351-7dc40bb4a6e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c68cde-094f-4231-adb0-043868af6074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e164b5ef-0ad0-44a0-bd04-208e1878a7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99529006-636c-49d6-ac87-50d45114c9be",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0174617-c6f7-4d5f-ba5e-1406c88e86d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6ee2e2-469f-4ad9-9e21-72b65361bcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9416fdc-3b78-4587-92a5-7acd03b8b201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31747418-06ca-4059-81c5-94df2b3ffc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c376e5fe-15e9-4e72-a185-22e60f0cceb2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2067db67-930c-4e80-aab9-8610433f2dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88a2fbc-02a3-4d1a-973d-503052e48528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08eb2dc7-0b35-4bd9-81c9-38efff0d1873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "938c8c99-ccd4-406e-929f-1ef67bfc3579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc77b8d-5f86-4bde-834e-079299665a28",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c51a7a-3215-4359-afcd-415df0e3376d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731b2cac-b0f8-42dd-af95-b1f6393ac28c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce4f8aa-95fe-463c-b7b5-5dec7fae513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e561717-a82f-4881-befc-0c7d255ebc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4321662-26ff-40db-bda8-b22306027b83",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710aa958-4f85-4594-b040-b4e048c00530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796b98b0-f7e4-4706-abd3-7b47befcd400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae139058-f88f-472b-a281-615789b6a30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cbf2f3-1fee-4ac6-8248-d573dbb84544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043e680b-f438-409a-b34d-a5533c126c96",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82ad3e0-68dc-4e49-8674-40fa4ca40bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c46935f-11a5-44ca-982c-82071a1decc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a8434f-7b1c-4090-bdc1-61b9096a600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04f86f7f-3b29-48f5-8f4b-1ea2ee17a07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ac46fe-c58b-4ae1-8707-ce5909b523b4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f4e44e-bbfb-4e6d-869d-0434b4eada11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f735e777-713a-4094-96e0-62754d17582c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c6dc67-09ca-40a6-ac03-918d49829174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79f68d2b-5cae-41de-b1cd-31ec9c22dda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f5f765-0b01-4c54-983b-92c28adddf98",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88826ac9-0068-4e10-96d4-f2b47a20ee4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837af9db-e97b-405c-8d43-11989ac77770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7748ce-9623-49cf-b65c-987ba6b141ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "978a9310-7e8d-4c5d-8cc8-106f2c9628e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341a5f68-ca14-4a9e-a463-b04534f388de",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fd7618-0f1c-4657-a00d-f93ba577d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923e1da5-9ee4-420b-8c3a-79d2b569d4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22d30b5-15a4-4622-b41e-731f78759f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62e8094-3976-4d5d-adf3-f1ac1c54b5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8259512b-cdfb-4416-a6c1-27fec3a338bb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f3d803-1bdd-4993-b0c4-cc657e92df41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d46121-61a5-4389-bb90-80d0db6d5402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073965ed-b3a7-4b68-9622-fd220de1384a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efdaf817-3cbe-43a1-9285-c61c2df913b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0004a1e0-2cbe-444c-ba88-21f9e0f7a8a6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9828ba99-1203-48b6-8f15-554f51990b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d38918f-2164-4ac3-9e01-04910ca2cd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1010c0cd-d86d-4801-ae20-27cc160a8d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ecbfc00-82f5-4dfe-89a1-eb74762961ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150f55d0-ef4b-4b64-9303-8ef3583d44b8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5e4a6a-6c39-4f4e-9e28-27b0d7afe10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e910e5-1304-4b2f-bb92-438e2e469d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734240be-ff2f-4729-8e12-8bc8bdfa91d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1328da93-7d61-446b-b1ac-f865698003cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f532fd0e-879f-4889-84b4-8ee54d16d808",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71abe7c-9fb6-482f-8793-a8c1415be314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8be241-a276-46f4-b55b-acf3e8854a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea808464-ee30-4a53-8f71-8d7cb4a9629e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32272767-bbd0-4acf-b2b2-c9993305907c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bfb1c8-b5bd-420b-a63f-224dbd48ea7f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342832ce-00f3-4141-a611-2ec9caeea95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d72ed0-e360-4c4c-bb4c-ba025207ac3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd0d0db-9477-4858-bf76-a353e4acbe4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4bca475-2883-42f1-a0db-4210e42c289e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfb69f5-876a-4c20-81c7-aa40d6a034e1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f11407-dc5e-4c14-b345-bdab9ffc4ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b38a2d-a0ca-402f-bd7c-e07c043923c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41740206-cdf2-4777-8c16-3f8e54270ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaeeccae-c777-4ffd-9d13-c6a76a16c6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708a478f-c88a-4492-8ad2-6b17ef542f6f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35799f49-27c4-4a53-9ede-78e66b75978b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc35c7f1-ded5-43c3-ab0c-7d386f6ae930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50250f6-a5d3-4047-8185-9b6cac786218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a3a017-869f-4574-8489-f475af251b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a026ca10-b40c-4182-a766-c761ae61fb8c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2188a0d1-5fe3-48c9-b78d-ac8e6a2a030a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ae4491-3248-49d3-98d5-b7ba4743f3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab41182-d276-4a02-9878-15f3af26686e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fdc4ded-10af-4283-829c-7fe6affdea06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8862297-9968-4c07-9bb7-8997bcc976ec",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f289826-69b2-4817-8387-5238098058c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396c590d-7615-497b-a155-6976d798b2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916be0a8-e1f7-45dc-811f-18305cc52bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "858e6be3-5acc-4e63-9378-d6b3bb51d8fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0d5ddd07-1a73-451d-9e79-ab3390bc7feb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0be5310-da49-44e4-a5e5-7d771e193b09",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5460047-834e-4c58-bc64-0422738ac94f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e370f42b-511d-438c-a3b5-943fa66d10b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d5406b-054f-43a7-bd82-93a391ca9a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5ee5d2e-b121-4a2f-8ba5-393ab81d46ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9e04dba-22f1-4464-8056-c00e7897e898",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c76008f-1cbc-43c3-a20b-79fe0d80209a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40964d98-7f55-40fc-845d-62d165b6615c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4c08d35-a98a-4c4f-b92d-783e7a950cd9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04bf189c-67d9-4577-916b-f11d9fbb1607",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "986748c8-0360-464c-b930-1d76a98798b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66593f02-c16f-4442-8892-e02939e23e23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94435e23-9dab-4ca9-bffb-68e948bb0db5"
            }
          }
        ]
      },
      {
        "id": "b160ecb2-9009-466f-b64f-36f20ff399e4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bc37ffee-cd5b-4172-88a2-dfdd3c367e15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f32326e7-a0dc-470f-a81d-26aae7acfbca",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6afcc64a-8d6d-407f-ad4c-5534b233beae",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d389112e-c493-4caf-8568-9e887d212b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fedb6441-78b1-4a7b-a35a-f605602bda3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915e19b7-98b0-4477-94b6-d847bd03fbde",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b653d380-f642-4998-b4fc-caa14db4f1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc11592-0848-4824-b240-6341210cb0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f40756-9f76-44f5-bb17-3b1fb61a84d6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c940e5-4af5-4844-b62f-86218fe93b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df45862-be6f-4e3b-bc22-6e5f1e4ed286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcae6fdf-43e6-469c-a3c3-550f25f70f3f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f7f28f-d158-416a-904a-980958cba9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ccae23d-1636-4e9e-992d-1bcb09cb137d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed3aff5-04f0-4e03-b684-b2d7968ad0a5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1618193-1632-4628-9307-0538ec21baba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5672013a-fbb0-4996-a361-d28569aad540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a237f3-f52b-49f6-9ca3-9d109f883d8c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9501eb52-1375-4a26-b676-ea0a5dd66ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b67846d-185b-47d1-8144-9e0ee7f7778e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c289f8e-30f0-4091-8e58-7ad479667157",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafdc75a-0627-4f9c-8b87-8eeabf03d6c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0d846f-640c-4e78-9578-7be7a3682e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efef9f52-9192-4fd4-a9e0-7524a7c028e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41e10dd-a7ed-48fa-badf-4624e17379e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0576ea67-3cc3-4775-9e38-aedb4df1802c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5701b8-2845-4edd-ac70-66164a577f0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0d4573-1063-4d37-b2be-7f3b91017bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f73741-c4b2-48af-9eed-588dd28781f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa9617c-aebd-4f28-88ae-e8ca895c5b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96641cd0-cbef-4750-ad6d-9450eb7bdad0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be24da41-eaf7-48d2-bbd8-7bd111461215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5cc4605-f784-4498-8877-72a6ddb3653e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71617ef2-9516-45cd-b98a-6d3de3319c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02301fa2-9dca-4ab1-9802-f5ad0013c490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0660a3ac-eddc-4b49-a2b2-650b50f54b67",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a632c19-6fa8-47c1-86b3-ef9288cd3df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81274e29-b74d-4188-b742-9b80efe7cbad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52d16c6-940a-42af-ac16-6ecfbd6adbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638647c0-c90b-485c-9215-ef104d77c775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996ec9ee-df13-464d-ad11-c080d037583b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcb5481-1976-45fe-91e1-bb3d408bb5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223e11d9-43b9-40db-8d0d-d17a8a012199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cadcec-ed0b-4b61-a5d8-367a94a36f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca53b6d-dd7a-48a3-a529-f5dfa7ccfb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e0970f-88ab-4803-befb-1da2bd4b21e5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bb6cd6-8135-4e4c-9171-f04096016228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244d9d87-8698-4e3e-b8e8-d4fb27970df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958c1616-e12a-4b1e-83a1-d0d815f047c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce71565-4105-42cb-a415-2291ecd5e9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda15a17-39a6-468b-b141-deffac873f98",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26b2fd5-ff1c-4372-b827-466722b30d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84316987-7aec-4f73-a3a0-0a7ee9b13b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd67724a-1528-4914-a8f1-8d1466528f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517c28ea-ab2d-4a2c-b015-6e6de9d7ce6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694dfa8f-3457-4083-b226-41a3cfe98b16",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70df069-7c70-4240-b084-87708609d378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3702031c-3f56-439f-8bfd-6115f3731a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d634a5-451f-4df0-ac5d-e88b47184ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cd5984-8566-4786-b182-a28164d20d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74cf5ca-c6f3-48e8-b877-72fea2c5ce20",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caea2b0-71be-404e-a0b4-15160c4ce2d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f9e2daa-6592-4129-8555-f190ee1f4b5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11767c8f-faff-4fb2-a376-0419ab7b5bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5b806d-8f3f-491a-8fa7-19a534164460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5c44e9-b6eb-4a28-a612-9346da8461e7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855c6c05-f045-4f05-96ce-70d699c62bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3670ed03-5636-4610-996e-43a5d8e0c725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91812b0d-c3df-4d53-922d-000a32fee464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00553c41-e8f4-4217-b36d-e27bf7da3a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99405f9b-6b3e-48f2-af91-ac1c4783e415",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd1fa49-80d2-4cf3-b00f-d35311790724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31ed964-89bb-4be3-8307-26731fe62120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4044739-9ff1-4da3-a866-d1bc7ee16cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1296a3e6-ace0-43af-a721-889663703b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070b77ac-848f-4929-9746-ff6031b412f5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a47e87-36c7-4a8d-acda-eaed16540a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11bad3f-5876-4ce1-9ae4-84c2b22b578f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2ff59c-3df0-4795-837f-8e947be12921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85aed125-2800-4791-a091-7e3bd9b6e7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70d4093-4f14-46df-a27f-be846e98a91b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e7d5bc-377e-430e-b67c-ce94246a30cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e8d6f4-4dad-4f5b-9c1f-f2e743b3a28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbfb73a-67bd-490f-b847-9125168350da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0252f2-0a7e-441f-b25d-6b2dcb24a50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c39ab9-5be6-4310-be89-811e6f110f38",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c0bd78-0f5e-43fb-9264-7060fc106b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39715e77-2a07-4f9f-9caa-ca7dc11e63db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b71b9a-28be-48ce-929f-9001c0e07f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165475bf-64a2-4d91-b6ec-a44a832a403b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2aea7e8-5789-4735-949d-14d128e27177",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4a3384-fba9-43c8-ad91-b553dc9cdeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eeda892-d544-4f03-bbf4-5f5be643acc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4dc8a6d-3f7b-4a52-a6d5-bf86051436ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0086a97-cdda-4ae9-83c9-ac881b29b8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26df5900-f555-49f0-9451-7e55c7bb893f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8e0297-15d1-47f9-92b2-9391b511402c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9750a276-e8aa-4e39-84d2-8132b96b7ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84090a1-a3e9-49ae-aa1b-397b6704935b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de12bb4-2324-44c2-b270-b695093634b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f8be05-aa29-42d4-b01b-4a204c3ba146",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcebcfb2-7048-4244-ac8b-852255aef47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2a47da-0ffe-416a-81be-7711d5ee655c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2003ef1-ff65-4a1c-bf18-b4a66250175b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b3a9fa-4b4d-4a00-a550-0faf023f72b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5303a976-54ee-46ed-8707-de4169ae982c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00483875-cbee-4e6b-8a2d-782a3114d8a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "990a63cb-86be-4d22-908e-00bc458c4337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b603089-53f3-4e25-bf88-f906cf2ae0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df48a7cc-7ad7-4eba-b128-95a3bd9ce56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2bb67f-33fa-4cde-bab4-bbf8aa9cfede",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f31478-a02c-483c-b17b-7ffa8205d118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "834faac4-d6cf-4706-852b-44cb02e50378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c9aec1-acd0-463e-a0da-c282b91fb4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120a8fab-e509-4be9-b609-019e07512f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d322e4b-c93e-476b-8275-2f9065ea64cd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccce9e7-2a52-43ac-9426-ac7b7ee4367b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b51fc30-374d-4ce6-bccb-f66ff5cbcf4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57239399-ce9e-4033-a289-86606ed88485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80516039-2887-495f-b79d-840e5debcacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3526898-4023-413f-82ca-541c3109aaf4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f744d7-eb73-464f-97ed-7b832346d143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd58af2c-0b96-4428-b4d5-47fbd0025097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5378478d-de29-4379-bb31-1972239dca23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b35ba9-23ad-4135-840a-68878a5424c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c546bd1-aa7b-4aaa-800b-860a58e5e82e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7f136c-e31f-4972-a61f-d8fc2ea48a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bfe662-2cf2-4e1d-b1ab-b9b3d06af280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff9ab17-4693-4a69-8fca-38443652f1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb75baa-d5f4-4395-a007-c7c973bd2e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4681d70-1b9b-488c-917a-764b957766ff",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237be568-90c8-4f36-a477-aa83e083532b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5573350-e019-4d9e-892b-2d6877a6c252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06714471-89bd-43b5-9779-bab6c21afb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8cc9a33-0597-4aa7-b392-c26438d00d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3070c3-254c-4c0f-bc52-23db5e2f831b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5419bfdf-9a12-4200-af4d-a1799139c937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5336cec-b8a3-4d5b-adcd-2200136cd3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ada3a32-9646-4ef3-8c16-d404d1340f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438b948a-561c-4fab-8500-5d81d7ac241f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bee20c-7873-4343-aa30-b5ac4edee7a9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3969deb9-e7ef-4676-ac0a-9e625cb079af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e687bf7e-ee59-425a-8dd8-a66edc098c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebc7226-8d22-4058-a2ed-bda00f9373f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87df2bf9-4799-435e-b2aa-ff176db9f2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd131245-203c-44eb-bd27-90ae7949633e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39976ad0-8651-4179-8726-51a789eea447",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9cafc80-5882-40f9-a665-e7173b8e5779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a301adfe-1ab9-45a3-98aa-eaffa2e69975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da53dda9-fda0-4522-a0de-4e4f404430e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc133463-a5ad-48e8-a700-00aba42c0674",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8036f4dc-479a-4142-af16-98fa961f0aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dab41b63-5594-4d20-94ad-c1dbf9c11c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e622f666-ada8-4787-8cab-215c520289d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b331eec-aa30-4b45-b6e6-15da1500cc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658bc4f9-ad14-4920-926c-a0ee22a61014",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988a016a-b4f1-4392-81e9-577506582192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a3fc0d2-4dda-4b8c-a80f-ee29aa4b8652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2307bf76-c249-4636-8eb8-5716a452b6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbaf22e-1640-4b38-8d09-933637c4b5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5959135a-92e2-4c69-9179-2d793ae8a074",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c442bea2-1bd2-4f0c-bc8a-0b39eff7a2d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7cb136-20de-44ba-bc2a-519de2aa7f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fc3df4-4a0c-4a8b-ab58-19888b65083d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5688f06f-4107-4f70-aa90-cc211619018b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1e3ac0-9a80-4100-b8ed-18ab1e6b5c66",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e284ea-2b49-46bc-ae29-e643dc857e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788d6671-cbc1-407a-accf-cfa814177cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4561b4c8-302d-4564-b2ec-c6e3525a22fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2941f70f-7701-4322-aea7-788defb1ba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7737c53-74e9-441c-a026-b9b00bc1ddc8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e55cedf-60c2-433e-8b47-14717656c240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d159ffe2-cb26-462d-ba65-ad8c66bc7915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3bfd7f-be40-40f1-85ba-c3907d591b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc0125c-b47e-4706-a7ee-cd4147d27d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54b21ee-14d9-45aa-84dd-af0f26bc4cf0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9c7bac-5575-41b2-a73c-1033eaa5098d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a368a82-030d-4c44-98a0-321df6254c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24e9ab8-3dc9-44d7-9c0f-93153c3b38ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e474d2-6ac5-43fc-8054-beccb85abc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2592f6d4-d026-45f5-b292-f08275144733",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4059d825-598a-4c41-a986-0522562c11ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45448ecc-93ec-4b2e-8097-09408511bb88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b279b6-6085-4e26-854f-1b004c2a66d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e28597d-9315-43e2-b8fc-43ca7e044d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fe0aa9-417e-4da9-8361-3f7c23527dfd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a39b8ae-4541-439e-a640-ada923328bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d79969-673b-4819-b169-24374c8e4342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d17f2c7-66af-4373-b10f-e346663d5fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d525013-0b13-4a85-8d87-180fe6b9d4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d64afc2-c5e7-4790-925f-9253d006882b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dcf69b-802e-4081-bfbf-9285ae0c9eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d8ec4b-55b4-4391-87f6-41111745cfc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e303ee-c4d7-4094-b187-4981f16d8b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6295497f-f439-4324-8f0a-52530704b0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eba1ad4-c902-43fa-8ffb-49263057bc96",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f3ecff-6ede-44c4-9b92-10e4912c6174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ff533d-9d44-4866-9329-b4e57753664f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e57778-a293-479f-babc-3b45e52b4cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0cfe69-ac71-4d58-87c9-15ec0a9e7ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e59d3fa-a24d-4cd0-ba39-715b766cd931",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1d1909-032d-4350-b24e-4ee905fd2cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a53090-a75c-4e72-80dc-45bf125f2988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d957904-0f9e-40d1-ba0a-9732c8581b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2516c615-36e4-4b5a-97b1-46c353cfede5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdb70e1-f870-43f2-a032-f5134b60eefc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f0859c-c155-4629-841e-757dc9fc1a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512a6e0b-d950-4733-b9e0-456ea28991fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c84b8e-ac83-4fd2-8f9d-3dfad7e00881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fadee2f-32cd-4e2e-a8b0-5073b54f1709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5186d2-bd93-4fbf-a160-b7a05964b7d6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563723b7-2acc-48b8-bd2c-48479524491c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2718365-3ef3-48c2-89a1-b3b3941ac4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32882db-21a1-40ec-a3c1-e9afff98950a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064d71fe-92b9-42eb-8c25-d1a7f4b03f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddac59b-4d7f-419e-a703-d09e7f172e53",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c115dc-8c18-4838-9c97-2af6964fdc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e7feb2-4489-4158-b5a4-c556c728cdd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c942da-b837-46e8-aa20-c889ecbd606b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4849a6-30ff-4cfc-bb61-5d5904b12e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e7a80d-46f0-4443-ae2b-b4abe3ff5e03",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b2166d-34e2-4a01-a4aa-7454e9c6c209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb520d3b-1b64-4081-af72-c53fb6aee321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438094f5-a707-4f2d-bf93-32b7fa0f89a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a66232-4ca3-415e-ac5d-bf2aae30558e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebe7d14-4e76-4071-a692-c66a29b59a25",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca53c6c6-c7fb-4965-8b9e-ed718dcf3a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b82d86-98cd-494e-a33d-ffb8f44da8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf23073-e29d-438e-a4fe-d5c5cffadbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1e5eaa-1e17-4efa-b0c3-a26278cd24be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171d2bb4-918e-4761-8107-52f27752defa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64f7801-b58b-49a9-874e-70b3e44c0137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5342c221-e561-4051-8689-12243e24e1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cf5db8-308e-4c06-888d-28bb2ae7cae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad7031c5-f1df-4ee1-b4b9-d6ca4014757d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42375e56-5721-41cc-93bf-4d1cb6e7e744",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6f2b46-0a7f-4d0e-8b26-194de2629ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7bda3c-552d-4039-83a2-0a716774acc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5b8e48-afda-4e1e-8b39-e0b539739c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427e6dfc-182d-4c73-b6c5-d17b8ae102bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd775f59-48e7-4658-b22f-39a97c633cf5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae6260f-4627-4e5d-9ef1-76555419357a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b460d34d-2487-4aa1-ac64-4f39e880c20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb626637-9190-4440-a529-0f743e2db304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2016013-c4fd-4ab4-a868-eee750b38948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6917ec4-1484-4ea0-a3ba-94e856898c7e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ffeff6-6ecd-41a0-ac00-dbafebbc3f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8cba02-d084-427a-879b-c9cf5058fae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ade3470-31d4-450b-b98c-cd2a48a1bcf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5858b054-4641-4ac9-a275-95ba52bdb9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401d8bf8-e53d-4e60-8404-b54f8c2c7451",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df13b87a-9557-4a71-aa78-5e5b1b01740f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848c9fab-76b0-45fd-a8e4-1d497b268cc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c0ecca-7d15-4213-8b2d-b7829843518a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a72b72c-f330-4f98-9a57-e3657bb8a8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7c4699-7522-48b7-9f3e-067c43135c38",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e4dc4f-60e7-4da7-9a55-6062bc11f32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09796454-9b6a-4854-9313-f7052298f753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf37d36-3229-460c-ac8f-303a08f83119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb36960-8d02-4638-900a-14d1e601b3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3772fdef-1697-4ed2-ba10-d586f3784e99",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89edd6b3-d639-49f2-8e81-a6f1ae3e7db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56257af-e5c9-49cc-ab7b-2daca8eccbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be75008d-87b4-47de-8374-134ccf12f7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16438ad2-2e0d-494e-ab72-828f04a710b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a4d0b2-89dc-4d77-9bfe-2b1ac6ff3aec",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ed4bb9-d9ce-4b5c-8c55-5b4cac3f7466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d979e9e-8d93-4ad0-b289-51d3b2936bf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "388a7911-ecac-4501-8b74-2d07da2a75dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88861306-4aaf-4be4-8948-973e569d0b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43733fd4-bd84-42ba-9413-a97e0d20782b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83f7029-3534-4705-ab49-ef1e4976932f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad73de62-73f3-4d56-8145-988672e6bd99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8029387a-17ef-44d4-897b-761c3e50816d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69130c4-b0cf-4b3d-9394-ee8e3cefa8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855bb1d9-6df6-4fb0-99cb-43ce6ea6d7f8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ceb586-1b96-41d0-87da-2d84ebbd40c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874a5441-86d6-49b4-817a-9d1e1c88a7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afc8f77-3ebc-4b4b-9e0c-30c4b53245ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f1b8c8-954e-4b94-a401-ea41895ad7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f717f341-4f54-4c4a-8b3f-0be35a0c3812",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f9bed6-48d5-42a0-b569-38cf16052a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663c3613-f1e7-461d-95e6-e518628b714d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af60d7c7-f13e-4a07-9e56-b708f491097e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8ac431-e650-4bca-a94b-4a85b42e92ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb9ed5b-0425-4417-8996-fac626724418",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d4d902-2362-4885-9bff-33e26e88cca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01eb30a-ab35-42ad-b243-38caf88702a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9218ea4e-08ff-426d-86c0-a4518396c8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80e0f9d-b106-48ba-8602-5d2d79ddf47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc8f18a-ba25-462f-bd17-825f7258ee15",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d5b18b-5ab8-4efa-b0c1-54f97607db20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12ba03f-b7bb-43c6-a539-dd10712c13df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a427adc3-0c11-4c47-9933-98a1529a2701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b0b39a-aab5-4ad1-941a-174273824389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaeec145-47e7-4985-b9d6-dac5c7137676",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e50ed8-f53c-426b-a92b-f2423032c57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e9ad27-6181-472e-a6bb-6e773f13cef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa1cd50-e9cf-4b66-9681-4166edf0968e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7edfc7bb-6a10-4981-b935-b64ac006d7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1723c3-9fff-402a-86ab-ac40a8cca805",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c0c321-6d1c-4830-a98e-c4592d629ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11f3169-8274-4124-9070-c0eb27089096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1deef34-df79-45b5-9231-4e461ef832f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57a818d-0e0e-4194-ac99-7434331b11a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b530b9-7993-4e17-aab3-c47c3ddd2c9f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75d7558-2298-4b02-8a9a-4704aa8da73b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c92ff0-e2e8-4f98-973e-97f64029c95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bbdc93-3bb9-46c7-a68d-06729d85ca20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e76f3fe-f249-44d1-bca3-78c739de2eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086abb0a-3736-4b5d-90f4-106dadd5a931",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7b7e7e-7a7f-4446-a3a9-25c75f353a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59109780-0123-4c40-87be-7af5d652ea92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f2657d-dbf1-44f8-9c1e-3f6595829049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2344ff81-d9ef-46ef-a88c-ce57abb1615f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cb953c-7e67-4355-9d48-f254158ecb36",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140e93cd-af52-4061-9a9b-50fed8cfe5bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7207e0bf-bad5-4bf7-a887-d8bf7187637b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe688a2-c756-4aa9-84a2-c29270611533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97fca95-e0f6-4e20-87cf-ae233d0cadad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a608409-c80d-462c-aa91-6396799e9a22",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da6d956-91e9-4f0d-9a48-88e0f1827375",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28798696-6171-4833-a9d6-bccd035f441b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f06fbfc-833c-402c-93d1-c96385a0edff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5675b2f-2d65-4aa8-98bd-c0395334dbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de43bf8e-b993-4faf-9644-7eb859e2de57",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af45003d-d5ea-486f-9f3d-d075858217a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d035bc89-3815-4c72-8ad1-791511650adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e00899d-c52e-4c2b-adca-ae2ac344a569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b4fed4-b661-4bf4-8eeb-8d75208b48b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c200d6b-f96c-46aa-a80d-5806e2e373d4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f1a7e6-a945-4a3c-8ebe-352343e03836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16c2b6fb-8763-4457-99ed-dffb7bbc3711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b06bbfb-3e9f-45d5-89ff-0a2778826d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914266aa-670d-4af3-ac32-5337d9d3d63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014ca00c-05d3-4f96-8ba4-4bdabb3bc3dc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ed25f2-39ee-4d56-aae7-ac8c1e58be3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b16fad6-df2f-46ff-bb35-2910a345f1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a038f6-9837-4ee0-9c09-e7dedd13f237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126c00e6-75c5-4aa9-b7da-f06876e3796c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bf1173-7821-477e-80f5-e95dea3ed79a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42307dad-0abf-4067-bac9-c1aafc057eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2898cd83-732b-4767-8deb-be9d02882185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fb0648-23af-4a0b-b920-5b8f729d5257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41d20fd-4bab-46eb-a45b-d5f27c5c0c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ef3cd5-5b22-41a1-b85d-a68be82b1104",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0467415b-db6d-4b57-895a-a9be3a6eef7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f04bf7ca-1ac0-4da6-aaa0-4455083cd0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71eab30e-ecd4-4082-96ee-f30a626505bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6919fc18-058e-48b8-8972-d1192980d742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff26648-c1ee-4930-a7a3-31190512e5ad",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a602cbb-6a87-4045-9dac-1af4c8ffa862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5067ba5-0052-4510-86e5-ef13f810f5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04f438d-8307-42b4-9a55-751d83acb100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1defe4-4f2b-4c41-8b30-bcb2c4eb4db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe1b195-bb34-4455-adc6-5b5789ce93c6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75a6a2c-c9a7-4e97-9771-d2ef1043f63f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8ca377f-770e-4eed-be70-f36469fde8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce69935a-33e0-49aa-a20e-05fcfb6b1662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69f6be4-c47c-47f1-a013-82ee5d09b784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07a3230-5183-460a-a2ec-c0bfc572bab5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82274408-570b-4340-b5b5-f7a2c1ebf308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1784dedf-c3a5-47b7-ad6d-780e80531379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4153df8f-ea07-4bf3-8f0d-a10197e75d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d9cc02-81de-453a-a6b9-e75d16c4842c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdb1bde-bd14-4073-9c07-10dcfae5cb7d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b68e35a-a0b1-456f-9362-c23d83dc42f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "628b734a-5873-4410-8207-1cd699f53cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf751a6-6cd5-48f4-9360-f1c2a6999b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85cc146d-0225-4031-bb6d-5307bda99ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cd9f51-4ce0-4817-b1c1-f33f23200043",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222f485a-a02d-4377-b462-90a256c0e523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eae51b9f-d0c2-4b6c-9d64-029bbc02450b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fba124a-b294-417d-bb4c-bb67871b7cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45af8db1-3f00-4219-9e78-784d55721aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc37a5dc-4c40-47b5-ba16-4d42fc901d4f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4ac96d-096e-4430-947a-0bb591ca54cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6d314b7-3c8a-4ec8-bb99-f8fff7ea9423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64afbfec-11fe-47a4-bf3c-fbe63edf330e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428ff373-9692-446f-8970-ad7edc4e6faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7955cf78-fe8c-4c88-8292-52ec5580a5b6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8e4677-261b-417c-b24c-9bd4f56eb9d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ea7f288-44bc-4740-9423-0d78874a28cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c133806-782d-4e45-9fbf-3290125745db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fda2f29-fbeb-4b30-9150-98f57d480bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0647166c-b833-414f-9ddd-97cd8be962ca",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7f10d3-bc52-4243-a309-8223c68ca529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18555811-2556-4dfc-916d-27e35b2c8e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73cf658-e3ee-4cf0-9304-bf13c0b9e09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7598ee68-98eb-40c1-938a-b9568e999675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60084b7-b5b3-4063-89d0-1a128145f892",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455d6411-9531-4cd2-8740-e6e15c6eac81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5579c16-7106-4d2b-b08e-aae4cf220368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de04064-7d9f-4265-807b-d7370509a4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e37922bb-3760-49ec-854f-77d3b5721bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d96e1d2-01dc-45a8-85f5-2d6740271438",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11929ea3-ee05-45d4-b8b5-c40da86788d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d201b4fc-748c-47be-89dd-769ee1812454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c4fcf6-2197-43d0-a91c-c5fedcc0401a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558b1fa2-b8d7-467b-933d-51084aa25be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c1cdff-c832-41a8-8816-fb62109b812c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b06b545-7a6b-4cf3-a0c8-b62a9ed7612a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a630d11e-7c78-4e18-8f6e-c03e5be743a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c9cedd-2f20-4769-8b1a-5e7175c40261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bddddb0-57be-40ae-adfd-a6e758b1c495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a78128a-4bf9-4d9f-9040-8b85f9fc6613",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1295bbd3-a760-4bc8-bd6d-fe233cd37bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff7691d-c560-4ab6-9605-1bd48d7220a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9888dc7b-a8cc-4dce-ace0-ea22b4b625a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760cd50f-1aac-4fa8-9e1b-d9b24ec5fc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d091cb6b-c36a-454a-8a6a-a951daf2a350",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2879ae-34a6-40f8-8173-c22e7a58ca93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf61662a-4b5d-4cdb-bbb2-249c5886a79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c92139-661b-4091-909a-f7e25d9881e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b58533b-1317-4e89-af13-07ab30854c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475a2a82-46d8-4adb-9850-09c0d9f7951f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbef7fa-39f3-44cb-aa4c-2a2a98790c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "143d6860-9ede-47f1-8f7d-9b3271f7bb31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bbb5d4-d019-47e8-9bc7-97f1fffd1c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbb14ed-44c7-49d3-bd86-7bc7a5fe1d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00a2e7b-f16b-4f65-9e57-f97772c1aa7f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c4debd-10af-480c-af46-81b728fe8c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ddfb20a-b12f-4953-b805-afc7c1b3fc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d556986f-2df3-4f81-887c-2bfc3e84238d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db9ca42-14aa-4b66-83f1-0201ca647dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71671223-ee8e-43cd-86a7-2f2020ef592c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b4d23f-ef11-4984-8de6-37b60edd90a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55d481f-2862-419c-b9f2-b92f49cc3654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85603c53-a232-4299-b4c4-5b9e0f9407b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38df8dd3-b1aa-4354-960e-1ac34add7bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9795dc37-b99a-45e0-989f-dffa5898b1a5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13262bf6-a203-44c7-b2a5-9c47ab1ff40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0391206-71d5-46a0-b5e7-5d724baa8c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a604765f-dd2a-4209-88e5-78ff54fad2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851f6352-9dd9-4171-a6d1-1ce960068b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8d838a-e478-4a18-bb65-fee31ab67f52",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff95bd4-005e-46ad-b303-c693b1a86752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f657db31-c662-444e-b928-3fe0d38dcae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e67a0e-ad16-4d31-87e6-bda46c1f0752",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012cdf45-9a77-459e-83f5-f1cb4ae395ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57327ab6-c382-406d-9053-7f5ab6aca271",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f7c8fd-5391-4e33-866a-1c81762f8245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e265d91e-1a05-4e26-a7a6-04ea5ada1bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49709be9-0a79-4c3a-b21b-18a18b7595df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd85def7-e8fc-4f86-b498-0c3c8009536e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db43c56-49ff-442d-ba20-7befc470ff98",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9d474c-b5d0-4c68-9838-a1c2648bebe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d33d99b4-4eb0-4aa0-a7f2-b71bea5d746b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "645bb666-379b-4567-a945-04b1c4a38d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a86929e-f5bf-4bcc-9f51-d42eefcad870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffc78ec-553e-4887-b1cc-1fd7ae12a610",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72142b7f-2594-42f3-8500-3025d72252ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "318cf084-3c0e-4022-9827-e77de7a892b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c388803-d4cb-4b02-aba3-6ef7247ff3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c4c6b2-f5c2-47a6-a0e9-e5ddd7c274bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993de690-3610-4902-9d7e-651bb7437c00",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a24592f-f75f-41fe-987a-d59be904e42d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b7a5584-d197-4197-b284-cdf0edc0ac7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90908ea3-891b-4b92-ae8a-a53e426b3bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ce27f5-ffd4-4ccf-82a4-903d88f37464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c439e4-6b43-446d-a402-075f7529b6da",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711d92c2-381d-43e9-be35-9758d5698a4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af1898c-5b3d-4027-b523-2e3ff08d4384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cb3633-8b4d-4eb9-a746-96f5892e4a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a86d850b-3d29-4640-90e4-529d2bef802a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049174b7-bed5-40f2-8803-caf9d0055209",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589c9c67-fc4f-4b07-a3f4-33fb3a6f8587",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fc9db5f-bddb-4749-93e7-d54d65b0fac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899393c2-55a1-433d-9e10-2e986b5b9602",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb12f9b-7b20-438c-96cb-27707d7318cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9691d688-18cb-495b-9689-b05538c70756",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70351420-eb80-4294-8560-787ab6d7bbe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced303c4-91dd-41fd-a07e-fb2c573dabd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ecb000-a3d6-417b-8b46-40841fcaf800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3591919-8e10-4bce-b30c-f1d1f63ec7d8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc084447-1166-47ce-8620-8997cf105966",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fce58a8-e5f6-4fcf-bd3a-b7809fffe441"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19737ee5-4fef-4fc7-bdc3-1b3460aa5c5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2aa897a-cbc3-4ccd-b4ef-84eaee645a16"
                    }
                  }
                ]
              },
              {
                "id": "ee56b92b-5140-4727-b680-efbe0543e5f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a27d51cf-2060-45f3-b2f0-8529c7523b1b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75c1e91-edd3-4d6e-9224-ad26c6160f4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "244cf159-c500-451c-a33b-f5fe474e3278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb61494d-f9e0-4791-b8f2-d132b6deb4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "334c4889-7577-4547-b582-cbe1b48b34e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0362c71-1097-4cab-a0e7-a73ae0fda4a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ae966b1-03a0-4cd8-9398-a63e887ef3c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d5aba6b-df5f-47b6-bd9f-b0c42ba44af0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e7482ae-a6a4-4842-99ef-fc1ff05bd510"
                    }
                  }
                ]
              },
              {
                "id": "62ef7390-341a-46e1-894a-082e6dd55e7e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8a74d557-beaf-467d-89ea-d0b36606d630",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9848ebe0-99be-4b98-ac06-4bbe72a33882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "39544f1f-511b-4cf0-9fc8-a9c183e3dd7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6adb6a-315b-4e4e-8305-670ba75a6d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c08f5a-32d7-4584-aed9-11d6bc94714c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e4a68126-8dba-4ca9-a888-8a4ec6716162",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3d8d82b-4b2b-4ed1-873b-21c8143e42a1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a2daa0f-f0f6-445e-a14d-d17ae9b139b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "39ea611d-0bf9-4f1e-bd9e-d2700e7b0d37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0ffd388-958f-427a-9197-9e4a2e887c0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5ce4522-9f17-438d-ac4f-7357bb1eaeb7"
                    }
                  }
                ]
              },
              {
                "id": "d93c94e8-c671-4c19-8e84-2c1fd6f18aab",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44ca6b24-be93-477d-b077-3ebf009985f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2b5c4170-8b27-40f5-b807-419a247ccbd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c41adb15-7b8d-4256-b8c4-1b6e1b30f139",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52ae869d-7eb9-4815-a9c9-d6ba36f21180"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "015ab451-c542-474e-ad8d-f07a895fa00f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "244c34d0-2d9b-43aa-93f0-760b8c90d0fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04be4887-6c24-4797-891e-c15250799e9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6cc2487b-a1da-4420-b41c-d3a771ff0057"
            }
          }
        ]
      },
      {
        "id": "144ea51b-7e5f-40b4-b7a8-e569c965ad85",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3148d0b0-8297-4a8a-b641-e7e61d9a80b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eddf05d8-6003-4a8c-ab58-04d4ab1049db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10bca495-cd15-4482-b291-3bc43b2148c4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271ff900-5548-4b32-aeef-e59f7ad73583",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "895f0606-2c63-4ea4-9a79-c691a7a645af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af9fa80-01f4-4e1f-a550-b2526e005357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48e279a2-49d2-46d8-b5c0-3f94b81bdad9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4993893b-c624-4a24-ba31-44d18a510e30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96511da5-3c3e-45ae-ba2d-ff6845f68982"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d308e7c-e27e-4140-94ba-6610d38d8e2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5502731-4586-4659-bfda-827efd7d9d06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df239727-8bf3-478b-b5f7-57eb1d809b4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f2eb3226-bf50-4f2a-921d-0d523eee915e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48881a7a-102e-4560-8379-f211128d4d4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2472056-fdf9-485d-aa3a-d8e782c5541c"
            }
          }
        ]
      },
      {
        "id": "5121ea69-668e-4ec9-a969-ff7f6467e8a1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "df125d47-fcc2-4a9f-a973-c5fbb1019a64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a61eb005-f754-4d6b-896a-ad5d7eeea3c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a352e5ac-6c37-41ca-ad48-2e5e1e7d87e7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac029245-39f5-41b9-b9d9-3d73df40d991",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "393f8793-0e3a-47bb-becc-09fa5ad5937a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebff7be-2b67-426a-aec8-02426c847be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85ca87d2-6350-49d7-b3d8-454008616a96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ff5f0b0-993f-4d46-99d3-52f1ca6e810d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e3bb5eb-f549-46de-b4a1-50f44f95dc8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54312b7a-01e2-404c-a0af-0c98afd31d07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fb79912-fa5a-439c-8685-b980c5f06bd9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00fa5bea-e4a0-4941-a720-030d1199c2d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec97f130-4f71-403f-b029-93ba71d5d6b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22ac3e80-88e9-4824-9200-b34f12bba2b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "391f0b23-d067-4c9c-af10-43c29e45d701"
            }
          }
        ]
      },
      {
        "id": "2314dfd8-76f3-4770-abfc-49b4e7c0705e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "99ea58bc-2bdd-496e-b3c2-78093fe5924a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf44416d-83e4-48ac-b027-f0a70a136e0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bfd0236-5679-4360-8aea-2c4003f4cf2b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b2dcca-5937-4a1d-8730-4b9d205c72fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd235723-5ce0-4931-9796-68564f9807a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ffcd1a-c80a-449b-9842-a1bbe4f95136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a2cda93-01d2-4f99-b998-cd9c9f13b9d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e914bb3b-ca6d-4b7d-897a-84ed06785308",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00655134-816d-40ca-a454-6d0f1a931f84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84b41893-11f7-484f-bb23-c486dba09d00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "550de098-598c-4622-9028-6db73436887b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64a043db-1b20-4a6a-912e-81c65376b9f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f269258d-e326-4c5a-91be-3e087adfa560"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33a15c57-af71-4115-a5c3-09ccf23760f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7c0f9a8-eb63-4814-be17-a4b8a5349726"
            }
          }
        ]
      },
      {
        "id": "674b9f11-d249-42b8-b192-1737c701afa7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31dda86c-062b-421c-bb29-6ac0c6e9486e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4660310-90a8-46c2-b791-f0dc7e633177",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "78fbe485-b3be-4bea-88d8-7b06c0acde37",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a233d63-ce0d-4d5b-8cf1-4f35b3b77f2f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8894e7b6-dcab-4a0c-91a0-e0686fa90d75",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.0842105263158,
      "responseMin": 9,
      "responseMax": 603,
      "responseSd": 81.71503713853518,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709512482831,
      "completed": 1709512511649
    },
    "executions": [
      {
        "id": "16f0cfcd-76f1-4ffc-b196-6db0e6688a00",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "91ed7745-0002-4054-a41b-e3b75517c7d2",
          "httpRequestId": "4fe67118-ad9e-4f93-b18d-82812fe83f8f"
        },
        "item": {
          "id": "16f0cfcd-76f1-4ffc-b196-6db0e6688a00",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fe2a5c4d-8e68-4c3e-922f-dbe8fc394eee",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "4d69d715-fc47-4511-8adf-14c8db0e35c5",
        "cursor": {
          "ref": "ade051d5-11d6-46f7-8f0f-f4692646bda2",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4ca3d2d7-c705-4473-b166-cabdc45714c2"
        },
        "item": {
          "id": "4d69d715-fc47-4511-8adf-14c8db0e35c5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0aff8d82-4ee7-43b3-9ead-581c4a936481",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "406d57fc-cabb-464f-8624-7259a744e705",
        "cursor": {
          "ref": "51a45072-4712-4757-a620-ec33f63a8c56",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6c25669d-5e10-4bb3-b2c7-9184b1f45990"
        },
        "item": {
          "id": "406d57fc-cabb-464f-8624-7259a744e705",
          "name": "did_json"
        },
        "response": {
          "id": "fdfe7dff-b49d-4a91-9e49-c8261c3a2e3f",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe41db4-7b80-4542-ac5f-7807a90a0634",
        "cursor": {
          "ref": "1bbee947-8822-4050-b387-07cabaea5b2c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "09905ce9-5b2b-487a-bed4-c1a60ca54e39"
        },
        "item": {
          "id": "efe41db4-7b80-4542-ac5f-7807a90a0634",
          "name": "did:invalid"
        },
        "response": {
          "id": "d36a5724-6b70-465d-84fb-d2f2b6f3622e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe41db4-7b80-4542-ac5f-7807a90a0634",
        "cursor": {
          "ref": "1bbee947-8822-4050-b387-07cabaea5b2c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "09905ce9-5b2b-487a-bed4-c1a60ca54e39"
        },
        "item": {
          "id": "efe41db4-7b80-4542-ac5f-7807a90a0634",
          "name": "did:invalid"
        },
        "response": {
          "id": "d36a5724-6b70-465d-84fb-d2f2b6f3622e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab048b4-e8f2-4701-83a5-2d6ca21b1f7d",
        "cursor": {
          "ref": "8b3d7cee-ea4f-41b7-9818-42f8c7d0c2ed",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2b3a7a30-89f8-41e7-a190-46b69eabd7d1"
        },
        "item": {
          "id": "0ab048b4-e8f2-4701-83a5-2d6ca21b1f7d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "49ff9e47-5ee3-40eb-a040-83ff5519ca2d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 144,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75303c6-10a0-4fc7-b673-7a7f3b571841",
        "cursor": {
          "ref": "b3b480f5-c1b9-445b-8c4e-91fe9e30e0bc",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5aad055b-c52d-4fca-8caf-e23f53c601e0"
        },
        "item": {
          "id": "f75303c6-10a0-4fc7-b673-7a7f3b571841",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f66cad11-a0cf-458c-8cff-ef33d974804f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2754092-da37-43c7-a6c6-bd57f777fba8",
        "cursor": {
          "ref": "edce5afa-e62b-4eb6-80e0-f15c3e178558",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "44658cff-924e-4e96-9e13-bd1ebd1bce13"
        },
        "item": {
          "id": "c2754092-da37-43c7-a6c6-bd57f777fba8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1137b10e-09f6-4df4-bfd2-70597f583526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7094573-7923-4fd7-a81f-8be93138adde",
        "cursor": {
          "ref": "30c27e32-5cce-451b-84d0-017792c3998b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4ce165dd-a2c1-496a-81f0-98a1b4f6b68a"
        },
        "item": {
          "id": "b7094573-7923-4fd7-a81f-8be93138adde",
          "name": "identifiers"
        },
        "response": {
          "id": "9250e7ea-1082-4f9e-8585-0007ae302daf",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4905fa1-85a8-4952-9dcf-368603295dbe",
        "cursor": {
          "ref": "99dc35fa-4231-4213-9706-35b81ff57e95",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b0fcdaeb-9817-40db-ad5f-f1d790b132e9"
        },
        "item": {
          "id": "f4905fa1-85a8-4952-9dcf-368603295dbe",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b6fcc483-b059-4bce-bdc4-0b63dc3e0fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84f4bda-a79d-4e5c-a851-9f8ed568945d",
        "cursor": {
          "ref": "9e486edc-27ce-4ade-a4da-0124ebbda8e5",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "02c57d5f-69be-4f4e-ae7e-6f6c54379aea"
        },
        "item": {
          "id": "f84f4bda-a79d-4e5c-a851-9f8ed568945d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1f7d216c-3bf5-4f6e-b1cd-f84c7ad55fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9dc4ee-3206-4d6a-b4f9-2a5d4c7e51db",
        "cursor": {
          "ref": "d3358d30-c3de-4374-8f4d-cabd13c64853",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee958398-e04b-4456-a37c-68d466d6b6f5"
        },
        "item": {
          "id": "7b9dc4ee-3206-4d6a-b4f9-2a5d4c7e51db",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2e4f1348-83e6-4f51-9619-41de78bcfac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e257f373-84fb-4ca6-b2e1-359dd7c330ab",
        "cursor": {
          "ref": "2fc37480-a1df-4907-b2bf-2f92042186cb",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "46dcf8c6-c09d-45f2-9f0a-0c5c3939b41a"
        },
        "item": {
          "id": "e257f373-84fb-4ca6-b2e1-359dd7c330ab",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "636e7d59-1b26-40f4-ba35-fb63ee0da2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09200dcf-e230-4eaf-8dc3-d3df0479aa8c",
        "cursor": {
          "ref": "b85e47cc-f2fe-4007-89fd-502316aaa3d5",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "005ea72e-d070-4c3c-ba65-7ca86524bc56"
        },
        "item": {
          "id": "09200dcf-e230-4eaf-8dc3-d3df0479aa8c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6ba07712-68ab-4e54-824c-4d701a5ab6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1de2d9-aa69-48f7-bb18-6a89756dad55",
        "cursor": {
          "ref": "8456f2d2-34dc-46ec-80a0-f95b19ea5616",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4ae3ae1c-35c8-4e1e-858d-afd49f4a8d81"
        },
        "item": {
          "id": "db1de2d9-aa69-48f7-bb18-6a89756dad55",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "037eaf0b-35b8-41ad-be92-8c82ecb2b587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02f8ec6-fae1-46b3-aeb2-ececd67d5136",
        "cursor": {
          "ref": "4e1a0317-3dd5-4050-b451-0621f73bf3f8",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5017c48c-28d9-46c7-9efd-d1b4198bc9fb"
        },
        "item": {
          "id": "b02f8ec6-fae1-46b3-aeb2-ececd67d5136",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9da5cd2a-3367-43a8-b9db-5f8df62f8b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f6a82c-2c61-43a2-814f-c9cbaa710708",
        "cursor": {
          "ref": "66a54b6c-665d-4e80-9b0e-d2862a4476ec",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "53e9f08a-0e79-4c91-bf10-51634cce6d15"
        },
        "item": {
          "id": "b2f6a82c-2c61-43a2-814f-c9cbaa710708",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0c903303-7249-4e61-89c5-22d219a02e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05107756-549e-478c-96ab-83db6e5c3045",
        "cursor": {
          "ref": "0fcb483c-680d-4c16-960e-429c3ca9b5d8",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "55d33344-2050-4f8d-b6b0-24176c131eda"
        },
        "item": {
          "id": "05107756-549e-478c-96ab-83db6e5c3045",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e7d4f2c1-a94e-48b1-811d-eecbaf72a053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e75d83-64b1-4805-91e2-b4978afc29d3",
        "cursor": {
          "ref": "251b43d9-d960-4d1e-b173-96ddffb9524e",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a9896102-7153-4f9f-b14a-dd065ff4614d"
        },
        "item": {
          "id": "53e75d83-64b1-4805-91e2-b4978afc29d3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d333e39d-0695-469b-a1d6-1151b94e15e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eab6bc0-4ded-4c2e-8fcf-e93154f19965",
        "cursor": {
          "ref": "a243ebfb-b776-4983-8eec-b878de4e898d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "834f750f-6fe2-4496-9595-67516f35d7c7"
        },
        "item": {
          "id": "4eab6bc0-4ded-4c2e-8fcf-e93154f19965",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e934684b-9faf-40d7-b5b0-3e386c5fb1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d59383-adfd-4275-8dbb-8cc45157766d",
        "cursor": {
          "ref": "da668778-09a2-4cf1-b47f-345acc78ba2a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a1379562-98c3-49f5-8f5f-244bd9433fa2"
        },
        "item": {
          "id": "59d59383-adfd-4275-8dbb-8cc45157766d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1887b908-ce79-4b53-997a-44cd53eda72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7b640a-0019-40c0-8100-b413cb36c3f0",
        "cursor": {
          "ref": "9995f79d-75db-4cdd-a80b-1eb543bdac93",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f898bc04-d99d-4b89-b233-8bce67bcdb2d"
        },
        "item": {
          "id": "ec7b640a-0019-40c0-8100-b413cb36c3f0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "09fdadf0-cfee-4476-b592-87c48b671e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebbd1c9-9ce4-4877-ab82-4825faee1c9c",
        "cursor": {
          "ref": "9d2997b5-1e82-4498-9d8a-151a6742d665",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8ecb7c4b-bc97-463c-8f5e-606df660d29e"
        },
        "item": {
          "id": "4ebbd1c9-9ce4-4877-ab82-4825faee1c9c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "248eeef4-7c00-4a8b-a587-79d5ba975061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf01410-f7cd-4f89-b7d5-465f09076b3c",
        "cursor": {
          "ref": "986e684e-a70e-496f-a611-8021527d204f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b5d5d312-512a-4e89-9b3f-2e4388e9256a"
        },
        "item": {
          "id": "cdf01410-f7cd-4f89-b7d5-465f09076b3c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d2f39e1b-deeb-4695-87bf-adb419d6f32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2e8baf-b69b-40fd-ad0c-14ca3f2452c9",
        "cursor": {
          "ref": "d0860831-e1a4-4120-ae5a-da48ba70e26c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5c095a14-8d99-4e9d-b0fa-9470348bf100"
        },
        "item": {
          "id": "bb2e8baf-b69b-40fd-ad0c-14ca3f2452c9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "25eff1d5-27f9-41b7-9e1a-9a50a62e8f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9af9c8-d44c-4f95-adef-4e88d80f6e77",
        "cursor": {
          "ref": "80183d76-0dd0-42e4-80f8-05c6eb74a188",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a845ec63-f920-4bfb-81e6-8ff7b636867d"
        },
        "item": {
          "id": "cc9af9c8-d44c-4f95-adef-4e88d80f6e77",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "51a15507-9c12-4fc6-9bae-845939a4752a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd500d8-c21c-42ea-8a85-77d00992da2b",
        "cursor": {
          "ref": "b9ce7cf8-df21-4c51-b682-aac5a93ca444",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e17d594b-6e9d-4cd8-8bd5-9307aa1f296a"
        },
        "item": {
          "id": "6dd500d8-c21c-42ea-8a85-77d00992da2b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "44861339-74f1-44d2-8971-502a92fe33ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa81755-1083-4cf6-90f2-46a326b832aa",
        "cursor": {
          "ref": "b9713a8b-c2ce-4977-ae25-01152370ae4b",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f45c93fd-e415-4e47-85df-fe843ae3b47a"
        },
        "item": {
          "id": "8fa81755-1083-4cf6-90f2-46a326b832aa",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "26e7245b-4960-4f3e-acbc-b2369a15d56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d3df6d-b6b6-4a3c-b385-0c5a4f5a27c8",
        "cursor": {
          "ref": "c40e1278-9960-4288-a035-98ef9b1a105d",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d9803373-c55b-485c-85e5-1e34457599b3"
        },
        "item": {
          "id": "25d3df6d-b6b6-4a3c-b385-0c5a4f5a27c8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e2ca97b4-8bfb-4af0-b7ff-827b1e374c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397db4cf-5d2f-4780-bbfc-be1ecb2dfa37",
        "cursor": {
          "ref": "c24c1b38-756d-4a9c-8261-062bafd479cc",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ae04cce3-8fe2-4498-a098-cbf7b2a3c095"
        },
        "item": {
          "id": "397db4cf-5d2f-4780-bbfc-be1ecb2dfa37",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "795a63d6-b81b-43d0-987e-376a60d36719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5465ef-3359-4a2d-8e2e-6ba006f03a88",
        "cursor": {
          "ref": "2c540fb4-be55-4728-b0b9-74ad371fe292",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9d35ba61-e1a9-4ac6-8f56-098d8a1ae5f1"
        },
        "item": {
          "id": "4e5465ef-3359-4a2d-8e2e-6ba006f03a88",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a81e21f7-f424-42eb-a2c5-27f255f6b17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb5aad0-16a2-4c92-8378-879425628f24",
        "cursor": {
          "ref": "ba1344a1-61fa-40d6-8b2b-328db43f7fba",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "99188579-02b5-46a8-8005-3d6a99895278"
        },
        "item": {
          "id": "ceb5aad0-16a2-4c92-8378-879425628f24",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5518c180-c534-4776-9c04-7a964c769df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be199d86-f549-47a9-8652-a7ac2b9e7915",
        "cursor": {
          "ref": "8690e415-9313-4081-9b97-a3f6e75d717b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "81594cfb-06f1-412e-af33-c2d2a82b0859"
        },
        "item": {
          "id": "be199d86-f549-47a9-8652-a7ac2b9e7915",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1e8ff24f-f38b-4dfc-a663-0d5daae41428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b3dacd-cf64-4c94-8c8e-b42c0624cc23",
        "cursor": {
          "ref": "3748e859-7985-4a09-a0b7-225be14b9154",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f2648499-c04b-41c4-9dcf-4c7261d1ed1e"
        },
        "item": {
          "id": "63b3dacd-cf64-4c94-8c8e-b42c0624cc23",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0eb9a0ed-f45f-4aab-9809-08a929ee1c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3b17d8-fb5e-40ce-b5ee-b1fa9f7c22b0",
        "cursor": {
          "ref": "e3cc283d-5e9a-4c5f-a933-fed2526c1db4",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "60e7b5cc-0c04-4d09-918e-c102249a4d45"
        },
        "item": {
          "id": "9a3b17d8-fb5e-40ce-b5ee-b1fa9f7c22b0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b3490432-5f8e-4a27-ba93-6e3b719479a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6121f7e3-aa41-4fab-bf76-8c37fe3765fe",
        "cursor": {
          "ref": "c1df89e1-e217-4414-b673-9b7a1610970a",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9da42d1c-75ba-4525-9e5a-1c6dc79ae224"
        },
        "item": {
          "id": "6121f7e3-aa41-4fab-bf76-8c37fe3765fe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "86303e18-bcb6-481b-be54-1bc7bd1af05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdafe47-c042-42c3-8a43-e6b3e6dcfb19",
        "cursor": {
          "ref": "ae65a3d8-b846-483a-a2d4-a88dbcfdf4be",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "dc45d42d-96fc-45e7-a474-72f027f04291"
        },
        "item": {
          "id": "dcdafe47-c042-42c3-8a43-e6b3e6dcfb19",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6435bc26-7f99-456f-93ef-5e90db098f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a1550e-4238-4163-ae10-942581732a90",
        "cursor": {
          "ref": "3534960b-9bf8-4765-919a-f246dd6b7d5d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9d06a4b3-6588-4c1f-80d4-4d76bfd98497"
        },
        "item": {
          "id": "a8a1550e-4238-4163-ae10-942581732a90",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9b7d8d85-88e3-4e48-bd0f-77f1f186e9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccce386a-30fc-465a-a49d-e766827faa3a",
        "cursor": {
          "ref": "e03041e8-e96f-4e0a-b177-d741f0342273",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c146ba9d-d68f-44d2-a30d-910e5548d987"
        },
        "item": {
          "id": "ccce386a-30fc-465a-a49d-e766827faa3a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f9eec05f-b29e-404d-a8c0-c9c9743cd1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21eadd4c-13cb-4844-9f12-53b38814de4e",
        "cursor": {
          "ref": "25bbaf4a-52d1-4fd9-977e-1fc8a42a05b6",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0b0029fb-f911-4e16-bfae-d17f60c40ee2"
        },
        "item": {
          "id": "21eadd4c-13cb-4844-9f12-53b38814de4e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9ab90638-e905-4217-bdfc-930fcf430930",
          "status": "Created",
          "code": 201,
          "responseTime": 603,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8344da4b-893e-4940-9356-07f6a9029f81",
        "cursor": {
          "ref": "411d67b0-7f2c-48b2-ae3f-1f23a96fe374",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "454bdf9f-9a08-4d93-a16f-6f678434d956"
        },
        "item": {
          "id": "8344da4b-893e-4940-9356-07f6a9029f81",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e0f5167f-618a-497d-a688-bab52697c994",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "aa5c065e-642d-4d52-b122-c6fe673a9c51",
        "cursor": {
          "ref": "e1c1c2ea-27d3-45d6-85ff-275d685b8a65",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ad71f745-9242-4c66-8dd7-c61df30b3984"
        },
        "item": {
          "id": "aa5c065e-642d-4d52-b122-c6fe673a9c51",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7c3fb6d7-b693-45b9-856e-a46a1efd371b",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9f54513f-42df-4d6c-9c08-b01fc732796b",
        "cursor": {
          "ref": "553663d4-9fa7-4b2f-8347-1c23efcc4295",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "32ed230c-0f7a-4723-92ae-3730ef7fde75"
        },
        "item": {
          "id": "9f54513f-42df-4d6c-9c08-b01fc732796b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a7cb7281-26ce-45ca-a7e2-90a71a7ef9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b4b936-c318-4c3f-acc9-c0175015926f",
        "cursor": {
          "ref": "7982e81c-e6b7-484f-8980-72a9261ab9f6",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "71297723-1180-47fa-9e4f-30e32dc20228"
        },
        "item": {
          "id": "b1b4b936-c318-4c3f-acc9-c0175015926f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6909340f-bed3-46d2-8974-e91797aff826",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f2594925-8c59-4c40-bbc4-d42274690916",
        "cursor": {
          "ref": "042beff1-9e92-4d5f-87e4-a8851af2175d",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4f8b2e1a-36f4-46d3-a803-caf8ec836328"
        },
        "item": {
          "id": "f2594925-8c59-4c40-bbc4-d42274690916",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "80aeb3a0-5c17-4bcb-b79f-e0f84c4e7ced",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "79c48a5b-2956-4469-a7c1-7a09680459c6",
        "cursor": {
          "ref": "a7db8338-3b3b-4ec2-9910-1ac5ee32584f",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "77f030f2-5fbf-466c-ad55-6e661544cdde"
        },
        "item": {
          "id": "79c48a5b-2956-4469-a7c1-7a09680459c6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d5591866-74ed-4550-9f90-d5aa8a89ee1f",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "184befec-d999-447a-9441-4c9876143344",
        "cursor": {
          "ref": "23ba56b8-b84a-4920-b5f5-1c06be3e5ab9",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a94cd36a-d37c-443d-9652-5667a3761ae0"
        },
        "item": {
          "id": "184befec-d999-447a-9441-4c9876143344",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f0f7e97f-ee60-465f-85bd-983025f3eefa",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e130323c-5285-4077-b747-f3bfcbbc8515",
        "cursor": {
          "ref": "b3291de2-5693-4214-8080-fef5fa56159c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f02d04ef-972b-4030-b1f9-7fc4bd3b91b6"
        },
        "item": {
          "id": "e130323c-5285-4077-b747-f3bfcbbc8515",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "90f10983-0642-4c60-80fe-f2f5f17d6b02",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "98f8a6b1-8bb1-4632-b55e-02106edc270a",
        "cursor": {
          "ref": "bc117669-04de-4457-9660-325825d50f97",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0cebd0d2-0103-4c9f-8e2f-4740c2b19332"
        },
        "item": {
          "id": "98f8a6b1-8bb1-4632-b55e-02106edc270a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d79a30cc-2c66-44b5-be1e-13b49454c364",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c3b2bb2c-8eef-47de-8344-8c26da5f2513",
        "cursor": {
          "ref": "187b5cef-d9ff-4311-bf56-a259a22a06a8",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "27f50931-b6d8-401f-9e5c-06f0b596a155"
        },
        "item": {
          "id": "c3b2bb2c-8eef-47de-8344-8c26da5f2513",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d229dd79-92ba-4d39-96b5-b270fb6ac510",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5d81d1e0-0e1b-49d3-b108-a4f70e362ca5",
        "cursor": {
          "ref": "2e267c87-2487-4529-9101-e43823ca9b9a",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fe6c62db-9444-4d22-b6ad-0a9a2f24f49a"
        },
        "item": {
          "id": "5d81d1e0-0e1b-49d3-b108-a4f70e362ca5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1e10fe03-d41b-4d64-96b8-16a0fd3c18c6",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "28f3aa6c-0ad4-4759-93dd-e59b6245fdae",
        "cursor": {
          "ref": "a811a963-5454-4a4b-b4ca-d6f2a7fe9cb6",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b8951c14-d1fb-47b9-a355-6f5056025b30"
        },
        "item": {
          "id": "28f3aa6c-0ad4-4759-93dd-e59b6245fdae",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7a6351ab-cd7a-4d3e-8cad-7fb3e171dacf",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dc5811c7-5d5d-432d-abf0-f6ce04a4fd5f",
        "cursor": {
          "ref": "12e5d725-076d-4a24-b6f9-ee9c53738959",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "586cf066-3cd7-48e1-96dd-20980e71536b"
        },
        "item": {
          "id": "dc5811c7-5d5d-432d-abf0-f6ce04a4fd5f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "139f51b6-fcf1-4d6e-b4d5-d8d9c876fba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821f1b16-9560-45e2-b441-fbc458df0384",
        "cursor": {
          "ref": "85100155-3a9a-4568-b409-c1be0719ec94",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "57f2e1a6-f609-476a-a9db-77738872fa3d"
        },
        "item": {
          "id": "821f1b16-9560-45e2-b441-fbc458df0384",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "71f58717-a1dd-406d-a362-37a0aaba3dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bf8511-07b2-431e-8b2a-a717221486c9",
        "cursor": {
          "ref": "b534221e-2218-478a-be5f-dc2e947b6ed7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3546df1d-12bb-433c-9b2b-d38c56d76924"
        },
        "item": {
          "id": "d7bf8511-07b2-431e-8b2a-a717221486c9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7acbf925-5b1e-45d5-b7a7-9f3524098ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a777368-1fc5-4b7c-8df0-f0c4ff8256f1",
        "cursor": {
          "ref": "c6122c62-501b-46d9-8433-99196117b14c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "afc303a5-9ef1-47cd-b142-577f233534a4"
        },
        "item": {
          "id": "3a777368-1fc5-4b7c-8df0-f0c4ff8256f1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9ae90d7d-1b24-4336-8627-010511ae8d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4f897c-0e6d-433e-809c-d191f0aa8f6e",
        "cursor": {
          "ref": "fd848bae-33b9-483a-a25e-c617c25cb576",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ccb2f9af-5255-4f1f-985a-c62029c1dfc1"
        },
        "item": {
          "id": "1c4f897c-0e6d-433e-809c-d191f0aa8f6e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c540ed02-b8b4-49de-8cee-23909c5c9ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d671067b-7547-493c-9f0e-972f22bf689e",
        "cursor": {
          "ref": "7139f00c-5776-4335-9a47-f1305548f100",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a6f97c7e-0911-4d25-83f8-9da0212a0aa2"
        },
        "item": {
          "id": "d671067b-7547-493c-9f0e-972f22bf689e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ef12bc35-0e3c-4c3d-a03c-0aea69877de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4718e7-d26c-45a0-8b34-d31d5f0f173b",
        "cursor": {
          "ref": "a8a84802-c914-47f7-a64c-62ea3b915f50",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d57cd842-0954-4f97-8528-9e7bdff12fc2"
        },
        "item": {
          "id": "7d4718e7-d26c-45a0-8b34-d31d5f0f173b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "39a0187d-4c5b-4af4-b160-939d104081c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8780cf-4e8a-4104-980d-5c028a7b8c2c",
        "cursor": {
          "ref": "bb2db2eb-a72d-44e6-af91-4548af99acae",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3055b201-164e-4972-b98b-df1b2608e3a1"
        },
        "item": {
          "id": "fa8780cf-4e8a-4104-980d-5c028a7b8c2c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "da8dfa06-e32e-4cd6-83c0-01089ca5351b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0772eaf1-08b9-43cb-a6df-8f1bcca72fe0",
        "cursor": {
          "ref": "a9ce0836-d251-4bb0-b7d1-dc4ef166f32d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6e0c9ebf-9a70-453e-a2d4-9aa523ec9aef"
        },
        "item": {
          "id": "0772eaf1-08b9-43cb-a6df-8f1bcca72fe0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "78218575-2805-4648-b6c1-fcd250cd3e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee5b481-8ff1-4b1f-9fbe-0cb6c50a95ef",
        "cursor": {
          "ref": "36087dd0-80d9-442f-ae7a-997674aaa156",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "44c86d8b-1dba-4a96-8361-5d2c3ccca179"
        },
        "item": {
          "id": "9ee5b481-8ff1-4b1f-9fbe-0cb6c50a95ef",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7c1c7960-ce26-44f8-b0bf-03e4f198b996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8c8718-3c86-4d3b-be62-b7255bb4495f",
        "cursor": {
          "ref": "7c495160-c018-45da-a270-2fe6469833cf",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "379d92af-d3cb-473c-8c9b-c5fca6131cec"
        },
        "item": {
          "id": "4e8c8718-3c86-4d3b-be62-b7255bb4495f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4bb493bd-ef09-44b2-aa6b-76126a9ea3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbb79a8-6878-488b-9b2c-e22a64a4c893",
        "cursor": {
          "ref": "ab500337-6c38-4f18-a490-6f7e9c4b6853",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c17ac65b-a4d1-4abb-b349-f15f93495600"
        },
        "item": {
          "id": "dbbb79a8-6878-488b-9b2c-e22a64a4c893",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ff543855-2dc6-4b6b-a327-2f50af8ef32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf6fc47-7497-421b-b4f8-bc8bc3986087",
        "cursor": {
          "ref": "7710ee2f-087d-4d04-be2e-50a109e44a7e",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "88cdcc21-ac4d-41b1-9777-96156e616ef7"
        },
        "item": {
          "id": "9cf6fc47-7497-421b-b4f8-bc8bc3986087",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a858c2b2-138b-4861-a895-d0e3214020a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827a4733-3f81-4f9d-a6df-c3329bccb055",
        "cursor": {
          "ref": "53ae00ce-4a36-43a5-bdd6-73ab2013ca20",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "12cf7442-45d3-4ef8-ac47-50d7dedbc62a"
        },
        "item": {
          "id": "827a4733-3f81-4f9d-a6df-c3329bccb055",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "37f72656-a9fe-4a4e-b03c-1c189f59167f",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0642ac20-b5bb-4370-a226-e51ca8be6bb5",
        "cursor": {
          "ref": "2fbef717-cfdc-4a40-a13a-9a0fd5911778",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dc2c3742-5f6e-4ef4-a777-7b79a22c889f"
        },
        "item": {
          "id": "0642ac20-b5bb-4370-a226-e51ca8be6bb5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "de9e68f2-23e7-4251-a8a1-a0ab5f160bb2",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "167d7b2d-d683-4ae9-8721-f27aa6ff25fc",
        "cursor": {
          "ref": "ec144079-304e-48e6-87d6-393e34862d25",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "295549b4-fdc0-4961-8c31-bafdfd479cc6"
        },
        "item": {
          "id": "167d7b2d-d683-4ae9-8721-f27aa6ff25fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "df4a4f25-e0f4-4037-8ee0-f6971c3c7510",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "603285be-bf64-4d9a-8b90-3b9f9bce37ba",
        "cursor": {
          "ref": "e030f813-fd7e-48de-9427-bcfe07040d62",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "806e46c3-feda-4627-824a-dcc7cc69ce55"
        },
        "item": {
          "id": "603285be-bf64-4d9a-8b90-3b9f9bce37ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7b802bdc-ca36-43a4-b0ff-a390490d7c95",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "80fb9851-57e4-4ce4-82e0-677eb6bf829e",
        "cursor": {
          "ref": "debce345-bd65-438b-a598-382bde246c72",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "61a508f1-138c-4ad1-8b55-834be67efc20"
        },
        "item": {
          "id": "80fb9851-57e4-4ce4-82e0-677eb6bf829e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ca5bb870-a24b-4978-b519-f16e488ff61c",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b79c7056-0cea-4d0b-b684-405b08948819",
        "cursor": {
          "ref": "172a2019-cab6-4c59-b5c8-5a270a87cb81",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fda21c6f-3784-4bc1-a8e3-06f6a083922d"
        },
        "item": {
          "id": "b79c7056-0cea-4d0b-b684-405b08948819",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4cb63171-a19e-456a-82d8-1ea9c24e756f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c463c48-ebea-4807-bb4e-bfa1759c4ad8",
        "cursor": {
          "ref": "7874edac-4962-482b-9913-7934a9e72df8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ab1e7665-8be8-4e52-b81e-14d70d25c785"
        },
        "item": {
          "id": "5c463c48-ebea-4807-bb4e-bfa1759c4ad8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c9616eff-4adf-4a51-add3-9a42c27cfd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe9c304-6435-4e3f-bbb7-9d2a37909f86",
        "cursor": {
          "ref": "29022175-8859-4016-ad24-78ac30b99407",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f75a9148-fc15-45f6-a730-2e693dd178e5"
        },
        "item": {
          "id": "ebe9c304-6435-4e3f-bbb7-9d2a37909f86",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c580d80d-a79e-4b3c-ac96-e427667ab297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbbd85c-aa2c-4213-a404-dbb08a36774c",
        "cursor": {
          "ref": "a6b69632-898f-4d21-8151-c08592faad4d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "14e580f9-684b-43b8-9acc-bc873ec423ff"
        },
        "item": {
          "id": "fbbbd85c-aa2c-4213-a404-dbb08a36774c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "af320596-6106-47cb-a704-9b75a6725d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc96c702-198a-442d-b262-e0d0aa4306dd",
        "cursor": {
          "ref": "1d3b58b2-d4bd-48e9-9712-57176a5d91d5",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4c813078-c7af-48c9-a782-52023a3b399c"
        },
        "item": {
          "id": "cc96c702-198a-442d-b262-e0d0aa4306dd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "484c2c07-6519-4386-b8dd-9b0e42fac4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c31052-2b36-4abb-a841-5a8669fb07c3",
        "cursor": {
          "ref": "d1d28f8c-2d97-4d37-9e0a-24c480b87c75",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "09d8df71-bb84-4651-8909-8567c427a644"
        },
        "item": {
          "id": "66c31052-2b36-4abb-a841-5a8669fb07c3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ca4a330e-71bb-48ef-9c71-0435e3b6dfa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ccde6c-827d-4b58-8ef7-c23e0a96c89b",
        "cursor": {
          "ref": "5bf0a7f2-5dc1-4191-ac90-7877a55c23fa",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "04108191-038c-4c73-a5c4-df83e8549363"
        },
        "item": {
          "id": "24ccde6c-827d-4b58-8ef7-c23e0a96c89b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "967c7d55-e180-4699-a97a-fed013b199e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22bf83e4-61f6-4267-82fc-b6914f7d5a5c",
        "cursor": {
          "ref": "dcb08e3a-b1fc-4718-8447-029c2dca1780",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d9627153-eecb-46b9-ae6e-b818cc7d62e8"
        },
        "item": {
          "id": "22bf83e4-61f6-4267-82fc-b6914f7d5a5c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5992e35d-b559-4510-aac9-81e6e8e1cfb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac416c0-0aae-4f37-8fc6-3d5b672767e8",
        "cursor": {
          "ref": "855ca9fa-9930-4855-8a1c-e5fcafa6802a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c872c479-c519-4c45-ac59-b108c9cdff35"
        },
        "item": {
          "id": "7ac416c0-0aae-4f37-8fc6-3d5b672767e8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a8ae0341-db0d-46fa-9aad-60525dc902b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8e3bb0-1316-4983-aa60-a1d36216ea0c",
        "cursor": {
          "ref": "5d71be45-ac42-4f75-99b9-029442b77284",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fed68b91-1db8-432c-9fa3-a60fcd2a9dcc"
        },
        "item": {
          "id": "5c8e3bb0-1316-4983-aa60-a1d36216ea0c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "18d901db-17fd-454f-b940-e188caf6c7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc17181-c358-40a9-88b6-11eca5247c9f",
        "cursor": {
          "ref": "27acc578-711c-43da-a484-9cf3426a715a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "feaa1c69-794d-4aa9-992d-42a838d39b90"
        },
        "item": {
          "id": "9bc17181-c358-40a9-88b6-11eca5247c9f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "505fa29a-52d9-4b80-a70e-36a2744e1337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3eeb1eb-a1f7-40db-87da-ab0b774f0ad1",
        "cursor": {
          "ref": "98aebbc6-f931-455a-88c5-6759297a1281",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4beb5f46-e3a8-44f4-ba97-d082dc974cf0"
        },
        "item": {
          "id": "c3eeb1eb-a1f7-40db-87da-ab0b774f0ad1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2f15c08e-1122-4563-9682-0b923f2f8b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5760ff0-7e71-4fa8-a99f-5deccc0cfb04",
        "cursor": {
          "ref": "0803e849-25d0-437b-b881-7f6fc8e7582f",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8a5e00cb-5015-4e67-ad10-e284ed1fad8c"
        },
        "item": {
          "id": "f5760ff0-7e71-4fa8-a99f-5deccc0cfb04",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "aa895490-6dfd-4b90-a09c-b2dee0f4567b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b4dc6d-7e14-4341-be03-c4f6ea73718e",
        "cursor": {
          "ref": "e1c5b521-1e3b-49e2-959b-1a2b68472b04",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2253d038-f66b-4971-aedd-d088a241ef4c"
        },
        "item": {
          "id": "f8b4dc6d-7e14-4341-be03-c4f6ea73718e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "424f7e24-637e-4926-8a37-d0acfe9a2ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01ca981-26d4-4448-8007-ea3973cc42b2",
        "cursor": {
          "ref": "f180a574-a364-462d-905a-b353cfcbdb87",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5550c721-2e31-49ad-b85d-c137c0200d1e"
        },
        "item": {
          "id": "d01ca981-26d4-4448-8007-ea3973cc42b2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0766b27a-fbe7-4938-a3fe-e96f3d07ca1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab7e948-4613-415f-9167-d8561207c2d1",
        "cursor": {
          "ref": "174a197a-30cc-40dc-9791-cbc310bb3922",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8c880de6-91b2-41fc-a937-147559788ae5"
        },
        "item": {
          "id": "dab7e948-4613-415f-9167-d8561207c2d1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b18e4a3d-d497-4a39-a56c-9c929a4b5b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7defdf0e-9dee-4708-8453-b7495b8c4559",
        "cursor": {
          "ref": "049f80b0-6d7e-4bdd-8a2b-78f474de879b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f4df0a7d-6c97-4cdb-a65c-fab4ddf2bffa"
        },
        "item": {
          "id": "7defdf0e-9dee-4708-8453-b7495b8c4559",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "85fff5fc-c032-4f59-87f6-bb54c7876307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ebd50c-8539-407e-aae4-5bca88cb1c0d",
        "cursor": {
          "ref": "4aec9aa6-3b96-4edc-a2b6-230874f9ebb2",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "385fe97b-ec04-43da-865f-732ed22e2810"
        },
        "item": {
          "id": "a4ebd50c-8539-407e-aae4-5bca88cb1c0d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e7ee7e1a-1366-4fe3-8a29-d2f6340891bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd5b83c-1984-4942-97ca-35fa1ef611b0",
        "cursor": {
          "ref": "a2fea337-3905-4ecb-957b-9c7915c5209c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0d8ff0c5-ae35-4e1a-99c4-b6cee23fec02"
        },
        "item": {
          "id": "2fd5b83c-1984-4942-97ca-35fa1ef611b0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8640aa9d-3b30-47cf-a9b3-7e9a7d33e435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff5538f-afa4-4503-b187-1cf3c13b0c4e",
        "cursor": {
          "ref": "59aa653e-eb77-41cf-a6ef-dd16e8eea12c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "810742d8-5b44-4a67-912b-bc12b688523f"
        },
        "item": {
          "id": "6ff5538f-afa4-4503-b187-1cf3c13b0c4e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e3aa960a-e401-41ea-816c-ad4536d29f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f070e7-9c6b-4305-9412-528a7d634826",
        "cursor": {
          "ref": "6cf03864-c53f-43d3-8401-33ca7d9bfc3b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "934e65c8-cd3a-41a0-a6f0-d1d269f8c9ea"
        },
        "item": {
          "id": "50f070e7-9c6b-4305-9412-528a7d634826",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c9405bee-2049-4234-b737-09e0f545a8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b89a816-42cd-4e21-a478-51aa4d4cb203",
        "cursor": {
          "ref": "807740fc-122f-42a7-8eb1-81b3863a1b30",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7aae1b99-1cdd-43f4-9d5e-0e546b12e727"
        },
        "item": {
          "id": "3b89a816-42cd-4e21-a478-51aa4d4cb203",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fa791e14-455b-404a-bebc-9522ec10accb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdc5820-f5a7-4656-9069-8a352bcfab4a",
        "cursor": {
          "ref": "2fdfbe72-b27c-4069-80be-a8eaf3d2ef14",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e8d5be79-9536-4a51-87fb-95569c67a294"
        },
        "item": {
          "id": "8cdc5820-f5a7-4656-9069-8a352bcfab4a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "29c703e6-c04b-4bc0-ba03-4376734d72f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b41f865-88f1-4934-a6c4-0d0376b43582",
        "cursor": {
          "ref": "04572c69-f4fd-4fab-9942-6ee24707f60d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "405547d8-25d1-4f04-98e2-4673dd74152f"
        },
        "item": {
          "id": "7b41f865-88f1-4934-a6c4-0d0376b43582",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bf393e01-5cbd-43a3-ad4f-ac995022b7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b3da2e-a917-4487-9b44-cc3940f4b9a5",
        "cursor": {
          "ref": "67f8d57f-ca0f-477f-a150-096fd6b7ea1c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cd70a85d-a6b8-4a20-b47a-5d2cd48ebd88"
        },
        "item": {
          "id": "d2b3da2e-a917-4487-9b44-cc3940f4b9a5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a262f264-658f-422a-9925-4246d04300c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d9e981-cafa-492d-a03c-ef9a3802c04a",
        "cursor": {
          "ref": "c59940e7-b467-42f1-a72f-27135e1e1e24",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "091df14e-169b-4a85-a027-9caa7588747d"
        },
        "item": {
          "id": "11d9e981-cafa-492d-a03c-ef9a3802c04a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2c0d746e-8e11-4d23-89aa-a39382d2723c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b420da-3938-48ac-afb6-cc81bd58fca5",
        "cursor": {
          "ref": "13567461-73b6-4799-aed5-8eb85b71f7dd",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "45c23c49-0d0b-42e0-aa73-1cd26d8b8e67"
        },
        "item": {
          "id": "b0b420da-3938-48ac-afb6-cc81bd58fca5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6f161dc3-22d7-4399-8748-c25099f85944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c5d657-a15c-4d93-a0a2-3c3142c9234a",
        "cursor": {
          "ref": "2ef90aa3-bf89-41e2-a6cc-848617af3996",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b255c006-37a9-4a3a-b87e-2a0dd8e396d3"
        },
        "item": {
          "id": "49c5d657-a15c-4d93-a0a2-3c3142c9234a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d0327ce4-d5df-497c-9417-3b4c08629c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcaf3986-77c8-4f2c-8df8-1c60902956c6",
        "cursor": {
          "ref": "fae6b841-a681-46fa-a192-6cfd17e9b86e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ad83cd34-31e2-4868-9ad5-f2f32d509300"
        },
        "item": {
          "id": "dcaf3986-77c8-4f2c-8df8-1c60902956c6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d1f10385-06c1-4e23-abe8-f173ff6f26cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2e7b07-8fe2-4162-8411-bf0ed4ae18cd",
        "cursor": {
          "ref": "bb9b7df0-0ccd-4754-9cac-dc1d1b33d408",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6bb80820-fdd4-44cd-bf91-32349d11701f"
        },
        "item": {
          "id": "ec2e7b07-8fe2-4162-8411-bf0ed4ae18cd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c958ce2a-3269-4401-9c76-c294fcac2f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5a405a-e3aa-4708-a3f2-5500c229bd59",
        "cursor": {
          "ref": "32a5a9e9-1d8b-431f-b138-ff36d423c42a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f9e4a2aa-bec0-4d79-9055-7946cbed723a"
        },
        "item": {
          "id": "db5a405a-e3aa-4708-a3f2-5500c229bd59",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "85cf30ff-5d4d-4688-8715-daaadb67d7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c828ee5e-f302-41ec-b82c-98067aeaf1b0",
        "cursor": {
          "ref": "d3a2d130-1803-44f7-8f42-233368878248",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "28a5a352-567e-4c4b-97d1-45ee212b3ba7"
        },
        "item": {
          "id": "c828ee5e-f302-41ec-b82c-98067aeaf1b0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1f8a80af-04f9-44e7-963e-abe78d68b653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc23e83-c2ff-47f6-8f27-77fd0ae776d9",
        "cursor": {
          "ref": "3029af34-b459-4ebe-b740-8989ad35ed64",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5488055d-4eb1-4a51-aa84-34cf67f6ef74"
        },
        "item": {
          "id": "afc23e83-c2ff-47f6-8f27-77fd0ae776d9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "21a7a589-a8b8-4e20-aee1-2b9b4299652e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0d215480-e556-45ed-8b49-626367f2c442",
        "cursor": {
          "ref": "4b5945c8-29c0-4be0-8ccf-25e3cbdc6bab",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b70746f5-b2f8-4a48-9636-1e9ed5866af5"
        },
        "item": {
          "id": "0d215480-e556-45ed-8b49-626367f2c442",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d8c722fd-c5af-4cd3-a0b3-413f2fdcb29e",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "286534ba-d4ba-483b-9214-e4846823967b",
        "cursor": {
          "ref": "bef9818e-babc-4a8a-a206-16d77ee40570",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0b92d20a-27de-49f9-8206-9adc850029e4"
        },
        "item": {
          "id": "286534ba-d4ba-483b-9214-e4846823967b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b1a1537e-3b2e-440a-96f5-5869915ef380",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c808828-4927-41d9-bbcb-b6dcd49defee",
        "cursor": {
          "ref": "49caec3e-efbc-4b4b-9899-2f2e6afa5d25",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "39b059a9-d5d2-4925-81ac-5b6ef2944517"
        },
        "item": {
          "id": "7c808828-4927-41d9-bbcb-b6dcd49defee",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "afc4829a-2b34-4172-85d5-a8748370dd91",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb7e311-a46b-4f1f-a1bb-7adddf81f5c0",
        "cursor": {
          "ref": "54daa8b8-871a-470e-a427-9963a924efde",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "76cea7bf-0b9b-48d0-8f03-d6d1bfb30f71"
        },
        "item": {
          "id": "7fb7e311-a46b-4f1f-a1bb-7adddf81f5c0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "153d129f-66b0-42d7-bd7f-a45bc10d883c",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c33d521-39b3-43a5-9a19-fc340909160c",
        "cursor": {
          "ref": "f68716a1-6ee5-4285-97d7-909dbda4046b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "da375e1a-ca24-47e6-bca8-deef079b2120"
        },
        "item": {
          "id": "2c33d521-39b3-43a5-9a19-fc340909160c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ca495964-9caf-487c-beea-53d7d919767a",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-04T00:34:57.199Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-04T00:34:57.199Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "fe469126-baaa-4873-b077-53cc1a7a9b39",
        "cursor": {
          "ref": "407b9341-6dd0-4b26-8f18-6537b002e8e7",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "915d9633-7d55-4ac1-8e82-4271a0084ec7"
        },
        "item": {
          "id": "fe469126-baaa-4873-b077-53cc1a7a9b39",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7e033943-e336-4d78-9121-66a43ad6126d",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a398e8-aecb-4005-8e2f-118f4a994fe3",
        "cursor": {
          "ref": "c0c97ad6-ecb1-47c7-8564-cb804a7a6155",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "295d8517-d332-4791-ba7d-313f4690f907"
        },
        "item": {
          "id": "34a398e8-aecb-4005-8e2f-118f4a994fe3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ce663efe-bbc8-4014-a73e-c2e58bdd3fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a822000f-e801-45cc-9ddb-965ea23b523e",
        "cursor": {
          "ref": "38829c9d-b5e8-43b7-8b3f-0df2ac916c98",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "09658b22-e4b7-433f-a703-b6030cfe1b6b"
        },
        "item": {
          "id": "a822000f-e801-45cc-9ddb-965ea23b523e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8305edf2-b8ab-4d68-a084-3be36fd226b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc62e7d-f8dd-423d-b640-78fc61838171",
        "cursor": {
          "ref": "867d6b41-4b08-49dd-bcce-8784afe21290",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "16e4d26f-71c3-459b-a989-d1b4d82880b2"
        },
        "item": {
          "id": "7fc62e7d-f8dd-423d-b640-78fc61838171",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "99297089-0235-47c8-a720-64ec2fb1c236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97eb50e-65a4-47b9-bca6-9d7d1acfa534",
        "cursor": {
          "ref": "1159b783-91d1-49ef-aaeb-497e1a7b7f5a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d59198fc-8cef-481c-be36-0875125e531a"
        },
        "item": {
          "id": "a97eb50e-65a4-47b9-bca6-9d7d1acfa534",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "eb1222db-23c3-46d3-ad5e-bd2aaf62d7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d589c6a6-ab44-4dae-aaf6-8de54345dbd0",
        "cursor": {
          "ref": "cb7bd338-2128-4922-a139-30a1c05d3ae8",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7bedbd40-c0d9-46d2-8bc8-d6fd124d501c"
        },
        "item": {
          "id": "d589c6a6-ab44-4dae-aaf6-8de54345dbd0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e70ee0e9-d845-4b68-975e-da41fa49e69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e99986-f2d8-4ed0-a85a-3deac78c636f",
        "cursor": {
          "ref": "afd3a729-8b84-4d44-9cef-e29216e1b830",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ce960cc7-6e10-40e9-9619-80249da9c981"
        },
        "item": {
          "id": "96e99986-f2d8-4ed0-a85a-3deac78c636f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "90fa909c-b774-4016-86f8-09e906f47977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4102da42-a84c-4889-8e98-1617860bde81",
        "cursor": {
          "ref": "7a760cd7-c70b-464d-a471-5bae38a07437",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "de851b5d-2093-4245-b62a-02519fbd7165"
        },
        "item": {
          "id": "4102da42-a84c-4889-8e98-1617860bde81",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b75dc09e-3d53-4434-875b-d2138bcbc222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a9d61b-9fc6-4558-8f2f-f3080d39b185",
        "cursor": {
          "ref": "045b9403-852c-4b3c-8e25-2e6bcb6b8f7e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c34c040a-444f-4220-badd-f848aef03036"
        },
        "item": {
          "id": "18a9d61b-9fc6-4558-8f2f-f3080d39b185",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7335bcdf-8f4a-4f9f-a094-cb4ba932ba85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7559047f-0bb4-4cf2-9867-25feca79743a",
        "cursor": {
          "ref": "afd7934b-2373-491f-842d-8fcf92f8be20",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e1c0c4ea-b552-4b1c-816b-e1014bd1f0bd"
        },
        "item": {
          "id": "7559047f-0bb4-4cf2-9867-25feca79743a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cdfc591d-91d5-4d97-9dd1-248db6036b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dfe492-d74b-4f32-a812-f397542b18eb",
        "cursor": {
          "ref": "f82d41a3-3068-4a97-bbb5-8de7997f3cbe",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bb93dfb8-5506-4750-b4db-cd2c9af43a0d"
        },
        "item": {
          "id": "d9dfe492-d74b-4f32-a812-f397542b18eb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7fdbb751-8a50-4ff6-8eb6-537191b8f95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f316448-7b87-4a71-b19c-3c701b65359c",
        "cursor": {
          "ref": "63507ae4-35f0-4282-902e-1eb006b3aa88",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "481b3202-6c8f-4b3f-8ed2-cf9184a2d3ca"
        },
        "item": {
          "id": "5f316448-7b87-4a71-b19c-3c701b65359c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "22177e4f-3cdc-4b7d-a62b-0a49c2db4fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7002fa-4474-4505-a919-db9c3f2909b5",
        "cursor": {
          "ref": "6dec8772-98ee-4a02-9639-2db1a2548311",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ab5c49da-db71-470f-9892-b5fa9154f45d"
        },
        "item": {
          "id": "2f7002fa-4474-4505-a919-db9c3f2909b5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ee297f4a-b303-4f0f-aecf-b31965d79b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21df5e51-f1cb-4468-ac18-c66c1593ad56",
        "cursor": {
          "ref": "7d1040ef-7784-4219-8ddb-89ed260d2537",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1f0204dd-9642-40ca-a60b-e3e2397fd148"
        },
        "item": {
          "id": "21df5e51-f1cb-4468-ac18-c66c1593ad56",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "75db6817-5b7f-4b18-9974-298a59f5a2c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f5df791b-b3ce-4fcc-b460-821da73c0bbf",
        "cursor": {
          "ref": "68dc237e-d960-4c2f-86d2-e659a88bae59",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ccaef7d5-9bcd-4a3e-91f4-4ef22e5759c8"
        },
        "item": {
          "id": "f5df791b-b3ce-4fcc-b460-821da73c0bbf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "afe40e37-8c0b-42ec-88f3-743f1f920bb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f51d72a8-83ce-49dd-a90b-4b2abde97951",
        "cursor": {
          "ref": "15dcfed7-7f79-4876-92c7-9f019a6a8260",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "961afa14-cc93-40bc-8d47-e97dfd94a841"
        },
        "item": {
          "id": "f51d72a8-83ce-49dd-a90b-4b2abde97951",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "de33ebec-21b7-4a4f-88a0-e990d1c799d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d882d056-5f6b-41ae-9abf-fb1ba9275d59",
        "cursor": {
          "ref": "41372743-c7c7-4b79-914a-20471ff15fa9",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cf65e615-ca09-447b-b662-b0a92c56d248"
        },
        "item": {
          "id": "d882d056-5f6b-41ae-9abf-fb1ba9275d59",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6b10b5ea-32f5-46bb-8792-e9e0c77c2109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f94b4e-764a-444d-9611-31d38aa993c0",
        "cursor": {
          "ref": "305e91ce-7ac7-400d-8c44-329d9af4080a",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6e4f6f4a-4869-416a-a8ee-cfc36ca0af3e"
        },
        "item": {
          "id": "19f94b4e-764a-444d-9611-31d38aa993c0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "410b6b0f-da53-4d64-95ff-e7d9807923ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510ccdbd-d963-4af6-afb1-ac9cf86124b9",
        "cursor": {
          "ref": "13f51a0c-137c-469e-84c3-9f9e7c971145",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2f4c136b-1608-4ff2-b8a0-349339a61036"
        },
        "item": {
          "id": "510ccdbd-d963-4af6-afb1-ac9cf86124b9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d527af89-1b2d-4b91-854f-e92dd7c52bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da044eb9-d072-4623-880c-5358f3605b16",
        "cursor": {
          "ref": "6b98a122-05ef-43f1-81ed-7b76b2916faf",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "906f6e44-d7f4-42cf-a3f0-4d3d6fe96cfc"
        },
        "item": {
          "id": "da044eb9-d072-4623-880c-5358f3605b16",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "61ae471e-4c10-4120-b4ea-16b04bce68bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9847ce08-bf5f-4d2a-a3f0-c1c2b11aa673",
        "cursor": {
          "ref": "9131a7ad-3e48-450d-b2b6-90f4a342aa54",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9d7c1c1f-b464-48a0-acd6-6a3b6d7c28d0"
        },
        "item": {
          "id": "9847ce08-bf5f-4d2a-a3f0-c1c2b11aa673",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6e03bc03-76d3-46f3-97be-3cc04b649992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b3c983-2fef-4ae0-89c1-99827138dbfc",
        "cursor": {
          "ref": "d93201e8-a614-4bca-a0c6-e2ac35ba916f",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2d513e43-ec60-446d-8557-61b461907caa"
        },
        "item": {
          "id": "14b3c983-2fef-4ae0-89c1-99827138dbfc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6e1b57a9-1dda-4c2e-b913-48fe6047a3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e18843-f2bd-4373-ae9d-873bab7a4190",
        "cursor": {
          "ref": "ec6b2104-a07a-4075-8f05-173a31496e46",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4ba751fd-53c1-4b29-9b14-29bf678db777"
        },
        "item": {
          "id": "94e18843-f2bd-4373-ae9d-873bab7a4190",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "21614e81-c304-4864-98d8-075f1e50cfdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ab4841-706b-417d-a5b0-183ec397087f",
        "cursor": {
          "ref": "2ef54651-3069-4a17-bf75-98027ccbea1a",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c711fcbe-ee85-4437-bb98-35c6a7faf637"
        },
        "item": {
          "id": "f8ab4841-706b-417d-a5b0-183ec397087f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8d05d040-0061-4984-b3d1-d2a7cecc6ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d2a403-2d6d-46bd-9e6d-1ed88ad3a2ba",
        "cursor": {
          "ref": "36942121-0624-4916-90cb-6bf3bd179537",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3375967d-3bf8-42ea-b84b-3eb1e0ea1a52"
        },
        "item": {
          "id": "f8d2a403-2d6d-46bd-9e6d-1ed88ad3a2ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b6e58f85-ae78-41aa-a766-67b4deca5546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dbfaa6-2e95-4108-8504-faf51d855dc6",
        "cursor": {
          "ref": "d2f45239-16d5-4b5a-957b-fb9d92bb3979",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d7842577-a06e-4c48-b85f-c78b84c1b84c"
        },
        "item": {
          "id": "69dbfaa6-2e95-4108-8504-faf51d855dc6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "403b28c2-26e1-48aa-a3b5-f441c89b56f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe4bfb2-2e47-41d7-9358-284193003384",
        "cursor": {
          "ref": "22f71996-0957-490b-b726-f4c3446f829c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6aaa33c8-a135-4be1-965a-613b3ac95d23"
        },
        "item": {
          "id": "5fe4bfb2-2e47-41d7-9358-284193003384",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "66f59de2-0a12-47ab-9cba-99c21da9516c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c1a055-fc0d-4f66-950f-23c286d1637d",
        "cursor": {
          "ref": "788e1550-6b3d-4de5-af44-e4f3a57951d0",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "169b4382-ffb1-4fdb-b72a-087375b696f0"
        },
        "item": {
          "id": "51c1a055-fc0d-4f66-950f-23c286d1637d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "aebbd915-ca69-424c-9582-84f4f6e8ecfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a629fb-4c6e-44ff-b8c1-ee8f35a3f5d1",
        "cursor": {
          "ref": "dc89586a-3036-46ab-9de2-9b2043cc0437",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "63cbcd49-4fce-4cb1-a23c-d1b856a8e282"
        },
        "item": {
          "id": "d1a629fb-4c6e-44ff-b8c1-ee8f35a3f5d1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e5a50095-d5c3-495f-88f5-46a9701ccf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96098481-0069-4c37-a626-2fbd5324052b",
        "cursor": {
          "ref": "9e54fba4-0950-4587-9374-b53e288fc137",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d299089b-0884-42c6-916f-708bc2c4db3b"
        },
        "item": {
          "id": "96098481-0069-4c37-a626-2fbd5324052b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e5279abf-9821-4670-9f2e-00fba95f1b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231c5904-a7fb-44cb-ad53-7afb581b7bcb",
        "cursor": {
          "ref": "c88b5ef1-0a8f-4b02-9392-df69e95468f8",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "89b8d984-b74b-44e9-adcb-fedec03ce155"
        },
        "item": {
          "id": "231c5904-a7fb-44cb-ad53-7afb581b7bcb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d5934bf6-750b-4d1a-a2be-16f4b57d5486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ca6ec7-64ae-486f-b48b-5433ae0b9066",
        "cursor": {
          "ref": "4510ae60-7e9b-400d-8158-c3db6ee0df1e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "628277ac-22e2-493f-91bf-fd82e47d6236"
        },
        "item": {
          "id": "98ca6ec7-64ae-486f-b48b-5433ae0b9066",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cfd89e36-04d7-4869-ae1d-cc0728a843ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b28575-a9ff-42d3-9073-c6fbb2bf9f01",
        "cursor": {
          "ref": "7be05801-6052-4d70-a7ed-f2e164c178da",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d3d8636b-3d8f-417f-9d0f-edd94b186e0f"
        },
        "item": {
          "id": "76b28575-a9ff-42d3-9073-c6fbb2bf9f01",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6d638f57-874f-40e4-abd0-dcb80924259d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6f819473-93c0-4129-b8e2-61937d690907",
        "cursor": {
          "ref": "60f93c24-f72a-4432-82f1-6f43c6fac7ce",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "59370031-c99c-49af-9ffd-362725ff599e"
        },
        "item": {
          "id": "6f819473-93c0-4129-b8e2-61937d690907",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2da293f0-a09a-4ade-93fb-0309202a5031",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152fe03b-25af-490f-a493-f6ff295ef558",
        "cursor": {
          "ref": "07cce9f0-b09e-4bf5-a63e-4814c7a1dc4e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "286553f5-7717-43da-b405-577923754fc5"
        },
        "item": {
          "id": "152fe03b-25af-490f-a493-f6ff295ef558",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "620ec0f1-6dd2-4c8b-a535-47485df1a4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054217b7-bb6d-48f6-8d21-69ed9abbc87c",
        "cursor": {
          "ref": "d0e90585-d49a-4b64-8c2b-419f69d3260d",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "753fc4ca-db01-4d97-a0a1-d5083fe0cab9"
        },
        "item": {
          "id": "054217b7-bb6d-48f6-8d21-69ed9abbc87c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "210237b8-64ec-4f9a-aba3-5bb59aad5a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32aa3ba5-f457-4a75-b962-a430ccb98eb4",
        "cursor": {
          "ref": "13341b71-130c-4ab4-97ef-d10a1cb13039",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9787e9aa-4fd9-4267-afbf-5b3493512016"
        },
        "item": {
          "id": "32aa3ba5-f457-4a75-b962-a430ccb98eb4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dc35b556-5619-4c02-90d9-ca7a85368d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0383704-fff2-4aeb-9084-61ddd4cdd3ff",
        "cursor": {
          "ref": "4f463cd3-0ca9-4091-9ab7-67d30019b678",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "940150cf-367f-4388-9536-0cfead9f1cb5"
        },
        "item": {
          "id": "b0383704-fff2-4aeb-9084-61ddd4cdd3ff",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d06e49eb-e628-4816-96bc-692580390aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f633446b-3e60-46f5-bcc6-72e809cff4e2",
        "cursor": {
          "ref": "09467582-2afd-4607-83af-479973f64a9f",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2f56fd9e-5b5d-4700-a426-8199b54737a4"
        },
        "item": {
          "id": "f633446b-3e60-46f5-bcc6-72e809cff4e2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2a99b59c-02f8-426d-b0a9-9584c3ec66dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb7a93b-d0fe-4ec9-b5b1-0c07aa861a07",
        "cursor": {
          "ref": "c4127634-c842-4c7b-a0d4-cacbfd65cdc1",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e30966ce-e576-473b-b78a-8a9f2c34b030"
        },
        "item": {
          "id": "0fb7a93b-d0fe-4ec9-b5b1-0c07aa861a07",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e0b0272f-45ba-4031-bb74-8a01fad15e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c55f95-a72a-45da-8611-b4c91979ed07",
        "cursor": {
          "ref": "a1524a1d-f811-483c-8e67-737c339917b1",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "10105d3c-efbe-4a12-a501-42a54ea06145"
        },
        "item": {
          "id": "d6c55f95-a72a-45da-8611-b4c91979ed07",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "598673d1-457f-47e0-97ed-447b72294284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699b0264-3636-4a28-b600-76c7569ef6f5",
        "cursor": {
          "ref": "3ad35522-36b9-49f7-a75d-dc9e48ca9429",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f5a2ff80-80fa-4667-b053-60390967ccba"
        },
        "item": {
          "id": "699b0264-3636-4a28-b600-76c7569ef6f5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3e9272b7-d8fc-461e-a5e4-09cdb54e9af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de880ca-a3ee-428e-9cc8-7bdd00bb5d6f",
        "cursor": {
          "ref": "3619bd1d-9da5-4849-98db-0614a06b45b1",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b8646f2f-67ab-4259-a4e3-9cfd8a9ee252"
        },
        "item": {
          "id": "1de880ca-a3ee-428e-9cc8-7bdd00bb5d6f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bee6a1dd-8b44-4e7e-a676-ff941e3356e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1f036d-fa40-4a6a-9677-1b338fa95d2c",
        "cursor": {
          "ref": "8c804938-46a6-4492-b93c-5e2d7cc6d8b9",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "86bfe622-3b4a-4329-8be4-f9c26e53c5e7"
        },
        "item": {
          "id": "ab1f036d-fa40-4a6a-9677-1b338fa95d2c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8f138fd1-b93b-4143-a1cd-73de6c87bead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dc5b4b-7217-4032-abaf-5da78e286cd1",
        "cursor": {
          "ref": "f3cedfee-b985-4a49-90b1-44c17692fc7d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a88ec644-d35c-4f32-82f5-4e6cdb1b305a"
        },
        "item": {
          "id": "c7dc5b4b-7217-4032-abaf-5da78e286cd1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9de293ac-d9e6-493d-bc45-6d711cbb2b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642d64c8-c696-454a-af2a-254900a76297",
        "cursor": {
          "ref": "93049a21-b2f0-4482-b6ef-6b811849daf6",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ab61c555-b5c5-48e1-85e8-d64e4bf7b0df"
        },
        "item": {
          "id": "642d64c8-c696-454a-af2a-254900a76297",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7aac5b3c-e68b-47ca-94ca-c0f212f20385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0ccd1a-e3a0-4cd9-928f-c2b0d1f4fdce",
        "cursor": {
          "ref": "f9359724-b332-4675-945b-1c831364261a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8675ed8-0e1e-41a7-8b30-a690c14d955e"
        },
        "item": {
          "id": "1a0ccd1a-e3a0-4cd9-928f-c2b0d1f4fdce",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2c47e12f-4663-4d66-88fe-e5f7b38fe8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebbecb1-4359-4ee3-b868-af7da1b337f1",
        "cursor": {
          "ref": "a6f0bcbb-45d7-4630-bd6b-ff7fa6b9f714",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bc709b27-e1aa-4703-81fd-7695f69a0322"
        },
        "item": {
          "id": "bebbecb1-4359-4ee3-b868-af7da1b337f1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8834c421-ebee-4354-a8c5-bf5a56f52c72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f8645e9a-305c-4772-a024-88057dc9f9ba",
        "cursor": {
          "ref": "2b5c9074-e0a8-4c44-bdea-71b7d51eeffe",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "470f7f48-3619-4dbe-8244-858195b4648b"
        },
        "item": {
          "id": "f8645e9a-305c-4772-a024-88057dc9f9ba",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "caeb56fd-0230-47c5-9070-70a485e33eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61afe86e-28bc-48ca-8d98-f29aafdf2781",
        "cursor": {
          "ref": "553bfd3a-50ce-4624-b062-538938535ab0",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "824bc553-9daa-4a12-b30a-2f2fb4c4f6e8"
        },
        "item": {
          "id": "61afe86e-28bc-48ca-8d98-f29aafdf2781",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b96fbba1-c244-4021-a34b-6cd4a138601f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6820edf-75bf-4551-ad2e-9189dcf06e00",
        "cursor": {
          "ref": "10b4479d-9ebf-43f7-bde3-b16bcb311291",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d8cbc050-f3fb-4be2-b0d4-4e092777cd45"
        },
        "item": {
          "id": "d6820edf-75bf-4551-ad2e-9189dcf06e00",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e44349e1-16a8-4a89-8fde-ef6c6c8fd912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951598e3-2385-4d7c-8064-ec634760b75f",
        "cursor": {
          "ref": "afe49aca-4914-49f0-a5de-f958b23c867c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1c233736-ec38-4302-bd22-100c98a106ec"
        },
        "item": {
          "id": "951598e3-2385-4d7c-8064-ec634760b75f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f62cf9b3-78e3-4119-9953-27561a556093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445001c4-b335-4bb6-af47-f7d951aa7a6e",
        "cursor": {
          "ref": "21219d15-4870-40d5-bf77-08fd52733e16",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e9049434-0261-4ec8-9204-475e1563f8f1"
        },
        "item": {
          "id": "445001c4-b335-4bb6-af47-f7d951aa7a6e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a1aa945d-6a03-4ba7-baf8-698525a1899f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6442873e-75e7-4d89-b81f-874b0de4fe64",
        "cursor": {
          "ref": "b5adcca0-4740-429d-b803-1585cf238e50",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ab296840-e200-4598-aab2-97558e7e036b"
        },
        "item": {
          "id": "6442873e-75e7-4d89-b81f-874b0de4fe64",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "47efbdc2-0d92-453f-94b4-a9b468cc8c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99529006-636c-49d6-ac87-50d45114c9be",
        "cursor": {
          "ref": "209160ee-d490-4c89-aa6b-f969ff6b3d6b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3aa1ea35-5311-4e88-be22-62e61fc06795"
        },
        "item": {
          "id": "99529006-636c-49d6-ac87-50d45114c9be",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "888efa9f-997e-470c-bd84-fe0438cbb31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c376e5fe-15e9-4e72-a185-22e60f0cceb2",
        "cursor": {
          "ref": "5df0a127-03b3-45d3-9143-9302720ae0f8",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "371ffb63-1f59-461b-b543-194aa62c9608"
        },
        "item": {
          "id": "c376e5fe-15e9-4e72-a185-22e60f0cceb2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "62e3fd0f-0880-4950-8e14-9741800b09a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc77b8d-5f86-4bde-834e-079299665a28",
        "cursor": {
          "ref": "64e43ea7-5071-44ac-baf7-0b3daa8bae49",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3831dd76-d075-4aaa-abb5-45df1edd8aff"
        },
        "item": {
          "id": "5cc77b8d-5f86-4bde-834e-079299665a28",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d317dcb5-363b-4322-b0b3-06fbdcf29bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4321662-26ff-40db-bda8-b22306027b83",
        "cursor": {
          "ref": "92f49190-4eda-41a7-b809-9868f8c4e08f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "843cde29-9905-4144-bbee-aa6a3673b368"
        },
        "item": {
          "id": "b4321662-26ff-40db-bda8-b22306027b83",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "152b02c1-abe5-440d-85c8-611e63b624b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043e680b-f438-409a-b34d-a5533c126c96",
        "cursor": {
          "ref": "86a2b61e-7769-4722-891f-22180b725cd3",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "aa7440f2-2005-453c-ba19-83f7db02ba80"
        },
        "item": {
          "id": "043e680b-f438-409a-b34d-a5533c126c96",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "93668c71-ce95-4a78-a4e8-66457a9977d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ac46fe-c58b-4ae1-8707-ce5909b523b4",
        "cursor": {
          "ref": "925a8461-5ee1-4e9c-939c-5cc3bc16fe72",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6f0f6a61-aba6-4ed7-b7d1-d1dd9daad778"
        },
        "item": {
          "id": "b3ac46fe-c58b-4ae1-8707-ce5909b523b4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "af1b36e7-ffdf-491a-9aec-e0ddbcd2f1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f5f765-0b01-4c54-983b-92c28adddf98",
        "cursor": {
          "ref": "45a25391-78a3-4c8f-a305-fff45be2cff5",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7e97b026-44a6-4450-bdce-51fb6338035c"
        },
        "item": {
          "id": "c3f5f765-0b01-4c54-983b-92c28adddf98",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d68a9940-bc6e-4f0b-ade9-7f49f6c7f475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341a5f68-ca14-4a9e-a463-b04534f388de",
        "cursor": {
          "ref": "c9540ca8-aca6-45b6-b142-8c8342b3f70e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "721928f0-29a4-43d9-8a42-ed839865ca01"
        },
        "item": {
          "id": "341a5f68-ca14-4a9e-a463-b04534f388de",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01c0fe14-a4cb-42ba-8c8a-82404911e4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8259512b-cdfb-4416-a6c1-27fec3a338bb",
        "cursor": {
          "ref": "c93cbde3-8bc0-494f-a8cd-2a1ad8dfae5d",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b234594c-f161-4ccd-802d-f6064973aafb"
        },
        "item": {
          "id": "8259512b-cdfb-4416-a6c1-27fec3a338bb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5ceec8c1-97db-48a1-b2da-520b9aaf5a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0004a1e0-2cbe-444c-ba88-21f9e0f7a8a6",
        "cursor": {
          "ref": "2d2dcc2c-57e9-4dd1-a7ea-b12f20e2e722",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c3821345-8dbe-4fa0-8bf6-dff3b2c88a21"
        },
        "item": {
          "id": "0004a1e0-2cbe-444c-ba88-21f9e0f7a8a6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "646cef63-a39b-4b37-99f0-62da2b9e4a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150f55d0-ef4b-4b64-9303-8ef3583d44b8",
        "cursor": {
          "ref": "0ba664db-0f38-4c18-96f8-3eb6e23ef27b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3ac5d02a-465e-4415-823f-165c600b1f52"
        },
        "item": {
          "id": "150f55d0-ef4b-4b64-9303-8ef3583d44b8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0c39ee52-27cb-4574-a0fd-b3fc3e180e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f532fd0e-879f-4889-84b4-8ee54d16d808",
        "cursor": {
          "ref": "28295172-f3ca-460e-8c7f-f77369ac7a10",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e0550845-46e8-44fe-8d56-2d069e5f8541"
        },
        "item": {
          "id": "f532fd0e-879f-4889-84b4-8ee54d16d808",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "91842c81-89a1-4f50-a34c-2e6c647ea10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bfb1c8-b5bd-420b-a63f-224dbd48ea7f",
        "cursor": {
          "ref": "2c84b9cf-8370-4a09-9b9a-d49268deebaa",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "97fc3762-445b-40d8-8534-aa1145a3ce1f"
        },
        "item": {
          "id": "e6bfb1c8-b5bd-420b-a63f-224dbd48ea7f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2e23c5bb-8604-4707-bd43-44f5e26876a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfb69f5-876a-4c20-81c7-aa40d6a034e1",
        "cursor": {
          "ref": "2691c7ef-69ea-42c8-9cee-91af0bcd5b6d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "61bb8868-59ab-492e-9dee-264d6ae49b0f"
        },
        "item": {
          "id": "acfb69f5-876a-4c20-81c7-aa40d6a034e1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fff84f29-568d-4048-aac1-2b82cc9de693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708a478f-c88a-4492-8ad2-6b17ef542f6f",
        "cursor": {
          "ref": "c7e69f9d-ac3a-4b9b-ab6d-dc5b65c73367",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ce3808e7-c747-447d-8a35-fc644511ac50"
        },
        "item": {
          "id": "708a478f-c88a-4492-8ad2-6b17ef542f6f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0dc8e309-5d28-4491-8310-97f3ac5d9be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a026ca10-b40c-4182-a766-c761ae61fb8c",
        "cursor": {
          "ref": "646eca59-aded-4586-839c-1e81e5725895",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d79fed56-5555-4956-8139-b7837023dedd"
        },
        "item": {
          "id": "a026ca10-b40c-4182-a766-c761ae61fb8c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "135d158d-2436-471c-a04c-56b62018660e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8862297-9968-4c07-9bb7-8997bcc976ec",
        "cursor": {
          "ref": "4f0594f2-d4c5-4cf9-b718-e60f77536f7d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6c1d3736-0728-4dfa-9781-edfaba1a28c5"
        },
        "item": {
          "id": "a8862297-9968-4c07-9bb7-8997bcc976ec",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bd973c8a-6750-45f0-afb4-a083ed92df4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0be5310-da49-44e4-a5e5-7d771e193b09",
        "cursor": {
          "ref": "b9456742-5de4-47b5-a92b-95540b78e0ca",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2195e6c0-a948-43ff-b902-482d65cc9a30"
        },
        "item": {
          "id": "f0be5310-da49-44e4-a5e5-7d771e193b09",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "04ca396a-f714-4186-b917-643d629c689d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afcc64a-8d6d-407f-ad4c-5534b233beae",
        "cursor": {
          "ref": "080d8be3-c062-47cd-9a19-0ebc2c869e9a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5e05b441-3129-4a0e-8693-b1246c7bafc7"
        },
        "item": {
          "id": "6afcc64a-8d6d-407f-ad4c-5534b233beae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1298d3d0-eb45-4b5e-97b4-3ab37aea7427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915e19b7-98b0-4477-94b6-d847bd03fbde",
        "cursor": {
          "ref": "d9082aa0-cb6b-4a87-86e0-da820fccce34",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8b98de5e-567d-4833-b5ee-17b41790a45e"
        },
        "item": {
          "id": "915e19b7-98b0-4477-94b6-d847bd03fbde",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8da55fd8-448d-43df-b253-b97478300dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f40756-9f76-44f5-bb17-3b1fb61a84d6",
        "cursor": {
          "ref": "eea79bdf-b08b-4e29-a559-046b800d4568",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "be5c9218-1903-4e89-8517-97593498f039"
        },
        "item": {
          "id": "13f40756-9f76-44f5-bb17-3b1fb61a84d6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cf72f05a-4d7f-4b31-8bda-25eb69116df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcae6fdf-43e6-469c-a3c3-550f25f70f3f",
        "cursor": {
          "ref": "46a4c23b-6c2c-4523-9fe7-99b7fdf8f861",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "186a2685-909f-42e9-8137-238711ba47dd"
        },
        "item": {
          "id": "bcae6fdf-43e6-469c-a3c3-550f25f70f3f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "787cad3d-f8fd-46fb-b682-aa68e99e6d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed3aff5-04f0-4e03-b684-b2d7968ad0a5",
        "cursor": {
          "ref": "fa8c2270-29bf-4957-a8f1-4e50a1a22ae9",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fa23bd91-91d6-4676-8334-d0941f8dee42"
        },
        "item": {
          "id": "bed3aff5-04f0-4e03-b684-b2d7968ad0a5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b1d9727a-f14f-4163-a7e1-d47e6343b3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a237f3-f52b-49f6-9ca3-9d109f883d8c",
        "cursor": {
          "ref": "a9348f27-5e37-4390-9f5f-77b9c2cfcf31",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "238e62ea-c539-42ce-afe0-3762f8284850"
        },
        "item": {
          "id": "e9a237f3-f52b-49f6-9ca3-9d109f883d8c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cbd4b4a3-95b6-418b-a143-eeea929d548e",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2c289f8e-30f0-4091-8e58-7ad479667157",
        "cursor": {
          "ref": "ce00db91-cc53-46ff-ad04-8e976776b363",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9fe390cd-a50c-4e08-ad7a-a223c560317b"
        },
        "item": {
          "id": "2c289f8e-30f0-4091-8e58-7ad479667157",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7ca08933-5ba0-4177-9f8e-d1ba3b0c3d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0576ea67-3cc3-4775-9e38-aedb4df1802c",
        "cursor": {
          "ref": "96255998-e4d0-4cc9-a4ad-c3f8e33f6601",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "756cf683-373f-4b60-a376-700706dcf12d"
        },
        "item": {
          "id": "0576ea67-3cc3-4775-9e38-aedb4df1802c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ee60e738-d822-4a72-ae2f-e74db42b6dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96641cd0-cbef-4750-ad6d-9450eb7bdad0",
        "cursor": {
          "ref": "396fe26c-72d9-44b8-9f4f-fec840a1e946",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1f79318c-df45-4dd2-b4d8-9c4f66548f66"
        },
        "item": {
          "id": "96641cd0-cbef-4750-ad6d-9450eb7bdad0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6d8ee474-0809-440a-9f9f-1d71b54b6b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0660a3ac-eddc-4b49-a2b2-650b50f54b67",
        "cursor": {
          "ref": "b5982cae-eb59-4eed-807b-d9675f36da36",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8eeeada2-a805-4a93-9a87-d890c2020c91"
        },
        "item": {
          "id": "0660a3ac-eddc-4b49-a2b2-650b50f54b67",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ad83eba8-666e-4b7c-890b-3a66bb507661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996ec9ee-df13-464d-ad11-c080d037583b",
        "cursor": {
          "ref": "4f6942d3-5842-4451-ace8-0b738f98c7f6",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4d231d3a-667e-4182-b01d-cefe65751bcc"
        },
        "item": {
          "id": "996ec9ee-df13-464d-ad11-c080d037583b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e17e964d-31c0-447f-b7a4-773af6402732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e0970f-88ab-4803-befb-1da2bd4b21e5",
        "cursor": {
          "ref": "276c2d62-b4a3-4d53-a283-01133446a944",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b202637a-d886-4518-bfca-66975b41ff5d"
        },
        "item": {
          "id": "26e0970f-88ab-4803-befb-1da2bd4b21e5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5059fbf5-3dc5-4e20-b4bf-13d434cfa493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda15a17-39a6-468b-b141-deffac873f98",
        "cursor": {
          "ref": "f4f04304-91dd-4349-b62b-569da385a92c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b851b03d-b963-488d-8f8d-01e0d5dba65c"
        },
        "item": {
          "id": "eda15a17-39a6-468b-b141-deffac873f98",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d86a7f28-93fd-4aea-aa76-8621118cbdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694dfa8f-3457-4083-b226-41a3cfe98b16",
        "cursor": {
          "ref": "6ab0063d-9bba-4807-8cb7-921572358a4b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "56cf265d-c350-41c3-a2f6-76ff5ab1ff00"
        },
        "item": {
          "id": "694dfa8f-3457-4083-b226-41a3cfe98b16",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "390e5582-b2de-4072-821c-4120c10a3e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74cf5ca-c6f3-48e8-b877-72fea2c5ce20",
        "cursor": {
          "ref": "19948630-f60e-4730-b6bd-4c215c3cf53b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fae4eddc-8960-44f6-9f74-bbbe694751bf"
        },
        "item": {
          "id": "f74cf5ca-c6f3-48e8-b877-72fea2c5ce20",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fd0341d4-7b6c-4c85-975f-ab1c416e7076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5c44e9-b6eb-4a28-a612-9346da8461e7",
        "cursor": {
          "ref": "355b165c-cade-42e0-acb4-a5dc6fb4354e",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "16246227-6e7b-410f-8c77-fbea507fcea1"
        },
        "item": {
          "id": "3e5c44e9-b6eb-4a28-a612-9346da8461e7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "994a14d7-21fa-42af-8c34-b3a94cb41401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99405f9b-6b3e-48f2-af91-ac1c4783e415",
        "cursor": {
          "ref": "70d55193-d3ee-49ed-8aec-6fa5c240f96d",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d5fcc733-57e4-46e4-ad15-efeb23ecb067"
        },
        "item": {
          "id": "99405f9b-6b3e-48f2-af91-ac1c4783e415",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "40b1bd54-55c1-4be0-9ef2-7be65cddd0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070b77ac-848f-4929-9746-ff6031b412f5",
        "cursor": {
          "ref": "eb36e63d-6abf-40f5-a53f-72fb797a52a5",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "86884abd-8cd8-4997-8c56-487f92704d30"
        },
        "item": {
          "id": "070b77ac-848f-4929-9746-ff6031b412f5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ca4015ba-5161-4f74-bfa1-0c9d90ce0e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70d4093-4f14-46df-a27f-be846e98a91b",
        "cursor": {
          "ref": "eb07fcf6-ddee-4dfc-abea-f49abfb25a2b",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d58d513c-c98d-4cc2-abbf-fd58d33ed42f"
        },
        "item": {
          "id": "c70d4093-4f14-46df-a27f-be846e98a91b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9b1dc871-e8ce-485a-b6e5-cd3f57ac3a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c39ab9-5be6-4310-be89-811e6f110f38",
        "cursor": {
          "ref": "24e5f3c9-bf00-4857-ab79-d8c6fe582562",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9dcbc98d-9419-4d85-b547-aa44f5c5fb15"
        },
        "item": {
          "id": "c5c39ab9-5be6-4310-be89-811e6f110f38",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b7dba032-3ca7-4c1c-aadf-c83a47cffd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2aea7e8-5789-4735-949d-14d128e27177",
        "cursor": {
          "ref": "c1ce56db-c60e-48fa-924d-5acdbf6d7149",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b89d3bba-7f73-4567-a671-2fe58766d8f8"
        },
        "item": {
          "id": "b2aea7e8-5789-4735-949d-14d128e27177",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a922d55b-6f7e-4a13-b8c0-ab945b9ac57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26df5900-f555-49f0-9451-7e55c7bb893f",
        "cursor": {
          "ref": "59f9bcad-bcb7-424a-8d2d-557be91b541e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "84f01d1a-826b-4739-a348-b51f18923f29"
        },
        "item": {
          "id": "26df5900-f555-49f0-9451-7e55c7bb893f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6ceaf46c-4561-4e30-8bb8-5bbe6fe35f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f8be05-aa29-42d4-b01b-4a204c3ba146",
        "cursor": {
          "ref": "b01ee4da-b3f8-41ad-a781-fc8975b80c07",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "45fe2027-5490-45f7-bdc7-a1ca3babb9d6"
        },
        "item": {
          "id": "18f8be05-aa29-42d4-b01b-4a204c3ba146",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b0584d3b-cb74-47cc-95a8-b031be6f21a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5303a976-54ee-46ed-8707-de4169ae982c",
        "cursor": {
          "ref": "5bcafc9b-60f0-4f9b-b2c5-6bf3a9ccd7cb",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dfa00631-0611-408b-952f-14c4dfbdd17a"
        },
        "item": {
          "id": "5303a976-54ee-46ed-8707-de4169ae982c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4dac3887-8019-4be1-90c3-f6eebad40602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2bb67f-33fa-4cde-bab4-bbf8aa9cfede",
        "cursor": {
          "ref": "a64c5690-3345-4c1e-9464-f67438394b8a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "52304637-5dd9-42a5-b294-5c2ce2668b76"
        },
        "item": {
          "id": "0b2bb67f-33fa-4cde-bab4-bbf8aa9cfede",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f599bcce-6402-4dd4-873f-7be3c4091fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d322e4b-c93e-476b-8275-2f9065ea64cd",
        "cursor": {
          "ref": "698e16a7-be7c-47bb-a3f7-97a8b3038833",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1b177848-a61c-4306-839c-d6d37e774387"
        },
        "item": {
          "id": "8d322e4b-c93e-476b-8275-2f9065ea64cd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6aaef4bb-aa76-4b40-aa91-89039d45d6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3526898-4023-413f-82ca-541c3109aaf4",
        "cursor": {
          "ref": "bd748c66-e898-4441-8b7f-1cbb0b80ff8e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d0b0a4cb-60a2-4b8e-894d-96b98d965ee7"
        },
        "item": {
          "id": "c3526898-4023-413f-82ca-541c3109aaf4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8d82f599-0411-42e6-bfb1-6c5ad76398a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c546bd1-aa7b-4aaa-800b-860a58e5e82e",
        "cursor": {
          "ref": "bbf57da1-9628-4857-9546-dc702576576c",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "60e0cf5d-0b7b-42b1-815a-73432d4e18d5"
        },
        "item": {
          "id": "0c546bd1-aa7b-4aaa-800b-860a58e5e82e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d46218c6-cfdf-476e-aa54-937e8729c838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4681d70-1b9b-488c-917a-764b957766ff",
        "cursor": {
          "ref": "9c9d799c-47a5-496c-a16b-cbaf1593c5fb",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c8dd2662-d31e-47ba-b192-c5660babfceb"
        },
        "item": {
          "id": "f4681d70-1b9b-488c-917a-764b957766ff",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "564f4a5f-a0f2-47bc-b540-2f699e9adc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3070c3-254c-4c0f-bc52-23db5e2f831b",
        "cursor": {
          "ref": "339e273c-f45e-459d-ab20-ab557f020f77",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3ff6a711-c5bf-45ee-a276-ebd85b92f9c9"
        },
        "item": {
          "id": "7b3070c3-254c-4c0f-bc52-23db5e2f831b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e76adc6d-fcc4-4f1c-9147-2b54b2cda9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bee20c-7873-4343-aa30-b5ac4edee7a9",
        "cursor": {
          "ref": "9113abed-db1f-457a-8464-2e6df363f512",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "65e5ad37-785d-4446-8a94-93684af6acc0"
        },
        "item": {
          "id": "e9bee20c-7873-4343-aa30-b5ac4edee7a9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1e471878-264f-4a79-a778-20d1907e1cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd131245-203c-44eb-bd27-90ae7949633e",
        "cursor": {
          "ref": "eca1d984-9ef1-4a19-a041-7b42e82ac5d0",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e2a56a7b-23cc-4c13-8ed4-4272ca8696ed"
        },
        "item": {
          "id": "dd131245-203c-44eb-bd27-90ae7949633e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f0873ecb-5760-43a7-bc28-9a8e12ccf3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc133463-a5ad-48e8-a700-00aba42c0674",
        "cursor": {
          "ref": "df103fd0-b96b-400c-b6a2-e0b3bcdef70a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8cbcb48d-e854-46f2-8273-2f98e6ea5d3d"
        },
        "item": {
          "id": "dc133463-a5ad-48e8-a700-00aba42c0674",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4c5827bd-e76b-4d3d-b52e-6edf4e19a029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658bc4f9-ad14-4920-926c-a0ee22a61014",
        "cursor": {
          "ref": "0e59153a-5eca-4a12-8ace-baa5af62fce9",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "02b4740f-46e1-4d36-bb10-d161fa93ab10"
        },
        "item": {
          "id": "658bc4f9-ad14-4920-926c-a0ee22a61014",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "85ab7121-aa79-4f01-8619-1e2e14ed36b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5959135a-92e2-4c69-9179-2d793ae8a074",
        "cursor": {
          "ref": "8782c2fc-f073-4390-9774-ec646d24ae55",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5dd47833-0d30-4f4b-baa2-39bf76f4a0bc"
        },
        "item": {
          "id": "5959135a-92e2-4c69-9179-2d793ae8a074",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "23248244-37b3-4b69-868b-5ecc45c361b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1e3ac0-9a80-4100-b8ed-18ab1e6b5c66",
        "cursor": {
          "ref": "d260cbcf-e3bb-4c1a-9dcf-a09cead72fae",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3e29852b-ab98-42b4-8af1-b0f0173e1722"
        },
        "item": {
          "id": "7f1e3ac0-9a80-4100-b8ed-18ab1e6b5c66",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "052507b3-aafe-463b-b00f-daebea7e4bf5",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a7737c53-74e9-441c-a026-b9b00bc1ddc8",
        "cursor": {
          "ref": "3dab6ece-36d3-494d-a1ca-5dacbd7aaf4e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d84d786c-a0c0-4261-8436-d2627e6e8022"
        },
        "item": {
          "id": "a7737c53-74e9-441c-a026-b9b00bc1ddc8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "db039b23-dc10-45b2-8bee-5900e2e8c4ed",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d54b21ee-14d9-45aa-84dd-af0f26bc4cf0",
        "cursor": {
          "ref": "966cc870-db47-4697-bd3e-a4a7a2d22199",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8feaac1c-18b3-4f18-885f-95345093e110"
        },
        "item": {
          "id": "d54b21ee-14d9-45aa-84dd-af0f26bc4cf0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bbfbbe0a-96ae-4623-8c2f-317c224939ca",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2592f6d4-d026-45f5-b292-f08275144733",
        "cursor": {
          "ref": "993386dc-be31-41ee-bd74-84e54bd71e9f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a22fde7e-faf1-46fb-89ee-440767592a64"
        },
        "item": {
          "id": "2592f6d4-d026-45f5-b292-f08275144733",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7c74ce3d-4431-4d54-a0bc-ab09b7a53ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fe0aa9-417e-4da9-8361-3f7c23527dfd",
        "cursor": {
          "ref": "a0a56aba-d53a-4890-84f2-3ced4c884c4b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2fe506b7-a06d-44e5-8cf7-8606ad682e9d"
        },
        "item": {
          "id": "08fe0aa9-417e-4da9-8361-3f7c23527dfd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5fbec399-2598-40f4-a6ea-6bf91642b054",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8d64afc2-c5e7-4790-925f-9253d006882b",
        "cursor": {
          "ref": "ed375ba7-5d35-48c5-8df0-33fc6e1ad69e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dc0973af-51ab-4ba0-b1be-a84bbdf01e68"
        },
        "item": {
          "id": "8d64afc2-c5e7-4790-925f-9253d006882b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3360ec90-e02f-43d2-a8d4-24a003200b8e",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8eba1ad4-c902-43fa-8ffb-49263057bc96",
        "cursor": {
          "ref": "b86e165a-2678-491f-8b4e-a92bd455e869",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a7913e10-18a1-455f-9666-cd7fb4190280"
        },
        "item": {
          "id": "8eba1ad4-c902-43fa-8ffb-49263057bc96",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1f1b025b-df19-4ea3-ac47-e7e71d3a3732",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7e59d3fa-a24d-4cd0-ba39-715b766cd931",
        "cursor": {
          "ref": "cbae7171-01fd-453a-8f3a-b4eaf9650ec2",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d68e2d5c-466d-40f4-ba82-3a50be6f087f"
        },
        "item": {
          "id": "7e59d3fa-a24d-4cd0-ba39-715b766cd931",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "18378f22-a143-439e-be2e-0aab7c5f46f1",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "8bdb70e1-f870-43f2-a032-f5134b60eefc",
        "cursor": {
          "ref": "7b34253e-acd2-485e-9acf-94198ac9c156",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b82399a3-1e6d-4042-8067-f0e49e534ad8"
        },
        "item": {
          "id": "8bdb70e1-f870-43f2-a032-f5134b60eefc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5d5dd9aa-a25d-48b8-bce7-e0ad925159f5",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0d5186d2-bd93-4fbf-a160-b7a05964b7d6",
        "cursor": {
          "ref": "e26076ed-4f99-4569-ae3b-de88cdc60902",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f60d4dcb-c728-4344-bdab-0239fc3d466e"
        },
        "item": {
          "id": "0d5186d2-bd93-4fbf-a160-b7a05964b7d6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3ea18bed-4830-492d-abc1-090b5e19b6ea",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5ddac59b-4d7f-419e-a703-d09e7f172e53",
        "cursor": {
          "ref": "e787accc-7415-401c-bd3a-807da5809c94",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "568267c7-eabd-4918-8df3-a859f4709713"
        },
        "item": {
          "id": "5ddac59b-4d7f-419e-a703-d09e7f172e53",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1ad6f6b4-2c69-4086-94a9-38459c8bc19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e7a80d-46f0-4443-ae2b-b4abe3ff5e03",
        "cursor": {
          "ref": "2f2163d9-b7bc-44af-bcb7-b1046e6fd03b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2cd20982-cfe2-46e5-8a3d-7471333c3280"
        },
        "item": {
          "id": "53e7a80d-46f0-4443-ae2b-b4abe3ff5e03",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d5db7d5a-d51b-42e2-b6c3-45561525d24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebe7d14-4e76-4071-a692-c66a29b59a25",
        "cursor": {
          "ref": "3771fd28-1e77-4e89-9e1e-eea94729f4c3",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e76e7b8e-3e21-4ffe-a02c-343bfa32ffa1"
        },
        "item": {
          "id": "6ebe7d14-4e76-4071-a692-c66a29b59a25",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "000cbcdd-ee95-4310-9df5-d98ea47e415b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171d2bb4-918e-4761-8107-52f27752defa",
        "cursor": {
          "ref": "d7836378-725b-426d-bce6-5b1d2feef37b",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c86c3481-f48a-426b-98ae-a823f127a197"
        },
        "item": {
          "id": "171d2bb4-918e-4761-8107-52f27752defa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "74b53ac9-a15c-4a4d-bc9c-9f40f490c381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42375e56-5721-41cc-93bf-4d1cb6e7e744",
        "cursor": {
          "ref": "e01e61aa-b61a-49b7-8b3e-439fa913bba2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3704c49b-e0c9-44fa-9634-6a9100bb14dc"
        },
        "item": {
          "id": "42375e56-5721-41cc-93bf-4d1cb6e7e744",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a16fb493-abd4-42bc-8dc9-ea392cf9dc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd775f59-48e7-4658-b22f-39a97c633cf5",
        "cursor": {
          "ref": "7e784e22-7ccd-4a9b-aca7-c3260e824a55",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fae4a07a-6878-4362-92d7-ad18c622b7d9"
        },
        "item": {
          "id": "fd775f59-48e7-4658-b22f-39a97c633cf5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d6ce6e04-b63a-49a6-8d0e-ce62d85a27e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6917ec4-1484-4ea0-a3ba-94e856898c7e",
        "cursor": {
          "ref": "ca1e9e55-284d-4fcd-9c36-6bebf4dc4f39",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "06e3994c-dbf1-423b-939b-392cdb2f2b55"
        },
        "item": {
          "id": "d6917ec4-1484-4ea0-a3ba-94e856898c7e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e66885fb-05ea-447d-ba09-b61f953e455d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401d8bf8-e53d-4e60-8404-b54f8c2c7451",
        "cursor": {
          "ref": "3a86ff5e-b281-40dd-9200-0a38471f8866",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "611b90ee-6715-451c-a799-de371d7b1bc1"
        },
        "item": {
          "id": "401d8bf8-e53d-4e60-8404-b54f8c2c7451",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "48da9ba7-12cf-4051-8d8d-67ce73fdce53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7c4699-7522-48b7-9f3e-067c43135c38",
        "cursor": {
          "ref": "b6e0bf26-19f1-4123-8dd4-421c4d51044a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fc4dcdd9-f953-411a-96ae-4fea355b141b"
        },
        "item": {
          "id": "7b7c4699-7522-48b7-9f3e-067c43135c38",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a8e9bbe6-62ba-484a-b427-62beb7e79944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3772fdef-1697-4ed2-ba10-d586f3784e99",
        "cursor": {
          "ref": "6621349a-aaa0-40fe-8297-92a890a6adcc",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cd21a11e-de0f-4040-a234-c9aa2ba60ea6"
        },
        "item": {
          "id": "3772fdef-1697-4ed2-ba10-d586f3784e99",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bcdb7f79-a9db-416a-9227-40f3678e7342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a4d0b2-89dc-4d77-9bfe-2b1ac6ff3aec",
        "cursor": {
          "ref": "8d4c0f9b-3da6-4529-8942-e98dd4ab2e46",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "52af8183-7f44-4123-a671-82fc0e6298e1"
        },
        "item": {
          "id": "a0a4d0b2-89dc-4d77-9bfe-2b1ac6ff3aec",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "23c96162-9656-49b2-a368-87c23799266b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43733fd4-bd84-42ba-9413-a97e0d20782b",
        "cursor": {
          "ref": "fe6c4fbe-03e1-459f-9c04-b0b6e4936989",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ca61d4da-9540-460d-8438-bf3a9e47de0f"
        },
        "item": {
          "id": "43733fd4-bd84-42ba-9413-a97e0d20782b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6f40800e-ec5d-4b0b-a0e5-6dcd66b0ccfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855bb1d9-6df6-4fb0-99cb-43ce6ea6d7f8",
        "cursor": {
          "ref": "d0a50374-62bc-400d-89b9-2fa95bf3a883",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d34921eb-1473-4f8c-a6db-8d6f9d473967"
        },
        "item": {
          "id": "855bb1d9-6df6-4fb0-99cb-43ce6ea6d7f8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d7673b43-a3c9-43c7-944e-69d84516dc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f717f341-4f54-4c4a-8b3f-0be35a0c3812",
        "cursor": {
          "ref": "63fc2c86-16af-47d5-bfaf-9b502ef4eaf6",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9d96bfc0-b056-4b55-a8f6-8637e334ddf5"
        },
        "item": {
          "id": "f717f341-4f54-4c4a-8b3f-0be35a0c3812",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e06b5389-716b-460d-8444-d898889907c1",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "beb9ed5b-0425-4417-8996-fac626724418",
        "cursor": {
          "ref": "948875c9-f114-4db1-b14f-c5a3b720ed0c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6bed50cc-b0a7-4166-9ef8-ea7870edbb31"
        },
        "item": {
          "id": "beb9ed5b-0425-4417-8996-fac626724418",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0080f072-2613-4a54-be86-d0ce9c5cb454",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fcc8f18a-ba25-462f-bd17-825f7258ee15",
        "cursor": {
          "ref": "080de3ca-4b10-43b9-9719-bdb1c28af403",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "02bd392b-dd14-4b94-ab3d-74ebf61151de"
        },
        "item": {
          "id": "fcc8f18a-ba25-462f-bd17-825f7258ee15",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3e9be1b2-6bca-4ee8-ba4b-7d8be7938c5e",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "aaeec145-47e7-4985-b9d6-dac5c7137676",
        "cursor": {
          "ref": "7ec48fdc-eed6-4ae9-9723-2b6806d9a5a5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8c47cbd0-da1c-4b71-a699-39b408d44777"
        },
        "item": {
          "id": "aaeec145-47e7-4985-b9d6-dac5c7137676",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4cb2633f-94a3-4db5-ba94-01b4643c1e46",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2a1723c3-9fff-402a-86ab-ac40a8cca805",
        "cursor": {
          "ref": "554114a8-41f3-4dca-a63f-9a1ead01b17c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e389fa24-5276-4125-9b4e-e15dcba31ece"
        },
        "item": {
          "id": "2a1723c3-9fff-402a-86ab-ac40a8cca805",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1376940d-aad8-4665-9223-ac13a1f4914a",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "30b530b9-7993-4e17-aab3-c47c3ddd2c9f",
        "cursor": {
          "ref": "39e7e4b6-a0ea-4bb2-a80f-0dcc1cf9ea5b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "53472ecd-dc77-4cfd-a9d0-730552ec4c76"
        },
        "item": {
          "id": "30b530b9-7993-4e17-aab3-c47c3ddd2c9f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "eff83627-bb5d-4ac4-bd3b-0b00d2398d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086abb0a-3736-4b5d-90f4-106dadd5a931",
        "cursor": {
          "ref": "1806da09-aecc-4ec1-a792-a103fe517364",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8fac3401-606f-44b5-a59a-cff5e11d6e04"
        },
        "item": {
          "id": "086abb0a-3736-4b5d-90f4-106dadd5a931",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a662b31f-59e6-49c4-bd97-6468fda98d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cb953c-7e67-4355-9d48-f254158ecb36",
        "cursor": {
          "ref": "67bc76a9-1c58-4985-a7b8-8a0a30bb7d5b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ad5037bc-690f-4952-a535-c8d7b09a70e9"
        },
        "item": {
          "id": "89cb953c-7e67-4355-9d48-f254158ecb36",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7f155e9f-230c-4b39-ba85-de9af1051280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a608409-c80d-462c-aa91-6396799e9a22",
        "cursor": {
          "ref": "04c28933-1d78-4ee6-aacc-0d76ffe81855",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6411053b-69e0-4fbb-b5e7-e295d50a4473"
        },
        "item": {
          "id": "3a608409-c80d-462c-aa91-6396799e9a22",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cfee813c-0819-4e12-9bf9-482c001d1579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de43bf8e-b993-4faf-9644-7eb859e2de57",
        "cursor": {
          "ref": "63baba18-bcb6-4fee-af0c-6b35a9e0a941",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ae56d0d8-de3f-4b63-8c1a-8599514c2a4d"
        },
        "item": {
          "id": "de43bf8e-b993-4faf-9644-7eb859e2de57",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1c2fca37-e2ca-4944-9455-f4a78af9cd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c200d6b-f96c-46aa-a80d-5806e2e373d4",
        "cursor": {
          "ref": "3ef3b27a-2289-40ca-ba16-1bc6d5733ab9",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce91bfdb-792e-40d5-b476-31ba55e114ec"
        },
        "item": {
          "id": "7c200d6b-f96c-46aa-a80d-5806e2e373d4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f10c1993-bd9b-46bf-8382-ca2fa66cbdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014ca00c-05d3-4f96-8ba4-4bdabb3bc3dc",
        "cursor": {
          "ref": "c96e54c9-370c-4e6a-ac40-75d20b46b2b4",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bccefb45-334d-4464-aa7a-e07e5bb3b5e2"
        },
        "item": {
          "id": "014ca00c-05d3-4f96-8ba4-4bdabb3bc3dc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "49003034-0f95-455d-905c-9fc69c158593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bf1173-7821-477e-80f5-e95dea3ed79a",
        "cursor": {
          "ref": "37cbfe3f-b2b9-4763-a83d-9b2bcf83667a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3edce63b-4f7b-4d56-869a-46633b945e29"
        },
        "item": {
          "id": "82bf1173-7821-477e-80f5-e95dea3ed79a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "03911737-226e-46da-b59d-854dc3cde63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ef3cd5-5b22-41a1-b85d-a68be82b1104",
        "cursor": {
          "ref": "1101c9c0-f9a7-4961-b372-c8ebffa13ed8",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3f4003ea-7d01-4f32-a348-e7f6a80b0c99"
        },
        "item": {
          "id": "98ef3cd5-5b22-41a1-b85d-a68be82b1104",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b69e764e-ae10-437b-ad3a-e67cc399a6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff26648-c1ee-4930-a7a3-31190512e5ad",
        "cursor": {
          "ref": "f7d14c58-7275-49ec-a6d5-adcad1e071bb",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8e25c71c-3b0a-4383-85c2-676c8cecd9ed"
        },
        "item": {
          "id": "6ff26648-c1ee-4930-a7a3-31190512e5ad",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1c80c8c9-3d44-49da-ae0e-d047d7edc2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe1b195-bb34-4455-adc6-5b5789ce93c6",
        "cursor": {
          "ref": "7a73bd20-8ef4-4bae-9e50-53eeefc399ff",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d868391a-3e83-4888-bd32-64a6035f911c"
        },
        "item": {
          "id": "fbe1b195-bb34-4455-adc6-5b5789ce93c6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e56a7d27-f865-4ff6-8003-6636ac335cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07a3230-5183-460a-a2ec-c0bfc572bab5",
        "cursor": {
          "ref": "5efaa98c-d607-4617-91d9-409c8417675a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "fc442b2b-e14b-4bc3-9cde-27c71ad45a85"
        },
        "item": {
          "id": "e07a3230-5183-460a-a2ec-c0bfc572bab5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c02e102a-6b8f-47eb-ad98-22a2b0e06a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdb1bde-bd14-4073-9c07-10dcfae5cb7d",
        "cursor": {
          "ref": "67d61f92-f706-4604-8584-7e94fc33d5f6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6852235b-8e5d-4167-bfd8-c37ff9a2bfcd"
        },
        "item": {
          "id": "3cdb1bde-bd14-4073-9c07-10dcfae5cb7d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b79844c1-c36d-473a-afbf-ecd522e25804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cd9f51-4ce0-4817-b1c1-f33f23200043",
        "cursor": {
          "ref": "dead2c1b-1519-4ea9-8446-9ea0783f7f26",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a305d4d6-316b-4ba0-ac25-25bd52925543"
        },
        "item": {
          "id": "25cd9f51-4ce0-4817-b1c1-f33f23200043",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "02eb52d5-be9d-4b53-a27f-a1c11fa84114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc37a5dc-4c40-47b5-ba16-4d42fc901d4f",
        "cursor": {
          "ref": "eda71419-8c4f-437d-991d-325a44d1ab1a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a3aa34aa-4b8c-4e7c-bdef-8c640cab9320"
        },
        "item": {
          "id": "bc37a5dc-4c40-47b5-ba16-4d42fc901d4f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "31ffeeac-e506-4cce-8684-d8cb56222357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7955cf78-fe8c-4c88-8292-52ec5580a5b6",
        "cursor": {
          "ref": "8407a871-0dc2-4235-af09-b9d5914effbd",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4da6ed7e-11b8-48fa-b72a-10220a06320e"
        },
        "item": {
          "id": "7955cf78-fe8c-4c88-8292-52ec5580a5b6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d50b84dc-dcfd-40f5-9592-c551ec533fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0647166c-b833-414f-9ddd-97cd8be962ca",
        "cursor": {
          "ref": "4ef76432-e6ad-4bba-81e0-7c5ee16d27d3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0a356623-aa34-4aed-9c96-9f3515b07265"
        },
        "item": {
          "id": "0647166c-b833-414f-9ddd-97cd8be962ca",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "42969b01-b7e6-48f2-8e2f-09631f078e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60084b7-b5b3-4063-89d0-1a128145f892",
        "cursor": {
          "ref": "84319178-6c68-4970-8fe5-0c1b336e2208",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "60a6018c-5c51-4f86-8767-860a7bb4a38c"
        },
        "item": {
          "id": "c60084b7-b5b3-4063-89d0-1a128145f892",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6bd4cd62-fb91-4bbf-b42b-02a494f84e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d96e1d2-01dc-45a8-85f5-2d6740271438",
        "cursor": {
          "ref": "ee74b6ec-3e97-4f77-afdd-17b0d800ad06",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4e2e87c1-20fe-46a2-9b67-c29511af8e4d"
        },
        "item": {
          "id": "0d96e1d2-01dc-45a8-85f5-2d6740271438",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "589df7f5-8cbe-4099-9695-b65f84b9a6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c1cdff-c832-41a8-8816-fb62109b812c",
        "cursor": {
          "ref": "46be9fca-fea9-43c3-9893-4c52b4c4a63b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "96c07593-1845-4ed0-82e9-918de038c764"
        },
        "item": {
          "id": "19c1cdff-c832-41a8-8816-fb62109b812c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6478b86e-ebd2-4eff-a4d3-cee7bcd9d3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a78128a-4bf9-4d9f-9040-8b85f9fc6613",
        "cursor": {
          "ref": "13af890b-0757-433a-bca0-c71419e73d0c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6c094f37-c5f1-42ce-b256-9055ab98d558"
        },
        "item": {
          "id": "6a78128a-4bf9-4d9f-9040-8b85f9fc6613",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b0071bef-239b-429a-815f-12a1dfee6fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d091cb6b-c36a-454a-8a6a-a951daf2a350",
        "cursor": {
          "ref": "545c8a21-9bed-4511-a5c2-809caadc8329",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "779bbd6c-3a09-4c56-b870-c682a9e90908"
        },
        "item": {
          "id": "d091cb6b-c36a-454a-8a6a-a951daf2a350",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5b4f1aff-4c75-4e7c-98c3-0ae0b89b0aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475a2a82-46d8-4adb-9850-09c0d9f7951f",
        "cursor": {
          "ref": "2f73b017-b77e-49ef-8552-59f2523c837c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "df505bd1-9fde-4a29-bc54-f92a58a8d2a1"
        },
        "item": {
          "id": "475a2a82-46d8-4adb-9850-09c0d9f7951f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b4390e16-d80f-4fa0-bea6-f82d5d8f183b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00a2e7b-f16b-4f65-9e57-f97772c1aa7f",
        "cursor": {
          "ref": "d3ece195-3eef-460d-bc52-2e92df475f1c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a7596b89-efdf-4061-a174-dc708cb021bc"
        },
        "item": {
          "id": "a00a2e7b-f16b-4f65-9e57-f97772c1aa7f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fde91fa4-dad8-45f8-a220-4532c3cda3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71671223-ee8e-43cd-86a7-2f2020ef592c",
        "cursor": {
          "ref": "698ff0d2-5f80-4ec4-b477-111c8c3cc4ce",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "aba8ebdf-edad-463d-be80-0e2836290bfa"
        },
        "item": {
          "id": "71671223-ee8e-43cd-86a7-2f2020ef592c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "90d869d4-54cb-4f11-9b14-50434d645caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9795dc37-b99a-45e0-989f-dffa5898b1a5",
        "cursor": {
          "ref": "61f38b1d-c3f0-443a-bd6f-6ad9aec85f63",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "05f8cd71-9bfd-40a5-9c66-9bc6282ba56b"
        },
        "item": {
          "id": "9795dc37-b99a-45e0-989f-dffa5898b1a5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "86f9d42b-b59f-4a66-9af4-0e997ee978e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8d838a-e478-4a18-bb65-fee31ab67f52",
        "cursor": {
          "ref": "906693f5-2a38-4d72-a69b-97bfe482cef4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "7f70da3f-ed22-4237-8062-76f80ca3acee"
        },
        "item": {
          "id": "7f8d838a-e478-4a18-bb65-fee31ab67f52",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5a48b86f-1e9b-4165-9960-dd02338a550e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57327ab6-c382-406d-9053-7f5ab6aca271",
        "cursor": {
          "ref": "a5730e1b-578d-425e-bc6f-d56ac32d0fb3",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "80a77683-b78b-4dcd-876d-8807fd1d8984"
        },
        "item": {
          "id": "57327ab6-c382-406d-9053-7f5ab6aca271",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b267b4b1-91f9-4828-a992-4a4363a5a60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db43c56-49ff-442d-ba20-7befc470ff98",
        "cursor": {
          "ref": "4cc762a0-3098-436c-aef5-560ca0be73b6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "303b2f4c-a4dc-42fa-9d51-aedde05e2d76"
        },
        "item": {
          "id": "0db43c56-49ff-442d-ba20-7befc470ff98",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "94b2218d-437a-47f8-932b-c2ba37ca6c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffc78ec-553e-4887-b1cc-1fd7ae12a610",
        "cursor": {
          "ref": "3329ca2c-0e5c-42e3-8b33-55181fc194c5",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "987eb762-3a2c-49db-85e2-0a45a1aa3bc4"
        },
        "item": {
          "id": "bffc78ec-553e-4887-b1cc-1fd7ae12a610",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "84ceac94-f692-499a-a853-c61e6e6c4fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993de690-3610-4902-9d7e-651bb7437c00",
        "cursor": {
          "ref": "9ef8a0e4-953d-42b8-91fb-b16a583ce441",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5c3bbdcd-ecf8-4624-9079-8f7165631b94"
        },
        "item": {
          "id": "993de690-3610-4902-9d7e-651bb7437c00",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "804b7e24-63d6-4901-b543-67f02dbc2409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c439e4-6b43-446d-a402-075f7529b6da",
        "cursor": {
          "ref": "91221a93-b9a6-459c-8bb6-bfeb7f2d3324",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8b2dc61d-558e-4fff-b5fe-dc0fbe321fd5"
        },
        "item": {
          "id": "40c439e4-6b43-446d-a402-075f7529b6da",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ef16d9ba-daaa-4289-b922-aa0abff056b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049174b7-bed5-40f2-8803-caf9d0055209",
        "cursor": {
          "ref": "ef7e6c6d-475a-4136-9b31-b72d0a9f7822",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "1d3f127a-4906-4ba1-9e64-c874986386d5"
        },
        "item": {
          "id": "049174b7-bed5-40f2-8803-caf9d0055209",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e6d922ff-ad4e-4a03-82f3-d1c8d9f3d636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9691d688-18cb-495b-9689-b05538c70756",
        "cursor": {
          "ref": "2894c66d-8182-4de1-9e48-5910fca3c303",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "80310577-2b59-4ae3-9329-eb29ec0f6b2d"
        },
        "item": {
          "id": "9691d688-18cb-495b-9689-b05538c70756",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bc553d6e-29bf-46de-93a3-e0991be2b3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27d51cf-2060-45f3-b2f0-8529c7523b1b",
        "cursor": {
          "ref": "ad28faa8-8a0c-4002-a02e-7453f6ba1d4d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c4df7e21-fde9-466c-90bd-7e030936ad1d"
        },
        "item": {
          "id": "a27d51cf-2060-45f3-b2f0-8529c7523b1b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6a512ed7-7180-405a-8f76-dfa1d44ae4ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a74d557-beaf-467d-89ea-d0b36606d630",
        "cursor": {
          "ref": "a2fc02f0-1bd0-4b00-ae5b-374e833afe26",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "50e3235d-0a4e-4f26-ad5d-ae709d5207cf"
        },
        "item": {
          "id": "8a74d557-beaf-467d-89ea-d0b36606d630",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c0ca7432-d679-4d06-bb59-413445bb4b6a",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b3d8d82b-4b2b-4ed1-873b-21c8143e42a1",
        "cursor": {
          "ref": "29de1053-d976-48ab-9b12-9aba331dbe3a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d66d73e6-7c21-4bd6-81e5-0890185ad0ae"
        },
        "item": {
          "id": "b3d8d82b-4b2b-4ed1-873b-21c8143e42a1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "11e86d29-d160-4d2d-a5a8-6d926aa63352",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93c94e8-c671-4c19-8e84-2c1fd6f18aab",
        "cursor": {
          "ref": "3b4fa90d-b82a-4d82-bd1a-84d57a2170ba",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0354790b-a9d6-496e-92c8-27053f411bfc"
        },
        "item": {
          "id": "d93c94e8-c671-4c19-8e84-2c1fd6f18aab",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "17032853-69b9-44b4-ac1f-9353ef0e4ec3",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bca495-cd15-4482-b291-3bc43b2148c4",
        "cursor": {
          "ref": "75ea4ace-2135-46f3-98b9-f531be26f4d3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "04c31000-6bd6-44c3-a943-c551884bc00f"
        },
        "item": {
          "id": "10bca495-cd15-4482-b291-3bc43b2148c4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ab535645-7411-4858-a900-3d34be7902a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bca495-cd15-4482-b291-3bc43b2148c4",
        "cursor": {
          "ref": "75ea4ace-2135-46f3-98b9-f531be26f4d3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "04c31000-6bd6-44c3-a943-c551884bc00f"
        },
        "item": {
          "id": "10bca495-cd15-4482-b291-3bc43b2148c4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ab535645-7411-4858-a900-3d34be7902a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a352e5ac-6c37-41ca-ad48-2e5e1e7d87e7",
        "cursor": {
          "ref": "daa4cf01-82be-40c1-b777-18471eb73c4e",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b000faa1-ecca-4829-85bd-6891c7e05b5b"
        },
        "item": {
          "id": "a352e5ac-6c37-41ca-ad48-2e5e1e7d87e7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "df430ac7-ebcb-44e3-b976-12235e6902fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfd0236-5679-4360-8aea-2c4003f4cf2b",
        "cursor": {
          "ref": "cab06a94-b8ed-4a9d-9bbf-3a1484479595",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f2fe5e2c-1ac7-4c29-99c4-ea5543f1d7c3"
        },
        "item": {
          "id": "4bfd0236-5679-4360-8aea-2c4003f4cf2b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "57c38f44-5422-4506-9a3f-6547ad30f4c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}