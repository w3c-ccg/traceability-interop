{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "38f133bf-6cb4-48a2-a6bd-2096d86a98c1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d18c62b8-d8f2-45d4-b4b2-cd47a22933eb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78d6f2cf-41a1-4b60-9f03-072dc85861a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ee34184c-add2-403e-8ec3-d29bdb8a5027"
                }
              }
            ]
          },
          {
            "id": "ac8cbab0-ba6c-4563-8899-5bc325d65aba",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f20b5304-11d1-479a-a732-945c9eae2c4f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "056926ac-c93c-4e01-af9a-53bdf007fab0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ed63d98a-4fe5-40f5-aa7a-f6bc599a81e6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b8f45009-93c5-4d79-9a47-5d4cdbcdb863",
            "name": "Positive Testing",
            "item": [
              {
                "id": "95622119-2178-41ad-bc56-a042c3edb84e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81458fd5-6bd5-4f45-aeb5-21045a0c35c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dfc65ec-f26c-44bb-9fd5-f9765acd0c88"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f988173d-9bb2-49b2-8f96-6d5091f3f978",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da76242c-d710-4bf3-bba0-9fe74b48339c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5a43e9ee-df03-4050-93b3-998f294f47fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0932fdfa-4abf-4ee4-875b-28e978c007be"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7335e1f4-831e-4d9d-aa65-8e448474a075",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fed7063b-c99e-4e04-8807-9d43dd788f49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32f876ec-9995-4439-ab1f-78088edbef0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf8a423b-b6f6-4ef0-b6c6-7307ce815cb7"
            }
          }
        ]
      },
      {
        "id": "98bb7bdd-df1d-40f9-b025-605a7ec3fbd6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "29f828f2-add4-439a-9908-a5500866af62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43f5c72e-f6ca-4de2-9079-c9950203accc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7599a86b-fac1-47b4-bdce-cddb255c0788",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2e28be-d88e-4944-9434-18b3ea0b906f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da3f550f-0ad4-49da-9661-c02e996ab407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc878312-4bfa-404e-97bf-53f30caa9765",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc1d605-bdc7-4d02-a321-4dc6163de1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2c67fda-9c61-44d6-9056-08042edfa4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6774fe2c-c435-455a-afc7-8e4e204d306b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b279d58-1e23-47b4-be59-d2edc92570f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a0cd39d-ddf0-4097-be9e-64435dd07edc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e190ec95-7876-419d-a09b-9edb2dcae7eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ebd2659-336b-46f1-8cdb-b47611d0708b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeba525a-01e5-433b-86a9-ac0992eb53c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5061b366-0a4d-44e8-92da-6b06547fbe88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10a327c-a6dc-472c-a58a-b51558c6ceff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83442c8e-ed9c-4d9b-b4c5-aeccf033cd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ceaf75-8048-4a73-b8de-29b40997c98f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2227f254-3416-4f75-939b-e2d41b4dc8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "463410c9-fdaf-493a-8bed-359f5e6a2885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87105e7-41fc-4a46-985d-8ec2cbfe6f58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "203b9fb7-4358-4c9f-9464-e47410e57b95"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "81b7dbf7-a63a-4f0d-8fb6-7b292ef49b38",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c518926-fc88-4253-a99b-fde65006e8aa",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfc82bc9-d375-4917-9412-3397523b4b20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c511638f-2551-42bf-bdc8-0e68fa563f90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50128f6f-45fd-4a68-b352-e4e92c7f678e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5c28a5d3-7970-4fd1-b42f-4d804c3542ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96e855d4-3d3a-4e04-affa-2b2699348c71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7323991-17e2-4f41-8ec4-12ca10e16b4e"
            }
          }
        ]
      },
      {
        "id": "c3c2cb73-4c5b-4d1e-bbc5-07409c77feb0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e24adaad-a1be-4f1f-bd09-04b1371b471c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38b95b6a-fdd5-4596-b093-3de6bacf2c96",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "97d2e028-5b29-4439-b49d-eadab0dff9ee",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb5475c-f0b3-4b26-be10-1281ea81321f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9026230-1da4-4bc2-9233-ec8819227dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a7ab5b-ab11-457b-ba36-b6dc4697ea8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b14536c7-db9c-4457-85fd-5fbb2c206bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a0403d-58e0-4af2-a97e-5161e83f61d1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8380f5-9a2c-4429-8475-e2c8b736959f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08e8329-ff3f-451e-b1d3-9387e61f8e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02898e0a-947a-4e8c-9756-2188d07d178b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e434428a-40c5-44bc-9359-bc853244339e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623b324d-3082-4b9e-9708-04b8df9ad8c8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc97fbf-7c2e-4fe6-9faf-ce6ba2cd2b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea41c17a-c48d-41bb-9d6f-fad9d1c11eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98408661-4ba0-44e1-9f03-3545f1a365c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67843285-d04a-4fed-8982-58051f88fb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca80ea5-fdde-42ce-9a9e-d7e08762fed1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59224445-7e65-467b-88fc-f88e697e042c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7739390-85fb-4d59-86a3-6be203e292a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1236913f-eed5-4cac-bab5-3ddc306b5901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b51edb0d-c803-45d1-b69a-0f68adf57df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b613dc-3ad0-4abd-a754-de372bc4ec73",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0977bbf-1bbf-4f3d-a7d3-579dc9416f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01064e8-e25a-44a2-89d9-c171a6e31a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803dc1ff-ffb5-4967-b86e-345d0dfc088d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cfa35a9-e092-46fe-819f-479b3323e919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f4187f-5797-4134-bec3-69c171701ecb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd279fb5-5a21-4c68-9858-712ed2eec962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a5efaf-ee43-4c6e-9377-0b315dbaebf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf345a6-5b67-46b1-9d86-2e0283858fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0873f84-5f7c-4134-9e19-cdbe6e01f648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63829e90-2fe1-4f50-a299-730deab27569",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5776673-2bda-4fb4-ac6f-d16b4e16174c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61298272-d729-4fe5-8fd5-1d3dc2344e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbda8bdb-b718-4ea4-a083-e2eea4093dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ea92c4c-188a-4e82-95a1-45121faa35e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed89235-e1e4-48dd-870d-4987675d9e7a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bd395a-8718-4b57-9666-3746d228028a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ed70e7-50c9-49c7-bb24-410a0c697f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2f83f7-535b-478d-9d41-3a33efd546d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca10dfca-844d-424b-8f97-00645bb36b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fd1c02-9197-4b70-ba14-c3dd0e27faf8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf155bd-6073-4790-a801-814fca5595bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb86587c-90e8-495d-89bc-4a1c65aebfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58fc257d-4743-4fa9-8958-7816b6539d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f00e5bf1-1f44-45a8-ad71-058cbf5b5727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462fa86c-ec08-46ba-a9a1-d7e69118e1d1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0d456b-3f59-4227-bc42-37470785c43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5bf77a-30db-4e8c-9985-cc8826219c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf16bff-1a30-478b-8c6d-5e797d50ab30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ae83e20-ae8e-409f-980a-2bd6351c8065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49fa687-2f5b-4d78-bffa-c44b2a1e3279",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47faaca5-473a-422c-ab72-03174f0af7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18e887f-6453-419b-828c-edf9dfa3dcba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868eb83c-3d38-44e3-8c46-18027c6407b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6596443d-671d-4bbb-b35d-25a56e9266b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2173998c-475f-4772-a9a7-c66fc6e7f317",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f709cb7-63d7-405c-a7b9-b1443d8d3842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19edc8be-118a-4638-9ef5-cf6f126dfa2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbef4c6-6540-4126-b51e-15490ed332c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40f62e0c-6b68-4e89-9cd0-ec7c63cce87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a104b30b-7598-4c53-ab7e-3443fbc63f36",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c4d07e-ea40-4dd8-a077-3fa580907c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7086ef-efe4-4d8d-8514-a4800bea5815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3b9d79-a604-48bd-a233-2980de4f05e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5417e202-35f3-400c-895e-fd24b86e9bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03254b2c-4d50-45a2-92f3-649fd3a665f5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2263c0-7543-4695-8c0e-1bf73ec0440e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a5484d-4c8b-4c99-9769-eebba22a189c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa10e83-1b71-430b-8a11-eaff3e97587a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "404b81da-a3b5-4f31-ba4d-f0e9a52d24d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e7fea9-8e31-454a-a487-b623fadefecf",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0c3e49-15bb-44c6-bd0d-59f2c6bdb657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9ee639-2f51-4918-b774-50bedaac49a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c151385d-d7ce-4d43-b163-b5419a64a577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d1206a7-fd9c-4fd8-abda-5f5a44832bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6129f5b9-784c-4be6-9c1d-aac9a3816aea",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c153a7-a148-4057-b131-2786fb0004f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15bb7d1f-80f1-4314-9dd0-0e8db6fb2451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0547034b-4ad0-4906-8972-90674ed917a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aefb241-573c-4e4c-9bef-91545d7fe25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56331340-3444-49d8-8822-b2f390fea4f3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ad18ad-443b-4b1a-b66a-7cec1aa29be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1efd1b2a-56a9-48c6-b5d9-4856202ff961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfbe5d1-8b50-4a1a-b0da-a38e3fbe862e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ea34263-198c-470c-a0e4-2b53fd49579a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd294bc5-1309-42e4-8a33-a1a2418ad68f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c0c6fb-a708-4af5-87ac-f2a868627626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c5781d-3c08-4f89-921d-da9343050179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3834b93b-f92e-4a27-bd97-2c4649953151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "62e34c2d-63e7-4e99-b905-19ba125cf8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab6de90-6ecd-47e5-9342-0d5f55a1da03",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea9c030-7998-47d3-97d8-65de3991c19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2a1c7c-eccc-4b81-9965-3b571378e839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7df2f7a-18a5-4288-bb9c-b0369f01f98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6752da34-3e53-45d7-806c-f909edd9cce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5edb7b8-5633-4929-b499-e5a69143730b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fae686-c004-47b3-9ee1-56d1bc8d78d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c34cdfa5-b202-4de2-84e6-306c69719158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350c2b1a-2d9a-4d73-a469-3bc5aef3678c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4296ef7-f249-4bdc-b5e8-3bf184bd006f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f19389-3452-47a6-8b51-68d460d2f569",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcb728b-1325-4b91-a59f-1b4027ed0697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c887784f-37f3-4304-9009-5b735fe5194a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4fecf9-4f6b-4db9-921e-e1ed84b20997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e874a90-06b8-42de-8457-11d0589c0b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293082f7-9d5f-4288-9fac-0acf3b61be93",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8399ba4d-7b03-49a8-801f-cb20b17709d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6bbef5b-010c-48bc-8b94-81fcf0751963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29463269-73e2-4945-b11a-1b35386c76a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "742f046d-ff6a-4235-82f9-3a4cf5888dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73094681-e367-44d5-b55f-0b51c4e94030",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f94dbe1-71ba-45e6-aa8a-9016aebf905b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be97e43d-1eab-498a-9ef5-be8a35254aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4265342-036c-4f68-9b5f-e9162d8b0a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb7421a-11f9-4e4d-846c-62073e3d22c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcf5a1e-b5d6-4f58-a927-eaa7beb11e4f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22452c82-31a1-4e69-b696-2024ff57092c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bba0c3c-9a4e-483f-a23f-61fc7ecbd5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b9af37-9528-449a-b461-5d40f23bbd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b958aee-48ae-493d-9d87-ac089fb8ca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767751b3-fa4b-445e-9cc3-897d564294d3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e128cead-ba97-4268-8e68-38aafb6025a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b957bdcb-5ead-4dae-8891-3900cd2b6d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1867c7e-3351-4af7-ae8c-1337fd7d4ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0afbcc08-3527-4e12-8217-e3632dc039d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8257d2-7e42-475b-9c8b-b93a2457571c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7648e4-cffd-45d2-b1f1-17252e8b4b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3a1d9e-1272-45bc-af7a-209c90b5b8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea3b6bd-0785-47a9-b8fc-93d262fa76f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97df47ac-d7b2-4567-87fe-80e49fed5c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b065b80f-f861-4180-8088-b9b1e3ae7073",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3779797-02de-4d7d-bc35-8df183266028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c914ee-8d7c-4918-b2df-cb8d5d22b811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70adfcbf-e865-41df-94ca-8e2c05986eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8536f77-f794-4370-a443-a634e9460f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afee63cd-ce4a-4605-8940-84ef54d57c9a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263761af-769e-4204-a661-d42d5fc951c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29265362-aae3-4f00-9d11-7e24d8205e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46eb71d4-c3f8-4987-9ada-0a0cff68a381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c8d4eb-0db9-42e9-9943-b2d355eaac40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f580ac7a-7ab4-41a1-8952-aacfd0c266c1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d5476a-fcba-4acf-85ef-ff5b987e265f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823478e0-15bf-4e5b-a89f-c50339aba4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b40eb4-6626-4b9a-afdb-76fb227953f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22c1ab75-0112-453e-a4e7-a474bed61430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3f0bf2-f623-447d-907f-5bb1a257609e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbca3c9c-b57c-444d-999f-0bc39a72b1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04515ecc-2bd6-4744-98ee-c0522e7e7cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8096353-88f7-4432-8e20-083346159a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7ba87d-e4a4-40ee-8098-286002c91489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1126aca4-3c87-4701-9dd3-6b3c42f27726",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff7b28e-d598-4fcf-863c-08e9dac5e795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfe015c-89c5-4007-b584-4fd6d7f4c39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef7dba0-3257-4535-9728-32578bfc225e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bcc51c1-54e1-4aa5-97b0-776010d530bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d45e497-7bdd-4fdb-ad30-404431f3e56e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf07703-b9e6-42cc-bca4-11a8ad8aaf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6166c67f-cfae-4cf5-a305-32f5ffc8f4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933518c4-2956-43af-b694-ba917183d752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f57e84-3d12-43fd-8ab2-39ead4ab2ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c68df49-617a-44c2-8ddd-5ef701df11ea",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0627081c-3cd7-4f78-934f-a43c832000da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8d7e20-5d52-4a54-bbde-9293a3008c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3976535-dc4d-4efd-83d7-896bd2df52e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4097cbdd-1b93-4e73-b709-8d55078d8139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f353be85-51b4-45ab-9970-8ac8d2f1ed00",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a8fdbe-e1c4-478a-84c6-16cc1c6b09af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32b4801-ec63-4572-b816-ef3c76749ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7cb01d-e194-47b9-84b7-8ef65f6fb4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae33b866-75e8-4336-b380-424fb424413a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa727570-3ca8-486e-ac67-18d7224b0641",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97c0338-c5de-4c82-9c9c-4993ffcadfb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b9f1d2-b092-487c-bad6-edad5cd95b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d538e06-30c8-4b86-b295-da965080c5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b45d4a-6f5b-460e-9fe0-1cdd4422cbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01720ff-af59-406a-ba4e-d46de0cdb29d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af30b14-46b2-414e-addb-07b588132f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "583f9b72-47f4-42b4-9729-67cdfdb97439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828a5167-9c26-4f9e-b274-8ace866ae528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c277ef1-ba12-4648-931a-d8524a191d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dd7950-cc57-4df9-b012-d4426a7eb35f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfa782b-33a2-43bf-8ab0-79db80d06e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd9bbbd-7d12-4c8a-bff4-5a4d6edfb8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4549c51-da90-460a-8077-0ea0d7c84585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "196e3af2-1468-4d6c-ad4d-0b27631b29fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888a6684-27d1-4059-ab54-3e4ea30dc95d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a820eb38-f068-4e99-be90-4a35b6c9f28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4ee0a1-ac63-45e4-b307-5545b3670745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d621bad-6101-41b1-bae9-926c521b83a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b36cd304-0771-4995-9122-ee4330d58077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca5aa58-d7d3-4670-a53e-204544e48ac4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6714e547-36ac-412a-a1dd-e13f5fac2281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a2270c-3ff9-448a-90ba-34ca086385a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc793c8d-14dd-4769-81ec-4127959d869a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1caac3eb-b2d8-4e67-b3c0-31a84aa64fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad7586c-95bb-492c-83b5-6c80c3970ebb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8196cb-7df0-4548-ae39-ea930213bfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fe1df4-8c44-459f-93dc-c46edcaeb7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87c6219-6644-4289-a080-a5ec1d2fdf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1de2f745-f653-4499-862c-4270b3e55fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ed3786-e3da-411e-802d-aa07195fc928",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03879060-3a16-4c21-8060-9da256314623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83cb66dd-23b6-4713-8806-bfdf7352e399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981225e8-8ce9-49da-9f6e-feb87b35965c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "46e5d4cf-dc64-4f90-b604-5eceebaca953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e610ee3-40d7-44a5-828b-c747888625ac",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e787e154-004a-4611-8aad-72d0996fc174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a7e502-2b7c-4a30-bd1f-7fb105095a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8db5578-e93e-4776-aec8-4ccbb278a097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "103b42ad-64a9-430e-b60d-7c1aafc9b6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41673ed-9b0b-4e99-8ae5-e941b76cdb7b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdfdab8-7496-48eb-98ac-aea6e7b3f6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efef116-349d-4e10-a0c9-1df8aacb9dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad57005-5d64-4a06-91c7-e7f99c123ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c34976-ea5f-4ec7-839e-0cca655331ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d750eff-8404-4ebe-ab00-1b16851a6108",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0467691-f5d3-40fa-afac-f233eb8229a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bc7ffd-47cc-4c63-a23b-39d0e212fc37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b75a191-1c77-486e-a267-498a9f3fefcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5e76b3-c8dd-48e9-acd6-b50238b0d1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b878c4-4c50-4f69-b24d-af002ebd8476",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59fdd8d-8aa2-4b02-8f61-ffbcbda33e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bd04d7-7230-4d03-8a09-9b8e95ad0de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06523a99-7569-4897-b6de-ec3b54ce9896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e49bc7b3-d9c3-484f-b5c2-80503b657846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2be93e-3948-46df-aab2-22b4f0072942",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2617a8-9423-49ad-8ce3-f4bd6aa63335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1604bb1c-0d7e-43b4-ada3-975d296630b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e1a15c-1a1c-4ed5-83ff-78a6c0eb0e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a9b913-83a3-49ec-93b9-143946e57550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48559e0-c6a5-423e-b187-5ca509eaf201",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1f8d8c-c76e-4faf-93c3-075866815217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0462a6f7-56a5-4efb-a8b3-10ad55bffd84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75830d9-39b8-4011-bdef-1fae1db0849b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47ce4944-fc43-482a-864d-f9825079ba11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44bb837-6214-4d3e-9df7-40f4f93ec344",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc7310f-72fb-4bf6-a49b-caa3badb930f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ba5bf5-e29a-493f-8f35-e0e199b8aa10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3071c5-4525-415e-813f-86a915ef2dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8b1682-e0c5-45df-92d6-b1163c11fdb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba1b5fa-5fde-4da0-b7e7-3499ee9301d8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84f8fcf-7e29-4fd1-ab37-0d5378171adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55f8a0e-57f4-46a3-8062-d2bc3ada3ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24c3137-d7a8-47b0-8a6c-0f6daf98321b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3abf03e6-cbd8-424c-9b24-eabb48f4fe92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d226b4-558b-4ccd-b85e-b7b551847cf8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b04def8-f546-438a-bb8a-f6e938aae2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d1f433-0f22-445b-90a8-02d1d4872037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e46dc2-f1e4-4982-bd19-f0b0a07c29a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e080fc20-b8fd-4a7c-8dfb-dd3bd87848e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b8405a-0700-49bd-9102-5cfb016f68d4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa56eb0c-cb64-4d21-a360-3644d4149604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2307589-8006-4732-9554-73c29ccb1834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6395a961-920f-480d-b655-18112befeb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a36611-4e15-4b3d-8a07-3c1174ca57e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c36125b-3f71-4fd5-8aa3-8a8c277ec36b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1049fcb-bf78-42b5-b411-84aaac49a20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4359f5e9-f356-4547-ad9b-850a8977688f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ac8d0d-043d-4b6a-a005-755758a7c1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "92412e17-c043-4777-87c7-d11f1759d844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ad5046-daed-40f7-b6b2-55d9fd669ff8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95744cff-6736-42f3-8531-c770d34145dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a04b57-5d75-436b-8e79-6f2257b7c70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4549a7-5751-455f-85bc-332a25f4c07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "970a4576-5eca-4e81-b3a4-16e80372b287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da815a46-7aad-41df-9f52-e9c10785bfa1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f82ab37-fc94-4793-9ead-f8ea66880e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62821ee5-0af4-415c-91a6-8f612a770470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241cc31b-7d46-42c7-bbbd-ae0a4d883cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a22f9d2-fdea-431f-9f68-a00169666c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e2bacd-f81f-4913-9a99-15326602b79c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838e7d8d-da1d-4e21-bfd4-d29c773c97ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8b9cdd-aab3-45aa-a035-f5b0855abea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d63211-15fe-4f87-a7a2-3befd219bdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "373dccad-dd52-4708-a977-2835aa053989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4fa8a4-d259-40fc-b7fc-e9788b940c84",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab15c0a0-d804-4c39-9f56-e48c96b25485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcaa89a9-f993-476f-af90-b622eacdcd7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8244c7c7-e628-4b24-94dd-4b0dae891151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9161342b-3694-440f-bb00-27718a37b090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cc8e70-af52-4028-937e-a1d73ac06fe2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d01d48-871d-45cf-92a9-bad6b4b009aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7907935-1a7f-43d6-a21b-f3b0ca1fff8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cfc793-e62c-4aaa-823d-99e7a231548e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "faa94321-384d-4f23-9857-2151462b7c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f057b21-29ed-4b3c-ab19-e8314c3388ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cd6dcc-b418-484f-b227-53649ae59d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c38a368-413e-49fa-a0df-27973e3fd931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb20f85-208b-4be3-8ba8-8135ab27300d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "40968fbd-b148-44a1-b8cc-de53348864f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e0db8f-4b6c-42f6-8c32-20ce1b1c105c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf22ace-edc2-4748-89f5-a2a8cd747562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3968e39a-3e94-4b6f-a160-816283c80e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0424c17e-3737-4248-af76-e18a4aace966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe1b680-3e9c-4202-8f24-55d85a566149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c3a9fe-c4f9-4cea-a6be-da44544d2fae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac89f0fe-24c7-47e2-b520-0dbfa5afef68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7579f56-0b49-45a1-973b-38c1fa6651c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce661548-0594-42f0-810a-0dcced43f9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "11b1887d-c59d-48d9-bac8-285f61bc22ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5f27f5-4092-470e-abbd-21fa4f7c276d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3628f3bd-cdba-4f33-b462-7d7f64aa35c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2393dce-a980-4ffc-8cc3-d261f73a9cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef83427-cf42-4ff2-8806-74c8d334766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0601a378-1c93-4ff5-b292-741c0a87dbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e498e43-58a5-4789-9838-948a338b79c0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b181a54e-604c-406b-856e-cc89a683f215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7be099-2a89-48a5-9599-ca49238a5718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bed249-8573-40b4-a827-81f0ec8f643b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9317c658-84a5-43e9-a6fb-bea8602b3c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962b28e1-11c1-47ac-bb08-240d5bcfaf33",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7e6db6-b85e-4961-84ee-3fd8893500a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd874f0-a55c-415c-b633-24eea9c24209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610624b8-6b0e-4c8c-b8cb-79b11c3cc080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "38edb13b-7819-4796-b6a5-004ee2c65feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52008bf1-f49b-4f56-995e-118bdd3adfcc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578cbd98-37cc-453b-9907-9f935b86dd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f42587-968d-4a59-8b75-265b13d23e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb135d2-bf10-4cdb-b8b4-8168e7527c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eeaeb90-169f-4dd5-b7af-802805418360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a263bc6f-4e4e-49a3-a9c0-b9b3f6941620",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97745de8-c396-4447-aee3-d07614784e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74008500-8121-4f10-a98b-1e3c0e91997d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4245a432-5b06-4c3f-93bc-9b4eeb93a3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3541938b-e486-4f05-a397-3b53d507d171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf3a633-af75-47a9-a842-f17f05ecb1ac",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488ae835-69ca-4c65-94f2-9d18b8d1d0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6647cb53-d27b-472b-af23-d6c83beb74a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f493d047-c78c-4c40-9642-302938b0095a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9062ed-0857-47a5-9751-08a869c495b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184be86b-bfb2-4e68-b8d8-15d57331e57f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3331312-4fed-44cf-82ca-95fa149c340b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e81608-8ca0-4333-99e7-84cb645d398e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9d6337-1940-4935-ac7e-2f5248445ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb39e56-0a52-4893-92a9-4bd48d0fb02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e498d34-6ef7-46c9-a4ce-a80e4eecd58b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8cfaaa-1117-4a01-b32e-54e5e2876905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0437ff4-a809-4d33-bd62-2c86a5689120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f1fcc0-0728-4d85-9c09-d27ad4b68bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2020b3bb-19a6-4c40-8dd9-bc90c3d5560b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24eb0fd-1116-4a98-bb2d-30ad5a6e237e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f15718-875c-4088-8dde-f5f894e88081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748cfbfb-1cdc-4203-99f0-f59e685d01cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2587e7-3426-4de8-aa27-55e2089498ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed66f19-9b0b-4949-98c3-a0201c112a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f4963b-66da-404c-90c8-0f7ade6f3de7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80d7437-f646-448e-aeae-a9f1f72c44fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ef225e-8b6d-4821-aaee-f5901f97dc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f1e908-983e-4b60-8fca-aee0c0ef1ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be7c4b73-88ee-456e-9358-584b28ee0055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785bc7fd-c9cc-493f-8a54-2dd25dd9f46b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c55c3c-905e-4752-936d-f35422ea3292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa23ef73-7ba4-45fa-89b1-61265ca9638d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07b4563-9454-484a-b88b-6efcde5a4af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55a373e0-5988-43cf-bcb9-481224eac26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883aac56-456a-4cb3-aeef-90ce21cb51bd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceaf5818-baa4-456f-8271-8750eeb53814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebc213d-6e5e-4714-82ec-c48a8133e0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acda410a-201c-4b0a-bc7e-7eb34feee2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d01177c-62e1-4ef2-aa61-249b8d24fead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6400e348-d06b-478b-a324-e2287e7b3b72",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f33468b-32f5-483f-895c-ea2d0e6c9ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493dbcf6-ee71-443d-9063-b34fc4bb62a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58291a27-5d8f-45a7-aa65-363a7ce19a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "128cd0a1-3e55-4b7b-8da7-6ea58ad9efca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427dd9a8-0773-4fd3-a725-51683eb02c72",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ab06e1-214c-4882-92eb-1d3d18a70630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629ffa0d-c2c0-4ccc-9241-c9021513e973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0455a069-e1bd-4d0c-95a7-08646400ab1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "644fd027-752e-4e9e-ae25-bac08f974d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8ba1f7-327e-49b8-98c6-1567778c235f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f40e8e-92a9-4396-b2aa-90f2f463890f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ad02e5-e2fa-4c83-8567-3d523bdb5c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a66fe6-55a7-4f76-9b05-4d7f47488259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0915fb00-4eff-40bb-8140-aa3b88d81b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15d3c07-0992-4777-a7f5-1e6a9d9b779e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a71122-f9b8-48cc-a248-6bb17f9dc258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31dbc10-739e-43c5-9943-cfa745a771fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab98405-611e-4351-a655-34bf7c62c2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c508aec-1356-4d12-84a6-15e525b9a61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e718664-67c0-432f-99d4-417b212a4079",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bd0b89-49a8-4fab-b1ed-5c06db7ae670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ceb9120-ab56-4450-8d5d-9abdc1751540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9b5190-f4c9-4e16-9296-bba7306859ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b85b4680-7702-42ca-a2f0-ad0b3bfd46c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba19ab2c-baa3-44fc-ac29-7fd385a4fd6b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7319ff-493a-40d6-9ec2-4c3711cfd4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452bfb37-c061-401f-b1b0-c1e448b61d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadeeb40-8d0e-4b71-9b8f-b053f044551a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f55871f2-47e0-4dd0-b550-325e7edb3fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc88250-6d2a-457e-96a6-39c73f97d754",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1075f136-74b9-49b8-8697-324af8c760f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4017c8dc-5320-40c9-a98f-aa7a2d8a18c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a223ba7f-e3ce-4942-bcdb-4083077b0a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "903fb6fd-13eb-4252-8e64-78e8736a2f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d8826d-4dc9-44ea-9930-0cb06eba3e6d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94f9b9e-56b9-4084-91d0-a7568f4dd3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6bc3a4-906f-4494-bee5-680612ea5643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236e61fd-a715-4958-b3bf-02427506ea6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3b7791-dc17-4dac-a07f-0ae1d3d6aaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562d2261-5d3d-4247-8e33-d1f0f74da716",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8d6e8b-0256-4379-8e43-0028b4e59aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4ca360-55a0-4d3d-be1d-bff10949e1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c119b13b-feb3-4e2b-8cf5-b1768172b935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "995c6c57-71ba-4fd0-9e30-4ca7f50518dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb24b87a-8c7a-49de-8523-44acdc820beb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e742669b-7805-483b-86ea-272c07f26f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304efc0f-1387-4290-baa6-b89bbf98f18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5b4fb4-3aef-4dd0-a9c5-2c312b2acf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "410e5402-81e4-4b09-8567-d1a2913bd9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c07e90-52d3-427f-b069-7fe0b3c7a5da",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a59f4a1-86f0-4377-8178-6d567d3d676b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4cbeca-f34c-43fb-8bca-dd176d5f1652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a174e7e3-ff98-4514-a95a-2254216ebc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b54c1ca7-2ae4-464f-8479-07a3775adeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1748e5-a301-44b2-b9af-8b0907853eea",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25df4ba5-3f3a-446e-8b99-06762fb02054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2f7e4b-46c6-484d-a14c-c74c29f141c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf463f24-bdf1-4a18-a532-cd6f967d6c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa807030-62a5-4c5f-8ddd-4074d8341ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adb01d2-4ac2-483d-9b9c-9f6c190f4ea4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dd7115-daf5-4ad6-b27c-4a3294387a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de44add8-c67e-45f2-b5f0-c85fc9590ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ad1025-5104-4e33-bc99-681b829de056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf36bbc4-2bc4-465c-829f-b31bd7c1e17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7526a7a-aa2d-4102-94ce-855675995e2a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6707d13-d8bb-405b-95a7-3595bac162c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891a3694-d9bc-4625-b68c-06450c53196d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7135647-88e2-4996-b41b-1fca617a86ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a880d99b-dd5a-4fb8-bc8d-9f6bedcf0a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97b2b2b-ca80-4160-9427-4ba1a6a7760c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85e8576-4e3f-4bc3-a01f-f80e322e5cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854fd5a9-6af8-408b-a5a0-ad177f045e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1470c9a2-3582-4159-8d07-4574d9811a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "30847c55-637f-46ba-a85e-9b9d3d777241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae46565-a9a3-4083-ac03-682827beb216",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059577b4-39e3-4f8a-b205-7c154cb3c4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd87f89-6c09-44c6-82e4-bd12d6491287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bf7554-aa2d-41b5-8737-7fdca29f8d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "998b5b00-9db2-486a-a9ba-74334206f711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf4beee-87ce-46ae-9bfb-0eb3bc9bdf39",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b7e202-032b-4247-a906-62ebb0fc7a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a4e318-b3b2-49ef-982f-5402ccbab992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b44305a-f7f2-4c37-881f-a1023b832a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1294084-e750-4343-91c6-ef366275f96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6533815b-10e4-43b6-942f-2d02776bbfaf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d397852d-15d9-48c2-b8f4-11205e1bc13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83591967-4be3-4d78-8014-11fbf2006464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ce62fe-d1de-471a-bcea-120404940ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "886f7d16-4174-455a-94ac-59240ca2c9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2291e5bb-7ae0-4d3d-b55b-f8679f57d9bb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d919f5-c340-4087-a75a-a205617174dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4b5c7e-890d-41dc-a804-7d517b78d67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c4a255-b1cf-491a-85e0-fcf54c22be92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e612bbd7-82b7-469b-9a22-19873e3ca140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a011f9b-4349-4a8a-97ac-0be4455298c4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0577af8e-35f1-48f5-b4cf-2c89888c8494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cc81ce46-8f5f-4239-a795-e07dfd9855ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139ae20a-99fe-4670-835c-259015f769d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "31e45b08-4300-4719-b1b6-58b0c29d64c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1c483268-8bce-46b2-a002-28b1fd75b32e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0d88b0e-adbf-4b28-b415-64024550974e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c24da6-624e-4e6a-85ad-2a3efd687354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90edc478-0c5d-4445-860f-7e534cd191a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c61e141-c850-4544-bab7-d47cff5da092",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "89d7390d-d210-4a8b-8f3d-d774c17476dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbf8c11-3576-458b-8a22-99d4060712db",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d9db95-c09c-4d09-b03a-1e6003e8882d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "040ab35b-7005-44fc-bc7d-ecb14430fd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46431279-9ba9-4fe2-815d-20ec11aff837",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e2537034-a2bc-4fd1-8786-17463e557915"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65bd3680-bd50-41b3-bf4a-181c2cb3e376",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afafcb72-0ef9-4a9b-9847-c59074d95ca1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7887a30b-52e2-4a48-a8c9-3b32bd6a6440",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4319c2f-940c-4812-8c77-d4c1cf1b5e00"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23dba280-59c5-43b7-9501-7db7135a2167",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f5fa3cd-aef2-4a16-8ba2-cdc72d87a4d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd3886e6-25c1-4669-84f8-2c690584bf56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3857a1bb-df0a-463d-b4e3-df4102e2a2fd"
                }
              }
            ]
          },
          {
            "id": "1b71ee0b-2738-4ae2-8eaf-3f161fda15d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4572a6da-7ed3-4a88-8e2a-0acb9b1181ef",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cf95efb-96dc-4d42-9a41-ed966eb696d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "666d7245-d2d2-49d5-8887-ecb0c9fd607c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bfd1808-5007-48b6-a109-869e4466fff5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0374f676-29c7-432b-bc01-eee6138c22bc"
                    }
                  }
                ]
              },
              {
                "id": "4cce309b-19cb-462f-98f5-950ccd0033bd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20dd0a3c-cabb-4eda-a95a-022dee2c160d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8618f111-61a1-43e4-84f6-09afeada1388"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17350249-9702-4af5-be0d-44d7a308ee29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e8ef448a-2452-4a70-9d44-e9fde1ad416c"
                    }
                  }
                ]
              },
              {
                "id": "630dedfb-79b8-47d5-a10c-0953c0540e16",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab067f97-81bb-4744-8d83-7ae0802daf96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98ef5ec9-4417-49da-9445-898d0523cd1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68b8e33b-e8ff-4e59-aabd-0d5627c444b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9088fc09-867d-4b9a-b3eb-874dbb312687"
                    }
                  }
                ]
              },
              {
                "id": "e6515d63-83d2-4688-b38b-7e1d211874da",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b092db6-5dd7-44af-bf15-ded87e38d2cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8edba755-103e-4594-b4d3-6d6f822f2846"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "609ccaf1-a58c-472e-a22e-8b2b451ff5d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f3ced2d0-e1d5-4abc-a884-9bbfaf84dddf"
                    }
                  }
                ]
              },
              {
                "id": "734d1c72-2b82-49f9-902c-63c8eee1b72b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4afd4de0-8392-4a59-9ffe-1ccfdb19f287",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d91d473-a768-41c6-a055-b4cf03e867ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9978c49c-8e83-4d38-bed0-cf06d523d228",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd1661fa-780a-4782-a868-e1927b2da091"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7dbfcbd2-7d54-4d31-a1dc-ceda46abbfd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b2788ce-77bb-48cd-8395-856f90234555"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eb48d776-a6d3-40d9-91d9-7585411d9956",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "483bc07b-5fa7-4684-84e4-ebf37878a967"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a54943a9-1af8-4d23-8875-d84b583cd209",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2cdea963-e52a-41c1-9aa0-330d0770465e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d8f23eb-7395-4997-966e-38947ea1ef7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ee9438d-1980-45b4-b8c6-77906ff9f5ae"
            }
          }
        ]
      },
      {
        "id": "cd1774e6-c6d3-4e91-bb11-78dc9481e0d7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cd89210e-5431-407f-a920-a0018e026d1b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c397ebe-d0eb-471a-8fe5-cfb2614fcf56",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bbe02149-f0a9-43c3-bda2-4e737d20de04",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff2041c-024d-4b85-8d69-621f56607ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310f9102-aaef-46a6-b6fe-35edda0020a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242a36bc-6bff-4fe3-a8d3-bc7bcef7113e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34664af-a077-4c26-8ef2-2367e0729267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c014e4cb-9beb-4673-b32b-8b3ac22198c5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6e32a6-4e94-4b8b-b563-85946c11a635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8317d8-67fe-4870-a179-c9b9e7d76b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbaa6c30-cef8-43cf-b948-dda231381bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9972126-26b0-4490-8a03-00fbec45fdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7e2620-6cd6-45c2-b5d6-76c6d1a44500",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d43264-38d1-4ee1-80d6-06a4c57575cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0eea9f0-b967-49db-afd9-68f6a09ad7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab38ae3-11fa-4357-9a80-7bd7af1bbcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99e2aefb-81e0-4b29-a33d-5231abff99ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fbc224-cc00-43ba-877b-45f1d547b0b2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6704dfd0-f40c-4fb2-a731-3aeed612b424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ac9413-52ac-42e0-9341-32700745a8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cda5c5-b05a-4598-8189-77699bee0def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "018c3baf-504c-403e-9fe3-0452e2042eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2928a6-b885-4951-831f-a4bd97670f49",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3904a50c-beed-4e7c-9ac9-7eff67120076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3544ca92-7bfb-416e-967c-745ed67b98d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5df8785-012b-490e-b1f4-04940c462b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95e337a0-d2b3-4145-b6fc-c7d19a6cf8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65c9a9f-ed26-4243-a87d-1464010d4a80",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29038f8-be33-4b43-a2b8-6d70602468bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6a2090-ed06-4448-8b3f-e2f6f9b63b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab820771-dfd8-4762-8fc2-629b567134a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21fa1c14-9cbc-4233-bf2b-0f8bac517b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573b0ae4-77c0-4f6b-ac61-667123d2b9d5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f94044-c56b-4069-b5e1-d54a8004646e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad907ed5-f7c4-439e-a554-ac934c8fbd17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ab7192-ef70-4cfa-a562-4c3853399cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "15834175-0b2c-4be0-b72d-072e47c0b11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d65518-7590-485b-9f1a-ef0243289fad",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f088deae-915c-4cc7-97e1-e23624e7535d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c960c4-c11d-4dcb-a953-422e86fec772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed2eb68-f244-4376-a0a1-f3d1ae5efd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a984c6-b195-44dd-b19f-7cc6114830f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2afd34-6db6-4129-adaf-2f2033947b18",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6da348-b2b3-489d-9143-8b0e695c3f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013ce131-5245-42a0-a0d3-8e7c1467a5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b9aa96-cbd5-4bd2-94bc-79c15b2f7d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4e4e11-cdfa-4b3c-a496-9fab10e5d727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a29c9e-e3bf-4ec5-ad67-8efc6d97db12",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc9750c-cf0f-4aa0-8d67-0f5345e983be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2873b7-81ba-4598-97bf-ba2784f5721a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165e25b3-503b-4153-b288-1622011fecd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d599046-3ad1-4572-be46-0a62de71fc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa422743-a64b-4541-86d9-2d1414e5f185",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1477608-41bc-4d15-a4ec-e866f0a39ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba4328d-9184-492a-aa14-5f731b2591d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d49f77-db5c-4c9f-a6d5-ecdf6927ad03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d04416da-e5be-4f3b-a436-09a03a8b2867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44bfba8-e471-4d3a-b594-1f3b1550d0a5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bdf578-eb88-4d74-b860-693f72dcb169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258008b6-0fc5-4f9b-9025-284eab61b314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed02a72-fdba-4b74-87b9-a3f7a592c210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc26fefd-990b-4f10-a2b0-9aea8ad90724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7014df78-9805-4641-8b4c-8d0ee7b81e54",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974de3cf-6ee7-446f-8c9e-7674b028d0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421f2716-084a-4ea5-a4e4-717f47ccfa2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6039691a-a8dc-4dfa-8e68-973a0e08423f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24efb286-7a85-4826-9992-4dc9000af2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a4eef7-6ab5-4c4c-9c8a-76eb51a504dc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16c4f48-861c-48fc-a2de-3949f10c3faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e149c54-8a2f-4d5f-8f49-798a73d8bf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648b8678-8fc8-4608-88ac-2a295fb96915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d27e0c5-55c7-4f5d-9ad6-db21196c8cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df543384-755e-4dcb-bee0-053970c62dd9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0525b245-b4ff-42eb-8fdf-027fe6b32d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f50c419-ec41-44e2-a042-513c671b2dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008de562-4263-44fb-85aa-7ede12c0c67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aae4985-4321-471e-8627-55ec02a13ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cbe37e-52e6-40bf-b9ba-3ec2eab13912",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c77fcb-6844-4f62-819b-e368bf2d47cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fc63fc-181b-4344-b37c-0f208b006d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef99f5c-be3b-46cd-ba2d-5dd8b999e275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1f6860-187f-482b-aecd-86b03446e7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acb3365-9840-435b-bdfd-b0275c9358c5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7084e7d-ad92-4d3b-9696-f349e892afa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f349a3-3ff9-4553-af29-6f041a21b1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9525953d-9d89-4233-a595-0b26424b52f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d1df38-2292-40b7-81fe-984b93cf81d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cbeffe-9f86-4b67-bffd-f7dc762335d3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74becc6e-377c-4440-8982-f08792528a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc711a69-8d8b-4adf-b7e0-e740ab18eaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a83f2a-e8bf-4aa2-9b0c-7bd269f940fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e76feb7b-ad27-4dda-a0ca-c912fb95643c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75715d84-d031-4fba-98f6-43c516efe965",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87aaa5d-65b6-4a25-a38f-ae9d65e5a7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad74e022-b26f-4c5a-a6d0-c5b1b9173a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad94725-53fa-44b1-bf3b-c174344d2c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "822f218d-63cb-4744-bf47-3ef251ba622c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d28a91a-317d-4ac0-8aaf-9e86bcb5f6ff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ff684e-c156-4c65-a8ca-f18154ef0422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e533c5-776c-443e-b455-bd9c2d4cbdb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa526d58-eee0-43c5-89ee-7005dde307c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "755fdfa6-3d3a-470b-bf4b-502322de958c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b4546d-abbd-495f-ac88-a392f52cd04f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9cb042-5941-4d01-8b63-1a6100d717ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e0c3239-d776-4356-89d2-f6adface1619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abeee11-a0fb-48c4-81f0-970b7d8f497c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01ada9d5-af8f-435e-a33c-683fa9cd3e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babf5774-5d57-4136-ba8a-fb8e98ebb945",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90ef377-6c86-4f29-a1e1-1e646b28fcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93fc97bb-42c6-4d4a-b605-6e71e8b4205d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a722f5-2edd-4158-a9a2-91759a2f6490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b24b1f1-09d8-4b3f-b91c-ccf78c99dd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a1970d-356a-4e8f-934a-7303382153c0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2030202-6147-4872-b2d9-eaf7816e9d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fea61f1-73cb-4c0d-9eb4-28c82ff75fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455e9cb1-cbfe-4fed-9ef0-ea0cc16b0708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3d42a4-355c-4c9b-8c75-bf5ba179f91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab548aea-300f-4198-917d-b26a98c44553",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c221efc-1da5-473e-8fcd-bea9c1c3cba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdb9e7d-e4ee-4e74-aec6-8ad377197087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc59613-d47f-4b79-99c6-eefdc6a4a0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a17137c5-a18c-44ae-b644-8553285889cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27311efa-b876-40fb-aa52-c9c8757ca197",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7407a406-7779-463c-8491-be29fa1daeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c1c188-f789-4046-af3f-7cdafeb89496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d955fe07-9761-4949-97f9-3ab8fcc4f35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "288b51de-1c9e-4cb3-9681-a689e2c901d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb9cd80-3fec-4da6-a358-ee56917ed770",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcce573f-3e52-4844-8889-76663fb307cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65afbc15-b221-4965-a846-759c6192e200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec722495-66e1-412b-b10b-954343d3fad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b893dd-5996-46c5-9a24-c3197fe0610f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af35663b-6706-41b5-b0dc-382d00fecbf5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac0c971-a953-4315-b964-97abbf2d3a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4404f9f-5eed-4cad-acdd-d0df84a28e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8772f86-d1b1-4c05-bc79-1b352bf1a745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4e1513-7295-487b-9c5f-8d3d29eac80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcda4ed-5e07-4b53-afa5-909b29cb0b2e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df50166e-5d39-49cd-834e-bb1f6085e30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609bce76-3275-4ffe-9cc7-bc750e2fa02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb03fa1-d84b-412a-a6f9-2e41d3a44bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eef3425-ad4e-4dc0-8fbf-e6943aad1645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab72206-106d-4e8e-a3aa-e500eeb031fb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7d6af8-b438-4de2-9875-3ebbeb30cffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aeb71c3-245a-4e90-a301-bcf05aaeb36c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10547d06-76f1-4916-8472-ef639c7c6e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d82186-851c-4b0b-a426-7ffe78603cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c1d238-f2d9-4c85-b896-484d55b7cc47",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a958382-f997-4575-b147-ed8b5d53eb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95024725-44f2-4285-bf26-c9ba68accd41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf38693-c2b8-4933-b2f7-9cb48a53ea73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08b90f80-2e74-4df0-b6f2-57060dafa5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c97aca-33e7-45a7-b734-8580158df33d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2e879c-986b-4145-8adf-66974210b357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417e48a3-74ea-4c49-8632-2c5d73e98972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a42f52e-452b-4699-931e-5e44676be231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "551ce50b-700f-4eec-95a1-c38809291823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49410d9e-19bb-4300-a3a1-e850968caa47",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab98ef0-e1ee-4479-b316-5730283aca3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77f5a36-d6c8-4d4c-b87c-5995e858da52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a519a5fe-b5e6-464b-b92c-988bd49166e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6485773-2898-455b-80ae-839f886ddd50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b841e39f-8844-4e54-8d04-5f24f1bd51a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a80c961-6bcd-413d-85f0-565a6092ed34",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff273db-9662-4700-bf59-9169b6dfdac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb263c3-6bdf-43b4-b0c3-8dc85bfa44cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804b6f90-b319-4093-8305-b9f31f76b202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "769371f2-cb42-4f21-ad1d-436c5cd4a869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ccded5-db86-4bba-97e7-a81724b6c796",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feced76-0c97-4300-bad0-17732aaac757",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3d5ddddd-c916-4ab3-9c5f-b2612bfe586c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31efec25-02ac-4e75-b436-78e22d918ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43164a30-094b-499f-a93a-9498e581025c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac3d2fa8-2d36-4ea0-aef4-686abab31def",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddcd7905-023b-447d-8a85-0bbe630620fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f84ce4d-aae9-41ba-9323-40975897fecf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32550273-7b68-47aa-841e-7a8b3adba559"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d6f395e-0ab8-42ca-805f-70fb54938c71",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "74d7f569-1daf-45d8-afca-4b2e2cbb20c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e9b1fc1-480c-4fd3-af68-4517130b2d96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cff454a3-55ea-40a8-b879-7e9113825ad5"
            }
          }
        ]
      },
      {
        "id": "308f8672-9809-40cd-92c1-48220ab53889",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "79fbe8ac-2161-47d0-85e5-e5b0ec155c3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "108992cf-5020-4d20-865b-9577545b5fbb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f7558571-590a-49fd-9d56-50143aa4325e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b35015a-2ead-42b5-a131-06c63b4f8ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3567d97-9a56-4605-9b7e-d9e40a540fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136f626e-7650-4e6f-bd1e-ac1c33c41e48",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118df5bf-265f-4020-ab95-eca581ec16f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64247d6-dfef-4689-8c7e-9cd13fd837ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f4b7ea-c3ab-4e6e-b2d8-51842623c792",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82765084-5000-4fad-bb2d-6fbc5c4b9550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6a5b24-8d76-4bf3-ad64-f8a66f46db3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d46049-da1f-4b46-9f79-9b626928fda6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3605e7f8-610b-4939-b4f3-27691a265267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0fd6dec-f5d6-404d-8f70-6f76c21193c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb63fe24-69a1-45fa-b5c8-bd60981648bc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbe8489-cc0c-4f42-857c-1c280d534617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d940ce71-b4dd-49aa-8191-d9820c9ef862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b81b1d3-e9b4-45cf-9a3c-25657530fe8d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b348149f-7956-4f40-8b45-b59431f55c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737cf526-efe0-4bcb-95dd-185bc34e892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfbffb6-e244-421f-a873-80b163151b09",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53638f7a-c50e-4bd6-9936-a9499a1cc04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2fd593-ddc9-4b51-9606-27232bc4808a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b95a46-a178-4056-b3c2-4ad9b2f9dc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a62c2ff-5c85-4da0-a316-4c9795eb46b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cdccca-1577-49f7-9696-0089a5f2d141",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e589ab-87dc-44f1-a841-386941319afd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e83aaed6-290a-4716-827a-d411955fd3c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ce63a2-bb12-4161-90b3-21e0041efd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332eef94-8e86-4943-94bd-3fb497d56916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4d3249-ebfc-4ef7-8ff9-9bfc414f041c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b8b30b-00f6-4e0b-8261-2506b99189b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f25d698-08bc-4a9c-a823-c611f45e717f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de861874-1498-472f-9726-94674bafad69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce20f8d-9152-4b63-b069-3082e2747770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67be399-4a68-4ff1-96ed-aff1781b6bed",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cace50-1177-4f38-bfb3-0fd1a0ab8b24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed752701-d57e-435d-a50d-4ed62fe8d54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6f81d8-5a50-43e9-bc60-0d2703106a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2d0bdc-d3d7-4929-9674-fb3b2844d3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d1ce45-7125-4370-b728-ae9a069465d0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3fba5a-309a-4c07-9023-7b41d6adde7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eadba16-a0ca-4385-8949-f54290ef4cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9731713b-a05e-4158-baf9-8f9addb2fab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0deda1-6d47-41ef-8cd8-6eca68e5d1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4c5307-9216-42a7-8ca9-c588492fa706",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84fc999-80c3-4be3-8d43-69d71a97fe65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5868fc41-fdb3-4778-8a31-90654ae33cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc07476-16aa-4d1e-be0b-68bf8f74f0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6013ddf-319f-4747-b04d-04a31980a45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4695803a-ddb9-4397-9c49-585ac73981b4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765db7db-a8f3-40a2-87af-652e88a40e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1fa540b-ea22-4b21-8486-b4ddb48c312c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2949f2a-c290-4466-8d67-f8185c052bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a5d616-78fb-47e4-8abe-46d447ba4503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07a9638-956d-41c1-8d19-8607f0f3df1c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e45ff4-a43b-4b02-b689-00eb70e4a632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "976f8574-dcf1-4075-906a-15e178a8aa87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08944023-35ec-4ad7-bc35-f9d399598e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98330ba-7b2c-45a4-8795-6cba87345e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c96b5e9-1a08-4bf2-98b5-976a7a4d64ed",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c72347-43e6-48b0-8ecb-8fa35899874e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f911721-6db7-4727-abe3-2feb8475321b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed07030-4732-4081-813a-6ac802341c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192b0758-1821-42e0-89e3-af6f0103426a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a990482-2fbf-4f37-a13e-2f3f473182bf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed5d2b5-b69e-4f29-8c9a-9ba0fe7e1869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c16856b7-4059-4135-9241-278ab7a9e39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab2e129-4be1-4953-bf8e-d454b6c9ac40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc65ceb-12d0-4126-af16-5a447f871eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f9d5cb-996c-4110-b839-4870c554a02c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403f7c51-21f7-4a3d-86d5-36afc30ab8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db34f95-5a1c-4c1f-afdc-bf815da7dd48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d007010c-3caa-407f-984c-2671f16167f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ea391e-fd99-44ed-9ae9-6e7d050a78c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2990918-6d04-4b68-a595-574356db42c3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324ddd9e-c49c-489c-b442-2ab6394ec9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75310287-dbe1-47c1-81bd-ff6720439a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a702a0-23f1-4481-9983-7993b06eb686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dfb985-71b9-4dae-8182-125d9397d67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bd2685-f47c-464f-b3ca-e39c5075849d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4226317-faeb-41d2-aec3-f13ca790424c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7012245c-4232-47ae-8449-53846e3d712f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b1035f-c64f-4f99-b263-740994a8ebf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7268273b-0c44-47d7-a425-f23385f24fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a73a5a-b5f2-474e-9b20-738cbce61709",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a2070c-03fc-4156-9268-6b6a1d453b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e94735-6832-4d96-a067-d11afcbdafa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc66b337-0989-4f62-a151-af9a98e18b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904d38d0-44c3-40fe-aab3-a7c6196a436c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3cf60f-3877-413d-865b-407709c12f03",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b20efa-b2ce-4721-ad22-575e4a7e7e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641a4ab0-7c8c-411f-a746-222d86dda851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3574ef99-bddd-475a-8fc3-a95dddc698c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5403aea5-2efa-4dab-bd0b-a82b9e0a02a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8ff8da-6ccd-4422-aa02-60a74e83a574",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c690b2-14c9-4243-a6e2-db067080f010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e002dfc1-803b-41c5-8d84-4a42d46b17d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f213d02-2b4b-4395-9136-da6574d7266f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce31752-4029-481e-9352-54c9b1aed13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357430d7-734b-40e2-ab4d-dd82f1ef0310",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef38cfab-1d33-4634-aaff-089b5816e43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8065dd-e2a0-484f-ab73-8bacbfa8544a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe3d4d3-5a79-470b-b5ce-22bbe71b7c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9438b16b-dae4-41fd-b121-94b8629f66f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbf080e-4870-4d03-aec9-6398f5feaf1f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a016ad75-b0f4-4aa7-bcf6-374bce2d643e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13dc1427-4833-4e51-81a5-62baeb4e11fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c58f689-0788-470d-ac5a-705f4d1ef952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d467a62-98eb-4b5c-8c82-167a8eb636b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c83602-79a5-46b5-9101-cee926c6f72b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2edab62-dd34-4471-9da0-a010c1d96614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b977506-b62c-4122-86b4-d4511af381f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e220925-c24b-4257-9b18-c93a6704930f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145a8c32-9a3c-41de-932e-5cab5c2b1b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad8a3c9-d31f-4700-b79a-5f8b6ad5ae7f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769592b0-7e20-47a4-bab9-aaf548e1bb8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e0571f3-20d1-4273-94f7-1c637be79297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f907e25e-9c92-4c02-b8e9-03c039bd39a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fd118f-7f30-4af1-bc7f-6264e13a09b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e6394a-8f02-4484-9d44-faa1dfd26146",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c15c3d6-f946-4ca9-8fc8-d650889394c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f84756cf-5e02-43d5-affe-f2a3f946bfe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a217207b-bcf2-4062-bfab-436521524b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0aa986a-9ad5-45f6-9700-eeb25d5fd7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fc47e0-a663-4562-952f-238c9da9ef9d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3ec8a1-58a6-474a-bc47-036554364290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660a8c55-9e7d-41a8-aea9-f7074c851cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c799fa-501f-4f0f-8b9d-cc30b146a926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b30889-99c5-4911-ad34-d6b9a3ddfb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4891f9-d2a0-43d7-8e90-84c9704ea1e9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0832b64-b136-4f6f-856a-cf290ec3a1b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f7aa14-7572-41ff-bd0b-988cc1e10978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dd509c-f2c2-438b-9313-cb88dd7fccaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96f824b-20f8-4ced-a03e-40c707b7b5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23be745f-424e-4f23-a4c6-ac282aa848b8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb50d190-560e-490e-a40b-6107f82987e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a0d6ce-b8a4-4c43-8618-5221371a181e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f987ecb-3f04-4cf4-b32a-ec449d9bca7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621d0a59-4cb1-44ba-b8f5-93c33f4f3330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e8f6e5-382c-4396-bb14-045002e1a75d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1893a0-3153-4b02-8855-4c75b7c7d5a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36a4d355-992d-408c-9f60-3e8ab8cd8651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1de246-9f1b-4f5d-ae02-254b55c90842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f112f98-32a2-49f3-9c76-e76a0891a4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3014f2-cfcf-4879-8f4f-e2c43b2fbe67",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9d724a-06f9-4a9b-811c-b2ed755de85a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45f51a6-43f2-475b-b1e7-7a1d9c340e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a3195c-cd79-4f60-981b-2c8f9e663b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be8f458-c2c6-4607-aa75-d84401126dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297d8a44-f668-4db3-a7b2-6bdde4cf3f7e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3176cf35-f4e4-4a07-9703-13b0260e240a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f229152e-8595-4992-9ebc-d1a54be4052d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6d1fa3-6b3a-41a0-a1eb-c5f2569a3e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9796538-5260-4b77-af7f-0c5aee2835ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd056c30-9a82-4582-b326-602ecf4620d8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97ee66b-187e-47da-9ec3-05f85ebd0934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cabd634-6605-4f4d-938a-38479f8ad4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe091357-544a-403c-a4e1-e198aaf3cc0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae05fa4-1a0a-410c-a4ea-08908d5bc5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220265b4-1916-4d8a-a217-cc921335d5ed",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620a2cc1-d5cb-43b1-af85-0282dc3d578a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de31a9dd-9c36-4692-a8ec-213e0d27940c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed3b5ff-3828-493d-b800-5a47bf75cc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b435623-1ed1-4697-b1fa-751d39de3338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eff4205-3aaf-4954-aa15-cc725304d9d7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c9912d-7b65-42b0-9ab5-250886d70ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c400154b-4ef8-413b-afaa-3039784a4131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37414848-65ae-43f8-a338-89579949a6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e46e25-c30b-48ce-9a52-bb4bdd9717db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b96d4fe-1c0d-433c-b277-04c2ae0da4dd",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b703f502-bc5e-4587-974a-78f138db2705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66319f4-f6de-4f87-b30b-6be8245d6295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce86b41-193e-4f18-9add-4b6f3bbb1956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524d5c04-2760-4b6b-b116-ab71a9c9e656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02165e66-9b37-474a-9333-882433323a4f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7523cc90-00d3-40de-a7c7-db61312ce2b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b293f1-4e76-41cf-8e43-2b59f27875eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdd47df-f8cc-4c71-a30d-bd2898de6f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9580e24f-a96a-463b-9f12-a307f9e07984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d94721-4ea8-4208-b77e-e71e9caccfc4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71f0e0c-2185-4a57-bd1d-454f4b34928d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d085986f-4087-48b5-b2f5-2b4b63b90f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5bd926-455c-4874-85ba-10ca54eaabf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cecc06-65de-4006-9909-ee5a0e07193f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1320d1b6-4a4d-409e-b9e9-e623eeb67acd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594555eb-5459-4d21-a84d-b1d00fae01b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0207f10e-a086-4d2b-9980-76091d73bc86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7518f36c-8a04-4225-ad8f-388b1010875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920a4f52-60fc-4ba7-ac50-a7e458db4918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222782cd-f415-4181-8d5c-ee076acc986a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2fa081-3988-4c1e-84e7-aa3b8856d8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ced617-29d7-4edc-802f-3ca8b69e01b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abc467f-b94a-4fde-87fa-f3bf02ff2c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ef32a6-5414-429a-884c-e762b6752893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06bd537-67cf-472f-8f31-be3a3e5264ea",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25296654-e728-4f24-b0f5-a4f8ab761709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9902d9ee-8872-44df-b752-f21e78443472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aba7113-67bd-4100-b4d6-0eb7c7502595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b6ebc0-6400-4a20-b9c3-fc452e337e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39b4996-10aa-4dd3-b820-6d7bde00d60a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfa3a5e-3875-42ae-86c7-42e4f132bd54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2f822e-d439-415a-93d8-26eac56e41ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bdaa77-eae5-4877-9d91-13d0b9f95a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da75521a-7c0b-4d69-9ceb-0d7045b57ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1cf47d-95e4-4199-8894-615e0f08113b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3a81a4-c896-40e8-ba83-79d572357400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a37257-3a51-4162-a615-e187160975cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cef1d7-af3a-4f22-8b41-dc53e84213b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0f8b02-de29-4d54-a78d-ea40fafac67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fde6437-9ed3-4312-a500-34184c05f98c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0594d31d-c737-4264-b43d-0ec29e6d14d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a41340-9704-47f0-8466-9d3305991d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ace8e6e-5584-4357-a084-6e7f5a1fff4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40cbc09-7a0a-4add-9a77-66d8ce149dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5213f47-7fb1-4799-b547-b8a14d249654",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb83718-ae08-4b6e-8d71-1f6947639cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ca11a6-86b2-46b6-b209-6af28ca00bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bd1799-e42e-4f2d-b22e-39aab9628dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9b4d98-991e-4209-ba36-4be26559aba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d70d88-ff18-4f91-9989-99ce95ea426b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82647e1d-368b-4246-8071-19ea5140a2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1d00a4-427d-40e0-93c2-344989d19813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fffb33e-12bd-46e1-8a1c-b56d174e8bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e431cb-99a5-44e1-a532-dd3d19e74f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcd0a36-77d3-480b-a5d0-73ec98fd9277",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbba734-5424-4837-a58c-9651034caa11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed17bc13-10cd-42c6-9aa3-97c1ce8acfc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a0d6e3-7101-4a57-b0e1-26cddb481127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac79fdac-6eb8-4686-818b-fbc457de4641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a7cdd7-0a9f-44fa-b084-97f46ebed5dc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11e5882-28ac-4933-84c4-0becdb34d2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f43aaf-458f-46fd-95d1-d26cc821632a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2bc90d-758d-4853-bf21-bd61d3763352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98774c4-e400-4a11-a6d0-92f7eb47c481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1739603-30f3-46e8-bb5e-279e5c368e2f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11ad773-f1fe-4a4a-83b4-3d3ba931db51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5804b38f-61bb-4844-a69e-a80b8b93f948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023a8f10-9c25-44c3-9a20-af12ea239034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbbcc59-1687-42ff-be30-216a69daf4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3fb2ae-6ba0-4442-82e5-97ed1b185db4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe41b87-a017-499c-9952-8e7620149983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb538fd1-3066-4d04-b381-74d2787bf4bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1a8628-aa19-420a-b3e9-9318c0b654d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4be593-cd0c-4adc-8778-1128643e102a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa51d1e7-66fd-42b7-94c5-7a80eacddaa5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c713b573-aeab-4400-b6f6-a87a720569d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2784c9-e3d4-40cd-85cd-b8edfa49643b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886cf595-1e42-40d0-a4ce-4896c7a6bc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee10dda5-a211-48c0-bba5-ff6b7e8b69e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bbb429-6a23-4201-a9f4-a43395329d56",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f9cf28-17f1-4e72-938b-d864d3720cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41857247-49f7-4d1e-b57a-849f56723e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136a25b1-a48d-4ad8-87db-2c292a8106e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9a1ce6-3475-472e-a43e-7d60faa8489b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcb7fac-c27b-4770-9887-b8fb5b14309e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ed01d7-8268-448a-9fec-e451120f2142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716024ab-7838-45e5-b39f-1506a7034d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75881384-d0c2-417d-975c-6d5432df01c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4351a6c3-ec56-4e1c-8a49-b243ec2f5d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0febd1a1-9beb-48e2-af28-b062915fa5b8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb09cca-5478-4dca-b018-c5928e49edcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea96186a-a8a9-44cc-804e-976567db76ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e441ac75-b7b5-4272-824b-c9be204281fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530d70f4-15e5-40dd-9144-81d44eb0ba55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12b1b1f-fd7f-4b3c-beb4-b8eb2d94f2f5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34ec360-7f63-4b54-91e7-f22d675fe2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c1b746-d4fe-4f74-b84a-8185b78d74fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05a96e3-8922-48bc-80cc-cb02ed10d6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dddcdc-0db8-4f98-992a-420adf8b4b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd730266-acbf-4f7d-93d0-11c8b0fa4005",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69592933-8c6d-47ff-afac-4889af13a373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71303586-46bc-4c99-a928-648d15df12b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc88cc9-5873-4771-8345-cfb0383a367d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7c4676-54e9-42f6-adaf-4fbd26f6680a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3e143b-efe4-4f2b-872c-3a218d4846da",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b68516-36da-4333-aba4-ffce241ad282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ff3e06-1334-4d3a-9188-7e0ac374e61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2023a9c9-49c3-4c4d-b83a-a6716645dda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292d2f54-0bd5-4191-86ed-365cef8da22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1475074f-d722-44ca-8f52-99049b1d426b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249fe073-b31d-4ed4-bb9b-85c9fe9d03ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02621d1d-91a0-487c-a5f8-6908b8a330ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb140d11-7db7-432c-b973-0f5b40465bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5318506-d618-4e5c-8e90-8d1152257a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac2ce45-63d2-495f-873f-5d415a126ad8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea55b69-b1a1-46e4-aa97-cdfbccd13711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16825bf4-da9f-4104-a700-17d1c4edb430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19559bf-02a5-4b86-8285-68e5502158af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee56511b-ad55-4180-8e66-067ea836b4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179536a2-8512-471d-8f93-f2c1795a9393",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918408bc-08ed-4c82-947c-a64128cc4c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd594f3b-11bf-4c31-bd71-d9c0fd2f388f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d177efc-06fe-45fd-88e1-df41e0a29289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286b2618-e9e2-4668-8b49-6585490dfe93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cca66f-b4ee-4cc0-9d6e-8e9ddad1b8f3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb11c253-42d4-4a8f-8fe2-0dda0928cd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82831445-d163-4d6c-ad24-ae99f59121e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a80d4c3-f0fe-4e5b-b829-c98159bf8873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be9ca7e-49bc-4a43-b809-f2b35ed17377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e00c0ba-0dec-44f1-a589-bb6fbbe7fb74",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e3c0fd-4452-4f18-9cbb-f97f4dda5164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be6886f-f8e5-41ca-8fcf-f77252d33cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9985b09e-55dc-4650-a639-6b7a03416baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4fcefd-501b-43e2-be54-9d310be82195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607b77b8-d8b7-461a-a5a2-489dfa2ffa16",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf0d5e1-fe24-4836-850e-f671b3e81387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5df9dc4b-fd04-44b0-ad79-689e7e073556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9a71ca-2de1-43c1-b21d-2831eac6c2e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fcb1e2-cc9a-48e8-a084-c2dffe4de83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5adb703-278f-4cc9-b9ad-6a1cb89b81a1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fbce03-56d5-4ce1-90d1-75d1986d0aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1caa1f54-4b37-423d-a834-11f3d4b624f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9f0c92-c1f9-4fe1-bc43-853cd76d1dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d611e209-7784-43b6-8db6-27b4eeaaf30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9131d36-af72-4dfe-bf86-6e229db37502",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9fc056-b334-4ac3-98a5-3f598013704e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87c8f9a-0660-43af-8857-786483d8de7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb8a7ae-8050-4870-a6b8-8c9d540bf56d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e58502-0d7a-4a40-a8fc-c161b47a1d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d97694-fd8f-4732-8cd2-957084995ee7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0744fa05-06ec-4977-bbcd-75e3884cfc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "117d2c6a-f008-47fe-b6bb-616749aa5342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5f76a5-c4f1-4552-8ebd-b1ac99be8b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a3027c-87e6-4e87-88b7-057b90e8894d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c96679-035d-4513-aea0-902ab0546373",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52baeef-27c5-4f09-8231-681b3f59b3c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e0665d-6ff9-4512-9ede-7123169fa123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b133cf-3d63-46b8-97f5-633055c1e256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d547bad-a7a0-47a3-a2c0-3fe314c0eb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0398533d-d769-4234-89ac-f69dddd25f28",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb96d64-78b1-4199-b87b-f03832434a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0155619c-baf8-46c1-8fb0-c5bf3740cc08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a3810a-72d7-49fd-8ddb-e8865dfdb87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb875872-3544-4921-a7e9-48d4381370fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f43adb-9e58-4780-98a8-82102cfbee2a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef7aade-5722-417d-b923-c41dacce12ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505c0af7-be25-4f0b-b513-66a965dfe239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e909585b-c52f-4b93-a7d4-4dcb6c9b2a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e07022-2932-4e45-ab00-da7c723226e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c905eb-a110-4fc4-80eb-5ac5b845cdfe",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e620fdf8-1dc2-4364-a9a8-4439462be653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b67d72-701e-4ef5-a484-769656e3b2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2039d6a-7a7c-48c7-bfdc-6c53e600eb9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76eee146-3fd0-4eb0-be42-fd4cfe10a371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5b3ffd-e1a4-4900-9a39-c410d280301b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f527c6-635f-4d87-8aff-dd456a1081c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e82b214-eab6-400e-9761-4838ef173f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bab3467-4d7e-4c97-9fa8-c37367d5c007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763cf78f-3f74-4a45-971b-18303b2cdea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674bf1d1-e0a6-4be0-bc95-e6f4f688cbe3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3de23a-7f65-4bf3-8949-4d118ce26859",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a90fb5-7135-4c69-91ee-e3ecd90cc562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fb5dc8-4090-44b0-b3c9-bde3808d64f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1934202-d00d-4d54-92a4-7597a5029e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67663153-a64c-45d8-b608-a5a6bf7d0918",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6084e3-c62d-49ea-a210-ad56f2d15a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d537df-f8a5-4866-b0bb-e71aafa30a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98353964-1e52-42ed-b50a-251aaa52815d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d114877-3138-4f25-a220-2476ee07837a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2c92b0-ec14-4b66-8faf-20cb540149d9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4779ca40-4cda-48f3-9d41-dfa42e3b7251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c5189b-3ad8-4305-8042-4843d1d4023e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "645f8551-908e-4feb-bb84-8a74a11920be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c417b2c-6a03-45c4-8399-adc332457ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90fe374-30b0-4c31-a5c3-3003ea5dc185",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318567ad-3660-4c06-bf8c-5d15a0028861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e87471-408b-48d4-8d8e-cc8c7d46841e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e69bb2-58ef-49af-941e-ab1495bdc08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ecd925-a17d-4d07-afd0-62b082d5c995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cfd80c-b265-4c4a-8257-333ce6f000e3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcb9e8a-8e70-43fb-af1d-6327851ff103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115eb3e6-b94f-46b9-bfff-f3b645791524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2693d8d8-a574-4988-aa7a-f224ee7ce319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d820f4-c749-4beb-b63f-0368a981b9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a6383b-782a-4529-b331-9754c4e46a41",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42dbd880-6b11-41d7-b7fa-6843f46c2265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182909d1-08b8-47ca-ad62-0b93436fa90b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9af1c3-2635-4e5a-9ad7-a2f49ff6d5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0d735d-b069-494a-8bdd-e5ccf6934989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47972b4-2af7-4d5c-a6be-d348c08ce3f8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526507c2-3ab0-4f67-8c4a-86ec2fbca826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3e0a1d5-66a4-4669-be29-9a83b066f869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69dfd6e-57d7-499f-bbd8-5123624f6498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c508dd8-76d2-4ad0-ba80-2847b81275ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48da67c4-bd99-4fb7-9606-9bad461380d1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9b7598-2e92-4436-b2fd-909bbcda7996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe7dd9f1-b9df-4283-8346-4778c536fb9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc88031-01ed-403e-a7ca-2d6fb5798cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a72e2b-9e03-4052-85b7-e1d4efbc6e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb49010-9946-4333-8f12-d7e069f7e957",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cec5ead-1a5a-48a1-9471-ee71082a95f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4440f8d4-b04e-4251-985e-185cdb427d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7981010-a608-4892-910a-849e5c1fdd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9b05f9-8cb7-4732-8e8c-2a72f5102b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a61b00-0580-49ea-b52c-387e4292ee54",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449411eb-ee89-4944-b7fb-aa96483c2be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "894186b2-9dda-48fb-b221-f7f3ca994656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbd7fee-9bcc-4ab4-a20b-6e868a3867d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffde61e-9a0f-4e0b-b514-ba7f71dba8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae43cb6-c316-4d02-a7db-fd90541da9d7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da215b09-899e-479c-8aaa-d10332bbb18e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdd143a0-f576-4a09-b428-45aa7a0adcc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb35b4d-cd6e-46d9-9a53-0781cab67b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d972b8-db1b-4c3a-84b8-2f7bc35c39a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8faa21-6af9-427e-8d52-e213b6404353",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144eb3f0-65ad-4425-ac52-ceff66c145f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d1b5d2f-65aa-4fd0-9d3d-c3ae1acd0c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b97c0f4-b852-4216-b750-d80f0bbea624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adb9a600-8796-43c7-a59c-b623a91019bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c14a75b-1743-4b32-b42e-03a08d203367",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0635429-bb5b-4f3b-afae-a3ade48dd189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2452c03-63ed-4249-9172-3215f4961262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f0e097-b307-46ba-96dc-f258311dbc93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf755b1f-0994-4ee6-ba68-a733e4ef607f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a9ea4a-bebb-4dbb-b1c7-f8cf822a6878",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23937245-9871-4c59-b15d-48850f8fe5b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec12e51d-656b-41ad-be89-41f3a724e8d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284e95fe-c6d2-4611-8588-75bdffef0183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7640c2-be84-441f-af78-6de38429dcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a364069-9604-45cb-930e-fc0dcda1eacf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4080dcaf-758d-44d0-909d-02c6f96dd2be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b042e2-8cb1-4d42-a9cd-c9db8aa0c3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97db5f69-7f1a-4c2d-a135-80bbb778515e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f5e66b-92ee-4b64-98fe-9f1431a34d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3adede-09d6-475c-8901-cfab1ccdc4f9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38916c94-a3f3-4ad1-b513-76e3bb5e2063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4828fdd-ed9d-4789-9c16-f9e1c83985e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469d1024-6706-4b3f-b13f-d5f0bbe340fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a495c654-a967-4315-b46a-ebf2f689cd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f67c070-3726-469a-a468-ba194f4074d6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792200c0-f79f-4a11-9a54-0e5b950561cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58b0ecc0-5848-41c7-b0dc-72b65c2528bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d486832e-4969-40ec-9943-e15dc17c207c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da1d473-3f0d-4a8d-8c6f-07ce74460975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8abc96-878f-4e2d-b2e3-611d92be23ec",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f381a70f-18ba-4411-a536-2ab6f476c70e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48932eb0-256e-475d-b8e8-0217c1d0cd13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b879b5-cd50-47ad-9fc5-8f3a7f8c4f1e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1842a44-4be0-437d-97b5-c76e8fc7e5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d4beef-f93e-4dd9-b6a6-d1285f0b1e8e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda1f46c-0fd7-4173-9ab0-8faf4b70ffc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76fc2499-31a0-40a3-aa99-b382efc5d6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a2d1ba-2cf7-4c21-be5c-5f7b4ec3e9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b860b644-0246-4eec-b7ae-117940693519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a090ce-0377-41b2-be69-2ec1a1fb7626",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad1405e-60e7-4b7e-9408-2f2a25538b63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0902f32-d2a1-4c96-adad-01ae69ccad8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1044618f-79c2-4c68-8028-454b9fa97f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc18c50f-8e60-4248-b733-cd39eb2dbf74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19cf8f9-87b4-4ff4-b681-496d30d18cf5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367ef443-c2ed-4e35-9f4d-b83dc19cabee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c05136b6-ebad-4636-a299-5d3e0bbd1882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fd9390-9d15-4b8a-9b77-65cec3177b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2002ca0-1a06-4251-889d-088787efebc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36847135-886b-440a-81d8-b5d66412eb60",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa9b6e8-7161-4af1-b61f-5c7e3fe4b2d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9770d6-ade0-4529-8c2b-75a416834b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e383208-8633-4f5b-beda-af8ecb05b523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d24f0e-c573-408c-b2fb-12e0a2341f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf375bf-3df3-42f7-8a27-2f82e588c344",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f453c280-08ab-4026-b992-4739930f23d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df8a9da5-e976-4d31-be81-24008c5ff87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebb0908-f766-41bc-b4b5-94a76d133a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa27fb00-d571-43e8-ba4a-f71519e2df5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8ab4b3-d025-4bf1-bec7-9a803b8ae2d1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d410f979-6887-45aa-8fca-7044079d5fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2c06366-f96b-4fda-8209-8fb245982a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca7925e-8f2a-4a78-a861-991433b5958e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0710a042-5b82-43de-8e5e-0553bcca014b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d3e731-d89b-48b1-b6fb-148582233fc1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6b061b-4f61-4135-a1fb-0a618606e4c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79dcec94-447e-4b80-9329-7aa9d95fbc46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13332829-9a52-47b9-928f-ffcd27079117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4ce7af-f59a-4c0e-8661-21046490ece9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec4d6c59-3d2a-4fb9-ac5d-4e68c1c5ee3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "523e2d55-95ca-44e1-a1c7-f49507bb2137"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e0bbf6f-d9d8-42b2-a917-403e6120eee6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "866d7df9-873f-4b0d-b17b-693d5945bbed"
                    }
                  }
                ]
              },
              {
                "id": "41e1cfc7-8cf2-491f-998b-67b7eb82ea1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a957d3d4-1214-4226-bcb3-7685c3d9bbca",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab813cf3-f37f-488a-b057-e2e2eb0f652d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e81b7bb6-7a38-4a6d-8d10-e4f4d6dca7cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da05188-c29a-4bbc-a98f-26177e09be78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a03d5862-03bd-4933-8801-9eac62827769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83119371-7a30-4e22-9d99-8e0e12d93762",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324ec681-d337-4b50-b1ad-11f194c48db7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8caa740b-87f8-48b6-99e0-9d18c311c343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4698b072-b5e0-4796-b21e-5c3301034a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa90c317-75cf-4294-8483-0a679ed43062"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d12b61e-49a9-418a-b9c6-780b2089d937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c2cb060-030d-4844-b782-cd7e2fe03cbb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c5e9c2b-2bda-48e7-afab-7599c21d3d4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af06c770-36bd-4274-b853-dd5a410a686d"
                    }
                  }
                ]
              },
              {
                "id": "a0c075b7-7a73-461f-a431-bb34cf96c0ed",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8bdbf79e-1c20-469f-bb1d-e0a699908825",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c88d2e-879d-4d61-9376-311632f8e181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3febb767-aced-433a-a048-43ddb2141c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104d5811-af8e-4fb6-a230-98c30683a1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1ab84e-a07e-4f43-9253-42901ae1618b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8c80d86e-c624-46f3-ba3c-2eaba119eece",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fd874131-babd-4e3e-b462-ca57f97fd5c0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c18b69be-5811-46d5-9762-88030608e34d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "edad25d0-49be-4c6b-a68b-2df19062d8a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eafe17dd-562e-4025-a43a-3ade97a15193",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1046ccd-88e4-42d1-870a-ce2597ffec79"
                    }
                  }
                ]
              },
              {
                "id": "6fdc51b9-1991-425a-921e-75e2c700a53a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "905e81d1-712f-47c0-8f45-5a4e721bd00f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7c3ac8d7-0aba-4106-b6e8-7d161759e574"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03ee10c1-adb8-4b05-803e-f29128af94fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeb64e98-1a6d-4299-bec2-a2aa7dd647ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c9a4a40-8ff4-4180-9546-25c3554e147e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "657287af-7bbf-4999-bb49-3327c39ffb98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5a22294-457c-4b43-9fa1-292060449509",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4c6c0ce-203b-4742-a323-8777ec7c3b37"
            }
          }
        ]
      },
      {
        "id": "d26ee2db-a713-4d24-9c26-aa36cf30b22b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4411552c-bcc1-4df3-8b59-a3f1e79114d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0a15234-89bf-4faa-9713-bee114521020",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9bcbe291-630a-4c19-998c-3be3b022f569",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ddfcf0-52e6-4613-8bf9-c2dc96c114b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8da2f2df-1d19-4e5e-880b-3d0951404d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e98d6f4-2269-475c-97e8-e76facfbb139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "866a2581-5fed-49a2-8527-288dd173ad83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6bb211-4b80-448e-ba8a-10855247a373",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3d5d9a-11dc-45d9-b9b9-6765e50207a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f3348338-943f-4fb6-bb79-86cf85514a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e264593-e9f9-4060-bfaa-11b9b20f7ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3326488-69f6-4c66-a57c-bc02e0a7c47b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e21879f-ea79-4503-a42e-df6c43df889b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03b274fb-4c60-43e0-9623-4b55b2a7f63e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "444794c2-cb4a-4fd0-b72d-39ddcaa05484",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fc6ff3f-801f-42a6-beb0-524c7f03649f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b06b624b-94a9-4dc6-9f35-1d58e21dbc6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "aa9feea5-1965-403b-ba66-9b0eedac9c8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb17bb4b-6e40-4d70-b79d-f3848fad9467",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6359ec7-69df-4129-99c2-4118993040b6"
            }
          }
        ]
      },
      {
        "id": "45259379-9ce8-4180-8498-08128be56d18",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0da5ef00-5cfa-46de-9e34-6ad975ae2922",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f020eb9-9c2e-465c-b4af-aefe5e6b0f79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b46faddc-1a71-4451-9733-4c65c02158f5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c5f7c0-162f-41aa-ab39-f60b586de465",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dfe52d68-acf6-4800-b3ac-310c06bb7b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca629dd-80a7-49fd-841a-5a02e625c84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eda20687-0bc5-4e85-b7ff-c7b812f19053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76670f10-1acf-4021-814a-421ef2be36f7",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7d7293-b0e0-4853-89a3-ea97255c7b8d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cd1972b5-ad48-4485-86fa-1a1d5994849d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fe0e4d-7c26-41ef-8b10-716f54b5faaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80d7d023-780a-4cde-8a28-332e2c55e984"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8cf437f-1f83-4708-a775-586f83b7be1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a1b8e11-ad3e-44ab-aa42-c23d8dd1af01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c34fde25-1f80-4da8-aac3-ac3b9dd65e77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aac4b2bc-83d7-4b39-a78f-765fc8fcc682"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a73e3437-d6a6-405c-ae35-65327748f24b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d6018962-e434-435c-be90-163abec8715c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96bd3cb5-46d1-4564-ab2d-c36899a530db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb76bfe1-300e-4448-8b07-8b3eb52b65b7"
            }
          }
        ]
      },
      {
        "id": "56e19686-e38e-4676-8be7-93b18ba34b85",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ed43f93c-c581-44c0-909d-70b093795122",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae817da7-dfaa-43cb-8c09-b9a7c98cdbf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c18b7785-e273-4f10-98b4-1cb7cbf6645c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83032cb-56e6-476c-a1b7-3147f76f362d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1bd06ff7-8db1-4dbf-ad38-8b1cf7b7823e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22b004f-5966-4085-aa7c-9129b04cd692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f17bd41-cc5b-4c5a-9a83-5af55eb7b2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a68094-2e5b-4c01-8ae8-e2e24cd5e56b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa4db24-ac05-4b1a-af0f-eac2791ab11e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "137907ea-c524-416a-83cf-efd4affc1458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b5d258-fed2-4d05-b2c4-047efdd7cb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd13d6c8-2e94-4fab-9445-745d3d84c2dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4d22d54-cc6b-4501-8b37-4135a64087bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "008e3ddd-4208-40c1-bb3d-c160cc206a54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d02c59f8-b16a-4e29-b7e1-71673138393b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4a56378-cb3d-4f5d-ac35-bb94f1a8e64e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0082d67b-4517-4879-ad57-17bbc06c836a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2ea2d91c-525a-494e-ac04-e051704c496c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07841e16-376c-4612-9f1a-5cbe0838d29a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56f8affe-c42c-4476-b1a9-742039cd4b68"
            }
          }
        ]
      },
      {
        "id": "d3154386-97dc-411e-ad66-056256efed8f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b65ed73-81da-4e85-84a0-9286ac8941a4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f344e65-cdd7-4dbf-b49c-0bf73d123edf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "94024c73-2558-4af0-bcb1-fc4f0f217055",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94d642a4-ec27-46a0-8bc5-2d6f580deba0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c574f16-4b43-478e-934f-81559b734169",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 13.223938223938221,
      "responseMin": 3,
      "responseMax": 390,
      "responseSd": 42.78161350379926,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677026285459,
      "completed": 1677026299491
    },
    "executions": [
      {
        "id": "d18c62b8-d8f2-45d4-b4b2-cd47a22933eb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cebf0114-3717-4b8b-867b-190cce7b560e",
          "httpRequestId": "3f20d89d-08ab-4301-a185-eb2ba3804254"
        },
        "item": {
          "id": "d18c62b8-d8f2-45d4-b4b2-cd47a22933eb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2cf2c392-d2f8-46a5-bdb1-6e26d48d0ad7",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "ac8cbab0-ba6c-4563-8899-5bc325d65aba",
        "cursor": {
          "ref": "88165748-93ad-4713-a52f-b0fb334d5cb0",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "086b71e9-8a47-4372-8225-6a3019838875"
        },
        "item": {
          "id": "ac8cbab0-ba6c-4563-8899-5bc325d65aba",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c0d1292c-fd48-4d90-8d84-9af060733f3b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "95622119-2178-41ad-bc56-a042c3edb84e",
        "cursor": {
          "ref": "3e613bae-2237-4758-92fd-a4e889929f19",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f77fae41-3ede-4436-95d9-a5f547799f7a"
        },
        "item": {
          "id": "95622119-2178-41ad-bc56-a042c3edb84e",
          "name": "did_json"
        },
        "response": {
          "id": "cc12c257-2033-47b7-aa88-984fe9b5a5ad",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7599a86b-fac1-47b4-bdce-cddb255c0788",
        "cursor": {
          "ref": "0fc968ad-c4dc-488c-b151-0c2528b97837",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e05c982-d796-43f9-b0cb-c49e0f449f1e"
        },
        "item": {
          "id": "7599a86b-fac1-47b4-bdce-cddb255c0788",
          "name": "did:invalid"
        },
        "response": {
          "id": "7c42838f-d7b9-4f76-87cb-bc7d76af60cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7599a86b-fac1-47b4-bdce-cddb255c0788",
        "cursor": {
          "ref": "0fc968ad-c4dc-488c-b151-0c2528b97837",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e05c982-d796-43f9-b0cb-c49e0f449f1e"
        },
        "item": {
          "id": "7599a86b-fac1-47b4-bdce-cddb255c0788",
          "name": "did:invalid"
        },
        "response": {
          "id": "7c42838f-d7b9-4f76-87cb-bc7d76af60cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fc878312-4bfa-404e-97bf-53f30caa9765",
        "cursor": {
          "ref": "211ab5e4-84ad-4f76-bbb9-fe0a98188bd3",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "47760c5a-6b42-4f17-9728-00c779610e7b"
        },
        "item": {
          "id": "fc878312-4bfa-404e-97bf-53f30caa9765",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1a8f7178-1043-45c1-b5ac-0b4557d216f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6774fe2c-c435-455a-afc7-8e4e204d306b",
        "cursor": {
          "ref": "6939c7ae-d8f4-461b-98a9-dd279cc61f5d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "20eae960-c28a-4bbb-a37a-d6b23b2bbad2"
        },
        "item": {
          "id": "6774fe2c-c435-455a-afc7-8e4e204d306b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7546a531-d066-4c69-8f7c-c6db5122ced0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebd2659-336b-46f1-8cdb-b47611d0708b",
        "cursor": {
          "ref": "7375ce4e-e58e-45b0-8757-3e16b11edb81",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a1a62a8b-47aa-4f6f-a8b6-d821dd2d1f89"
        },
        "item": {
          "id": "1ebd2659-336b-46f1-8cdb-b47611d0708b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "66a4e7f1-20d0-4610-9433-242b187d097b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ceaf75-8048-4a73-b8de-29b40997c98f",
        "cursor": {
          "ref": "d0afaefd-c3ee-4485-bbd7-b837baf19ae2",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2a56333f-5645-472b-8132-fb5954697ada"
        },
        "item": {
          "id": "11ceaf75-8048-4a73-b8de-29b40997c98f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4d4c942a-38e9-4637-95dd-493ab244200f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ceaf75-8048-4a73-b8de-29b40997c98f",
        "cursor": {
          "ref": "d0afaefd-c3ee-4485-bbd7-b837baf19ae2",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2a56333f-5645-472b-8132-fb5954697ada"
        },
        "item": {
          "id": "11ceaf75-8048-4a73-b8de-29b40997c98f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4d4c942a-38e9-4637-95dd-493ab244200f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c518926-fc88-4253-a99b-fde65006e8aa",
        "cursor": {
          "ref": "d3184cd2-ea32-455c-a5ca-77b20c762411",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "50daa1b5-e235-4dc5-9cd0-317738cf817c"
        },
        "item": {
          "id": "7c518926-fc88-4253-a99b-fde65006e8aa",
          "name": "identifiers"
        },
        "response": {
          "id": "fc84fd2c-c9f1-4ff2-b49e-0e42e5e48f1a",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d2e028-5b29-4439-b49d-eadab0dff9ee",
        "cursor": {
          "ref": "3efd1a9c-73ef-4656-ab44-b0a2d6626237",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a4996922-1726-48d5-857b-7cfddc62e69e"
        },
        "item": {
          "id": "97d2e028-5b29-4439-b49d-eadab0dff9ee",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c1f376fd-081b-4c32-bf34-3f9b9501d637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d2e028-5b29-4439-b49d-eadab0dff9ee",
        "cursor": {
          "ref": "3efd1a9c-73ef-4656-ab44-b0a2d6626237",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a4996922-1726-48d5-857b-7cfddc62e69e"
        },
        "item": {
          "id": "97d2e028-5b29-4439-b49d-eadab0dff9ee",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c1f376fd-081b-4c32-bf34-3f9b9501d637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a0403d-58e0-4af2-a97e-5161e83f61d1",
        "cursor": {
          "ref": "cee420be-1b8c-4f98-aa6b-bf864a640cec",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da25bca2-385a-459b-869b-49df871b697c"
        },
        "item": {
          "id": "63a0403d-58e0-4af2-a97e-5161e83f61d1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "869ea6b1-386c-4829-bbab-6804afe0c328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623b324d-3082-4b9e-9708-04b8df9ad8c8",
        "cursor": {
          "ref": "32515949-dd14-4fea-a055-027b3c64437c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "400b22eb-1061-43bb-95a0-b1c9ec2354ef"
        },
        "item": {
          "id": "623b324d-3082-4b9e-9708-04b8df9ad8c8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b9f7053a-3e5d-4b7c-a72a-8a912bad770b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca80ea5-fdde-42ce-9a9e-d7e08762fed1",
        "cursor": {
          "ref": "4e09ab66-3c99-4064-9916-140a76647dcb",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "736a8244-f3f6-4d87-a0af-15ef8a889ee2"
        },
        "item": {
          "id": "4ca80ea5-fdde-42ce-9a9e-d7e08762fed1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "aac65ad6-a171-4bc6-b73c-2c541180eb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b613dc-3ad0-4abd-a754-de372bc4ec73",
        "cursor": {
          "ref": "74fa3271-5394-417a-8f99-316237f8203e",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "03bd4f64-d4be-4c19-95ea-bbf0ba1d215c"
        },
        "item": {
          "id": "33b613dc-3ad0-4abd-a754-de372bc4ec73",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b6daba34-fa5c-46eb-868e-719d6b330ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f4187f-5797-4134-bec3-69c171701ecb",
        "cursor": {
          "ref": "f6b0e766-641b-49fe-9b8e-41b934fd1e1f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "01aef7f8-6cdf-4923-b693-d4cfb2ffd4bd"
        },
        "item": {
          "id": "96f4187f-5797-4134-bec3-69c171701ecb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4f45a095-038c-4499-b529-8bb072199e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63829e90-2fe1-4f50-a299-730deab27569",
        "cursor": {
          "ref": "d272fbe3-be51-4674-ae46-0bad3ff6b038",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "78cd58b0-d8e5-413a-98db-580eeea8f0a7"
        },
        "item": {
          "id": "63829e90-2fe1-4f50-a299-730deab27569",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1af75c4c-9908-453d-9a73-5f74582f5341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed89235-e1e4-48dd-870d-4987675d9e7a",
        "cursor": {
          "ref": "ec8232ff-b926-4ed4-904e-8270aa914644",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4f42f079-02d1-48e7-ae34-f32dc24cef14"
        },
        "item": {
          "id": "0ed89235-e1e4-48dd-870d-4987675d9e7a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "32f2360b-1d52-49e8-bccd-c97c541e6726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fd1c02-9197-4b70-ba14-c3dd0e27faf8",
        "cursor": {
          "ref": "76c15466-eda4-44e6-b695-54af075dcb37",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0033b572-f022-4f0a-8893-3a3569a065f2"
        },
        "item": {
          "id": "d0fd1c02-9197-4b70-ba14-c3dd0e27faf8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "aa7d76ed-8aae-46ad-8357-ce108ddeaf9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462fa86c-ec08-46ba-a9a1-d7e69118e1d1",
        "cursor": {
          "ref": "771c112c-bcf8-46fe-ac57-2f5bb3c6b959",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "994204c4-96cc-4763-b290-ed0e6e479fd0"
        },
        "item": {
          "id": "462fa86c-ec08-46ba-a9a1-d7e69118e1d1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b36064c3-3aa1-4c38-bf43-5636afaddec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49fa687-2f5b-4d78-bffa-c44b2a1e3279",
        "cursor": {
          "ref": "f3525df6-e80d-4019-917c-208ab643a7b8",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b08eb3b0-1436-424e-81a1-a40168b1328f"
        },
        "item": {
          "id": "d49fa687-2f5b-4d78-bffa-c44b2a1e3279",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "74bc9663-a886-4395-a024-e554641c7482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2173998c-475f-4772-a9a7-c66fc6e7f317",
        "cursor": {
          "ref": "c47c13f0-b985-4574-9e08-2883e7eb68ab",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0e1ddded-c672-4df3-8b3e-0b4cb3e00273"
        },
        "item": {
          "id": "2173998c-475f-4772-a9a7-c66fc6e7f317",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f4d05cd3-8669-4f27-967a-996c7f5a59cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a104b30b-7598-4c53-ab7e-3443fbc63f36",
        "cursor": {
          "ref": "71ec733d-9b66-4166-b416-8b4935ec0ba3",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6edc031c-afd9-4c50-9361-d64e1911ac66"
        },
        "item": {
          "id": "a104b30b-7598-4c53-ab7e-3443fbc63f36",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d5a14565-3bfd-4a70-9b34-999f86c1ff9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03254b2c-4d50-45a2-92f3-649fd3a665f5",
        "cursor": {
          "ref": "5f1bdd63-0ed1-4dcb-ad26-b905d46aaf67",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "54701b50-f267-4ae3-83c4-30f2d858d623"
        },
        "item": {
          "id": "03254b2c-4d50-45a2-92f3-649fd3a665f5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "38ddebf8-1eef-4ba3-b9d2-f3ddd2906388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e7fea9-8e31-454a-a487-b623fadefecf",
        "cursor": {
          "ref": "f31ea9c2-d9f4-4c6a-b0d9-2d06479084a5",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "925cc317-07bd-4ded-a404-bb0f73a3a15d"
        },
        "item": {
          "id": "f8e7fea9-8e31-454a-a487-b623fadefecf",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e1cc12b6-51a7-4f4d-8aa5-8414095d2717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6129f5b9-784c-4be6-9c1d-aac9a3816aea",
        "cursor": {
          "ref": "5499107e-5193-4861-80d4-5486a4856581",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a9a51f3c-fa6d-4587-8118-0ed1a81b7b6c"
        },
        "item": {
          "id": "6129f5b9-784c-4be6-9c1d-aac9a3816aea",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5d98e6c1-82d7-4138-bb60-93820b37a4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56331340-3444-49d8-8822-b2f390fea4f3",
        "cursor": {
          "ref": "d141ef98-ae59-401d-a56f-0f9498b59928",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1300d0f6-8513-4ead-a013-c50f1d2a39f3"
        },
        "item": {
          "id": "56331340-3444-49d8-8822-b2f390fea4f3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d7ba517e-a1e3-4449-99cd-44cf848f865c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd294bc5-1309-42e4-8a33-a1a2418ad68f",
        "cursor": {
          "ref": "3de073f3-17d2-4500-91cf-d1107fca0ad9",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ed455e3a-5e30-413c-ad3e-c757e2c82f53"
        },
        "item": {
          "id": "fd294bc5-1309-42e4-8a33-a1a2418ad68f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a583dbc5-ddac-411a-a5f0-babdab016dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab6de90-6ecd-47e5-9342-0d5f55a1da03",
        "cursor": {
          "ref": "4151751e-d317-4dfa-8c40-8f9d6898e016",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e54ea370-061e-4593-b1cf-5fdc4cc98b64"
        },
        "item": {
          "id": "8ab6de90-6ecd-47e5-9342-0d5f55a1da03",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d4bc4032-f06f-4edf-9ee7-a43ea283a8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5edb7b8-5633-4929-b499-e5a69143730b",
        "cursor": {
          "ref": "32d5a535-dcc9-4e3f-879e-2e1228bb0990",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4cc919e8-87c4-42fe-a3f9-1f9665180c96"
        },
        "item": {
          "id": "b5edb7b8-5633-4929-b499-e5a69143730b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fec0235b-8465-4655-8a8e-ee99fdf23377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f19389-3452-47a6-8b51-68d460d2f569",
        "cursor": {
          "ref": "8eeb31e8-7f44-4102-841a-86fd6485bd78",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "991db5d0-ce50-453d-9bc0-ba19003bff13"
        },
        "item": {
          "id": "21f19389-3452-47a6-8b51-68d460d2f569",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dca2125e-15e8-4bdd-acaf-f77c089a1fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293082f7-9d5f-4288-9fac-0acf3b61be93",
        "cursor": {
          "ref": "cd4111bf-e8df-4002-ab36-8829d52977cc",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "175b5851-fb44-471c-9713-3ff7f3d28cf2"
        },
        "item": {
          "id": "293082f7-9d5f-4288-9fac-0acf3b61be93",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d6046dc7-2cf1-4f80-ba8d-838547f1ce21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73094681-e367-44d5-b55f-0b51c4e94030",
        "cursor": {
          "ref": "41fcc1ad-719b-46f4-9a64-7fb8dcf867b9",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "88523506-a8a4-41f1-957b-b9cf9e5c8e24"
        },
        "item": {
          "id": "73094681-e367-44d5-b55f-0b51c4e94030",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5e32a159-cee3-4844-92d2-fa25d5822c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcf5a1e-b5d6-4f58-a927-eaa7beb11e4f",
        "cursor": {
          "ref": "08805eae-f64c-443f-a974-02df552d13f7",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c5470a75-1442-464b-a7fb-b30203a25887"
        },
        "item": {
          "id": "efcf5a1e-b5d6-4f58-a927-eaa7beb11e4f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "88df7149-65b6-4b37-8c13-bc555e7cf9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767751b3-fa4b-445e-9cc3-897d564294d3",
        "cursor": {
          "ref": "e136b5c4-ddb5-464d-bdd9-2ddb6ce32821",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "85372d4a-fbbe-400a-823d-b28ba30e60fa"
        },
        "item": {
          "id": "767751b3-fa4b-445e-9cc3-897d564294d3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "53f2d930-be4e-44f2-be3c-f0271ccf0361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8257d2-7e42-475b-9c8b-b93a2457571c",
        "cursor": {
          "ref": "2fc236a0-a81f-4ad6-9dbd-58b8ea4ca782",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "db70e00d-0b75-4fd1-9b70-438eb07c3d68"
        },
        "item": {
          "id": "bd8257d2-7e42-475b-9c8b-b93a2457571c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e746f426-9688-40a0-b468-458305667058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b065b80f-f861-4180-8088-b9b1e3ae7073",
        "cursor": {
          "ref": "36c8d261-75c9-4008-b60f-6a013d16c501",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2dbedc01-4023-4fb9-8146-5f3b4da2dbda"
        },
        "item": {
          "id": "b065b80f-f861-4180-8088-b9b1e3ae7073",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c8a73ddd-d68c-4973-80fc-30cd1a34bdcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afee63cd-ce4a-4605-8940-84ef54d57c9a",
        "cursor": {
          "ref": "716007b1-28f5-4930-93a4-e256aa851c9a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "107ad810-b9a3-4582-9923-7e353606dce2"
        },
        "item": {
          "id": "afee63cd-ce4a-4605-8940-84ef54d57c9a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "68b0a93e-a4da-4874-9f7f-1b72a27f1c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f580ac7a-7ab4-41a1-8952-aacfd0c266c1",
        "cursor": {
          "ref": "74a93e96-75b2-4cdc-8ee9-58d87c059866",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "65cb982b-65c9-4335-a6fd-52d208d4144b"
        },
        "item": {
          "id": "f580ac7a-7ab4-41a1-8952-aacfd0c266c1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cfe209fb-a569-4920-96aa-73555cbec0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3f0bf2-f623-447d-907f-5bb1a257609e",
        "cursor": {
          "ref": "180f98d0-4d3c-40df-889f-862bf4982a3e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "535c0645-7d02-4007-9daf-6d08dc804636"
        },
        "item": {
          "id": "8d3f0bf2-f623-447d-907f-5bb1a257609e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "94c0527a-bdb8-4c28-be3d-bac256939c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1126aca4-3c87-4701-9dd3-6b3c42f27726",
        "cursor": {
          "ref": "79411996-61f0-4e9d-9fbf-ebb32603d8f1",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9b495d4a-abe7-442a-8dac-f1ee249d4f53"
        },
        "item": {
          "id": "1126aca4-3c87-4701-9dd3-6b3c42f27726",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5a3396ed-1fe6-4c62-a60a-36dda0ffbfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d45e497-7bdd-4fdb-ad30-404431f3e56e",
        "cursor": {
          "ref": "d2c2eb4f-9103-4cd3-86cd-3df30274b89f",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3c545be8-3a52-4c48-ab03-57f1d4bda189"
        },
        "item": {
          "id": "5d45e497-7bdd-4fdb-ad30-404431f3e56e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ee7358c7-1729-48ad-bc33-4993db8a75b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c68df49-617a-44c2-8ddd-5ef701df11ea",
        "cursor": {
          "ref": "2efcb083-ee50-4306-a916-4d737f76dbc2",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6dbf5fe8-9553-4e78-8f88-ec6e547fc5de"
        },
        "item": {
          "id": "0c68df49-617a-44c2-8ddd-5ef701df11ea",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2543ff23-264b-4c66-aa1d-0c951fef6550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f353be85-51b4-45ab-9970-8ac8d2f1ed00",
        "cursor": {
          "ref": "31037ed3-cac4-4550-8d10-55910b4956a3",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3848126c-b21c-4c63-804b-c39de79dfcfe"
        },
        "item": {
          "id": "f353be85-51b4-45ab-9970-8ac8d2f1ed00",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "becff726-e747-4bad-9828-7319a343dc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa727570-3ca8-486e-ac67-18d7224b0641",
        "cursor": {
          "ref": "1a4c0f2f-49dd-4fa8-a01e-71549d441beb",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "38435c71-56f9-4867-9a0e-c0b71343c712"
        },
        "item": {
          "id": "fa727570-3ca8-486e-ac67-18d7224b0641",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d95b775a-66e0-4550-b19c-612c73aa92a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01720ff-af59-406a-ba4e-d46de0cdb29d",
        "cursor": {
          "ref": "180e8be6-2388-4b04-9fa1-aa681e637207",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ab94a98c-4405-40ee-af3a-f817c26c07e0"
        },
        "item": {
          "id": "b01720ff-af59-406a-ba4e-d46de0cdb29d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c6d60aaa-dba2-46fe-b866-2257a2688a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c8dd7950-cc57-4df9-b012-d4426a7eb35f",
        "cursor": {
          "ref": "f9b69194-d83e-4872-bac4-a955d5d3797f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e34643a7-50c6-4adb-8373-94842c168aee"
        },
        "item": {
          "id": "c8dd7950-cc57-4df9-b012-d4426a7eb35f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5b915513-c6b3-4b5e-a061-8ebc9bfbfd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888a6684-27d1-4059-ab54-3e4ea30dc95d",
        "cursor": {
          "ref": "26184634-e01d-4622-9201-cad666d7db7e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "48d872cb-ed88-4a11-8f15-9f41922584c5"
        },
        "item": {
          "id": "888a6684-27d1-4059-ab54-3e4ea30dc95d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f6509e14-c9c4-402b-a719-a45d1d1b9659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca5aa58-d7d3-4670-a53e-204544e48ac4",
        "cursor": {
          "ref": "6456953d-36d2-45e1-b28f-9c1d632780bf",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "23c0d12e-54d9-4efc-ac63-7d95b001f00b"
        },
        "item": {
          "id": "bca5aa58-d7d3-4670-a53e-204544e48ac4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4c5cb286-8539-4e09-886b-368297628768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad7586c-95bb-492c-83b5-6c80c3970ebb",
        "cursor": {
          "ref": "9f8966e0-d1ff-4348-963f-cadee3398968",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "abe2e1a0-ceb3-4984-b1f3-1a9cae4f2c09"
        },
        "item": {
          "id": "4ad7586c-95bb-492c-83b5-6c80c3970ebb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5af7f64d-d474-43fa-8754-7615601b4b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ed3786-e3da-411e-802d-aa07195fc928",
        "cursor": {
          "ref": "1d9eb1c1-5455-406e-9cd3-0ff6f882fa53",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9bb61924-1087-4a33-be14-b534f9cd2a20"
        },
        "item": {
          "id": "66ed3786-e3da-411e-802d-aa07195fc928",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a4deaf3c-1081-412b-9026-c53ed7b64fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e610ee3-40d7-44a5-828b-c747888625ac",
        "cursor": {
          "ref": "e6d84c21-852f-40b6-a99e-a22113648ac3",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "54e343d9-d93f-4111-a605-b278a436f8a0"
        },
        "item": {
          "id": "8e610ee3-40d7-44a5-828b-c747888625ac",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "35a58353-84c0-4220-8b42-d68985ad4adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41673ed-9b0b-4e99-8ae5-e941b76cdb7b",
        "cursor": {
          "ref": "77ecd8fa-e61c-480e-b7e4-f337ca239358",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "32f9e299-7366-4a33-b2df-550d81925203"
        },
        "item": {
          "id": "e41673ed-9b0b-4e99-8ae5-e941b76cdb7b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4771cfd8-e4aa-4e3e-ab7f-d8c71170bd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4d750eff-8404-4ebe-ab00-1b16851a6108",
        "cursor": {
          "ref": "200768c1-a2af-4c14-96e3-9daa82728650",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4ba15bf8-c9e9-4dee-8f69-872f60681b80"
        },
        "item": {
          "id": "4d750eff-8404-4ebe-ab00-1b16851a6108",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c9f68bb5-9a13-427f-9655-a0c1f4ec978e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b878c4-4c50-4f69-b24d-af002ebd8476",
        "cursor": {
          "ref": "d0555976-a12b-4e99-9a02-090729f34da8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "65df86a2-78ed-491e-9e49-bd14e97cc242"
        },
        "item": {
          "id": "95b878c4-4c50-4f69-b24d-af002ebd8476",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "40df7235-f547-429e-a8f4-c54821f89a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2be93e-3948-46df-aab2-22b4f0072942",
        "cursor": {
          "ref": "c0411506-6b4d-485b-abdc-756b45a41eb5",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9e6b9d8e-ef78-4d4b-a367-6e26a297f159"
        },
        "item": {
          "id": "fb2be93e-3948-46df-aab2-22b4f0072942",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8f74ab06-d481-49b8-acf5-d034ad28a02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48559e0-c6a5-423e-b187-5ca509eaf201",
        "cursor": {
          "ref": "dc08b9b9-90df-44b0-b8c9-f17bc2b8fc83",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "16ed1bc5-8aa2-4053-9e3d-f56881750d60"
        },
        "item": {
          "id": "f48559e0-c6a5-423e-b187-5ca509eaf201",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2081685a-7a56-49db-9511-68f8b1a8c886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44bb837-6214-4d3e-9df7-40f4f93ec344",
        "cursor": {
          "ref": "bf7c6197-3801-4cb7-8847-3e50b901b1e1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1896d571-fb8b-4d6e-9ff3-fc71e67af30d"
        },
        "item": {
          "id": "b44bb837-6214-4d3e-9df7-40f4f93ec344",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6b883a52-8d6b-428d-93bb-57c06358db94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba1b5fa-5fde-4da0-b7e7-3499ee9301d8",
        "cursor": {
          "ref": "ed4023a6-3a8e-47c8-9eab-edbc3fa6ef94",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "03588a10-3274-4055-95c3-5ddc83135fb7"
        },
        "item": {
          "id": "fba1b5fa-5fde-4da0-b7e7-3499ee9301d8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e51ac520-71aa-4d0c-8663-ea1c0b738ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d226b4-558b-4ccd-b85e-b7b551847cf8",
        "cursor": {
          "ref": "bc53e139-518b-477a-97eb-be08bd736684",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c481955d-894e-470f-99eb-1b7dc7763e84"
        },
        "item": {
          "id": "b2d226b4-558b-4ccd-b85e-b7b551847cf8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9fd83c31-40d4-410d-ad12-40b4573ecc72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b8405a-0700-49bd-9102-5cfb016f68d4",
        "cursor": {
          "ref": "fe593835-e024-4c88-82df-33f95e4c2342",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9b79eef8-b259-471e-a7c6-5513bab248e1"
        },
        "item": {
          "id": "90b8405a-0700-49bd-9102-5cfb016f68d4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dc20c278-21a0-4cec-aded-915cb86aa812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c36125b-3f71-4fd5-8aa3-8a8c277ec36b",
        "cursor": {
          "ref": "d0a6f9dc-7820-4f20-aba1-5394f6441e43",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e7280caf-4f5c-4a54-8649-6201509b5430"
        },
        "item": {
          "id": "6c36125b-3f71-4fd5-8aa3-8a8c277ec36b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2444ba64-d1e7-4f8c-ac30-551fb31af83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ad5046-daed-40f7-b6b2-55d9fd669ff8",
        "cursor": {
          "ref": "3a712cad-d562-447f-9809-9765efdead61",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6be5ea7c-973f-4c3a-80dd-11b8806acda9"
        },
        "item": {
          "id": "41ad5046-daed-40f7-b6b2-55d9fd669ff8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8baaca37-5d85-4025-b689-6228f657ebe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da815a46-7aad-41df-9f52-e9c10785bfa1",
        "cursor": {
          "ref": "94706c91-4489-48dd-84a5-e2766e5ca19d",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "753ab4fd-c468-4c85-9ce2-d451aaa08d60"
        },
        "item": {
          "id": "da815a46-7aad-41df-9f52-e9c10785bfa1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f740b20f-e8b7-4be0-ae4a-97c98a87db30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e2bacd-f81f-4913-9a99-15326602b79c",
        "cursor": {
          "ref": "e715d51a-fc6c-4f8a-99f8-beb00c662226",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3ad7c752-299c-4f1e-989f-36aa945da9dd"
        },
        "item": {
          "id": "25e2bacd-f81f-4913-9a99-15326602b79c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2db3d317-996d-466e-8092-685e592bd5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4fa8a4-d259-40fc-b7fc-e9788b940c84",
        "cursor": {
          "ref": "731a728f-c710-45fb-8cfd-f71b2fa1658b",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "26d79bac-1f04-4306-8bf9-c3e85dd8f16f"
        },
        "item": {
          "id": "fd4fa8a4-d259-40fc-b7fc-e9788b940c84",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2c005f27-d208-4e45-9109-5c6f32fb32d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cc8e70-af52-4028-937e-a1d73ac06fe2",
        "cursor": {
          "ref": "5e9d77e8-1158-4a53-a6ec-50b62f37023e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0a3fa65a-e813-46fd-9c52-9724f48b150f"
        },
        "item": {
          "id": "64cc8e70-af52-4028-937e-a1d73ac06fe2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f740ac64-7f18-43c2-bd38-67715646dec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f057b21-29ed-4b3c-ab19-e8314c3388ee",
        "cursor": {
          "ref": "6052c0bc-97c1-498b-94c7-472ad69f8a3d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b7e7eda8-08ad-47c2-a606-408f9cbd7642"
        },
        "item": {
          "id": "5f057b21-29ed-4b3c-ab19-e8314c3388ee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9752ab0e-4280-4de7-8a22-0737c0fd1424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e0db8f-4b6c-42f6-8c32-20ce1b1c105c",
        "cursor": {
          "ref": "a02c84dd-e5e8-44a4-8350-f65ffc213f70",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7f3efda1-6dd9-4fe9-9500-d8a742f7daef"
        },
        "item": {
          "id": "35e0db8f-4b6c-42f6-8c32-20ce1b1c105c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c04b9ba9-19de-4809-81cf-cccce9b1392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c3a9fe-c4f9-4cea-a6be-da44544d2fae",
        "cursor": {
          "ref": "72b5c3cb-2a38-4af5-be74-7eba4a203c52",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e38e92f9-c0e8-416d-923f-f45558679f5b"
        },
        "item": {
          "id": "81c3a9fe-c4f9-4cea-a6be-da44544d2fae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "25837d15-e15c-4f82-bb91-d3a5bdbd4e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5f27f5-4092-470e-abbd-21fa4f7c276d",
        "cursor": {
          "ref": "84509e00-ce03-4ded-b276-50c0e7ce9564",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "12cb7230-1ae6-422d-9bc6-6ca4c4d94be1"
        },
        "item": {
          "id": "8a5f27f5-4092-470e-abbd-21fa4f7c276d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "02a1a72e-3ec0-4563-9f58-6021a14fd026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e498e43-58a5-4789-9838-948a338b79c0",
        "cursor": {
          "ref": "27b4d98d-652e-4356-9071-5ce019dc485d",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "98d601ce-edba-47b3-9c7a-2da8ec3a39f6"
        },
        "item": {
          "id": "3e498e43-58a5-4789-9838-948a338b79c0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "80c66748-537a-4bf0-989f-546bc860962b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962b28e1-11c1-47ac-bb08-240d5bcfaf33",
        "cursor": {
          "ref": "45e77fe6-02e9-4e3e-9eac-07816ff43b2f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "86a96dd9-5a5b-4dff-a1cb-c0bab64ecf49"
        },
        "item": {
          "id": "962b28e1-11c1-47ac-bb08-240d5bcfaf33",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "051985cc-a566-415e-a28b-23156fae9ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52008bf1-f49b-4f56-995e-118bdd3adfcc",
        "cursor": {
          "ref": "fddd753e-11a5-4cf4-9a89-521e08d93c29",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e63027ad-8061-4558-b573-633fcf185149"
        },
        "item": {
          "id": "52008bf1-f49b-4f56-995e-118bdd3adfcc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "dbdf6d75-b4c2-4c10-b75f-8d1fe0a9896d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a263bc6f-4e4e-49a3-a9c0-b9b3f6941620",
        "cursor": {
          "ref": "e80dc75f-7b56-4a80-9191-c58be742ed9e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "96748fc0-f74a-443c-8ff4-b39578bdfc38"
        },
        "item": {
          "id": "a263bc6f-4e4e-49a3-a9c0-b9b3f6941620",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3b9c093f-e39d-4814-84aa-1a9ab92498e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf3a633-af75-47a9-a842-f17f05ecb1ac",
        "cursor": {
          "ref": "ac1f63b1-a100-47cf-8912-003dc0cfdc62",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c8e5efa7-4f1d-4025-a77a-6e7da82a9ed8"
        },
        "item": {
          "id": "bbf3a633-af75-47a9-a842-f17f05ecb1ac",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9afd3d5e-c536-4a2c-b87c-a2eee9c57ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184be86b-bfb2-4e68-b8d8-15d57331e57f",
        "cursor": {
          "ref": "9c71572d-8a0c-4d86-a1da-208414778a08",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "891f328f-7a91-495b-8019-8edee2da2849"
        },
        "item": {
          "id": "184be86b-bfb2-4e68-b8d8-15d57331e57f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5f0d5524-7261-440c-89c4-b49eea5fe3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e498d34-6ef7-46c9-a4ce-a80e4eecd58b",
        "cursor": {
          "ref": "3ec11bbb-9889-4dee-855c-0acfbaf91acc",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "423b096f-172b-40c1-a318-2f86b6799866"
        },
        "item": {
          "id": "0e498d34-6ef7-46c9-a4ce-a80e4eecd58b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "898aa1a0-adc3-4a11-9bf0-916f17112647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24eb0fd-1116-4a98-bb2d-30ad5a6e237e",
        "cursor": {
          "ref": "52c93eb9-33e3-44df-a148-be5a864803a2",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3215670d-1abf-4aaa-937d-32a410073a2a"
        },
        "item": {
          "id": "a24eb0fd-1116-4a98-bb2d-30ad5a6e237e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6e911b36-02fb-4dba-ae61-f62fa326881f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f4963b-66da-404c-90c8-0f7ade6f3de7",
        "cursor": {
          "ref": "874953ea-0ab4-45b1-a395-35d7288c3b7a",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5c6a4a53-9e65-4cf4-b8a7-85b6bd90e709"
        },
        "item": {
          "id": "41f4963b-66da-404c-90c8-0f7ade6f3de7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c6b77849-c416-4efe-988d-5a175aa2b2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785bc7fd-c9cc-493f-8a54-2dd25dd9f46b",
        "cursor": {
          "ref": "5e28f372-c842-4dbd-8cfd-5661ac6ad09d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3e718cf0-841e-4d7a-9ae7-5a451ab9ad02"
        },
        "item": {
          "id": "785bc7fd-c9cc-493f-8a54-2dd25dd9f46b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b51b7d5a-5c94-4292-b667-dbc5dfe9a33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883aac56-456a-4cb3-aeef-90ce21cb51bd",
        "cursor": {
          "ref": "1179906d-15e1-48ac-bb62-914e1592fbbf",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f1126071-8b79-4ad8-8b27-ea15068ef923"
        },
        "item": {
          "id": "883aac56-456a-4cb3-aeef-90ce21cb51bd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b1d4e4de-23e0-464d-b181-603e8f866634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6400e348-d06b-478b-a324-e2287e7b3b72",
        "cursor": {
          "ref": "85b8539a-9fcf-4dc4-8649-179d94f5e9dd",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e9d32101-b518-4995-a6a7-62236aeef449"
        },
        "item": {
          "id": "6400e348-d06b-478b-a324-e2287e7b3b72",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "da7d858d-ff70-4269-86da-a33d0dc8739d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427dd9a8-0773-4fd3-a725-51683eb02c72",
        "cursor": {
          "ref": "67df4f54-fba4-4817-a4a2-fc9ebc9b3568",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cfb4f999-a0f5-4b84-bed1-e91ae30ae4b7"
        },
        "item": {
          "id": "427dd9a8-0773-4fd3-a725-51683eb02c72",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "57817982-c8b3-4ec5-958a-b1230a7f4d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8ba1f7-327e-49b8-98c6-1567778c235f",
        "cursor": {
          "ref": "31e4b81a-9018-4f7e-8089-8e5b10aaffe8",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "403531d4-bb0c-4122-9973-f89ca8df3a25"
        },
        "item": {
          "id": "ac8ba1f7-327e-49b8-98c6-1567778c235f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "995de228-d042-4846-9c2e-0ccd6519f891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15d3c07-0992-4777-a7f5-1e6a9d9b779e",
        "cursor": {
          "ref": "13aa6446-2ffd-454f-8d04-6b582b77646e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cdf34678-1018-4aa0-99be-4a9ac7fd08a2"
        },
        "item": {
          "id": "d15d3c07-0992-4777-a7f5-1e6a9d9b779e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6eef2226-2c35-4f50-ad74-3e4ca51c6cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e718664-67c0-432f-99d4-417b212a4079",
        "cursor": {
          "ref": "7279983b-19a1-4b8f-aa9f-29cf2fdcf482",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "103f5d35-81b9-4a21-925c-c700d8cd8dfd"
        },
        "item": {
          "id": "5e718664-67c0-432f-99d4-417b212a4079",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ac0de3d0-db5c-400d-ac96-ede8b48f3180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba19ab2c-baa3-44fc-ac29-7fd385a4fd6b",
        "cursor": {
          "ref": "428ed310-1e87-4ca2-a1d8-ed528f950ed8",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2a6ad8df-3142-48e1-aaaa-8da95ba1963c"
        },
        "item": {
          "id": "ba19ab2c-baa3-44fc-ac29-7fd385a4fd6b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b2ee67aa-da8e-4ffd-9703-80ec14f5a5f1",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "0dc88250-6d2a-457e-96a6-39c73f97d754",
        "cursor": {
          "ref": "6933ce4c-11ca-43c2-9578-fe58d17567b0",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e1d631a6-2671-4181-8a6f-1377bf74c300"
        },
        "item": {
          "id": "0dc88250-6d2a-457e-96a6-39c73f97d754",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "27f2de78-9925-4da7-aec9-59fff87c8a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d8826d-4dc9-44ea-9930-0cb06eba3e6d",
        "cursor": {
          "ref": "e8055579-0c4d-4613-a0db-2f1963288081",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "105f28a0-5fdc-482a-bab7-1df5248f4e88"
        },
        "item": {
          "id": "46d8826d-4dc9-44ea-9930-0cb06eba3e6d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "428285ad-1e29-477d-a114-724348aaa2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562d2261-5d3d-4247-8e33-d1f0f74da716",
        "cursor": {
          "ref": "51d65b9b-a6a6-4b13-947b-677100d1cbd0",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ca89de02-ba02-476e-bb71-d4209fc7126d"
        },
        "item": {
          "id": "562d2261-5d3d-4247-8e33-d1f0f74da716",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1fce480f-0e12-45ce-b411-662ab793dd27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb24b87a-8c7a-49de-8523-44acdc820beb",
        "cursor": {
          "ref": "5e59fa80-7148-4de6-86e5-fd41c1e0add3",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "08988b86-1159-4eb2-a1d1-c8138bf78337"
        },
        "item": {
          "id": "bb24b87a-8c7a-49de-8523-44acdc820beb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "711f45d4-dee3-4a60-9138-f967a72ba64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c07e90-52d3-427f-b069-7fe0b3c7a5da",
        "cursor": {
          "ref": "f1410ce3-90eb-46cf-b2a6-ce8685593550",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3af635e7-3b98-4d9b-854a-96c3ea6f0446"
        },
        "item": {
          "id": "24c07e90-52d3-427f-b069-7fe0b3c7a5da",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c9fe8aef-a2fb-4412-a900-4c11b5ee82e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1748e5-a301-44b2-b9af-8b0907853eea",
        "cursor": {
          "ref": "81b8ba35-96f0-45de-88dc-7c35ed7de04c",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "20ee71b8-531f-4ea4-ab85-e46f26f29372"
        },
        "item": {
          "id": "3f1748e5-a301-44b2-b9af-8b0907853eea",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0ad7d54b-5f28-477b-9997-3dc91ab7aeb2",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "4adb01d2-4ac2-483d-9b9c-9f6c190f4ea4",
        "cursor": {
          "ref": "fbf71244-52b4-4bc0-b61c-ea47e12663fa",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f52bc416-3e00-4d3f-b47f-099dc7861586"
        },
        "item": {
          "id": "4adb01d2-4ac2-483d-9b9c-9f6c190f4ea4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ed51f0f2-29f3-4712-882e-c201c97e108f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7526a7a-aa2d-4102-94ce-855675995e2a",
        "cursor": {
          "ref": "d966d50b-ba5d-4d74-9403-ce8ebe2753d7",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c17e5d56-c4c7-4b1e-a934-67eb5f51ba98"
        },
        "item": {
          "id": "e7526a7a-aa2d-4102-94ce-855675995e2a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cf522677-7f4c-4e1e-8e90-26fe3a5d7e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97b2b2b-ca80-4160-9427-4ba1a6a7760c",
        "cursor": {
          "ref": "8b1886fe-c9eb-4fc0-97b1-90c611cb4e57",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c3aa3123-4c5b-45d2-bb66-05c8c359bbef"
        },
        "item": {
          "id": "f97b2b2b-ca80-4160-9427-4ba1a6a7760c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3333112e-daf3-4638-b6a2-79832f63c33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae46565-a9a3-4083-ac03-682827beb216",
        "cursor": {
          "ref": "99a838a0-6b13-4631-a95c-eb5ecd3d2d2b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "14ae70b4-e23f-46ab-a4a2-d86f871a10ed"
        },
        "item": {
          "id": "4ae46565-a9a3-4083-ac03-682827beb216",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e81013f5-f03e-4916-8341-25ddd9cbcfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf4beee-87ce-46ae-9bfb-0eb3bc9bdf39",
        "cursor": {
          "ref": "8e74f437-886b-4c82-89c1-610546ac4ff8",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a0a8faee-bee8-499c-be58-bd66932a2849"
        },
        "item": {
          "id": "3cf4beee-87ce-46ae-9bfb-0eb3bc9bdf39",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "dbe9005d-787a-4acc-94b0-231693693ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6533815b-10e4-43b6-942f-2d02776bbfaf",
        "cursor": {
          "ref": "8d2bc72d-ac4e-4376-ba78-6213a53eb18c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "10884380-e10e-44f4-8a09-76156fe5c1be"
        },
        "item": {
          "id": "6533815b-10e4-43b6-942f-2d02776bbfaf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0e62ec95-aa13-493f-8721-a2a46c4a3799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2291e5bb-7ae0-4d3d-b55b-f8679f57d9bb",
        "cursor": {
          "ref": "bafdbac9-2aa0-4571-9c67-39ce341c5b31",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "87c8a1e4-0e7e-4e63-bd74-ea7019be5581"
        },
        "item": {
          "id": "2291e5bb-7ae0-4d3d-b55b-f8679f57d9bb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2eb0773a-5771-459c-a37c-587b73cc1f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a011f9b-4349-4a8a-97ac-0be4455298c4",
        "cursor": {
          "ref": "d494be63-63db-40a7-afcc-62734488d79b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f20aae5c-055c-4b6d-929f-af80146ad55f"
        },
        "item": {
          "id": "6a011f9b-4349-4a8a-97ac-0be4455298c4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2c14b5be-ef89-415c-ad80-544175132f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d88b0e-adbf-4b28-b415-64024550974e",
        "cursor": {
          "ref": "6472ea99-ad9f-4099-acb5-fd5c60fce957",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0daaf1ed-937f-4660-8421-9367e5fbb8b7"
        },
        "item": {
          "id": "d0d88b0e-adbf-4b28-b415-64024550974e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6c912e23-dfcb-4e6d-9053-db5435eb7392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ecbf8c11-3576-458b-8a22-99d4060712db",
        "cursor": {
          "ref": "65ff1a90-ee02-4eea-b898-0901418338c0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a021bae1-8778-4b4c-a526-3f7de0220579"
        },
        "item": {
          "id": "ecbf8c11-3576-458b-8a22-99d4060712db",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3f98817e-c0bd-4976-b1df-5c1c35ed4941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4572a6da-7ed3-4a88-8e2a-0acb9b1181ef",
        "cursor": {
          "ref": "8434bfe5-ccb3-4117-bf12-3cb0fe4c2e89",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e122cfe9-967a-47ac-8403-1d3a9f6b2eb9"
        },
        "item": {
          "id": "4572a6da-7ed3-4a88-8e2a-0acb9b1181ef",
          "name": "credentials_issue"
        },
        "response": {
          "id": "11860615-2fdd-49e0-9b16-59e063ab9b7c",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cce309b-19cb-462f-98f5-950ccd0033bd",
        "cursor": {
          "ref": "647d04d9-8991-4574-9709-b32c45a4af10",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "90be020b-aee2-4cf7-af70-b08f125bddb8"
        },
        "item": {
          "id": "4cce309b-19cb-462f-98f5-950ccd0033bd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b0c08f48-5f25-4b4c-98ef-0cac56162d54",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 642
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "630dedfb-79b8-47d5-a10c-0953c0540e16",
        "cursor": {
          "ref": "7d779ce2-61d3-4c86-b9a6-28bd64ff4589",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ac141b05-1b2c-44b1-a4ef-ea2bf90b19d4"
        },
        "item": {
          "id": "630dedfb-79b8-47d5-a10c-0953c0540e16",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "49e1144f-4182-4462-89f5-2b88e73420a1",
          "status": "Created",
          "code": 201,
          "responseTime": 23,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6515d63-83d2-4688-b38b-7e1d211874da",
        "cursor": {
          "ref": "90f887ce-a871-4fbf-b2f6-b792fcbcffc7",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7f3cf3f9-ace2-4ead-acbc-e82c2d22a385"
        },
        "item": {
          "id": "e6515d63-83d2-4688-b38b-7e1d211874da",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d899248c-799e-4925-81fe-dab4f5bcd5b4",
          "status": "Created",
          "code": 201,
          "responseTime": 26,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "734d1c72-2b82-49f9-902c-63c8eee1b72b",
        "cursor": {
          "ref": "e664a7fc-58f2-449c-aefc-539fe2bff90c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86459fd0-8142-4b21-aead-22ba09154e55"
        },
        "item": {
          "id": "734d1c72-2b82-49f9-902c-63c8eee1b72b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e63de34b-f969-4305-a272-17a12e3419cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "bbe02149-f0a9-43c3-bda2-4e737d20de04",
        "cursor": {
          "ref": "77fa31bd-a228-4c48-87d8-5320ff6deb02",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "12f54ac6-9fb9-4a53-9c73-9312eef813da"
        },
        "item": {
          "id": "bbe02149-f0a9-43c3-bda2-4e737d20de04",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a92e1d90-101a-4d01-98bb-c706f2729d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe02149-f0a9-43c3-bda2-4e737d20de04",
        "cursor": {
          "ref": "77fa31bd-a228-4c48-87d8-5320ff6deb02",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "12f54ac6-9fb9-4a53-9c73-9312eef813da"
        },
        "item": {
          "id": "bbe02149-f0a9-43c3-bda2-4e737d20de04",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a92e1d90-101a-4d01-98bb-c706f2729d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c014e4cb-9beb-4673-b32b-8b3ac22198c5",
        "cursor": {
          "ref": "e1580cdf-4fd3-4991-b0de-dfbfd2e40309",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "103eb4db-b8c5-4ff4-b25f-2d31f6ec95b5"
        },
        "item": {
          "id": "c014e4cb-9beb-4673-b32b-8b3ac22198c5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a09afe4c-8d23-4d40-9f4e-f48998f30e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7e2620-6cd6-45c2-b5d6-76c6d1a44500",
        "cursor": {
          "ref": "97e69fe6-3ad1-47ff-be78-c03f2e868e18",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ebd5a5c7-a22c-4b49-9044-4be263c510b8"
        },
        "item": {
          "id": "dd7e2620-6cd6-45c2-b5d6-76c6d1a44500",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2e19ab73-f2a3-491f-a359-d6022dd66439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fbc224-cc00-43ba-877b-45f1d547b0b2",
        "cursor": {
          "ref": "fffb44b7-ce94-469b-93c8-53ea11c110c3",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6ab3a71e-26ce-4e52-8a80-c366b14c49f8"
        },
        "item": {
          "id": "38fbc224-cc00-43ba-877b-45f1d547b0b2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1ac02c3c-181e-4211-a9fb-a0d6d4e11d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2928a6-b885-4951-831f-a4bd97670f49",
        "cursor": {
          "ref": "f5cd72c6-4c6a-4b19-88f6-954c1687a90d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d401dc30-9c98-4ae1-9385-39c19c6ded9e"
        },
        "item": {
          "id": "ef2928a6-b885-4951-831f-a4bd97670f49",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ad73b7b6-e05d-4f36-8f84-5e1f94e226b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65c9a9f-ed26-4243-a87d-1464010d4a80",
        "cursor": {
          "ref": "6f1f417b-2e21-46d8-bec8-17fed180d82c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7e245360-e2f3-4cb8-b956-43587176c895"
        },
        "item": {
          "id": "d65c9a9f-ed26-4243-a87d-1464010d4a80",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "29d55516-d761-4f2a-b731-0c2438f2b6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573b0ae4-77c0-4f6b-ac61-667123d2b9d5",
        "cursor": {
          "ref": "9cbef066-fd56-4472-a816-b5430cef828e",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "936be583-9a24-4523-94f2-56219630a502"
        },
        "item": {
          "id": "573b0ae4-77c0-4f6b-ac61-667123d2b9d5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "43c09784-0edf-4058-abfb-516e4c023455",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "58d65518-7590-485b-9f1a-ef0243289fad",
        "cursor": {
          "ref": "38d1e153-c309-4d3e-a2ec-a734f1549838",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6692f867-6e76-47c6-9b67-0901ecd11d7c"
        },
        "item": {
          "id": "58d65518-7590-485b-9f1a-ef0243289fad",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6fc43fdb-5084-4004-ae76-f4e1fc9af527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2afd34-6db6-4129-adaf-2f2033947b18",
        "cursor": {
          "ref": "f3ce2cca-1ac9-4e84-9dac-fee8236dca3e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6aa00738-9b8d-4c49-9131-cd13a89a75e6"
        },
        "item": {
          "id": "4c2afd34-6db6-4129-adaf-2f2033947b18",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2d18b9d4-db88-4060-916c-0c0e7ac0dd1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a29c9e-e3bf-4ec5-ad67-8efc6d97db12",
        "cursor": {
          "ref": "3b5e8735-7a22-469a-b924-99fc1f6f6e4a",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bf3089fd-ed28-42eb-a0b6-3abf7d7fff2d"
        },
        "item": {
          "id": "37a29c9e-e3bf-4ec5-ad67-8efc6d97db12",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3e100672-d56b-4b25-87c4-49e9c232489a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa422743-a64b-4541-86d9-2d1414e5f185",
        "cursor": {
          "ref": "66913dc2-e588-4866-9bbd-1070cffbde47",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c84b9ba6-5986-469d-b78e-2270316675ae"
        },
        "item": {
          "id": "aa422743-a64b-4541-86d9-2d1414e5f185",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ceb35539-9334-40ea-b687-8e227bb102a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44bfba8-e471-4d3a-b594-1f3b1550d0a5",
        "cursor": {
          "ref": "e540748f-70b8-418a-8be9-55f31434e22d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5e89b08e-30d4-479b-9da8-ddbb2cb33f97"
        },
        "item": {
          "id": "c44bfba8-e471-4d3a-b594-1f3b1550d0a5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b54c304b-46f2-435b-a1bd-642922c47d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7014df78-9805-4641-8b4c-8d0ee7b81e54",
        "cursor": {
          "ref": "1a80743a-cf88-4b36-a878-717d325ab789",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ce502c1b-72b4-44d5-a094-8fabb01212fb"
        },
        "item": {
          "id": "7014df78-9805-4641-8b4c-8d0ee7b81e54",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "16dc2842-b78f-4e5c-8699-e817bd41200b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a4eef7-6ab5-4c4c-9c8a-76eb51a504dc",
        "cursor": {
          "ref": "961a4fb9-76d1-4261-8f54-def3ce6707da",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9b7f33ff-013a-4163-a833-95e0db2fb9e1"
        },
        "item": {
          "id": "e4a4eef7-6ab5-4c4c-9c8a-76eb51a504dc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e534c5b0-bee5-4e72-a3f6-514e09f68a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df543384-755e-4dcb-bee0-053970c62dd9",
        "cursor": {
          "ref": "44f97b20-f558-4f97-a33d-073ed2c33492",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "49458ddd-8b2b-4d2d-af87-39add538c87c"
        },
        "item": {
          "id": "df543384-755e-4dcb-bee0-053970c62dd9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3ad87341-dbf4-4f01-91c2-143c198a96c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cbe37e-52e6-40bf-b9ba-3ec2eab13912",
        "cursor": {
          "ref": "8c9bfed1-0953-477c-a3da-217e604e1159",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c02b3621-7239-4279-8f8d-b7986c363356"
        },
        "item": {
          "id": "c2cbe37e-52e6-40bf-b9ba-3ec2eab13912",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b9ecd118-bb1b-40bb-9f9c-af5775d4fd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acb3365-9840-435b-bdfd-b0275c9358c5",
        "cursor": {
          "ref": "944253ae-7c15-4d13-a4c1-44329e626481",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7f191e64-81b0-411f-bd4f-70d53281f496"
        },
        "item": {
          "id": "9acb3365-9840-435b-bdfd-b0275c9358c5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "94d2b626-d924-4e72-b3a5-594d0518050d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cbeffe-9f86-4b67-bffd-f7dc762335d3",
        "cursor": {
          "ref": "e0c43787-4176-4b3a-9d0d-6df9389db99f",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7b5d42f5-63a6-440f-818d-b421cc46f622"
        },
        "item": {
          "id": "05cbeffe-9f86-4b67-bffd-f7dc762335d3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "049ed034-67d7-4578-8343-b2b7364c62b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75715d84-d031-4fba-98f6-43c516efe965",
        "cursor": {
          "ref": "7d658513-3d88-492c-bbd2-22c49352682f",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "aeac2745-b647-4cec-94b1-021fa2e5fe46"
        },
        "item": {
          "id": "75715d84-d031-4fba-98f6-43c516efe965",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b71d7969-5057-4f00-b58e-6f852f8d4f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d28a91a-317d-4ac0-8aaf-9e86bcb5f6ff",
        "cursor": {
          "ref": "e4bae717-4314-4947-92b1-31a72e2e84b5",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ad460fc0-0e32-43ee-a9f7-f0577fa618c0"
        },
        "item": {
          "id": "4d28a91a-317d-4ac0-8aaf-9e86bcb5f6ff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f822a6bf-6c53-4f8b-af79-31a8672ddc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b4546d-abbd-495f-ac88-a392f52cd04f",
        "cursor": {
          "ref": "39edaaa0-6418-4b3f-86d2-5228afd89195",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6e6bf320-b2a8-462c-8968-fcfa102c07ae"
        },
        "item": {
          "id": "26b4546d-abbd-495f-ac88-a392f52cd04f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0127c767-1253-4824-9754-1ea301aae460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babf5774-5d57-4136-ba8a-fb8e98ebb945",
        "cursor": {
          "ref": "d206b6bf-1d69-44fc-aea5-510a7248ff13",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "69a69081-58d0-4a4f-8ee6-4c425d11d755"
        },
        "item": {
          "id": "babf5774-5d57-4136-ba8a-fb8e98ebb945",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c8925436-3e6c-42c4-a57b-1cd8042b21e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a1970d-356a-4e8f-934a-7303382153c0",
        "cursor": {
          "ref": "fe36bffb-1727-4cd3-adcd-5a9b82afa0a1",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9d3a18f0-e13c-4a0c-8bfd-2dc7810b0e44"
        },
        "item": {
          "id": "83a1970d-356a-4e8f-934a-7303382153c0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "91859ea2-24a6-4927-aec0-df500cc320d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab548aea-300f-4198-917d-b26a98c44553",
        "cursor": {
          "ref": "6e27f29b-f239-46f8-8a09-72e00409faf1",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "de062324-afd6-403c-b462-364f546d180c"
        },
        "item": {
          "id": "ab548aea-300f-4198-917d-b26a98c44553",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dce3bce5-e714-41e4-b5a5-3fa99722c063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27311efa-b876-40fb-aa52-c9c8757ca197",
        "cursor": {
          "ref": "a0a2a2ca-55bf-4417-965a-2c3c675ed348",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fe7f7f1a-ad15-4263-a2af-d546acdb464f"
        },
        "item": {
          "id": "27311efa-b876-40fb-aa52-c9c8757ca197",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8b77f351-0fb8-4eff-8a63-819455cf0603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb9cd80-3fec-4da6-a358-ee56917ed770",
        "cursor": {
          "ref": "e9591130-92f4-49fa-93ce-2661b1dfd3ac",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1acfc9c5-2656-4668-bd49-48d2e1a1c37b"
        },
        "item": {
          "id": "bcb9cd80-3fec-4da6-a358-ee56917ed770",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "17261bee-e921-4581-824b-f9a6b057a7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af35663b-6706-41b5-b0dc-382d00fecbf5",
        "cursor": {
          "ref": "041d81df-73eb-40d7-ad00-ac642f5303ec",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2d56d526-139d-45cf-8710-8d9aca7f229e"
        },
        "item": {
          "id": "af35663b-6706-41b5-b0dc-382d00fecbf5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "477e8beb-b0f7-4f56-a5dd-03248739313b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcda4ed-5e07-4b53-afa5-909b29cb0b2e",
        "cursor": {
          "ref": "4f420c74-f568-4d5c-a41f-684d8ac630bd",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c4a5152c-adb2-4b97-9ff5-e7aadbb78dea"
        },
        "item": {
          "id": "adcda4ed-5e07-4b53-afa5-909b29cb0b2e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2de12e78-c695-43db-a846-152540572c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab72206-106d-4e8e-a3aa-e500eeb031fb",
        "cursor": {
          "ref": "38f5dd5d-f461-4c9d-b067-647db73859d0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c14249d4-4029-4c00-b8d9-6f06e4f03f94"
        },
        "item": {
          "id": "cab72206-106d-4e8e-a3aa-e500eeb031fb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9c03b881-6e1f-475c-a470-03653432b10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c1d238-f2d9-4c85-b896-484d55b7cc47",
        "cursor": {
          "ref": "2f126c48-1cac-4818-93d1-8f557cc7fce9",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "17356c7b-469f-480b-8e5c-c68a7ff76abd"
        },
        "item": {
          "id": "d4c1d238-f2d9-4c85-b896-484d55b7cc47",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "29d53559-65b4-4951-83a3-724dc497b2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c97aca-33e7-45a7-b734-8580158df33d",
        "cursor": {
          "ref": "b211a6ce-b2d9-4d3d-abc8-8a0351ee9f30",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a8260df7-97b1-4bd7-9406-b3d22b1b4145"
        },
        "item": {
          "id": "c7c97aca-33e7-45a7-b734-8580158df33d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4d55cbb6-3176-48df-b74d-0740f27736a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49410d9e-19bb-4300-a3a1-e850968caa47",
        "cursor": {
          "ref": "777120a5-7d99-4d38-be0d-53ca2ca283b9",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "de0b6580-aa2d-422b-95db-1fc04af87f72"
        },
        "item": {
          "id": "49410d9e-19bb-4300-a3a1-e850968caa47",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ddd40928-6937-4aca-a7cc-064b9271f583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a80c961-6bcd-413d-85f0-565a6092ed34",
        "cursor": {
          "ref": "e05db767-a81b-4e14-a0c2-1b2908ee8abc",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "49c01f08-6dc6-4134-aa32-78bad92dd066"
        },
        "item": {
          "id": "1a80c961-6bcd-413d-85f0-565a6092ed34",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7b4368a5-0cb0-4ee2-8c5c-511c66c12ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f2ccded5-db86-4bba-97e7-a81724b6c796",
        "cursor": {
          "ref": "4c6d8f43-1993-49eb-a307-51f562afc348",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "de1934a7-9392-46ef-9397-10b5940b4e20"
        },
        "item": {
          "id": "f2ccded5-db86-4bba-97e7-a81724b6c796",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "03084fad-4836-410d-9d6a-c4fed44da2c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f7558571-590a-49fd-9d56-50143aa4325e",
        "cursor": {
          "ref": "fbc06c34-c3bc-4e54-aee4-ff1238a0eeb7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1d4760c3-586d-47ff-af95-fcdecb0300e2"
        },
        "item": {
          "id": "f7558571-590a-49fd-9d56-50143aa4325e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0ef271e9-5a61-4d92-b623-7886decd92cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7558571-590a-49fd-9d56-50143aa4325e",
        "cursor": {
          "ref": "fbc06c34-c3bc-4e54-aee4-ff1238a0eeb7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1d4760c3-586d-47ff-af95-fcdecb0300e2"
        },
        "item": {
          "id": "f7558571-590a-49fd-9d56-50143aa4325e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0ef271e9-5a61-4d92-b623-7886decd92cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136f626e-7650-4e6f-bd1e-ac1c33c41e48",
        "cursor": {
          "ref": "54bc78da-50ad-4839-8ad6-41bb112c0499",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "20ac6fc3-2d69-42f7-b305-25493b8b50e1"
        },
        "item": {
          "id": "136f626e-7650-4e6f-bd1e-ac1c33c41e48",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3ee3ca98-b64b-4fa8-ae30-1ecbd4a24196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f4b7ea-c3ab-4e6e-b2d8-51842623c792",
        "cursor": {
          "ref": "1d938d4b-a8d3-4569-ac93-89533ee19652",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "335f1d49-7136-49ca-ae8d-cadad5eacfc9"
        },
        "item": {
          "id": "19f4b7ea-c3ab-4e6e-b2d8-51842623c792",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9c441ff1-3669-4047-85ce-6b88b2a6760e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d46049-da1f-4b46-9f79-9b626928fda6",
        "cursor": {
          "ref": "da2c3d71-88eb-494e-9f39-c62ebbb58aa5",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dbab4960-459d-4654-84f6-8967122b5c84"
        },
        "item": {
          "id": "79d46049-da1f-4b46-9f79-9b626928fda6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "51162b39-eefb-4e58-a091-7f04bbd492ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb63fe24-69a1-45fa-b5c8-bd60981648bc",
        "cursor": {
          "ref": "6b45101a-d34b-463c-8f00-a07ce2224248",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9a2cd010-82c5-4d6e-a310-f026d8970d4e"
        },
        "item": {
          "id": "cb63fe24-69a1-45fa-b5c8-bd60981648bc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3e77ce62-7956-4554-aea5-e8100bee7aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b81b1d3-e9b4-45cf-9a3c-25657530fe8d",
        "cursor": {
          "ref": "d2d1307a-63ff-4ffd-bc9a-11c64e15ac18",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7e473eaa-a358-43f7-b21d-90d64e8dfb22"
        },
        "item": {
          "id": "8b81b1d3-e9b4-45cf-9a3c-25657530fe8d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8e2ec9e0-a1ec-4863-b37a-29db4e1fafb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfbffb6-e244-421f-a873-80b163151b09",
        "cursor": {
          "ref": "781b4bbf-1c83-471c-8ede-a69458517f0c",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "eace8442-025c-4a4a-b2e8-d8d4711cefa8"
        },
        "item": {
          "id": "4dfbffb6-e244-421f-a873-80b163151b09",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "84295085-0bd8-41a7-856d-9ec55f680a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cdccca-1577-49f7-9696-0089a5f2d141",
        "cursor": {
          "ref": "26de7406-beba-4c2d-83cf-b51d9b79c2e2",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e0706e26-5ade-44ad-af39-7c5c2771583b"
        },
        "item": {
          "id": "b1cdccca-1577-49f7-9696-0089a5f2d141",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8fb2e611-b6a1-49be-b8c1-37d506c3b36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4d3249-ebfc-4ef7-8ff9-9bfc414f041c",
        "cursor": {
          "ref": "ef027fe3-600d-4e15-845e-708e7177011c",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "646ec489-47fd-42fa-a23f-a3af82e4f366"
        },
        "item": {
          "id": "2b4d3249-ebfc-4ef7-8ff9-9bfc414f041c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "14efe979-87d4-4c1d-8ac6-a9c4ecd4e697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67be399-4a68-4ff1-96ed-aff1781b6bed",
        "cursor": {
          "ref": "8f30d8b2-b8ac-4c12-8b7f-3f822e51f864",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e6d2c57d-7bf7-47a0-97fb-39b7c07c889c"
        },
        "item": {
          "id": "c67be399-4a68-4ff1-96ed-aff1781b6bed",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fcb3f0bb-af4a-4c88-9fef-cc1770aff41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d1ce45-7125-4370-b728-ae9a069465d0",
        "cursor": {
          "ref": "8bc9bccc-9e75-48dd-b13b-a1e131deea29",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "297500f0-0a7a-4989-aac6-097ecc641343"
        },
        "item": {
          "id": "77d1ce45-7125-4370-b728-ae9a069465d0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c4bf2766-0850-4656-92c9-a5104fcf9311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4c5307-9216-42a7-8ca9-c588492fa706",
        "cursor": {
          "ref": "9fae740f-83f6-4513-8fff-a14e5ea6ce98",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e845e79e-d422-4ddd-b709-b7330dc1a03c"
        },
        "item": {
          "id": "2c4c5307-9216-42a7-8ca9-c588492fa706",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "58a6fe99-6346-458d-bc24-726354f16deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4695803a-ddb9-4397-9c49-585ac73981b4",
        "cursor": {
          "ref": "6a6fe6af-a468-452c-91d8-9dda8e6c2b56",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "67bafaaf-a6f1-48e5-baa9-2ce99dc21b2d"
        },
        "item": {
          "id": "4695803a-ddb9-4397-9c49-585ac73981b4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a1adda5a-1da9-454e-a09c-184a7143c797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07a9638-956d-41c1-8d19-8607f0f3df1c",
        "cursor": {
          "ref": "cf426813-ef47-4e95-9a0b-bde5f7f28cdd",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "65cc4087-f99b-41c6-90ae-5c638e6bb1a0"
        },
        "item": {
          "id": "f07a9638-956d-41c1-8d19-8607f0f3df1c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f2490d03-7725-4a63-b89b-1be9643d21b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c96b5e9-1a08-4bf2-98b5-976a7a4d64ed",
        "cursor": {
          "ref": "40c39770-b065-4db2-8eeb-dbe46a485cd5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "56b435f0-feaf-4289-8b6a-2c07dd646dce"
        },
        "item": {
          "id": "6c96b5e9-1a08-4bf2-98b5-976a7a4d64ed",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "433c93a1-d054-492a-9566-3b1f3f32f68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a990482-2fbf-4f37-a13e-2f3f473182bf",
        "cursor": {
          "ref": "b4d5f697-10e2-4c9f-871b-2ede000b2afc",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "69bd39cb-ee65-4dbf-a42a-561287631f55"
        },
        "item": {
          "id": "4a990482-2fbf-4f37-a13e-2f3f473182bf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a30952af-4b33-4ce7-acd4-05a84444bf39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f9d5cb-996c-4110-b839-4870c554a02c",
        "cursor": {
          "ref": "3450b4bc-804e-4a7b-becd-d3b8dba7f221",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2c59fd9e-85f8-4d92-8ca2-c26ea0f72d80"
        },
        "item": {
          "id": "66f9d5cb-996c-4110-b839-4870c554a02c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "511c45bc-3520-4116-b898-35da120c6381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2990918-6d04-4b68-a595-574356db42c3",
        "cursor": {
          "ref": "e8669d92-3035-4160-bf29-094d13e65dce",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cb2e765e-9368-4ed1-9b7c-b7c47c556726"
        },
        "item": {
          "id": "f2990918-6d04-4b68-a595-574356db42c3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "31d318c0-8efc-402a-a5d0-1de8b2b56185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bd2685-f47c-464f-b3ca-e39c5075849d",
        "cursor": {
          "ref": "fdfa54c1-94fa-4f27-be0c-bd6286e5a38f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c07562fd-7231-415b-9725-e8f2cbb31915"
        },
        "item": {
          "id": "d1bd2685-f47c-464f-b3ca-e39c5075849d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "64b1adfd-8532-4a36-b50b-eab0b7562e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a73a5a-b5f2-474e-9b20-738cbce61709",
        "cursor": {
          "ref": "b673bdac-1a21-4b2a-aa3a-2c058234a632",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "feb65e0e-cdae-471a-a7d9-3bc951127b4c"
        },
        "item": {
          "id": "f3a73a5a-b5f2-474e-9b20-738cbce61709",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "37577f5c-75aa-42c6-8c08-3e9432f2e5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3cf60f-3877-413d-865b-407709c12f03",
        "cursor": {
          "ref": "a27e7e8d-6057-4830-a9eb-52312f66ab13",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "77e1e65c-d967-4883-b064-cc74a0c3f05d"
        },
        "item": {
          "id": "2c3cf60f-3877-413d-865b-407709c12f03",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "856d2df0-f163-4982-8eb3-d47d83e07f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8ff8da-6ccd-4422-aa02-60a74e83a574",
        "cursor": {
          "ref": "628ee6c0-ff93-4264-84d0-e2dc0f8936b4",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fddf69de-b590-4cc5-be91-9097492ff6be"
        },
        "item": {
          "id": "da8ff8da-6ccd-4422-aa02-60a74e83a574",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "24b256e6-c24a-4a87-9039-2ed74aa93246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357430d7-734b-40e2-ab4d-dd82f1ef0310",
        "cursor": {
          "ref": "ca9e6a5b-d201-4762-bad4-ad0241ca2ce2",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e1bdf04b-0efb-48f9-84bd-b386641ad5a1"
        },
        "item": {
          "id": "357430d7-734b-40e2-ab4d-dd82f1ef0310",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c62760f6-bc2a-405a-9c26-d2a26d136a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbf080e-4870-4d03-aec9-6398f5feaf1f",
        "cursor": {
          "ref": "7928f81f-2226-4c8f-92fa-91f3e79aff79",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8786cf1c-3dff-4e4b-a48f-b7e04e257f80"
        },
        "item": {
          "id": "0bbf080e-4870-4d03-aec9-6398f5feaf1f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "becd86d8-4aaa-4943-8630-bb0c09bc4557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c83602-79a5-46b5-9101-cee926c6f72b",
        "cursor": {
          "ref": "964193e8-47c6-479c-9290-41bd3f3f972c",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b10c4711-3980-4ba5-b903-fbe93a305d84"
        },
        "item": {
          "id": "a3c83602-79a5-46b5-9101-cee926c6f72b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f8e6ed6f-56eb-4f96-8fee-ac6b08e58fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad8a3c9-d31f-4700-b79a-5f8b6ad5ae7f",
        "cursor": {
          "ref": "7e39ffe4-061a-4b91-b265-b3683906506d",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3f63d977-6614-46ab-8a47-84fe686201b3"
        },
        "item": {
          "id": "8ad8a3c9-d31f-4700-b79a-5f8b6ad5ae7f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ea0036e-31f9-481c-ae85-61af01d38398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e6394a-8f02-4484-9d44-faa1dfd26146",
        "cursor": {
          "ref": "18440b8e-5d97-469e-8616-5f91d09ad9e1",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8d92d4bd-8c9f-448a-a1ec-606487e83d54"
        },
        "item": {
          "id": "67e6394a-8f02-4484-9d44-faa1dfd26146",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1d509314-c28b-4b2a-9810-75de6d5dc6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fc47e0-a663-4562-952f-238c9da9ef9d",
        "cursor": {
          "ref": "9313fbb8-ba46-4237-8dc5-ef2c2d1139f4",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d04a3f25-e8e1-423e-8c21-18f63650185b"
        },
        "item": {
          "id": "44fc47e0-a663-4562-952f-238c9da9ef9d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5d799c23-5d6e-4382-b617-8892a76f486b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4891f9-d2a0-43d7-8e90-84c9704ea1e9",
        "cursor": {
          "ref": "48a9501d-caea-437e-b074-51f24aea5eff",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "da846bb1-cb35-413a-9a36-9cf69a3c8852"
        },
        "item": {
          "id": "ab4891f9-d2a0-43d7-8e90-84c9704ea1e9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b1ac21d0-df8b-4fb1-8526-0874b43bfa9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23be745f-424e-4f23-a4c6-ac282aa848b8",
        "cursor": {
          "ref": "cc486998-eb61-4e58-a373-62767c69ba74",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "583ef531-1250-4c65-bef0-7b37ea1ebf21"
        },
        "item": {
          "id": "23be745f-424e-4f23-a4c6-ac282aa848b8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9663d5a4-694a-4dba-abb0-c5907e400e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e8f6e5-382c-4396-bb14-045002e1a75d",
        "cursor": {
          "ref": "7a437a7f-4183-4523-87b0-21c662ef570a",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8d899a7e-21cc-480c-add6-e1cb0ca91f56"
        },
        "item": {
          "id": "f4e8f6e5-382c-4396-bb14-045002e1a75d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "83ced151-11aa-415d-9836-9d053fd24432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3014f2-cfcf-4879-8f4f-e2c43b2fbe67",
        "cursor": {
          "ref": "c1276f02-987e-4214-9f31-9823320c0d19",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "03f3b797-207a-435a-90f7-b75ffe15aa7d"
        },
        "item": {
          "id": "8c3014f2-cfcf-4879-8f4f-e2c43b2fbe67",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "66a0f720-e41c-4499-9f65-fd657c60000d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297d8a44-f668-4db3-a7b2-6bdde4cf3f7e",
        "cursor": {
          "ref": "f65807e2-da0b-4916-9a36-0452a17a92b1",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "731b8751-e774-4df6-8764-24ad29925a84"
        },
        "item": {
          "id": "297d8a44-f668-4db3-a7b2-6bdde4cf3f7e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f47e1d12-d2da-442c-89a8-f4fc06dd86da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd056c30-9a82-4582-b326-602ecf4620d8",
        "cursor": {
          "ref": "a087f747-06f6-4bcf-9a36-d24ff8ca23fd",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "47a597bb-535d-4659-afa7-99db193ddf24"
        },
        "item": {
          "id": "dd056c30-9a82-4582-b326-602ecf4620d8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "99fc2ddc-3041-405f-84e5-a2e3486a50a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220265b4-1916-4d8a-a217-cc921335d5ed",
        "cursor": {
          "ref": "65888e56-b2ed-4f8d-84d5-73dbd54517f8",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f17a4ca9-680e-48f2-ad6f-5f29b8a2c6e8"
        },
        "item": {
          "id": "220265b4-1916-4d8a-a217-cc921335d5ed",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "28c67ae9-d215-45ed-adf3-be9e3e6e77b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eff4205-3aaf-4954-aa15-cc725304d9d7",
        "cursor": {
          "ref": "aac98ea0-1aa8-448d-ace0-708b775cc023",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "61a4d1b6-74a4-41eb-86fd-f87eb9b56259"
        },
        "item": {
          "id": "1eff4205-3aaf-4954-aa15-cc725304d9d7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "da9251d6-a671-44fd-81ab-ed26796ab33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b96d4fe-1c0d-433c-b277-04c2ae0da4dd",
        "cursor": {
          "ref": "8c605528-1455-4403-9dfc-cebae0944646",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6a4f7455-9f82-447f-be79-e39d9b8f5fd5"
        },
        "item": {
          "id": "6b96d4fe-1c0d-433c-b277-04c2ae0da4dd",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "183b7188-2bb0-41a0-8b78-c3bbd2db46e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02165e66-9b37-474a-9333-882433323a4f",
        "cursor": {
          "ref": "3a0630f9-a3ff-4ee4-9317-158b67899227",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "070c47c6-caa9-4371-8e42-f8c1357034db"
        },
        "item": {
          "id": "02165e66-9b37-474a-9333-882433323a4f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a46dafb4-4e90-4d1b-bb5f-f864a8e6c9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d94721-4ea8-4208-b77e-e71e9caccfc4",
        "cursor": {
          "ref": "09c7b0f0-e53a-4189-853d-c6511aa5eaa3",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "75c68cd7-4758-468e-996f-8f0fd5c3b6d1"
        },
        "item": {
          "id": "99d94721-4ea8-4208-b77e-e71e9caccfc4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "96e153ab-0711-4965-b52a-157cd1363c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1320d1b6-4a4d-409e-b9e9-e623eeb67acd",
        "cursor": {
          "ref": "bc5c767e-4ecb-4f4f-86e8-fa7300657c12",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0b98f308-e40e-4e1b-b5f0-e2a80611dd99"
        },
        "item": {
          "id": "1320d1b6-4a4d-409e-b9e9-e623eeb67acd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "19900531-4454-4029-9405-425462f16335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222782cd-f415-4181-8d5c-ee076acc986a",
        "cursor": {
          "ref": "9bd1a0c5-0fbd-4d9d-b196-3a195d4d5b2c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2ff28b94-1e02-486d-8356-1b6dda11381c"
        },
        "item": {
          "id": "222782cd-f415-4181-8d5c-ee076acc986a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "35ca10f6-cb2e-4ce9-8681-5c195d763f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06bd537-67cf-472f-8f31-be3a3e5264ea",
        "cursor": {
          "ref": "fa36a553-0c15-4a87-9809-5f8ea26c5b9b",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5af173ce-aa9f-4130-b755-d19bc0095763"
        },
        "item": {
          "id": "b06bd537-67cf-472f-8f31-be3a3e5264ea",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3e991cb3-c30a-467c-bf79-a80a03eed11f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39b4996-10aa-4dd3-b820-6d7bde00d60a",
        "cursor": {
          "ref": "a8cf68d6-b44f-4250-aaf3-a22b655c3d6e",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b5b49bc1-5ced-46e9-bd83-e6dc62b05215"
        },
        "item": {
          "id": "b39b4996-10aa-4dd3-b820-6d7bde00d60a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3ca6328d-c863-4b12-963d-683f097adfea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1cf47d-95e4-4199-8894-615e0f08113b",
        "cursor": {
          "ref": "6b723a3c-016b-4725-b452-7dbfad7bd5ee",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4c7737e2-eb40-4b4d-acac-b2e2f9e834e2"
        },
        "item": {
          "id": "9a1cf47d-95e4-4199-8894-615e0f08113b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0e62a9ae-e755-4493-99d1-6363aa8e8e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fde6437-9ed3-4312-a500-34184c05f98c",
        "cursor": {
          "ref": "8c8a23af-fae0-43dc-b27c-3c531e55ddf6",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f1064edd-2b92-4582-b844-25d358999cb0"
        },
        "item": {
          "id": "8fde6437-9ed3-4312-a500-34184c05f98c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1ccd1799-f62d-4543-adc3-f084a9d44fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5213f47-7fb1-4799-b547-b8a14d249654",
        "cursor": {
          "ref": "cb8785a4-ccad-4d4f-8258-aa926b9e3396",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a94ddb8f-3610-4247-ab01-bfd5f8a9f7ce"
        },
        "item": {
          "id": "e5213f47-7fb1-4799-b547-b8a14d249654",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0ea208f1-a756-446b-91ce-35536523ff35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d70d88-ff18-4f91-9989-99ce95ea426b",
        "cursor": {
          "ref": "eaaf4a67-cf93-4c2e-b467-b7d73e5e8809",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a69566da-8d42-45b7-b75d-f021b6bed094"
        },
        "item": {
          "id": "27d70d88-ff18-4f91-9989-99ce95ea426b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "adc28aff-51c3-4253-bbe5-238e0584370b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcd0a36-77d3-480b-a5d0-73ec98fd9277",
        "cursor": {
          "ref": "7ca4cc71-ee8c-41f8-ba3e-c19629bd73db",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a1f60f3b-3931-40df-b913-adb6255bba5a"
        },
        "item": {
          "id": "7bcd0a36-77d3-480b-a5d0-73ec98fd9277",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "199c53e2-c4b0-4f91-944c-6cacc8ded52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a7cdd7-0a9f-44fa-b084-97f46ebed5dc",
        "cursor": {
          "ref": "78c450ba-9b26-45c0-9c4e-df1370615a98",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2de480da-a458-48cd-86d0-42fc2643f7f2"
        },
        "item": {
          "id": "b0a7cdd7-0a9f-44fa-b084-97f46ebed5dc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f23392d5-1a82-4c7c-af7f-f551663429fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1739603-30f3-46e8-bb5e-279e5c368e2f",
        "cursor": {
          "ref": "93fc26db-20e1-46f8-9863-fe3b5efa4997",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e01431cc-cb24-4c04-9089-30acb7f784f6"
        },
        "item": {
          "id": "d1739603-30f3-46e8-bb5e-279e5c368e2f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2d88c5d5-07a4-4a29-a339-624339718e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3fb2ae-6ba0-4442-82e5-97ed1b185db4",
        "cursor": {
          "ref": "07a990fb-4ed3-4d05-b785-60c28dcfc08b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1add96cf-9493-4578-a27b-4540b63bdd63"
        },
        "item": {
          "id": "ea3fb2ae-6ba0-4442-82e5-97ed1b185db4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "573a2687-4735-45e2-91b9-320574d7bb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa51d1e7-66fd-42b7-94c5-7a80eacddaa5",
        "cursor": {
          "ref": "b6984588-3e9b-428e-a4c4-75a9c7aec2ef",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e4afd62c-9981-4543-9426-027df3a0fea1"
        },
        "item": {
          "id": "aa51d1e7-66fd-42b7-94c5-7a80eacddaa5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dea24b5b-0f6a-4443-83b9-1f0d8f83202a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bbb429-6a23-4201-a9f4-a43395329d56",
        "cursor": {
          "ref": "235bbf66-1c88-4004-bb83-91a824d39b0f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "edbc1053-d33d-4248-abeb-df028a651dda"
        },
        "item": {
          "id": "44bbb429-6a23-4201-a9f4-a43395329d56",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "18e9c8e3-999f-4d2b-99d5-18dfb751030d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcb7fac-c27b-4770-9887-b8fb5b14309e",
        "cursor": {
          "ref": "0824a897-fe0c-4321-b255-2cc97aed93c7",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "273e4a77-48e5-4d10-a85b-cb3ba2115aa1"
        },
        "item": {
          "id": "3dcb7fac-c27b-4770-9887-b8fb5b14309e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "20029f95-de8d-4c96-ae0e-208b55a18c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0febd1a1-9beb-48e2-af28-b062915fa5b8",
        "cursor": {
          "ref": "377b4fd2-83d0-4aaf-bc6c-3480e374f0d7",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c284d961-3d4c-49eb-bde7-eb262b79c08c"
        },
        "item": {
          "id": "0febd1a1-9beb-48e2-af28-b062915fa5b8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2f711735-a243-44fc-9340-f69b64c571a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12b1b1f-fd7f-4b3c-beb4-b8eb2d94f2f5",
        "cursor": {
          "ref": "dee236a7-3940-441f-8bb8-232938e46260",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5eef2f9f-9c8f-4d8f-ad7b-efc144cb2048"
        },
        "item": {
          "id": "e12b1b1f-fd7f-4b3c-beb4-b8eb2d94f2f5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "50b91040-b939-4891-b7d4-38564f0245d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd730266-acbf-4f7d-93d0-11c8b0fa4005",
        "cursor": {
          "ref": "9121fb95-6761-4702-a758-253e065f99f6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bad3f7d1-efca-4bfc-b053-f38568fc994f"
        },
        "item": {
          "id": "fd730266-acbf-4f7d-93d0-11c8b0fa4005",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8f2273b9-0546-4c9b-add0-27686f5e9806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3e143b-efe4-4f2b-872c-3a218d4846da",
        "cursor": {
          "ref": "bdf4e036-c3e7-4b7d-a717-014961e119d8",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "21c2a419-52ff-4dc6-9b1c-7255e3146627"
        },
        "item": {
          "id": "be3e143b-efe4-4f2b-872c-3a218d4846da",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b8bde05d-50eb-4160-b988-0726f1cb9f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1475074f-d722-44ca-8f52-99049b1d426b",
        "cursor": {
          "ref": "c0b92dcc-ffac-4dd3-930a-608af8f4099c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b5a76846-adec-43c8-8844-0461bb3e84d2"
        },
        "item": {
          "id": "1475074f-d722-44ca-8f52-99049b1d426b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b3c4f460-f209-465b-9d63-5bb3d592d40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac2ce45-63d2-495f-873f-5d415a126ad8",
        "cursor": {
          "ref": "db524a58-c2c0-4f05-9bcc-1f38b3b37c81",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a105b65a-4c7b-4f58-b2e0-e67c3be2ec88"
        },
        "item": {
          "id": "5ac2ce45-63d2-495f-873f-5d415a126ad8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "863247c9-a00b-4779-a371-39a8cb0c36f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179536a2-8512-471d-8f93-f2c1795a9393",
        "cursor": {
          "ref": "6cf52fe2-f989-49e7-a184-3ad720f1cb87",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9cecddaf-39ba-431c-9067-4b8774f228d6"
        },
        "item": {
          "id": "179536a2-8512-471d-8f93-f2c1795a9393",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "69342bcc-c2e0-42d9-9950-f6999b326d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cca66f-b4ee-4cc0-9d6e-8e9ddad1b8f3",
        "cursor": {
          "ref": "d2469075-e860-4932-8587-2546ecb07731",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f2f0a867-6890-4d87-a2dd-e8134f3f8ac2"
        },
        "item": {
          "id": "40cca66f-b4ee-4cc0-9d6e-8e9ddad1b8f3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0ed274a0-e8fc-47e3-b1c4-72e0274859bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e00c0ba-0dec-44f1-a589-bb6fbbe7fb74",
        "cursor": {
          "ref": "43366786-b0ba-4797-8f3f-2feec6841e7e",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "067e52d0-569a-4bcd-a27f-27515713b888"
        },
        "item": {
          "id": "2e00c0ba-0dec-44f1-a589-bb6fbbe7fb74",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d388e977-ffda-420c-9f1d-9b879d8484db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607b77b8-d8b7-461a-a5a2-489dfa2ffa16",
        "cursor": {
          "ref": "0848fb41-d923-4e9f-a0bf-6e5d8c5f3bfb",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5e4a4fbf-ae36-41af-89e9-4c1876ea3285"
        },
        "item": {
          "id": "607b77b8-d8b7-461a-a5a2-489dfa2ffa16",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f7910431-4049-4a15-b94b-4770b7e4bbd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5adb703-278f-4cc9-b9ad-6a1cb89b81a1",
        "cursor": {
          "ref": "210c22f1-03ad-454e-a63f-1ae3dacda5f6",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b32dfe26-febe-4fd7-a3fc-e0476e7188b4"
        },
        "item": {
          "id": "e5adb703-278f-4cc9-b9ad-6a1cb89b81a1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e4b9d194-b207-4c51-a891-7b20b6011151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9131d36-af72-4dfe-bf86-6e229db37502",
        "cursor": {
          "ref": "11df75c3-4e52-4689-92df-03b2f6ac4c1a",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9caa0a5d-47f5-4b17-884e-39763c424559"
        },
        "item": {
          "id": "f9131d36-af72-4dfe-bf86-6e229db37502",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "66e5922c-7215-491f-8039-7fe94ed67c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d97694-fd8f-4732-8cd2-957084995ee7",
        "cursor": {
          "ref": "070d3d49-48a9-46f2-b50c-ecf14b4b2d34",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b35d3d5e-ac45-40d4-ae0d-7efa178e28a1"
        },
        "item": {
          "id": "d9d97694-fd8f-4732-8cd2-957084995ee7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7b1b33f7-fff8-41b5-ba98-de22ed8652eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c96679-035d-4513-aea0-902ab0546373",
        "cursor": {
          "ref": "7e21b99d-27d9-4ccd-8463-5c42f23af34f",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0c7e013b-4c91-4246-ade1-d6ce04e919d1"
        },
        "item": {
          "id": "a3c96679-035d-4513-aea0-902ab0546373",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0ca78976-0440-4ae6-830b-1c8858dabebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0398533d-d769-4234-89ac-f69dddd25f28",
        "cursor": {
          "ref": "988bb519-727b-41ce-9148-adca73e44319",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d267a703-daf8-4752-b803-3af2869200a2"
        },
        "item": {
          "id": "0398533d-d769-4234-89ac-f69dddd25f28",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e082b743-9254-4a9c-84d4-c1f16b07ab9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f43adb-9e58-4780-98a8-82102cfbee2a",
        "cursor": {
          "ref": "7abfb8a0-b9f0-43d5-8ec5-097da8ac08d7",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "90a4000f-936e-404e-811e-ecffac13be64"
        },
        "item": {
          "id": "91f43adb-9e58-4780-98a8-82102cfbee2a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "06112b33-e602-4f18-aa44-879e78c171c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c905eb-a110-4fc4-80eb-5ac5b845cdfe",
        "cursor": {
          "ref": "9a327faa-ba90-4d31-acce-d954316902e9",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c004d9c-fbbf-4267-88ed-8b1def768de0"
        },
        "item": {
          "id": "37c905eb-a110-4fc4-80eb-5ac5b845cdfe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f7cfcd7e-b086-419f-aa1c-b2e50322bff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5b3ffd-e1a4-4900-9a39-c410d280301b",
        "cursor": {
          "ref": "9193f0f3-9404-4867-9540-13f9e78f0060",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7e802160-e77e-422c-a2f8-6035c96571b0"
        },
        "item": {
          "id": "4a5b3ffd-e1a4-4900-9a39-c410d280301b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e24cad88-289b-4ac8-b2a6-f0fbba4d2185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674bf1d1-e0a6-4be0-bc95-e6f4f688cbe3",
        "cursor": {
          "ref": "b913ee53-67a7-4184-9765-e0eac9864eba",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e369ee41-4692-47a3-acbd-ed08a045a619"
        },
        "item": {
          "id": "674bf1d1-e0a6-4be0-bc95-e6f4f688cbe3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2e4c16cb-3572-42be-9eef-317b08813ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67663153-a64c-45d8-b608-a5a6bf7d0918",
        "cursor": {
          "ref": "e799fea5-7381-4ac5-93ac-f8a8b71dea03",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6dc91d17-6e46-4f16-8ed2-64522c1ebac5"
        },
        "item": {
          "id": "67663153-a64c-45d8-b608-a5a6bf7d0918",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4a91b449-68f5-4ab8-b604-312e1c62d7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2c92b0-ec14-4b66-8faf-20cb540149d9",
        "cursor": {
          "ref": "3a4c9f17-3ceb-44e8-b5bb-28ed8182af25",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bff4b136-833c-461a-b002-abab711a8301"
        },
        "item": {
          "id": "8d2c92b0-ec14-4b66-8faf-20cb540149d9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a8add6e0-c3e2-473d-be7c-8605926d8c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90fe374-30b0-4c31-a5c3-3003ea5dc185",
        "cursor": {
          "ref": "8b061881-531d-4c64-bc14-60cfa474e2c2",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a9ba67c2-7f87-4161-8aca-2584e19ec77d"
        },
        "item": {
          "id": "a90fe374-30b0-4c31-a5c3-3003ea5dc185",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "47f065b3-5041-436d-b981-b790156f7c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cfd80c-b265-4c4a-8257-333ce6f000e3",
        "cursor": {
          "ref": "00ab4415-a459-4aaa-b8b0-309719cef86c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "316b1055-5a1b-446d-ba50-d73243b422e0"
        },
        "item": {
          "id": "27cfd80c-b265-4c4a-8257-333ce6f000e3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "96faddde-7c4e-4f97-af95-36405e693b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a6383b-782a-4529-b331-9754c4e46a41",
        "cursor": {
          "ref": "6400f8d3-e2a1-4da5-a43a-dcbdd4b4a226",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "36a1cf2a-23f4-436b-93c5-c84430e6025e"
        },
        "item": {
          "id": "09a6383b-782a-4529-b331-9754c4e46a41",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "231de871-815b-4ef7-9830-1287a0e847a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47972b4-2af7-4d5c-a6be-d348c08ce3f8",
        "cursor": {
          "ref": "8417f598-8902-4225-99d0-f5f81cd5dc46",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d70015fe-9a91-4eed-8081-6f37e9008713"
        },
        "item": {
          "id": "d47972b4-2af7-4d5c-a6be-d348c08ce3f8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3b63e011-0c87-4c1f-bd1b-d31ed756fdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48da67c4-bd99-4fb7-9606-9bad461380d1",
        "cursor": {
          "ref": "9b553d65-46bd-4287-aa06-ae10b469c6a8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c3d831a8-a09c-45f2-a76f-aec631e93aec"
        },
        "item": {
          "id": "48da67c4-bd99-4fb7-9606-9bad461380d1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c5d98632-6bd2-431f-b5dc-d35d68a01d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb49010-9946-4333-8f12-d7e069f7e957",
        "cursor": {
          "ref": "1636f7d9-7227-4f1b-ae6c-a7ecc2f9a9e8",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "162b8aca-1a4e-4989-aba3-0b551e90edfa"
        },
        "item": {
          "id": "6cb49010-9946-4333-8f12-d7e069f7e957",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d4df6afa-0468-40e3-8d4d-5184e1f639a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a61b00-0580-49ea-b52c-387e4292ee54",
        "cursor": {
          "ref": "920e8f53-5e9a-43e0-8c60-393fe71d903f",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7f9b87e6-7c72-45e1-8208-7daf01a37c8b"
        },
        "item": {
          "id": "78a61b00-0580-49ea-b52c-387e4292ee54",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d651d4dc-d5b9-4b9e-a1b0-3e360ee37af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae43cb6-c316-4d02-a7db-fd90541da9d7",
        "cursor": {
          "ref": "38222b7a-7eb6-43ec-89ce-64d789195f10",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "88d4280e-a98b-446a-819a-e58806f158e3"
        },
        "item": {
          "id": "3ae43cb6-c316-4d02-a7db-fd90541da9d7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d7efcff0-e4c2-4632-b82a-00ba3c923fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8faa21-6af9-427e-8d52-e213b6404353",
        "cursor": {
          "ref": "36a566a1-0faa-4543-9805-1b2f2971d5ee",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "69ab0fa7-d066-491b-b88a-1ba8819da987"
        },
        "item": {
          "id": "3f8faa21-6af9-427e-8d52-e213b6404353",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6d24f9b4-962d-43a3-ba5d-a4d742d5bf81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c14a75b-1743-4b32-b42e-03a08d203367",
        "cursor": {
          "ref": "256e5beb-9102-4153-99fe-295b4d1db366",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5f8495cd-d865-461e-92e5-c13a50e72f44"
        },
        "item": {
          "id": "9c14a75b-1743-4b32-b42e-03a08d203367",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7cd5f29e-8059-468a-ac9c-82ac7f499924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a9ea4a-bebb-4dbb-b1c7-f8cf822a6878",
        "cursor": {
          "ref": "02ba2f5b-b960-4c8a-9f96-1f36df3427f9",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "970e3087-8587-43b7-9e24-ceef09de139b"
        },
        "item": {
          "id": "c3a9ea4a-bebb-4dbb-b1c7-f8cf822a6878",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "eb81d42c-7824-4bd2-9b7a-9646dfd140d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a364069-9604-45cb-930e-fc0dcda1eacf",
        "cursor": {
          "ref": "d57cdfc7-e24c-4ccd-be6c-8f1515987074",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5512e78c-6611-4e5c-bf73-579191bef6a5"
        },
        "item": {
          "id": "2a364069-9604-45cb-930e-fc0dcda1eacf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9b066b7d-57ad-401e-94d6-0290636d5b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3adede-09d6-475c-8901-cfab1ccdc4f9",
        "cursor": {
          "ref": "46537687-5e00-4fdb-88a8-c9dd1cbe6d7a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "641bf112-4e78-4915-bdd5-9651f44bf913"
        },
        "item": {
          "id": "bf3adede-09d6-475c-8901-cfab1ccdc4f9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "976111f1-bc83-4ced-9ebe-069f4e8a9ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f67c070-3726-469a-a468-ba194f4074d6",
        "cursor": {
          "ref": "d41e2557-f26c-445e-b285-212679ef9582",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1614a66b-a2b3-48d0-b775-08643216c7a9"
        },
        "item": {
          "id": "4f67c070-3726-469a-a468-ba194f4074d6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ff139c42-7319-4823-9ae0-a7ff4c3cd9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8abc96-878f-4e2d-b2e3-611d92be23ec",
        "cursor": {
          "ref": "70a019cf-b402-481d-9189-47bc9037b02b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "344f17dc-b888-4c7a-91b7-8ac4406f3a63"
        },
        "item": {
          "id": "2a8abc96-878f-4e2d-b2e3-611d92be23ec",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "54a93e16-1129-44b3-b15c-4081ea7a50a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d4beef-f93e-4dd9-b6a6-d1285f0b1e8e",
        "cursor": {
          "ref": "e4aff1fe-09a6-4e31-88a7-e38287c013b1",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f98ea21f-ed38-410a-9979-45157198d6a8"
        },
        "item": {
          "id": "a8d4beef-f93e-4dd9-b6a6-d1285f0b1e8e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "719086c4-fecc-4d3a-bed5-dfb9c8a621f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a090ce-0377-41b2-be69-2ec1a1fb7626",
        "cursor": {
          "ref": "787f4b9d-a8d4-4ed2-86f9-61a0d206c22b",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e1722776-7aa1-4bf5-bbfd-e2624b7440e9"
        },
        "item": {
          "id": "93a090ce-0377-41b2-be69-2ec1a1fb7626",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "179179d4-40c3-43aa-a953-5a467fe7e6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19cf8f9-87b4-4ff4-b681-496d30d18cf5",
        "cursor": {
          "ref": "740fc3a8-ef09-4e78-9c52-d9cc8d98fa38",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e6648dd0-1440-4204-8bab-f6dd046b2381"
        },
        "item": {
          "id": "e19cf8f9-87b4-4ff4-b681-496d30d18cf5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b50b2d8d-cfdf-4880-99bb-bf1aa6a1cfa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36847135-886b-440a-81d8-b5d66412eb60",
        "cursor": {
          "ref": "70953249-fe27-4c88-bad5-9c0ac2a1b199",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0f846adb-5d4f-408b-80d3-93be14fa4cd8"
        },
        "item": {
          "id": "36847135-886b-440a-81d8-b5d66412eb60",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "28cd1f6d-5463-4d91-bd0d-0e14c12800fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf375bf-3df3-42f7-8a27-2f82e588c344",
        "cursor": {
          "ref": "f809a4c2-0295-4091-baec-4aa799cf8934",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1ec9c8ab-96af-41d4-8c11-04e403873246"
        },
        "item": {
          "id": "ccf375bf-3df3-42f7-8a27-2f82e588c344",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6c7dfdd8-2aa5-4786-acab-1fc8f452d1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8ab4b3-d025-4bf1-bec7-9a803b8ae2d1",
        "cursor": {
          "ref": "1d11b7a7-8a08-419f-86c1-cd9a2f95fe3a",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4ac9b73a-6934-4dc9-9d58-5cda672685e6"
        },
        "item": {
          "id": "4d8ab4b3-d025-4bf1-bec7-9a803b8ae2d1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f8eb60d6-ab4a-4d36-a49e-bb07ba897d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d3e731-d89b-48b1-b6fb-148582233fc1",
        "cursor": {
          "ref": "3c2ec89e-593b-4435-9f60-d7332d53ed1b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "748be66e-4dec-4103-8bda-f69a2439f632"
        },
        "item": {
          "id": "43d3e731-d89b-48b1-b6fb-148582233fc1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7a21874a-6db9-4dd4-8ed8-ebe4880935ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a957d3d4-1214-4226-bcb3-7685c3d9bbca",
        "cursor": {
          "ref": "81c196ee-34c0-4640-90af-79030c86f83a",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "74bf8668-37d7-4853-a86c-775647ff56eb"
        },
        "item": {
          "id": "a957d3d4-1214-4226-bcb3-7685c3d9bbca",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d460382e-c848-4531-9c5d-f1b6635b5afa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83119371-7a30-4e22-9d99-8e0e12d93762",
        "cursor": {
          "ref": "0df7b298-e5c5-49df-ae5e-936daffc89c0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c64568f7-73be-45e8-9574-5d3748649311"
        },
        "item": {
          "id": "83119371-7a30-4e22-9d99-8e0e12d93762",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b151c723-b955-407e-961a-37da381c3b3a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdbf79e-1c20-469f-bb1d-e0a699908825",
        "cursor": {
          "ref": "7f9289c6-9c0f-422d-bf41-23f31fd91401",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c4fe3241-45cb-42f1-918a-5f3326626782"
        },
        "item": {
          "id": "8bdbf79e-1c20-469f-bb1d-e0a699908825",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f41da1ed-01b9-4b2e-b2d3-e1b975114daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "fd874131-babd-4e3e-b462-ca57f97fd5c0",
        "cursor": {
          "ref": "77759597-5896-4a85-a1de-258f2be23e13",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2a52d69c-46e2-4ed8-b62a-bb9dad4e1083"
        },
        "item": {
          "id": "fd874131-babd-4e3e-b462-ca57f97fd5c0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "677231ee-4a61-427c-8eb1-7afc65e39a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "6fdc51b9-1991-425a-921e-75e2c700a53a",
        "cursor": {
          "ref": "24487db8-441f-4f69-acd8-0a0a05cbe83e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "418c1baf-2778-4f87-94dd-dff1bfad2ae4"
        },
        "item": {
          "id": "6fdc51b9-1991-425a-921e-75e2c700a53a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e7dae340-7011-435d-91dd-61c172b95f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "9bcbe291-630a-4c19-998c-3be3b022f569",
        "cursor": {
          "ref": "51973247-1e8f-493a-a6f1-140ebe7510e6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5c1d6643-ef4d-4556-99b0-bd1c1daf6ba8"
        },
        "item": {
          "id": "9bcbe291-630a-4c19-998c-3be3b022f569",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8dc6cd14-99e6-4bd3-8577-acf56bdc03a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcbe291-630a-4c19-998c-3be3b022f569",
        "cursor": {
          "ref": "51973247-1e8f-493a-a6f1-140ebe7510e6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5c1d6643-ef4d-4556-99b0-bd1c1daf6ba8"
        },
        "item": {
          "id": "9bcbe291-630a-4c19-998c-3be3b022f569",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8dc6cd14-99e6-4bd3-8577-acf56bdc03a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcbe291-630a-4c19-998c-3be3b022f569",
        "cursor": {
          "ref": "51973247-1e8f-493a-a6f1-140ebe7510e6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5c1d6643-ef4d-4556-99b0-bd1c1daf6ba8"
        },
        "item": {
          "id": "9bcbe291-630a-4c19-998c-3be3b022f569",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8dc6cd14-99e6-4bd3-8577-acf56bdc03a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6bb211-4b80-448e-ba8a-10855247a373",
        "cursor": {
          "ref": "9957048f-d758-4c6b-88ca-37af4747c2cc",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9418a4ea-cb42-4460-b614-18b29060a6c9"
        },
        "item": {
          "id": "9f6bb211-4b80-448e-ba8a-10855247a373",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "742e4e56-1fcf-4639-8a6a-882236e0bdcc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46faddc-1a71-4451-9733-4c65c02158f5",
        "cursor": {
          "ref": "61c4ed17-5a44-40a8-890f-25943018e6ee",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9cb56de7-6793-4d84-a276-4759399c28e2"
        },
        "item": {
          "id": "b46faddc-1a71-4451-9733-4c65c02158f5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e148f9ed-6956-4a79-b48f-3ddedc44d051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "b46faddc-1a71-4451-9733-4c65c02158f5",
        "cursor": {
          "ref": "61c4ed17-5a44-40a8-890f-25943018e6ee",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9cb56de7-6793-4d84-a276-4759399c28e2"
        },
        "item": {
          "id": "b46faddc-1a71-4451-9733-4c65c02158f5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e148f9ed-6956-4a79-b48f-3ddedc44d051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "76670f10-1acf-4021-814a-421ef2be36f7",
        "cursor": {
          "ref": "ce2f8513-a147-4db3-bbd6-e7623908db9c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d633a884-ba14-45e2-a6cd-78f165e75b30"
        },
        "item": {
          "id": "76670f10-1acf-4021-814a-421ef2be36f7",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0f777415-db01-471c-a430-ece9c6aa3b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c18b7785-e273-4f10-98b4-1cb7cbf6645c",
        "cursor": {
          "ref": "39b2cc80-c0ca-4000-a060-bacaf63a3ec7",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "22f6ec4c-8047-4818-b954-cc7dde982e7b"
        },
        "item": {
          "id": "c18b7785-e273-4f10-98b4-1cb7cbf6645c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8152ec82-7daa-4c2e-a2e7-74f51d99a452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c18b7785-e273-4f10-98b4-1cb7cbf6645c",
        "cursor": {
          "ref": "39b2cc80-c0ca-4000-a060-bacaf63a3ec7",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "22f6ec4c-8047-4818-b954-cc7dde982e7b"
        },
        "item": {
          "id": "c18b7785-e273-4f10-98b4-1cb7cbf6645c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8152ec82-7daa-4c2e-a2e7-74f51d99a452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "17a68094-2e5b-4c01-8ae8-e2e24cd5e56b",
        "cursor": {
          "ref": "a2c3f503-c249-4029-bc52-fdbe61ca0d22",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ded48a2a-6386-4036-b889-54b4684a15db"
        },
        "item": {
          "id": "17a68094-2e5b-4c01-8ae8-e2e24cd5e56b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6c21cc25-9d1d-4a59-964e-876a449b12b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}