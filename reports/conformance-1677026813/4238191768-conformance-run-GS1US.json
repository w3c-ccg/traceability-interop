{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bf8a6f9b-f1cb-4083-a264-0788ce84643e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "70d76583-02ca-47cb-82fe-03661c3c8456",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29bf780d-f93b-4764-830f-adf05bf27485",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4b3e8fdc-a126-4d83-a8d9-2cd5fc7255df"
                }
              }
            ]
          },
          {
            "id": "552aee8b-6f08-4cb0-b6e6-d4accc787b8f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b5d1968-e83b-4f6a-8dad-a1f3967349e2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d04d45d5-774f-48af-bfad-41b4a4c7bb26"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "049b4451-06a9-45e6-8e35-95f308ab74b5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "37114482-9cd7-4bb1-b037-cbfa336c137c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8bc6f8b9-688b-4207-a15b-0250addf16bd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1438d0c-a336-4c4b-a9e2-4ed8a1c42843",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfa23255-426d-4e55-9158-cff89c41ff47"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c994548b-83f0-4c4a-b399-cbed0ee567c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "638ffd6b-12bc-44ce-a04f-9af10282e828"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3155b5fb-4c60-4790-92af-b195a396103e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "761e4232-5191-42fe-b9d1-ff00a494a9e5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9653dade-8df6-4a1f-9e04-519d327a8593",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f31c5c42-487b-464c-b9a7-d696e616d500"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06f4ba50-daa6-4802-ba31-a4006c975c32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81475da3-4545-48e3-bae6-e67e2e609148"
            }
          }
        ]
      },
      {
        "id": "5f475a19-0629-4364-bee1-99320b50e8b1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "36d26203-06fb-458d-986a-024db6cb5970",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ebde707a-b204-43a7-9f3c-384b9d00a976",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d0c4c919-f4b5-45ba-ac0c-9b4b0d9bf0a1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6dd905-e35a-40d3-9a1c-e668ffecb21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaf2f507-3f41-4a30-8b94-af63a112bb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fe9c3c-491e-4fa4-abc1-744b57e53922",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9264f5e-de7d-4f30-907a-fd1a3ece08c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfe14563-a9a4-42ec-bc65-e8b559d7d842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4162dfa7-bb6b-4760-bb2f-28b77e9d1dca",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f99f41c-75bf-4b79-9ba9-305521aabe5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e38c56e0-7ae5-4d22-8ad2-a1758d22ea66"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8a4a225-dfde-48d7-b15c-944eb7abeba9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "808fdb16-089b-4e36-b998-df9d566245e3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a059330-dc75-4c65-8bc2-b087debee381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d434e462-be34-41f5-bd9b-e510dc8515e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab16e96b-d014-41f9-8d35-4c0389f76611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2195656a-1bde-41d4-aa20-201dcf17c5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee847b64-0f5c-4234-b2ea-58ba2c8aed64",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c53ae1-8d13-43d4-91e0-aa9be2ebc879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44b31515-1774-48d7-8e74-9d35dbd519b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e16e35-8387-4210-bab8-df6914420a16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ddd79986-a444-4c83-9f20-38dcc3e49782"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "25a7fcb8-6ede-4a91-aaf3-b694dfb996b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d00f8da6-31f6-499e-8b38-496bc1597c89",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad53bd64-4207-481e-9121-389593bf0612",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "50b55344-12ce-4a72-9818-b4e0a424012f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98a3bc93-39fc-450c-8055-54b5b74c0220",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d4abc156-9d43-4662-97df-8af144b5fd05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c6be89c-15ba-4f17-8cd3-1e77a97999ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51e3790d-0a2c-4834-b85b-1ab08152d81f"
            }
          }
        ]
      },
      {
        "id": "05f590b7-9637-4e8d-ba8e-208214f5cfd7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3fa4b47f-d470-44e8-a4e1-73d7afa910d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec57e639-4eb1-4df2-967c-2f62d9b98c32",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "981e04fe-c66c-4625-93db-c490ec83cb34",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ada77a-78c3-47a8-b293-9e3addead85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660b4c7c-e730-42e3-8521-cce21be56c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a1e6ac-57c5-4dd9-8225-0b6720d7ab24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3aea46eb-4843-4e6d-8c34-22db8d797419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1cd4cf-73bc-4b9a-98f6-04aa2985c9e9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06eeb81-1018-44a9-8990-93337f160a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ba8ebf-4cc3-44fa-a5b5-bc29e0dcfdc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3095f1-432f-4103-bd69-f8fa29f3afff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "547b1b06-05af-496e-9ee0-ad2a04246703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c157a30-f0f3-4170-8afc-5dc52971cdd8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bd0d7b-0401-44fb-b8c0-136304b9f5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837c6d70-474c-485e-87e2-05bb9f2635c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa76c12-f4cd-4395-834d-2b19f5730b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f2179c7-a933-4146-9632-0215c5019394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39515bf0-f5cd-47de-b0d8-79b31ddf7c57",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb17adc6-b7e3-4053-9de4-c9635da595c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edacded2-c3be-4a6a-913a-be4b634bf334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a46580e-6871-44b5-bab7-12752a8d9677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64c366c0-90b8-43f6-8d7f-e9b4b6960b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5ed08d-3fe7-43d0-a8fe-a812f1e5031c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bee5cc0-37bb-45b5-8b95-242792e7a565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69f85ab-1095-4118-8964-de3e8bcf1724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7370b4b7-21c6-4bbe-b035-4d30c0fee58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bd56cb0-3335-4417-b557-d63cfb361e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f7486b-1419-4da4-baaa-2076678c9545",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bbbba2-cc4e-4d4f-aff5-08fac9923498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a87fd70-4b4f-45d7-9428-0943ca5cdd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f516a58-05c5-47bf-a0cb-6e0aeb7dc495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fd86beb-4e21-4bdf-9f26-19e7f63e4fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ef2409-bfe3-4b95-9c53-31e6065ae5da",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4800052-4ad4-4ed5-a94b-ed36f36f441e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2a767c-35eb-4c91-9243-838dcdef159d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dd1535-ede5-4620-9ec7-5bcf74179fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3a27efb-3d50-4329-a394-7cbb0cb53759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ca91ad-44dc-43b2-95d2-561812e3b0e6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1369f27-d350-43f6-bc4c-b8552d18680e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365bad31-ece6-45f9-b484-52cd0e2e8c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311c7894-772e-4fd8-962d-818e6dd090cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "affecd1a-300c-4816-9e28-b294209fe5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c6fb09-16d7-40ec-a564-aa79572af81a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b29675d-24d7-4f6a-b73e-45aa5f4ae0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3d65dd-e7aa-4bb1-8a68-b23c49fc3b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93164be1-4f90-45c4-9cef-bcd8415bd12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f81796e5-3fbd-4f3a-8609-b51273eb841e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e66dc1-d25f-4252-b8c0-ce7dab679c10",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9ec9ca-9a1c-496c-b447-0254727e008f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06178e8f-33a8-4cce-b131-c444b3a1ffa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21015282-1a75-455f-a334-f3d6a3eae715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3613cff2-04ad-4903-938e-f1bbca81f0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e79f8a-e928-4ad3-abed-d2367321a526",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab739c7a-7763-4fad-9e87-430f17c0b685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c8941b-93f1-4291-a4e7-e93322d88d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248892d5-0c0f-4cc3-9d26-cc3480951374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f61dca6-d4d0-43e5-929b-ff5161a7471f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb913e0c-29bb-465f-b5f1-8e30c68df87c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33befde-08ca-4643-be38-448acd81fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0413d03-2604-4987-ab51-3688894e7bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7731c512-12d0-4c7c-be6b-cf1346c757ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54ffcc95-8683-47c3-a789-966c720c4c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105bc58f-0025-459b-b484-ee0fc3c2245a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3d774d-a410-4117-b98c-9497dee87137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5126564a-2c35-44db-8b80-0be8bd0dd11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1270e085-1c6d-4486-9ae3-0a54c884d73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ae0b118-2245-4001-b118-55dd5bcac11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb31289-d826-4590-8467-615fbc193321",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabc980f-1445-4d63-a111-0451e8d2a874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8551fc8b-c48d-4822-8097-711da0c08b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0efa520-3bcb-4730-89fc-1adad17f45e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91a6226d-9848-47ad-883a-0c6d8a3af067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f9759d-582d-4149-beb8-b6b5eeb5a4b8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975fef0a-e1cc-48e8-83b8-28c23d768807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8393707-7830-4cc9-9aef-a4562a912f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324144f8-7db4-483f-9670-31ce8d6d8d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fba4e60e-7aeb-4c90-8c94-125f1a1bce25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d04b0ce-95d3-4173-ba6e-aad54b21ac19",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96f993a-45f6-4dbe-95fb-0cdfbf71f31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9122f553-e346-4589-8e35-b956bd304e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29630d45-3ab4-4e1e-84d7-f0d81b252c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a52c6b8-e29a-441e-a56b-5af491b3b265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993824b2-6a66-411a-9738-a1fd40be7191",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1879572-70cb-413a-b285-e397115bc9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbbb406-f779-430a-9706-3f2b829ab49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9c88db-8950-4223-8934-136af134b8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36fc3ce9-87f7-4feb-8af5-6b2d6967e9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cae100-d9a2-42be-ab62-7d0c402be609",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e023f0b1-25b4-44aa-bfb3-f2fe4508e4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c8efcc-51a2-47b4-a2a9-ea03ea6224f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d88e8cf-01a2-4c40-b063-290239eba3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3fb43a-bb59-4fdd-b022-600939f2987d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8462006f-1671-4e67-933f-1c905d3a0019",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415dd23a-ef0a-40c1-83fc-f3b99317c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4fda08-c20f-4f73-9f68-778cef2781b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaebb02e-edbe-46bd-b61d-2ffbc5e0379a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04a3c806-e717-4fe0-9c5c-99fd93674cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cb15f6-04b3-4c04-946b-f8cf0caf43a8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f197e9cb-9a27-4724-a722-99f28b240df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0dfff56-3ff9-4c1d-919c-be79f990641b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7f23bd-8005-4485-94d2-b644aa787576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87d753d6-f537-455e-81e5-78138e5e1996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465607d0-a2c9-40b8-b0a7-e8ca15574e4d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c143b642-3a48-403e-86c2-ca61053114d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838da05e-481b-4a5d-8a2a-b43ab409c1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e1fb59-f12a-4333-9241-3a9410c6837e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "078465c4-e778-4559-ab6b-376c4a9c7334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e51b24-3d6f-4616-83ac-acad44bea314",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e315f3-051b-4a34-9196-890f78e08b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83589aa-049c-464f-8317-091adb502b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3f7eb6-1838-47b3-b518-c9afc2ea1824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d7a9ef-5515-4f0c-ade0-d00f0bd87698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c700fd4-3acd-47b0-9688-0eb4840a1b40",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9882131-01a5-4cff-bedb-abbbdb49f6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bba40c-0293-4858-aa12-21725017fd47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b55b98-a717-45b6-9acb-885814394f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c235e4-fd27-4b85-b0e9-cec314b8d18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4c4ac0-ce7c-4e1f-a2e6-2c1126d5dbe3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c62cb1-9222-4e44-ae3a-dfa339793341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9d376d-d448-4d72-ba47-c8e86343c19b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9dc973-ae58-447f-9f78-1cd4f4a66704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b47dfa-b931-4aec-94f2-69eb6a4852ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1329ffe-a80d-49c1-a6f9-a2c46e364823",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2442db09-47e9-4a56-8010-8be7623133fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0e8873-ab17-46b8-9bb4-dafc49cf5d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26da29d7-8337-4093-8894-35c4513b5821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34570d9c-e3c1-4d84-bc55-c8a298be6d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a70122-99ca-465c-b14f-00bf2b915923",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefd37b9-edcb-4287-a233-c4fdb450c9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c38b71-b006-4db4-ac3a-bbdca2d9decb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1859298-4e66-4e04-849f-65df65a99982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b163f5-2bc7-4349-9e2d-3d8756be464d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5a7f59-b386-443f-8585-67950634e097",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21e47da-ac68-4d30-800b-c6e6c0637824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4630c98a-87b3-4419-9cd7-e36ca5d13bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2b65a7-575d-46b1-8b46-7a3dca01815c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31de0882-adcc-4cf8-ba58-3f04bb049eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fbe5d7-0b4b-4787-a738-81d4d999ec88",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d769b2cb-8279-4e32-9b6b-bad57d300796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611a2699-41b4-484c-9dfd-12d358e7676b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707d8736-e3f0-4412-827d-cf6292199300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3a5009-e49d-4532-b465-bfab96198995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1d097a-0db0-47ad-936f-bf17e752c6b4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1fc054-7678-48e8-8087-8c1640516df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd95228-4478-49f5-b164-29ec7738e9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f3bdae-cbfb-4561-923a-58a198e1f1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6aa71c7-5aba-4c93-af40-615db28890b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214a58ee-ca7c-4d52-ad61-821b59df8c19",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de1e0ca-55cd-43cc-a316-1cfceecef1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639f941d-70c2-41fc-a0a1-3b1a85099ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c317d35-fac6-4ea3-a8c6-f9183a03c055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6b341c-3af2-4a65-b04f-88ff0a8724d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030ff9a6-fd30-4fbe-a01a-d4a85c29e187",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563a1e2c-99ba-4c0d-b5f1-dbf4c3d36ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e05edc-aac0-4824-8611-807eca4e2930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40f61f0-1c48-43fe-94c4-4da115404498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2de38be5-56f6-4e40-8caf-6d48af284081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6ed409-df8e-412a-9da9-4e0f8b9a588a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0dfbe5-ae9b-447f-9bdb-4e756245812b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9397bc-ee27-4494-9c1b-5f815c584eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d6d567-e91c-444e-8ca7-9b86dc76725e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdb7f97-1325-43f6-8ca6-2e1779b27ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc52993-e70c-4230-998d-724fbbc480c7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcac7d6d-d79a-4894-944c-f6c3b1ba8da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f3f532-b5ff-4ccc-bde9-85f24311e961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a78e4fb-aa90-4a74-8caa-57970a6cde9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a672fd8-5ad5-4f7b-a690-91bae7f451f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9889f8-2ae7-43f2-9c16-9ffa827fda4d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d8c08e-42a2-49ce-81ad-86aa91b71590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc62bcb9-09b2-41c9-b86c-4aecef6f84e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c294f994-d471-4833-8ce9-2ed545bca7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "544044ef-4243-454d-bc77-4f30a7502d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dceb50-45f9-4a3c-bf13-76433e4f21b4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df48d605-8af9-41eb-bb04-507217a79b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174e73cf-755e-47d1-971f-8750c93fe459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d664228c-139b-48fb-9a1d-48136257b7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a97e3444-c44c-42c6-b2d2-01164ca03b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742adb4a-4e51-4d40-817b-7d5d9a61e042",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cd6773-1622-494d-814c-17cf5611e5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab91ae45-bd1d-490a-a2c1-79aae3639acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b25cf80-d041-4ee2-b657-00d30eddeb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1cf4f6-d1e4-4998-9d17-0c050c541121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abfc6ed-dd3d-45a7-bb72-ab5ae210cb08",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312dfd4d-17c0-4932-b805-d2fba0f4beaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50ec46a-f285-4595-92b6-12cf0cbb90bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6539a2ff-813d-4757-b540-cdc93d63f72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe229a0-5feb-438c-b590-f7055e7823d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ba09e2-8459-4314-bd02-c2dab42fc56c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24b66a1-b4d6-424b-aad3-27155415c797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9170c870-5a7c-441f-b0ac-3f48848f0eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919eef13-205e-4678-b894-1d0cd81a09e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "de677fd4-7130-4773-a597-4a63f6012bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9cd6d7-8113-4af3-816c-c5e02c21e5ae",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19435563-560b-4729-ab3f-4272d9415c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed95e43-14fa-45b9-9b8d-665326f23f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e67fcf-eb6e-4f1a-ab85-f428e6bd311f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d2b3e1-bfc7-43ea-8521-63e641906509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ab61c9-474b-4aae-b03f-cc079787dea6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4ee67f-c1d5-42a3-b37d-2ed8a17fba44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a84669-ad48-46a5-a4d7-8f5dec362e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f31f8eb-f699-47cb-849f-2cec2cef1b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "664cbdf6-36d3-4236-9568-c953800eeef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194fd25c-a92c-49e5-9527-f3caacf9af6a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3995644-553a-4422-b09e-1fd5495d249a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dab062-e5d1-4a4e-bee2-b126a313a8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb3a3e4-37db-43db-b523-067ce390c01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15717b65-eec2-43a5-993b-1329f0e40814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613fd08d-4860-408c-ba62-b57a9b47abc9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93427509-391a-4679-8487-ec61ece8182c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073f5468-153f-4ae6-9493-070151dfdcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2a8b28-5be0-4e5b-abfe-25e1baff6a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "284a7ec7-900a-4af2-8def-6d8f26c38b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30001c87-8167-475b-9721-dc6dfddb6141",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e26ebff-3f5f-4709-84d2-d441d0893a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9691536e-38d4-41cb-905b-8111ec486cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dab461-23ab-41dd-8019-cd623bece675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a32bcab-69ff-4e98-a418-12009a0d146b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0641a860-ab10-4669-871d-9c9d2bc02f88",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506e8de8-9615-4383-9be6-7942bf4c0aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadf4054-3cf0-4f26-a55a-2a6fb80b2da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f687f20-9140-4a42-a86f-837e5e6aa421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "89c9768c-7b0c-4424-bd06-c9d14973c801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea2e111-71f9-441d-9096-f4370fdf744f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952c0a84-7d67-455b-8bef-01e5449bcb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48f34b0-7a50-4945-a198-fa4d9279db1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a640b2-f92c-4cf7-a609-4bba167f2785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0094595-bc79-41e4-a9d5-c0a0b8e9638d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc74a7b-1226-4daa-a9c8-7761a96d77a2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af577c54-731c-4077-aa03-88ced4042d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260c33b6-60ea-4542-b487-16171e9e524e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd957ba3-9682-49d7-8a02-535caef63170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ae132e-1ff9-45da-afef-22cf503f5d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2fc143-eee9-402c-95ca-4d163d5cef16",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f735f0-a50f-428b-853c-3c03da907fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37a2b33-a900-4608-b5bb-ddb7f9964b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5f84e1-bd8b-4187-9211-1dee8cc53d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96f83cfb-99aa-46f8-9af2-41ab3610845e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c3e522-ef17-4e41-9998-38df0bf03d01",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957c923a-551c-47ff-a100-ae45e6959b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d36b839-dd5d-426d-aded-d472cdc0310c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c709c25c-f97f-4554-9e8f-95ea759d0084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41cca875-45f2-4c9f-9ec5-db407e9c63ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73f37b2-c20b-40dd-bed8-36613caac5d4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e603f82-2fb9-426b-a025-a00dfb1037ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64eda965-4ef7-49fd-975d-2f7ecbf43235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f914bf35-572b-4aba-9339-98b504541d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf96839c-9ed6-4142-b777-a23dacaee652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88f3071-cedb-4c08-8c89-f44da95552d0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93549a34-53ca-4286-aeb8-7502781521aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fdd192-7add-44a5-a87f-dbeab5209df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9149585-d8e9-4ec8-81b6-9fea39c07852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33eee7ad-0d59-41ef-b2ec-d2d291027265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d494afa2-b7ad-4f2b-8028-8021a3c68b94",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bcdf21-d767-4851-8b9d-28b629a3ad70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48def8e8-0bec-4508-87ac-b38b15c21818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3017b2-93f0-4604-8544-a3324f326f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f308dcd-58d4-4e35-959b-a08ea72ea531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32df5cf-57e7-4c43-a73d-0b1c003dab17",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd89f23b-126b-40a9-86da-a5f24db3923f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595fd061-8677-4649-aa92-a0fdf1a911e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426daa1c-a08d-4ab0-baeb-88cd48b069d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b29143a-b1fe-422c-9f29-729a921d5af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8397d4b-a0d3-4e13-ac6a-43301e2897ea",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e0d37a-23ce-4acb-895b-f2b2c24e92ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3d488b-cb69-4293-858e-2e5143bf55fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9734c34f-4cec-4ef7-83e0-41e2f64c3665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d30e22-1716-42aa-bd7d-8012a1fe36d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c259179b-77d6-46c3-8bda-e7295c225f44",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d444ed-b3c5-4073-8c49-2997d6a0352e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4aab48-d04a-4f64-b092-6a54f1c1e1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6d64e5-50eb-4167-9310-f75fdd96e5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fa4efc-aa07-4e0f-a1c0-d743d58637f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1d4bde-103d-4279-ac83-09b7359be341",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da33de9-70fc-4a65-8451-4ee840da6e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13b170e-30ec-490f-883a-25125a3a2f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc74aec1-5a7d-48f8-8441-af82fb2c22ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a05a30e3-652b-4ac9-8ca7-45e9870408e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cada277b-6ef2-46b9-b8ce-d5c47c0b0371",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723f6389-1b89-4187-8348-f8016e854517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c530916d-4eab-4cd1-b7ac-57d1509b3755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72eb0ab9-c1d9-406a-b15e-5a2f29b1fa01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e39a56-0b25-4741-9776-2f56a3a486c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e8610b-456d-4389-9ed6-2f0f985eee67",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508a04a8-b5d0-4726-bf1a-605ba5a6df53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3935cc0f-4bf3-4d84-81b0-e18d0dbca6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b587e4f2-7aca-469c-9bfe-fcda35df6beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b83c61-3e96-4f49-a5ae-d66d2692b58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d08d9ee-5ee4-4e29-95ec-4f2ae19811e3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d80afb-3dfb-4a8b-91a2-b8df22f41bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08e64ec-ba0a-4a24-9200-20185bc0bae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df65c5c-aae5-4e21-9a14-174f9b136446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "93f681ac-e259-4457-afe1-f8e84ec935e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997a7b14-e8e2-4ed3-93aa-4a9ce4278015",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c07c25f-a39f-40aa-9605-21c30556afb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080cfb13-c896-4123-9ffc-9c1ee64f8357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0276ae0-4daa-4a79-a4d7-0450cb326550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a1cfae-ad25-460e-91d2-7169720cf5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558bcfc8-4c22-420e-a181-a6c92f2d62db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fff377-dc89-43b5-a8f5-a47694f9af32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6706160b-c6bf-494d-a32e-0246166ee941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0f8044-a643-4996-a848-164c65c21d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "91138d5b-c332-458a-83e1-09dd05637bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6758b1f3-773b-4af1-82dc-8cc4f0bb39c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509b0960-2e36-480b-ad4c-2accdd836eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e163ca-9c4a-47b1-9cb8-1116568c4bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb98b9c5-0921-4fc5-90b4-3bf4831426ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "78f4c452-1078-4b72-9a42-acf5fd9ecffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe26021-d62c-4be4-9913-aac44cc9d642",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabd0b10-d5db-46a1-a1f7-5e546d347b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9574bb07-0dbb-4324-bccc-5871f3835eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a169c0c0-1cc9-4500-83c9-f88f9d19050c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca36e294-5272-47f4-9d30-4df0d7910c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644d0cad-6a15-46fd-be9b-5cbe74e4350c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f4ab43-1f67-4c63-beb6-242e50c35e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2cf89c7-6dfe-45c5-a932-1f8c4e3be95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c78086-11e6-438a-8c87-83106b56ca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c01db3b1-fbbc-46d1-bd33-86166d3462e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91268b09-babb-44dd-978c-26cbf4c85ca4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73567f72-8a61-45f5-a94d-05a94b6c1d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3e6ddc-1a23-40c1-b666-56378e6e309e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477cf9f8-7d2e-4498-ad1c-e7d898031834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be2cb13e-a713-4655-8aa4-22cbcbb3625d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae13dde-d72f-4ebf-9ab8-bd0544838323",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c93b6e-0903-4d78-911c-1efd772dc659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e61a600-cf0b-480b-8d85-2fd739e01b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202c8cb2-f8d6-4e06-8f57-7180b110d73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29cf05ba-0f82-442b-91ad-075aec163855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268713a6-83aa-4ef3-ad00-accf6f6e4585",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1590eb-ed89-48cb-a3ae-9175dc7412c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05cb17d1-02d8-4230-9c73-f94cf8b1b26d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39e009f-6f8a-4ba1-88cf-c162eea6d7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "003ec06f-2af9-4b63-a7d5-9492e3cc30e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bd94ea-9f5a-4b72-a8c1-cc0fe7e2ea8e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34713443-8ec8-4026-9a3e-adff2d41882b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9b9077-1660-4d53-a71e-9ad3aa2d99bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f23875-ccc8-469f-b82f-26a1e6e7620f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "973aac09-bd42-4118-9fee-89d5f17f6437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a056005-4fde-4385-a2a9-640ee979b005",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db5d1d3-385d-4336-9123-31fa067aefc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1dd10e2-abee-4412-a055-5c2b0c0c898c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cc5ca1-9bd9-4ffb-bb40-666d0772af2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "49342cfe-7afe-428a-a01c-b6b3c329d3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aff1df6-1a38-4963-b975-446cefa70d95",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9b51ea-ceb0-4934-b18d-bed33b8ac75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f91a8ae-d17d-4088-ba0c-6560211f9c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a097e6f-3a8b-4cb5-a921-396fe57784e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "381fea29-2e44-45b7-bd84-1bed6097cb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf2a1c4-8924-446d-a78b-52e4e3d0c70d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae95cb75-4e3f-4f31-91f1-097da2523d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f62774-caf8-4e42-8885-af429e2e499f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b3a0c3-6491-4cfd-af9a-364882f1e92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64306b1d-7fb4-4453-ad21-0a43eb92e90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d10e7c6-dfdd-439f-b357-aa099baf0143",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b946c822-a393-4cda-9506-a68a30af9a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc947c4-c5ae-4a54-8b06-50f5058287e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eda9382-bf06-4c29-8915-5dfe3a4b3965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb5dca1-61ee-481d-a2aa-3e192d6868c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3252735-f3be-46b0-9666-236e6409803a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19178bee-598e-40e8-ab7a-58ca35a40dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce0cc97-9fb9-42b0-b1ec-60c9790df7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904b9b3e-541f-4bfe-bb88-f6c4b628ac64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82e9f889-b934-47a7-8c6f-a12e6b2ed2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3940b9c2-7d7e-4681-b2c9-dac085552dc4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affcf8c7-e283-43be-a5be-9ee0211b454b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1691c26-46c2-4fc8-a76e-1a3caf96f970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e0922e-18e0-4dd6-9e8d-71d8125ddfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e22c6a-73e4-4c34-b57d-ff6cf6c0cae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29aeea35-c2c5-4f4f-8faf-3280599184f6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10276aa-e592-424c-abfc-cd6981721b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1eb2cf-e5cb-47bd-99b5-f8c3233f8650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c453192b-bf6a-4d65-b590-e933571db47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e37da6-5ff0-4d6a-b1f7-2dddb01b112e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71ec14b-7460-46d1-bce4-d0c7fa34e898",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912e217d-23ed-46c2-9c44-0f5b11d458ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caaaa23-3574-4d82-bf56-70e714b16e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e15ac01-3bc5-40a4-803a-bcc83e86e9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd2076f-b809-4d27-9771-26db8f16f677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43041c8-b90f-4a66-b83e-8b1bb8fef2b9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2dfa98-6279-48e5-8afb-98254ec2a86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b520bc3-8ac9-4a9c-8b7f-0796a52f4c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca5141b-2144-4ac3-8930-6e0cccad3f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "148a2e16-a891-47de-a53a-bd5811a3e2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d32256-2a32-40a3-832f-b0e986900626",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b261fafc-9320-489d-b1d3-82e6e74139fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ff1958-c88f-4ec7-9525-e39e68a54f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5aea15-e102-4380-8d9d-f23934377dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1589d5c4-9a68-479d-9732-8d156665c2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514a90c2-a74a-4dd6-8f86-fd0b1b0831cd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffff119b-dda2-46e7-80bc-56e1e53a4cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3c56d8-854e-42db-949c-b19d0691503c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b77574-82b9-4094-a522-1fdc46face27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b16cd09-f723-4c7f-9618-63c3c3308d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e9cdc7-cd0f-4eb2-8823-50ac777ff557",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb6dfb5-4240-411c-8d4d-1ac44525b095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328f4f72-29e2-4bd5-8a57-3bd8d5df283d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04448d47-10d4-45ca-bbfc-9e7e2875e391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5607350f-4a75-4c97-9971-9627b23f0b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd55889a-64cf-46dc-9ecd-55f9e50f73e4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e13d06-bf07-413c-b39d-86e1ac92ff20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e438fe67-6d56-4112-b9e4-3f23d39de6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f1815b-df21-4527-b06b-493c93aa6ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "836543d1-a0ef-442e-a001-c08b68ce2c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff947076-4b8a-4c20-80d2-ce99a50b4fac",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6e8b5a-5e9e-4dd9-b499-1625c607bb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82f5d8f-55de-43e6-b754-4d2be8db72d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ecf00e-7ff3-49fb-a4cf-675292bacaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a021f2cb-aa76-44bc-b579-61d6025b150e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d5485a-f7ff-4280-b5fe-5b35e90896ce",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca90d389-2ba7-4337-9003-516f992e13fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b31575-f23f-49ae-96e9-f244315c0234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d16e82-3d13-410f-a781-ad7e5f1a3931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79be56a8-870c-406a-a8c3-0a57aff778f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4a760a-33f0-4a57-a870-81844fbd2ffa",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e07f163-608b-47df-aa04-b15f2d0edf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3cab20-4264-4830-9b9c-8fd9490cd390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95472c3-7340-4aa4-b889-cc23619df1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6bd045-67f7-4d48-aed4-57aff0a10295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23077631-f263-4cb5-aa5d-e10fd1a5a596",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406ad386-b63b-407d-a41c-d6ae6bbf0341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbf0d6a-864b-4982-ad7c-90b5a11f71fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a03b0bf-e8ff-4ab8-9f29-83e9161050a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e14f154-704a-45d8-9103-f5c9d72d5678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd67f4c4-a22c-424c-abb8-9cc8f3d69020",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a8ac7b-b088-4aeb-9504-5f49b17eb802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb2f5ea-6d21-4a01-bfce-69f4bba6dfdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d13d584-fa69-4295-8592-3e28b50160fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a162093a-63c1-4e61-b066-cb71e2e54955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf0c540-2928-4a1c-a118-58e5412ef94a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c7b3ac-cab5-4f2d-b0ed-bb20f59a00ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184f1d2e-2dd2-493f-b82b-b0f43cebc08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d88973-032b-47e8-b7fb-44730fb22ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64c3642a-90a3-4242-9dfb-bf1047d761a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5c644d-fc4d-4fda-b689-73db3cf9241a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a2e2ee-a389-4451-a1ba-f61b702ae648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb5ae300-5252-4fc9-84be-0f73c7c9cc50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca0aeb2-b651-445b-9f61-a11430a63ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "378d7f20-3759-4571-8a77-20305bbd4a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100b2084-4b39-42ec-b44c-14f5c635e385",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799da150-b834-4334-8971-e01a8fe758e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f63d83e-7eb2-42fa-85f0-6d34dea34cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce61fb65-2025-4a30-91ff-748c40d680b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "07ba4ee1-365b-449c-9521-298353a072c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749191f6-a94c-4879-b22c-4c652dbebe43",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75529d0b-b5e8-44d6-a34c-4328929d5319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b3e2aa-3e1c-4d0e-b28e-303efdd63c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66da54de-4d9e-4cba-a8c2-c6aad0bf487a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2db9e5-4361-427b-91d4-93aeb2916f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee633368-c4fa-4909-b595-91ad1d770ddc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9020126-d438-42b6-bf1a-47309c92bcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740121cc-ef09-4021-82be-1359fd2bd424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a35779-7d59-4360-b33b-8a565a781ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb79b4a-c8a0-434a-bde0-1a5882d7d1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e78619a-5099-42a3-b7db-7abd19ef80ca",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd68a0b-92f8-4bfb-82f4-dbe0da036298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b73272-65d0-4cc4-b678-49cee67eaa00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17cb251-30b3-47f9-88a8-76492f313431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c091296-2cae-475d-923c-01c953535b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0904ac0b-b8ea-4957-80b3-382529b79417",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1c043a-08bb-48e3-8c60-8c45808a1ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ec51355e-3e06-40ac-84a7-146c619ced32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cd1ae1-655e-4606-a63c-8c1b18e0de00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba8144e-b69d-4f3d-840c-23e5d412ce16"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "edde5a50-b0ed-4b75-9e56-860054deab29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0485bb1-7046-4d6e-b5f0-df550c4edac1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574d6d5c-4720-403f-94ca-c716cbdb74ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fb8b94d-e446-40c1-9594-bb4734478313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421f0cc0-6682-4f26-ae74-5e96d51ada38",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1ac19112-f073-4f54-b9af-38c5e854e032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510e014a-210b-4564-b653-2a941e3fb78a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820f3f28-4fc8-4b42-a711-d5acf83f4407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "205740c5-e5d1-410e-b60d-a91f5bc7e49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439382fe-52e1-49b6-a3b2-a35d8d829262",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "19b8f51e-b60f-484e-93fe-f32902d40736"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5386706-74ca-423e-b534-7ed5224a09cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a070a6b-b66d-43a0-bdac-0ee978dcf2ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d72cc929-1182-4d20-9769-66a8e5a344db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bcd5ac8-7216-4ef3-81b5-718bcf712f48"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ad0a21b-b781-4288-b5b6-ee63167efa84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "569316ea-248e-4e11-9e3f-2f0de19c4d17"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d0a6c65-35fe-4c64-9ed9-4f75cbe3a3da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a968d6c1-d94f-4039-9f4f-622868d53291"
                }
              }
            ]
          },
          {
            "id": "75398132-f70a-4db1-b3f9-621beefe9890",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3ade6730-1e76-41be-8ad0-95c503f5ad09",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfb6c5c7-50d1-4d13-b1d7-abac9d7905b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "552dad27-25ad-494c-9c34-f21991cff65e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1eb8eb0-3d16-467c-b1f4-e2271ce1e75b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "69134e24-c104-456e-8163-c92be5867ff4"
                    }
                  }
                ]
              },
              {
                "id": "44571842-e45e-46bf-bdac-d5c8c5f2725e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1b8b2ed-ac62-4e41-a855-33e2b3914ed4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f7429bd-ac2a-4704-b3f9-6ce11e3515b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c21dcb1-43d8-495e-878a-6b51ebf64bbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5170848e-76dd-4d5e-9915-400f8546f159"
                    }
                  }
                ]
              },
              {
                "id": "e706ed2f-a145-4f58-800b-467373292383",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69274fc2-bf15-4426-911b-2c76e312eb00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b435906e-ddbf-401d-a6b9-d19ee69e6e65"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4292f76e-6d45-47b3-8b47-118255e8b64c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4aff4c8b-71f9-4fd5-982c-62dc507d19b6"
                    }
                  }
                ]
              },
              {
                "id": "df9bba3c-ae53-456d-9b9a-80a537fc774f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a48891db-7bf4-4538-b7cd-069dbe9501d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "490ffdef-c288-4591-a546-a86415d3842f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2112117-cdeb-4b3a-96b7-1faf83a7dae1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ecc19a6d-8673-4996-8f24-7c63bc90c564"
                    }
                  }
                ]
              },
              {
                "id": "06f54671-6e4a-4889-927d-6345474a5334",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3516cc25-3eaf-4ce9-b93b-a5c22461a53f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a18f51e-4e15-4460-8406-223a5655f6f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92865233-ebf4-4ca9-94cc-cf35f7902a94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "baf2a90e-4520-4fd1-a325-5d84ca7eac07"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6697c29-cffe-4ff1-98be-2fa8262a6005",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bd2f64a-9dc5-4f1d-9ac3-a9154182463c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "69203ef0-0d6c-492e-9ba7-f3f01927a778",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed8640b0-722d-421b-b118-812e8bc0ce0d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10fb279c-ef8a-4c0e-adc0-73433fd41385",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5ae7be48-d3cb-425b-8d4f-94e29a44e320"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f5e0816-e753-4386-b8e2-046843465abd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6e59546-2510-4c54-b0c1-b808e14a61d9"
            }
          }
        ]
      },
      {
        "id": "8036ab85-e326-4efd-bfae-5cc0cfd5d091",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "850a3896-7bb8-48b3-aa6f-f95fe98535f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04496a24-4663-4d93-94cc-f906d57bd6e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8a169434-e727-46e2-b190-75ce9c1faffc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44190422-f64e-4297-aacb-8d27698c4254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0010f66-2b0f-428d-b5e3-314f474d81fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa06b992-c895-4c4c-895d-4e06336d3e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9f9c4e-c8d0-4174-b6ed-5e2200751e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4659352d-0a47-4cf3-ac0c-ac2cbd2bdaf5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0337e234-d05f-4638-83f8-e47a85a254d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7b0eed-8fb9-4822-8f3e-e8c96cd62486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4c1502-d99d-4b75-89c4-d9e36460b321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b95e62c-0b58-464f-8a68-fa762d14b97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde3bc2f-e785-4c1b-b3d5-14df5f9bd233",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600c6ce8-822d-40d8-ad17-78850ef11d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c7220b-1243-4f03-aac2-c82933119226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e80421a-dc2e-4046-9059-80203da8aae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "812a0e6e-aea1-4b64-9c58-605919d0b642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d81f3d3-40a7-425e-832c-082d67412e1a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23f075b-ec42-41f8-a9a9-638a5942ff30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52ac495-9145-4745-9d46-1f517493780c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375396a7-f22b-41a7-bda9-7618d39b0026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39218935-1cd6-43a5-b876-ccb71511fbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1632316-cfe1-47d6-8aae-a7b7ebffb4b7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e125b43f-41fc-4d97-984e-55a5dc3e5595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90182338-555c-436a-854d-7b38d08ce53e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5910be-5402-4d67-ad7b-327ffb26eb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "112e0811-605e-4650-b75e-57aa5cea0b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e23afe-606e-4f00-9d68-c5ee313edf20",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b671aa-ab55-4036-bd6f-28bcecaaea22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f2d4ec-f8e2-4070-a7f0-49448d4d6971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fd58f1-39d4-4cd4-9b39-c9f6e49b2c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4931be54-b825-46ab-a425-a2253da72170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e75576b-62b1-4455-8126-94fa13fa67a5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6570fe-1747-4ce6-bc05-e8b9c1adbbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94952779-0ac7-4bc2-897d-0a3af2ccbd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdce77b7-c4cb-4cf6-b5e3-521e49633cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f92636a-03c5-4d56-9b8c-8fd4af550607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e3477a-5a65-45d1-b098-ddbf18cfba4c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbcecccb-1949-4b54-a4fe-bf4449ee6c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b66db04-56da-445a-9147-bc4025edad1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e305d9-eae4-4adb-b178-c8781162fe16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f29408df-a432-4463-969c-f3b780d7f6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebacae4-6776-47d3-99e9-a837617d622b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356542e9-cf69-448e-83fa-260aa96e69c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77873279-6661-459e-a566-64fddc9d2202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aec8ddc-7fc5-439b-9869-0dc918627ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac39015-b8cf-4536-8abc-81245c554a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac0d573-657a-4646-adb2-28e7ea21c966",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddbed03-9503-46a6-9587-b68586d9eb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7cf3b7-f27f-4109-874e-ce043ffc56a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a8efd0-cab8-4c1e-99c2-feaccf60341a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb20e32-349a-4f25-baad-62f1d9aab42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fefc061-d16f-4206-bc05-b367fc73e82e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2192b84-44ea-4802-917d-396017eeaf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1602107-c93d-4f6b-a6d7-050a97a7a880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794b7d74-eb4f-4002-8970-0cf2768a60ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "835453f1-189c-447a-9272-f0e6b7655a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17471448-b203-4530-a5c0-c88bed14d85b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8cc9b6-8a93-4660-a4b8-6ade4d006aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c39644a-a817-41de-ad6d-8a28ed3a8c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0205ae-6f4e-4fa4-ae87-746086a51c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "519eb1df-c437-4f9b-931d-a8b772871c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51fe3ec-dc77-44b8-92db-d8f1f625db6e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9b0074-4cc8-4db6-9ddd-c77119e10740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90f8908-e54a-4b13-a237-53e6425f8e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3ce0cd-a1a5-45cd-9ec7-00363260fa2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "732ca9bc-09aa-4d9a-81f9-07498df02aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4a9a79-0835-4e19-9a81-d3b8b7065c07",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad45e5b-3c4e-400f-a5fc-4f8811e34df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2dd4ea-8884-4566-ac98-ad9cec25c4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d609c6bc-8b2c-4312-8ff3-b76788951e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "301f024b-aac1-481f-b7ac-defc20e54d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad12e235-f8ba-4a92-8a70-2e68040ba41c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca29b2a-5ab2-4ef1-bc56-752fe24b6901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79b45bc-0fb8-4d78-860c-d007c4379516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b252b657-0091-4ed1-929b-6b0def517a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbc5798-5d0c-4e6b-ac34-3909435a67aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5813d66e-78a3-4414-9fd1-01e54d4901d4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f8a933-48f5-40cb-b8f7-01e7287d18a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d2d3139-31fa-408b-bfac-e2f99b712b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab4b411-aab9-4dd2-880c-7fc88121b0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "06449d7b-2a56-4e98-a537-bb3c9b064de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a82c9a9-6204-40a0-b783-65fcefe77375",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301ed4b3-e726-4081-87f5-04c3bd241eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d0cd27-3e7f-4128-a85b-3aabb358ad06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3394a9db-85b4-4e46-9413-1f3e5a121e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "99d89a6d-eb1b-4464-a1f5-eaeb500678ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214077da-9baf-4e51-8018-7aec58d1678a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3e4441-9a9d-4644-975e-0d55e89e5117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4affe690-7d32-470d-b72d-f586b3b2b2be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb4f051-25f5-40f5-a328-ba65686541ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4dc590-33c5-4f9b-ade4-c22628f9c7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80050832-ceec-4945-b4de-0323d9d56c1c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e611899-9e9e-4fe9-b9c7-a854c42b6faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97f4765-a692-43b1-8a42-d53e0e018ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadb4e19-93d3-41b3-9317-d2bec7395927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "580aa3e9-e3e4-472c-a3f1-c58746d3c8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4516f0-5375-42ed-a84f-d06010ec82e5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6195b3-5342-49c1-9127-b85759d826bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46287a46-9426-4082-b355-aefadc8f248d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a612e823-3d9c-4815-8871-85a60389c2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f217dc3f-b13a-4508-8197-8301d1a96a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac156216-4393-44b4-8f2a-e330040e4fc3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933e5385-9143-41eb-a55a-2eb2c5e7be3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd4b4d2-535d-4dc9-a080-6bf52900f977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c2e518-db6c-436b-8396-520899992c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c47165c-c398-4730-a08c-9258a20f99fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3c21fc-c1c6-49f4-8852-64a30af763db",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a104d1e6-bed2-4d8c-b15d-a91b945ebf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1a3b79-1c83-4f26-a890-8f945dbabc7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c63e012-847a-438a-9815-8dc1e042eb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2351e83-f315-4e9b-8444-99d300aaaac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edc1818-c1fe-409a-92c2-c0259214d4e7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd20b778-9d00-4029-934c-7fdb3477280a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c651a37-bdcd-4195-bf71-e0e5a27dafbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed50d01-a40c-4131-86c8-5c905e5b9cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad083129-d682-4d7b-905f-41f3fddeb780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b81fc5-014b-4e78-b475-819c69dc6d08",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6ea158-057a-4829-a2e0-79597dc31fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7d8155-52d6-4ae8-a13d-616cf2a8a755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e67b11-278e-46f0-b867-c24d6990f40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd012b26-946c-4cbf-a0d7-6830af8ac732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de91329d-86a5-4123-ad1a-2694d04aefee",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a313403-5915-4466-8f2d-937b8aa411f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0a5cd3-db1d-4d86-8216-de06f0b05d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8794ec45-c2a1-4573-b2f6-6f37d30ca0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8effbb95-c639-4637-a587-6c00d4cad1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f3f604-18dc-411e-bca3-6557d9dc8cd4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f164765c-ba49-467b-9457-eb65613880cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a59553-ccaf-4d0e-a148-46b4dfca133c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445157cf-f150-41f9-995e-a313036abdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fae140a-76f0-40b4-ac89-f7d8a1ef5bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db05a74-ca60-4438-a40f-0f98890cb406",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0182cf6-1938-4a01-b46a-30f5f6263155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b666c59-b4da-4c24-abeb-d2948e1a441c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b7cb66-c35c-4a2d-aa20-8113a27b0ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1c2157-0120-4dd3-bbb1-151fd0244489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08d2e11-9334-4080-a95c-98043c01e5d6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481d3e88-3581-4cc8-8317-cf810a85f8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0058fd-de2d-4483-a388-fcbfc42dd616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c24449f-1d5e-4eb3-ba81-093ab37d4e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e1c0f7-f52b-4107-9a2e-f2255c5fb57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae2b9fc-b56b-457b-94df-bd997554ecfb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8da448c-f86e-4c4e-9b12-40495571544d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d9cfbd-aee3-4f2f-a913-c2992569dab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e07f12-f2c6-47b6-b726-6efd2f64b070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d96bcefa-6da0-4368-9f49-1b139fa2c1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6090f451-b250-4429-b7c6-282c1f3b6441",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677fc27d-2b3a-4290-8808-86980ab3ae43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7b7791-8f9a-41a0-9b05-b0cd164dc451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74f47d8-15a4-4786-8435-3ebdee0c9765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bcf7f70-4caf-42ab-b42d-e8af2e55bd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16455e2d-851e-4c97-b074-87d80411b21d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620a5dec-1009-4cd2-a275-452521a28d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce2acf5-b2ab-4e0f-b093-2fbb5a4b0a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328c022c-3a39-482d-9863-90b77b1a2c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99841829-edb9-41e3-bef2-92f03cd6ba54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d8c6c4-8308-46bd-8c86-bd506305f8ff",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d4f0df-cfad-4de9-be5e-e956100b7ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a955c6dd-9f94-4e68-b3b6-a524952aab65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60f4d08-36fb-4bf0-8aef-8cd1a8abf5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8eb926-38c3-44eb-9c6a-f6ec6cf746f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50de37a5-8fa0-4082-93fd-f551af5198e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e003e09-e0b9-4baa-849e-16f65a1fa391",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4cdf8a-66a1-42ab-98c8-c79ce1f413d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b796124-51d0-4cf6-a524-1f38f82a9602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72507d78-7a5b-42c1-8d21-faa4b7af0e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "114d3b5c-dff3-4122-b680-b3f8adcd1c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a019d79c-e575-47a3-8bcb-2042a6a8ec08",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e0cba5-e1fb-4490-b23e-e962614467b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "035b15cd-cb18-4e6a-9f0d-b5b9a5d8146e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43de1c5f-6e79-440c-be0f-bcb90347d2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d930446-527f-4297-931d-6d81382bc1bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d0895af-0339-4059-888f-c78ce85183ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4206a6d5-4270-453d-837c-6e70e5a26ca3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adb28772-63a9-4486-a55d-d03d5170ff62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90a08481-5d27-45d1-ad53-cc27aea553e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57346bab-8e37-45f3-8e75-b19c3753c6db",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9809d6e9-de22-4b99-94cb-cf133e4b9eee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db7b8dfc-5792-4701-83aa-187f2ccf3b5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e095cfd8-4af6-4c2c-acf5-c339dd911141"
            }
          }
        ]
      },
      {
        "id": "647b2ed9-7682-49bf-ba9f-1099fe9303fc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e83d1e7b-af7e-4ed3-a52e-e7976dfc93b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d69d6ee-4bbf-42a5-8a78-1d5a8b26834f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "61f9d7a6-5d9d-46eb-80f5-cc2d356aba12",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0687d5-ef2c-4f9f-9c4b-be76f504921a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64af38f8-0a22-40fb-b5c8-949ce3a2cf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b071ba3a-83bc-421f-9705-2191871a3223",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12e4752-cc16-4d6e-b90e-b0d583368e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1c17dd-3b88-4887-bb0e-f2b43471e874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88608ac-9847-4a6f-82a8-a3e5f8e7d32c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b4a12c-ab52-40b3-aae2-003148ba4d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35edc763-b8f5-4462-9b21-f1a04bf0ba89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cb21b8-4b4c-4f38-97e7-5dab2cb9bf7d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757f403f-a64a-4387-b782-cc31b469f3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09065ee2-e596-44b2-984a-e3edf980d892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6def412f-fef7-4138-a48d-9a9ae1887ccb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d9bdda-b9a4-4a00-a413-596aeb36cd80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b4decd-956e-482b-bed5-cc810abe8814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53f704e-b109-45c3-9af0-9df29d020108",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4011f1-e366-498b-87a0-6a4690584301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcfe5ea-36bf-4c0a-b681-9de46a28a7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69691ef-7c2e-40e7-8864-d8c87847a49e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337ed40c-02a3-4bf3-a9fb-e1604b7c744c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0db54d-830c-4509-9d3b-0b1e09d5ca8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4d5017-59a0-4746-83ac-4b6a0a12e634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c488622f-3fa4-4f94-bb7d-983b8b30b1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79022498-1369-4e5f-9c6c-8af991171ad6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d9f944-977e-4a98-ad73-15b66903f706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75840b5a-53cd-49c1-a00f-b3b327d4cbd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c520a5-969a-4050-953e-ad27b7091b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbc5ee2-1138-44de-9a61-a0ec9d178a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a853a9f-32f9-49d9-98bd-061496d0edb7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cf1af7-589d-48a6-9545-91ea843c4f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd39010-1ef6-4215-9a3f-873d26688df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb13b908-7ea5-4dca-8507-fdc1f8d5b28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee8f2e8-2ee5-42f2-928f-3a6b40606d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87ad5da-cbf4-457b-9e3d-10d60b219d98",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d74fdf-6ca4-4fb1-9559-e750e0e7fcc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f156343-604e-4456-a5ca-0c1f7c9cbd4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f393ac-6711-44b1-a020-b705d6867699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c4137b-1047-4812-9d6b-c56cb95e48c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a61b6c7-f5dd-4c86-859f-c3acf6bb2efb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0b7c06-7fab-4441-9940-d59147f4d602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1251f5a5-3776-44e0-b7e4-25a7641d34f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f90b0a2-4800-4292-bb0f-0c1fdc65a3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc826c2-f8d1-4778-992e-6e4aa446fbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705dbdb7-0681-46af-9a8e-a880674e5df2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b200ae-078a-4e35-bb2c-33454c63e855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73317e61-d092-4aa7-8273-aba4492d40b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5c61ad-21b7-4988-821e-be87dd583a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa22654-234a-4809-b279-a14155a72997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101294be-4f8a-4111-853a-9b3c6ebf1ac9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8337c4-2139-45c6-b916-6bb84ff114d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8d93b4-7b14-4ce8-8fc4-db347af5d290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e25d546-a802-453c-b68c-ca2a562eb380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136e657f-8221-405a-9c37-952b86855cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bfb5e1-555c-4ea9-a77e-6e8cd1b82db7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c063c0d0-3f40-4b81-8060-d590fdde5d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abd0922a-7fbe-4b40-bbde-4ea22c13a16c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6a6524-0209-4393-974c-1ae26801b768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "556fc7d4-c472-44b1-8362-41bcbdd2d54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851443dc-e6d9-4fdd-a8ee-3f0690ab1c5a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5c89ff-2f4c-44bd-9365-774b2ef8df8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31252ed7-812f-47d6-894c-85b206822d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f1cb4b-cd63-4e1e-8001-fbe375da4391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4327b8-6338-43cf-810f-4756792685fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e776177-f9f6-44ea-8415-d15fd35df73c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ea466f-8802-4311-8ab0-825be264eb6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41392ea6-57b0-40f2-b442-e701fa9497a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550fb065-e6d6-4a0e-b865-2dd4fce85609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035c7130-c46d-4d0d-986a-c954cf183ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d0cac0-cd52-48a5-b219-256b4135c36e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3428a57-3d01-4c53-8590-484d17d61e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d087c312-6985-4887-bc87-c2a9b5b77c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c114d78c-fc20-4ffe-a914-2a6f9c277d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7b38dd-d8a8-47ba-a588-3292ce556210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760dd10f-ac79-412c-9847-cae4b4f64cee",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d74596-fed7-4701-baaa-d67988398dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0db318-bbd7-42e5-8152-af6b953cbfe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c1bdce-b349-4254-b602-6a41bed39f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c4050b-f5ef-4f8f-90e7-b43ef2df94b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7ad31b-d583-4e94-bfb6-754f2fbf2c7a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9e6f34-93e4-4bc1-a25e-17e99f48b6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08be9b54-9c13-4fe5-aaa8-7863a460b2c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d89f547-3ef4-4419-874d-bf17588cdcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f129bad-91da-4b8d-866a-ca110c7de5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7809539c-415a-49fa-a72b-b8c5747768e6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f84b6f-3c23-4953-8596-e81654bf135d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13459a8-ed9f-45a6-98c4-02c690d4aca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e579584-6843-4d6b-a107-18e36790744a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd1915e-f2a9-4ff0-9b66-a4fa764f70af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c95d65-0410-447d-8f4d-db1c4ee70e06",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d01b7d-a139-4f59-a52d-cd04e03ffd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1568dc2-39f7-4c2e-8a10-a30e7e66d6d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e05b085-f6dc-41a0-84bd-b2bae7330628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3acceabc-65a4-4662-84bd-097767f75618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8713623d-8ca3-4d05-b49a-a06f170b13e5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0177da12-1fb9-4c5a-ac59-c98348a7ab9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56af6b3-2643-418c-b4ae-46969e6982db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5650514-7951-4fcb-9872-9745c8bcda6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491cbfdf-4e05-4620-beac-5db393981415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962d235e-b63c-40d9-b625-d1dbcf2030c7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87671a64-3365-4527-8e98-2826a16e0156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a61286e-7589-4788-99e2-8cdbd041af43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06adf70-64fc-47f0-ba14-13d5da51e151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d69ed0-24e0-475e-b004-31371f9bfb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c87fa3e-af8d-46cb-8cd7-46283185fc44",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0871b162-fbf9-483b-9aa6-35fbd00e307b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "371407ef-b018-47fb-ba5f-2e8565189f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baf46a8-d249-4672-b75e-6b02b4c0156c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d363144f-2cc6-4342-b330-7f40c4e991b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f75acf-2ac1-41cd-84d1-8086918e85e8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a864dbdd-10bb-4a80-aca9-a738bfba8b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eacf342-9d8a-4102-999b-6b544ff9709a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95919a68-2521-4221-a40d-53433fd82581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc01a53-f946-4fe6-889e-4a46f88187e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2f94b4-9a1d-4fc7-ab14-4e4fe9f426bd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b613c26-0f1f-47fd-b9b5-5d734cb1ad9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5937164d-ee0b-4154-b0dc-890dd4708bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eae5f1c-825b-4f28-9640-b15f65246206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb66e9a-0b8b-43e5-997a-f8b63554ec9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc21937-1fca-4535-bb5d-09f4df24ceb6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbacc24f-0d70-49dd-8816-d9deee002bb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e92718c2-ca58-4247-b216-e94dc99cbd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "387cf0b4-6cb3-43f2-aaa3-9f58ac1b18df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385f6788-c230-4503-9da9-4632b3910f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8c6a8d-8859-45ec-8ab8-fef8021f15af",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4459cf0f-a811-407b-8c4a-74fa20ccbd30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1334573-a91a-4f0f-a478-c392d4bf0315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb91f55-97d7-477a-8593-c43e36bb2625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffb3746-48da-4d99-8a9f-0dc0b84edf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe979b2-7cff-424c-b367-108aa2ce124a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce38513-7861-4bbb-a11a-2d704a4854ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f01030b8-493f-4a07-a6db-1cc44717fbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da5d2cb-8715-4013-aa23-a8a27bee6478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497944d0-2e56-4f9c-9fad-4b397f2b4e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88754b7-3ed8-43f0-ab6c-7215dbbf5410",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f6849d-44a8-4331-8410-9f0525752de4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c540ef9d-9902-4873-b56a-b9e48a277435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492522b6-855b-442e-8157-2cc05f648809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a724ec0-2082-43d1-aee3-4b1a21013844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fcaf2b-abcd-44a1-bd7c-b58fe2e1dafb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e378673-c6d0-455d-bd1b-84c96d5d70d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ad332ac-65e5-4250-a903-25d134c95d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd44b5cb-6bc2-44dc-b4b7-f9a968fdb630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65d64b7-b1fb-43d7-a1c2-d5fa400e3de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506147a9-629f-4056-b1f8-ff4e8b579399",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e400f1-1f49-44a6-9850-e3b9939b29fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fad2694-e615-4c45-92b1-0478a785e3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460910b4-4c60-42d4-bfdc-7e456d745c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df71040b-c998-478f-87bd-20a38fb3094d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec332389-b831-43b0-b2d9-1413513e5dea",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cbb967-5643-4bd5-bf45-d08bd1a05b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fbe71c2-bfb2-4b1d-95a0-e2b54a1a5502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6116ce20-6944-4b0a-a7d1-fb3bb419bedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae68855-3784-443e-a934-1c5cfa09e503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566a3c40-87b7-4d6e-8c23-89cab813141e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54471dea-9c7e-44d6-994a-14904880a388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edfd85fe-1b62-40a0-8b37-43e9919cde9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edc8f40-3233-4a32-93db-efb7c6b05d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f0871f-2ad7-4b9a-96c8-1a36aa0f82b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c08b3de-4b04-42de-be56-47f6d014ef2f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c8e182-129f-413c-99ec-3bd989fe7f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88643043-1bf1-46f3-8ad2-3b205e0c9d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8eb46c3-dafb-45d0-8bc2-9d8c54fcc3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309bba7d-ecca-47c0-af0d-b81e7b430956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1126f0f8-4071-4d16-92a5-0b78d7a90348",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1932100-a3c0-40fc-ae48-a16c41901290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f634eccf-6268-46bd-b7aa-8969165fbd39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d430ae0d-e1f5-46fa-9051-d75c2ec48be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d99258a-6482-42f5-8441-69d1cee4faa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa756e4-98b4-4531-8990-c7e99797710d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53abb230-1e12-411e-a915-9fb1854dfd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a425c4e-43e1-46a9-9061-8b580fbd0149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0fa4a1-0db7-4468-b260-d635c2968079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433a3541-d292-41f6-a532-c8e5b7585035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecc4a9b-c043-49b1-b628-fbfa61303a46",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bba1476-59be-412a-9891-73ebecae68b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34c3b70-7389-415f-857e-590fb58125b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29d76f0-643d-4a20-92de-0042b6715447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0d80e0-74bd-4a8d-af87-010cc418c8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a10ea76-7854-4520-805e-a1b388d0ae36",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85dbdd9-490c-435b-8481-18e5a4373cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b7961c-c7c4-4842-8f70-830192cc574e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e12a62-9df3-4c77-8c28-57c738f5209a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0719bfb7-ba59-4204-92a3-ca98985d8943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5301d924-5c63-4f00-b5c0-0f79772168f8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d57a38-4901-4a50-bb14-13422f80dcf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6912eaf8-959f-449a-b251-fe99680f892a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2fcbd6-76fb-4263-b2d7-b253c3fd9a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71e65aa-0cef-4a00-b9ea-198dac7bbf19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b057a99-ab1c-4a5c-b213-b0f88e371626",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c995cdbb-8819-474c-9893-dbfe7e3cb3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdefa627-8616-4b10-9cb4-2575463e31ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18665d72-11c0-4dc9-ae5f-48fd2633e229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6590f0f-6df7-4583-bf0d-638ee583bc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cab6e91-02d0-4935-ac7a-21733c5a5119",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6db82d-cf4a-437e-84a8-c129e1641e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb6b8da-8f40-45f2-b284-4ff7541f0e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e079297-a00c-4268-954e-cf7e848659a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1478a1-f3f3-464f-928a-2e616ba57efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505c1c8b-953d-4f5c-b911-b4a615dfd39c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a213e25-509b-46e8-8f6f-c6b0a433ba11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613222fc-58a2-4315-a33f-da812bd7e12b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec9e767-8440-4cfb-8a5d-7c657fff6d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec480a3-623f-4ecc-aa2d-ea338b6b55e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb547d9-6868-4a2b-82a2-914fa91040fb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f04f8f-f7ba-4308-9560-12f1a7325ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895d8ad5-cc51-40ab-bffd-dd543d6e88ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae7fffb-8438-4cca-b378-38bef55e986b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ead2b0-f0f5-48d4-8501-4d864b5f6f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de59cd8-b1da-4fa1-8b76-fa5cc5b941b8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fba70e-ca29-47db-88c3-f74dcac6a0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c60b885-bd19-4282-8e85-af556c6db89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52a17bc-7810-40ab-ada2-ea123e395617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7caf77a4-6553-4c1e-a873-85b9c4ea4759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2287599e-a0ad-4f36-8b6d-e55001b7a507",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ae499d-196c-436a-a474-72c96c55d985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9c38cd-f401-419e-8b52-289f42184ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53168a1f-8ab7-4a1f-aa6b-9772f50dddfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72fc212-597a-4ac1-adb6-015bfc1124b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16f7acb-6700-4329-80b1-f826fc6d9607",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afd8af9-256a-44f0-9bca-07d3845b2d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81e92d6-650b-436e-8249-4c5fffa0af9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9cf89a-6abf-4c4e-a70a-2bd74eafb9f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5ee75f-336e-42f6-a935-dd490035c4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba13b40-8b08-40b6-b32b-2cdf43ccfbf7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9284ab25-2726-4c81-abce-7ca134d8c551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77cfbd7-db26-4e44-bf16-b28d559e1c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab18222-2399-41d5-b8be-cc7e543ec466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d370662-8ca7-44da-ba83-4976e0510864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ab76b6-5119-470a-a86e-ed01a13fe9a1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cdbfc8-06a7-49b2-b31a-eb4e2e2a3870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cceb9557-e2e3-4204-9fe3-551e04408c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "236e2f30-fc73-4362-b7d3-599af71bb8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e470fd-cc72-418b-a672-fde9634b321d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93696c59-737e-4c27-8be5-08c89f749cf7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d263707-8a77-471c-9e0a-7c2f16e1cf79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1e0a64-23f5-4445-b655-9ea18755a7cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea99fb6-9879-4925-92e5-11d9e2ab589d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c40097-ecca-4f40-b35c-07f59da4873e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca397df-dfab-4671-802d-fdca235d431f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487eb109-5c61-4a83-9692-f9a8a6465757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c91bcb-9c22-4aff-ab6b-9d1846690808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2525166-04f4-47e8-bed7-144a1365f173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a3d39b-41f2-4655-b3d3-3a17977e48b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ab9265-8e68-41a1-8cba-61c70fa9c0d4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51004ca-8323-420a-98f1-58c2f9c5f919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818d0a24-7fb0-4556-b436-83fd95a056fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd14d4a-7455-4536-b797-1deecb895403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5536c987-6d8f-4c24-b8f8-80f76f3ef3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d169729d-cd6a-41f9-bc2e-23ba2b8b12d6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a370e35f-5abc-40b9-850b-89f6ce21b7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e21de17-426f-4a77-a2f1-52d3b174b829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39954ea-777d-47cd-bbbb-2a1c33210f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bce1e91-0411-4ba5-b390-227b5377b5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed122f08-9842-4746-a2c4-5fb5f7630b99",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667c44a8-b59d-4b16-9123-e830bd4801e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c6568a-c693-482e-9d80-8f60f31d2f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a585bfa7-5413-4ba1-9f02-5131a0ee9f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b3a4d9-e37a-42f3-865f-ec25039b5f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b632972d-a5f2-4af7-9a14-2a9a7938fd8f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06a6b71-a7fe-49fc-b12e-703ec60e9932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77477f3e-d668-4fda-a689-54a723944222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced1d462-db32-4039-a367-232961558666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b419a84d-0486-4eb1-9373-032c812fb6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef8bea5-1f7a-4734-a2fa-cc7eb5fb30cf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6929175-599b-4a36-9fea-dd32bebf7b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d13c20-d3b8-41dc-9848-2277a140c340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d64817-fdb9-4f59-8b8a-6eecf15ebc37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26968de1-b1a0-4228-931f-841749a600b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b7dd8e-8486-4991-8239-420167eb70f2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ba6dba-93c5-4dc5-a7c2-89076bc2212c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba00426-80be-470b-bf71-fdda56d1ca1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ce10dc-6900-4344-a43d-0809dcd04a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e05861-1760-4d4c-99bc-3b2dc5427ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97434ae-f5c0-41cc-b002-3fa30053a544",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c38fc6e-ff9a-48c4-b139-1e3123e90224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e745310-dff7-4596-a73c-bbddea5462c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c754e5c-1104-4ff5-ab74-05c73a3e8d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bd0240-da12-453d-8afc-1f9b8ecc3054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec03d1a9-e536-406f-aab9-91de5fef01ac",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c5f9ae-2250-4ddd-a3b5-d8b7283390ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078fc361-393b-4169-bdcd-966d5112e156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d37649-5fe6-4404-b0d7-c0cc9ea4701c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0bc1eed-6e3e-443b-b975-937e1a53263f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195850e1-4590-4649-a649-0e37aca21a6b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b830ce-888d-4238-8a1c-f87f33fce043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d720c510-445f-432c-956d-d9edad23a722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9f4f5f-bbf9-48d4-90ed-ed63e50264b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748abf99-c79d-40f1-bedd-3147e30d478a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a103d3-3ee2-4719-a3bc-75eae71e70c9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e5b70a-9ee8-416d-ae3f-def789208c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f42eba-7034-4276-8c09-e9530f4e3a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555f73c4-6970-4eed-af1e-12d79f061cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029799ab-2815-45bc-8524-75b66ebf44bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69709930-295d-4123-aed6-71dc935018cb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bc23a4-6833-4b8e-bb52-0efb8bbe8c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a58adf-c282-4a05-9556-a0454c98fef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40959134-d2db-4eb0-88c5-c8a39037259d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7beeff23-d44e-4939-8a59-3d4c9c962d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71721714-cb12-458c-a862-593978f647d8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65841f64-7a55-41a9-b917-d8745c1ff985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b0bb43-fe07-4197-8b85-da0d27626e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4dd93a7-00df-496f-af10-5a87041e2d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53cc8b4-6b63-4a85-8b28-2af362abca9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084c141f-14a7-499e-b4df-095d14d9ff76",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b66f7d-592e-424e-8f7a-33ac3700cd10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c79e3480-16ff-4c7f-81cb-bdf49fb21af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad18401c-062c-45b4-90b2-499b65148b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678b7df2-4b36-4be3-85e3-99bea4cfa0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b56dc79-70f7-4b50-aed1-bf36f4b964c8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a66f157-4a75-4e15-8543-5d545de4fe16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e4172b-5c27-4767-88ca-5f8b3952c9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "695b39da-47a2-4ce3-8b5b-06c06e3df276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed938318-4307-45ec-a54e-745ba6ec4682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc779a6-0c66-43ac-8728-d1c45889454f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cde896-4ece-496a-b0bf-27558d3dc8e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4526413-798e-4fd9-8f5c-7e09e8dbbf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6119a884-6a9f-4660-ae92-0146ee1e8374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c53c80e-a02d-4fd0-9fb5-70bb4b0e9551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a111913a-b865-4048-9501-97b2bb518a1a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36c8dfa-aa4a-4c5c-856f-c3743d7bbf86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "453442c6-0ca2-459a-9e61-c9499676d758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "766977d4-11fc-431e-92a3-a1cad4648df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb76b547-520b-43e1-88da-d2e01e66206e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3ccbb1-9b7e-4dbe-9b5d-885ac561c82d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60406b2e-28f6-4b4d-8a02-cf700c12ec29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7debde37-0b91-46bd-acd0-452b815b077a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da24ac00-a508-41d2-a28d-dda8c10b60f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f183c6f-2101-4393-b6f3-a3c1524be852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231c03d7-c71d-4ae5-baa9-bc6027710ee0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62b6b70-8302-48f3-8a9d-01900a1a9075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197abd06-6fa8-49a7-9520-f47fb5abcf71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3884f03-a531-454c-a51f-4655c6a584a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7b5f0d-36bc-4d76-a8bb-89f2c83d4b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53218e26-194b-4211-9970-7d8cec898024",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36755a7f-69a7-474f-82de-49bd5b11c4e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc58691-de99-4bd2-884f-1734f04239bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eae72d3-463b-4ca8-ae5e-562762583e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929af92a-b472-4229-a6e0-6ca63123fc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf07e8e-8cf7-43ad-87ee-9fe0811b2d35",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43c202f-184a-4192-b763-c2f4394cbc5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "693c22dd-589f-4b0d-b09e-e2bd45fccd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501da2f1-b68b-49e9-835c-7f9eaac9781d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839a8e04-6c83-4c0e-aa1c-3ae1dfc42698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df98540-5a4d-4be3-b356-674e559dceae",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614ff178-13b0-4b2e-b1ce-94512536c0d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e952de8f-5cf5-4324-8265-2ac550ab31da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e73aa7-080d-47da-bbf0-e41bfb2e0578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a392d0c9-f8dd-47b1-ba73-4e79e8e8f03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b8c452-f3ef-4c93-b3f1-07e052201dd9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2095c20-f2d1-488c-9135-a3323b7801c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11f3bbaa-785a-4e8b-811e-f988aa418a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccb4175-13c9-48c7-ba67-8da4b567bb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574d6b7b-b180-4544-ae16-1c538dc196e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6ffd7e-51db-42a7-86be-15db2ad79fd9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2749b7a-9807-483c-a34f-3ed530af08ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a715ca2-77e3-4f83-8729-22116f64d3de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ec5969-12c9-4389-9ebd-86b3f18e7d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcedd78-0190-4b82-bed5-12a3c8e664e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187f6164-a544-4437-8fc7-11f2c384a87d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167bcfdf-f130-48c1-b449-699675a27e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8224d1b-48ed-47b3-b994-d634aaa334bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec708108-431b-4fe1-8511-385f72e010de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378daeb4-636c-4242-9a5a-629a636b8a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff27c284-a986-464c-89e9-9569b8b37a1d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28ac27a-d7c2-43e6-81ff-b7c151d69d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29f13289-f208-4431-9b9d-9fc711572f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64124c08-3a82-40ca-bc5e-f7232bc16663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd484546-6860-4559-a942-3f77526ec9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41aabb5-d0ce-4888-918d-916d6cd9320f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab12b42-b635-458f-8688-bd6481cb68bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0720b934-3099-4aa6-aac5-aec2785ddc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "815af9c8-d745-42c2-bebf-5edc7b29eeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41951b4e-20e0-4aa6-b1c8-64b054814adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68e25c9-9feb-4c9f-b1b9-7d919e5d4d51",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f691a3a6-24a3-4294-9b82-cae09b29b79a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f001200-faf8-4944-b9f1-d7a982dd9441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351b0aee-6647-4665-bb97-39e5c7a4ae9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67181e69-8568-4cda-b090-943f0cd7c45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2221ebb-73c3-4e12-9e00-c958a1234708",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e1dfea-694d-4f5f-b4d2-920331b1af33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d91bf5-ae0c-4568-9eff-6148a43bccaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf920a0-ba57-4f5a-94e7-d9b7d334484d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb8ad9c-f939-4cd5-9e5b-a3c249a855fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a526d2-3977-4950-8c48-ca2a09b4c5f4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a809a28e-9578-4028-9d40-edeadfaa25c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d09100ed-ce42-4749-ae53-a428de9bdebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457661d3-8e9d-46b2-a4b8-c589e63ac094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f26fdf0f-5e28-4854-9604-53de1b0a4411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7805a7d0-f508-4ee6-9a9e-88db03c8b093",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72633d12-50ef-48a1-8b2b-b5adec5f5de3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2620cd5-6b16-418f-ad23-a3649a4172c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7167e470-f02a-415d-960b-7767b5d076c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1142dfa6-c948-41d5-acca-dfb299adf13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9dfe17b-bcaa-4a09-a7bb-67f6ed49a1bf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad549ca-4a9f-42b2-a1b9-4a19f94cbfaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aa4fa29-f7c2-474f-9489-212d75bc48d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeacc43a-4baa-4cf4-a1b4-d37c7cd33359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223c145c-565a-413a-96aa-3458ee3b3316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564fa81b-d805-46f6-90b1-66b364c5bd01",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e38c0c-6028-48df-93cb-90f1f46d4637",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46546225-7618-481c-949e-222531f76647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bec614-e341-4c88-b0f1-430c37a14cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3468a5-7864-4272-b983-59a46839af4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2b5a40-8aaa-459a-bfb5-fe106edd4fdc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755f3991-aed5-4e2b-935b-47c5ccc30f50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33958a8e-542c-4895-a61a-dc923db4ad32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dc1cb7-562c-45c8-8991-20293d964e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f632b0db-b60b-4ddb-8d15-90f7744babf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccc7e99-4730-4acd-8e63-4b63f51aa65b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620cb9e6-cffe-4db7-9ed7-e0f497e3f117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d624c7af-0827-4d3c-86b0-22f81091fe3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87083a93-04a6-4029-989b-28349e261951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0106eccb-535f-48f7-bebc-1d9ed3744b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc427648-89f3-42da-9776-045c004577ea",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1ea150-4bff-4a33-85b0-2dbeb0e2b9ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1f9e6c-342f-4e1f-9cbf-47f880f037fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92202946-bda0-46e0-a1d6-3745e1603bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7c4348-82b9-4c9d-b725-437ef05eab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c529d34-0912-4447-b7a7-694d1a3d29d9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2225fa-58e2-4c61-aca9-c3fdd753961f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88b44dd6-4904-4508-928d-cf382ae248db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e4be76-4038-4bc6-b238-76349faae4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f56651-44e6-4dab-889c-59c4870f5c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e10830f-1528-487e-b945-a4b205d621c2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bb63ff-a29c-4547-9a50-abab40eda890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87aa6ec-8c21-4ae3-9307-7ab0439f858a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be40017-d5b1-4b62-b109-350ffa129727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d091f72f-1df7-413d-bc4a-21deb53801f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1ce96f-0694-464d-af8d-aad2307a63a9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39cf2c8-973e-4d90-96b2-77a747ef7c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84d7fcfc-dbe2-4797-8e54-e4da607f234d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39c8a51-0425-42ae-bce9-acb4d93a8a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b48d6e4-d8e6-45a0-9e51-cca6112b2d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadb3417-e39c-4f56-8e9a-80e5747b3dd2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb442bf-ac4f-444d-b360-204c87230698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f182c7c3-de7d-4cdf-83dd-d27e1eb08192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fa9512-a609-435e-ada5-8da0912e126b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457ac6d6-c630-4085-a6ee-9bba32dd872a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f75732-53ae-4bd3-ad59-f9a6196d19bb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6c135d-105d-4cd7-85b8-cdecc2949d87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2aeb48c-c6d6-4e14-ae29-2c20f362cea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50a4fc2-0198-4e36-9d7c-c868171a1bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627a35ab-5c99-4d64-bdd1-7cc36f30f9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56865485-3c39-4b5d-81b8-70612e5a0c91",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b563ab-3be3-4986-8b2a-738886b5b664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6acc64c1-e5cf-44a4-ac8d-d632f90ff160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2281e80-963c-444c-8c59-2a997e7593b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480b24dd-3251-4e09-86d6-feaf103cadc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a1cd66-4085-4877-8737-e4543afba086",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997d18c1-1b11-490c-96d3-79ed935650a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc9c31e0-3535-4c9f-aed3-a82e2f2ad9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79cea41-3aec-4df2-9e39-67cf4b9fcb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0216f828-c7da-4b20-8c78-c4a41b29a960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b8ea66-0e33-4ac2-8c6b-2c1efabde892",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199e2190-ec72-437e-85bd-010b61f51829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f947e7-47d1-44f3-bdf6-547bc4b44230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdb5c16-26a5-45dc-9756-648abc049bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbef8da-f56b-4837-b9ae-22aa56fb500b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48e39f1-0d7f-4b52-9cea-cabd60956a64",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc9c27c-8754-452a-afb2-e1cf6842e5ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3a0d1e6-0797-4f02-bbf9-ea7806694686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3916a9-2430-41f1-8dd3-ea9bd7ba83a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04db2cbb-3ccd-4798-8da1-3657ae3b3a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dfda3c-6844-4a87-b139-4746b6fc2d2c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a4ccdc-8aac-48b4-bdcf-f141d39ab279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f42b74-9f87-4cd3-b285-40705c3a04bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdbe44f-ed39-44fc-90c8-c46fac7c4814",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fce79b-4e28-4c6c-8424-74a470ccc343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2b5b2b-8c44-45f0-aa90-475d64e64912",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8663050f-1de6-4346-b1f7-5ad1bf3e91fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b881797-4992-456d-93bb-22b77eb186df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f5a20c-6f58-4663-8055-78de2ab43505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bf5f0a-7bed-4895-8bd4-e0b9537103b4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35cdf379-9d4a-4c57-a37d-c7d1ed028120",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77b21112-769e-44e8-baec-75318bd871c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "266a6904-5996-4244-b03b-ff5421b38542",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c720be9f-4231-40bc-9fd2-c26613bd7182"
                    }
                  }
                ]
              },
              {
                "id": "d8f9c9fe-069c-4f44-8fcf-7ecf6859aa81",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e5bcb0e-d82f-4efc-8a2a-8cce21db658e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52747d4a-802a-414a-92f2-bc995393387e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ca40df80-5387-435b-a818-a097a70a5a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8938fbab-260c-4829-a247-e0e788426d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec3e2615-b80b-4c4d-bbbc-d65d8846f1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afba5584-a898-4c9b-812f-39d7b6da6ae9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3694c15-47f1-4eb2-b1a6-9d31a193711b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "81f3a0c5-0547-463b-b6c9-4dd481c6fe56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e439dcbd-1c2e-4d9c-ad09-da41d7b6ede3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6dc27745-0bed-44e8-a5f1-ec8a66fe090b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "503bb5e5-5f20-4586-8f1f-cce3e2aafc4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5473023d-8d6f-4448-8ccb-ebe315aade97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81e75637-65b3-41b4-ad37-b13463a0b679",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "887aca10-993a-40d7-833d-acdfa234b766"
                    }
                  }
                ]
              },
              {
                "id": "fbe044a8-c631-4699-a313-94a86faa6958",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7d55455a-f49d-4b9c-a555-6efdf18934c3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2495de59-39af-4654-83ca-d06ea9dbb97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cc4b8560-ad94-44b7-a88f-813256745dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3d4bc5-9ddb-475d-88af-5f26afc0dec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7827a12c-c99f-4172-83fa-cfd96c5fab33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1f656853-17bd-4b69-862a-48a8caaec2dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "22e978ee-ce3a-4319-8ff3-80689e18bdae",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5157d366-f869-4102-9b69-5b55b32e1cd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f8182e38-9f83-46ff-a733-8579383cf8f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46448c5d-cda4-48ea-9695-c1fd31c79081",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "511fef9a-aa0a-483e-8a96-0e979a00bcb8"
                    }
                  }
                ]
              },
              {
                "id": "0cc2c47e-6165-46dd-b6ad-c688f544e7e5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c93ff2c-bfcd-47af-8795-a0bf8c11060b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2dbc95ba-dabf-4628-9a54-598c8ee8271f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4506243a-d96c-41e1-93ba-1a2b4b3945a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b763d432-af17-4487-b2b0-f50f2fa79cf4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21908cab-9ea9-4024-83b8-e74f3f86b1e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ef0d94b4-872a-4c1f-bd5c-4b142a39fbf1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17bdf1d9-437b-4985-b0d9-2c3d86d90598",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2048dfa1-5ef4-46bc-9101-90fe1bf71a59"
            }
          }
        ]
      },
      {
        "id": "d762daa7-b85c-47a4-87c3-835f0716d638",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e9bc9149-6584-4a4b-a6b7-9cda7ae5ba50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e0e9528-6ef8-431c-9859-03a2bdc99286",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "620bd5c3-72d9-4294-bf8d-2e5314b5d722",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa89440-d17d-4c23-8d56-7f3b845f4c7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db8be242-e00b-4ec9-a77a-c8ac8e3ca6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2434a218-3908-4113-b823-031c5bbc89f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c79adde4-4244-4f65-a5ac-07197ec3640c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41a8f1d-9aaa-49d7-8dd3-214cf4a08148",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa4fbae-4874-48ae-bdc6-b91a7ed9b508",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "705cab39-b3a8-433a-992a-d90c5f5999b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bc0b8c-b97e-42ff-b089-a9f7ff3b6c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1dde988-1ac7-489c-8739-b637717f967c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b80f34e-9248-4b2c-bc9c-ee43c0b5aacb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8faef843-a771-41b4-9f1f-9c7b5dcb6298"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4016a145-fa0d-4f23-bd67-59d749faaf21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be9eaebf-cc93-4009-b4ff-8896d642cd91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6b3e982-e500-4eb0-a40f-739430defdab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa4aa16d-9e98-46b5-aa44-51fb1c58fc68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73c319e2-8ccd-4731-9b1e-5d6da4cf6cb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8509d5c-44d3-463b-9426-fc77cd4f39b4"
            }
          }
        ]
      },
      {
        "id": "f11623dc-676b-44d7-822a-85dc589fbcf6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9c1e919b-eb3b-45fe-ae27-37b0289042f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33b12e36-310d-49dc-bfb7-92a9f07db2db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e40e00c8-d635-476d-a3b8-a9062379ca8c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f79aba-b893-4f7c-bc59-eda0b09360ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6dabe97d-9cde-45e3-afaa-ff0c84c9cdd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c66b516-b331-4cc2-b08b-8ed1085c4c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac159da3-0057-40c7-b361-1b4fc91f02a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d056147a-187b-45ea-8180-a5f290054d35",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c62f66e-f97d-4476-a36a-3898706dd8c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "04a1c678-3134-4a9d-9dd1-e1cfadd81d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a9d1d7-1aff-4f51-8458-63987703e89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e428608-c455-4fa6-93a2-4585067290cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1ac4561-4824-4177-a2d6-e4c02cde2f0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c47ad23-a910-488a-a0fc-7ff654337312"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53b672cf-649a-48a8-87b1-2e508e150209",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8ef0178-98a5-435d-95e8-006d16670489"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bec63d40-58d0-4e9f-a459-a75e7eeda395",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4974f855-5a47-4f2b-ba97-4e3ae6d72ba4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4667b8e7-bb54-4f9a-9c4d-bf7afbaabb0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7d67378-cca7-4ab5-9129-6710d7d80ca8"
            }
          }
        ]
      },
      {
        "id": "f2dfe814-6d12-49fa-b7a9-afa3e72d9614",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "99f64ed1-319b-46f7-9b9b-222fae6749a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9c867cb-ab3a-4454-b2c5-02bf2e9a68c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2da61587-d46e-464b-bd53-a69918537e7e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bc8edf-c49e-4125-a683-5c9775c3bd45",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9dcdd7f0-9561-477f-865b-0468079934b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04748cc-6121-484c-8e03-1eaddbb4d90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d85d3e3-b12c-4a77-ba80-bd727a3caeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a3b593-6286-4131-9ac3-9a6e0126c64e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc5c14d-e656-429c-829b-a1f9db1d8194",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "71cf5214-9aba-4de4-ac01-8706eacd2eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57804545-ebbc-4669-aaec-0ad95ea646d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e68d214c-08f7-447e-bcc2-eb3340a5bbc1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e7d2a46-a808-4ce1-b110-06a7c1805bf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97e7b774-ce94-48b3-a21c-d59bf1e12c78"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d940c7f3-beb7-46c8-b539-3b7ff9bd91b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "940abede-35d8-4655-8a2c-55b743b1b07e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7cd42f2-2ac9-491b-be00-6831c6257e2c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2a1e33fa-076e-4391-970a-b236a05f9c4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca055574-8e49-450b-9ae9-38ec549a4af6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4eba7da6-fb4e-4042-ae7c-ac2e38c11804"
            }
          }
        ]
      },
      {
        "id": "2547e01d-37d3-4789-b196-19fd70588994",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "911257ff-7e05-4092-b391-fee4d2342e9e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98e7cb48-8b49-41ec-a515-fecedf3ef7eb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a2bb4746-6733-4e99-be50-1e703f411b3f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37898376-4a21-4308-b8cf-9dc17f374637",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b134c6b8-eb04-4dca-ade8-d3f45ba4485a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 229.3629343629345,
      "responseMin": 6,
      "responseMax": 5414,
      "responseSd": 682.1204048091709,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677026285159,
      "completed": 1677026355339
    },
    "executions": [
      {
        "id": "70d76583-02ca-47cb-82fe-03661c3c8456",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f3402708-04a4-41f1-888f-57140c75816b",
          "httpRequestId": "2c0e29b2-e7da-4c47-8374-1c4adc5ebffd"
        },
        "item": {
          "id": "70d76583-02ca-47cb-82fe-03661c3c8456",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "79c53a54-4134-4eb5-bc8c-b2a9a6127453",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "552aee8b-6f08-4cb0-b6e6-d4accc787b8f",
        "cursor": {
          "ref": "05919dfa-fa87-4cf5-bd84-a6c843643c2d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce23dca0-c96a-4319-af04-8b4fb65ed62b"
        },
        "item": {
          "id": "552aee8b-6f08-4cb0-b6e6-d4accc787b8f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7baa7268-dcc9-43d8-a84c-25badf23de0e",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "8bc6f8b9-688b-4207-a15b-0250addf16bd",
        "cursor": {
          "ref": "f23800ea-110f-40e5-95ef-6a6dc17c6df5",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3d392fa0-4dee-47a6-bcdf-2dcbbf338437"
        },
        "item": {
          "id": "8bc6f8b9-688b-4207-a15b-0250addf16bd",
          "name": "did_json"
        },
        "response": {
          "id": "53bbd7b3-e05b-4b8c-8b2d-0b384ca98048",
          "status": "OK",
          "code": 200,
          "responseTime": 407,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c4c919-f4b5-45ba-ac0c-9b4b0d9bf0a1",
        "cursor": {
          "ref": "869f4e82-246b-4409-86c9-0791ba9767e1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a2c0e396-8ffb-42ed-a46a-0320631831c7"
        },
        "item": {
          "id": "d0c4c919-f4b5-45ba-ac0c-9b4b0d9bf0a1",
          "name": "did:invalid"
        },
        "response": {
          "id": "c4916f7c-d410-44c1-999d-d19c009acd9b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 326,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d0c4c919-f4b5-45ba-ac0c-9b4b0d9bf0a1",
        "cursor": {
          "ref": "869f4e82-246b-4409-86c9-0791ba9767e1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a2c0e396-8ffb-42ed-a46a-0320631831c7"
        },
        "item": {
          "id": "d0c4c919-f4b5-45ba-ac0c-9b4b0d9bf0a1",
          "name": "did:invalid"
        },
        "response": {
          "id": "c4916f7c-d410-44c1-999d-d19c009acd9b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 326,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b9fe9c3c-491e-4fa4-abc1-744b57e53922",
        "cursor": {
          "ref": "fe8d38fc-2265-42b1-9c9b-326099e9a258",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fdb6e6c0-5941-4ddf-b7a0-1f60c5d577c6"
        },
        "item": {
          "id": "b9fe9c3c-491e-4fa4-abc1-744b57e53922",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d93a2efb-09d7-4baf-ba23-9e35431a939f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4162dfa7-bb6b-4760-bb2f-28b77e9d1dca",
        "cursor": {
          "ref": "807dbc3f-ee15-4119-9da6-4e6899a5aa7d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d9388ec7-eed6-4479-a46a-c4fb949c718e"
        },
        "item": {
          "id": "4162dfa7-bb6b-4760-bb2f-28b77e9d1dca",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "51c53553-d715-4b1d-9922-d3430508775c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808fdb16-089b-4e36-b998-df9d566245e3",
        "cursor": {
          "ref": "e906e755-704d-4106-aa63-d19eeecfd5bc",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f912036b-d0df-4c98-befc-ba3fa6e960f1"
        },
        "item": {
          "id": "808fdb16-089b-4e36-b998-df9d566245e3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "29f6d711-2497-48fd-9560-eab0f6247f45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ee847b64-0f5c-4234-b2ea-58ba2c8aed64",
        "cursor": {
          "ref": "58267457-8020-4cc4-a372-5d1dce949283",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "857b33bb-49f7-4f71-b6c8-0bf088a5e7a0"
        },
        "item": {
          "id": "ee847b64-0f5c-4234-b2ea-58ba2c8aed64",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9c3617d4-71ff-4ddd-9f3a-f456e02c5898",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ee847b64-0f5c-4234-b2ea-58ba2c8aed64",
        "cursor": {
          "ref": "58267457-8020-4cc4-a372-5d1dce949283",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "857b33bb-49f7-4f71-b6c8-0bf088a5e7a0"
        },
        "item": {
          "id": "ee847b64-0f5c-4234-b2ea-58ba2c8aed64",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9c3617d4-71ff-4ddd-9f3a-f456e02c5898",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d00f8da6-31f6-499e-8b38-496bc1597c89",
        "cursor": {
          "ref": "d5a1b8b1-dc52-4a0f-a1b1-2fd92b7db334",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2cab60fc-5059-452c-9cde-84fe566822cb"
        },
        "item": {
          "id": "d00f8da6-31f6-499e-8b38-496bc1597c89",
          "name": "identifiers"
        },
        "response": {
          "id": "8ee4a8be-b40c-4a26-89e2-3bd2002b60c6",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981e04fe-c66c-4625-93db-c490ec83cb34",
        "cursor": {
          "ref": "7d9810d0-c7a3-427e-a26f-92eeb48f9024",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5cb7aa62-cafb-4dc3-939a-b25378a30cbd"
        },
        "item": {
          "id": "981e04fe-c66c-4625-93db-c490ec83cb34",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bd2bd4c6-7f01-4ed8-8a24-456753061180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981e04fe-c66c-4625-93db-c490ec83cb34",
        "cursor": {
          "ref": "7d9810d0-c7a3-427e-a26f-92eeb48f9024",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5cb7aa62-cafb-4dc3-939a-b25378a30cbd"
        },
        "item": {
          "id": "981e04fe-c66c-4625-93db-c490ec83cb34",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bd2bd4c6-7f01-4ed8-8a24-456753061180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1cd4cf-73bc-4b9a-98f6-04aa2985c9e9",
        "cursor": {
          "ref": "1210911b-85fd-4c63-a0fc-baa1298daf7a",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "edcc9a2f-d8ed-4b4b-bc64-d3ac1011330c"
        },
        "item": {
          "id": "6c1cd4cf-73bc-4b9a-98f6-04aa2985c9e9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8c91aaa6-3f52-4989-a9b1-f7975d85a00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c157a30-f0f3-4170-8afc-5dc52971cdd8",
        "cursor": {
          "ref": "1f2ed663-6d87-4ff2-b2da-3460354745b0",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "80371189-f76e-4428-a921-9ea60f2aac4f"
        },
        "item": {
          "id": "2c157a30-f0f3-4170-8afc-5dc52971cdd8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c100b5b5-2768-4bdb-85ec-1a2bab5d7f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39515bf0-f5cd-47de-b0d8-79b31ddf7c57",
        "cursor": {
          "ref": "67bf68aa-685f-49f8-8f81-4ac4aef17305",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "28079b91-8b30-4596-9c6d-c3e5fc253205"
        },
        "item": {
          "id": "39515bf0-f5cd-47de-b0d8-79b31ddf7c57",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "38abfd01-d2ac-4082-b97f-3e93b099de77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5ed08d-3fe7-43d0-a8fe-a812f1e5031c",
        "cursor": {
          "ref": "27f387b9-3d89-4053-8552-53f7f437dba9",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cd0c1851-b20f-468b-b0f8-f8c53db875ba"
        },
        "item": {
          "id": "eb5ed08d-3fe7-43d0-a8fe-a812f1e5031c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8ccf7a8e-4470-4d9d-b57a-6b1235003801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f7486b-1419-4da4-baaa-2076678c9545",
        "cursor": {
          "ref": "60988e36-dfb9-46cd-a489-df4ee7025f1a",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1ed09202-2586-433f-a7ec-bc1052c52f80"
        },
        "item": {
          "id": "28f7486b-1419-4da4-baaa-2076678c9545",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "06aa4d04-2456-445e-aa9d-35e8e17b0d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ef2409-bfe3-4b95-9c53-31e6065ae5da",
        "cursor": {
          "ref": "14b6e8b9-c06b-43d2-ab87-516aef3a53c8",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5fdf7438-a2db-41ea-a766-e40d281ae2c3"
        },
        "item": {
          "id": "82ef2409-bfe3-4b95-9c53-31e6065ae5da",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2666a033-07c7-4e6d-bdc3-562b0caf18b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ca91ad-44dc-43b2-95d2-561812e3b0e6",
        "cursor": {
          "ref": "f31ae08c-8a5d-4ff9-9078-4577b154fc49",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2a324024-c3d9-4739-9e2d-5e7577779021"
        },
        "item": {
          "id": "c5ca91ad-44dc-43b2-95d2-561812e3b0e6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "49b40f64-b822-491b-890d-1aeb2e102482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c6fb09-16d7-40ec-a564-aa79572af81a",
        "cursor": {
          "ref": "827507e8-ddc6-46a7-ae26-7f3ab948d20b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "95b97728-3e20-4cb1-beee-eb3977108f53"
        },
        "item": {
          "id": "b2c6fb09-16d7-40ec-a564-aa79572af81a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e15f88cd-7919-47e6-a847-4737978ee4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e66dc1-d25f-4252-b8c0-ce7dab679c10",
        "cursor": {
          "ref": "10f0eca1-fc3e-4cb4-8a7d-200fac5e679a",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b459fd73-4b06-4ac7-9646-e5edc6854585"
        },
        "item": {
          "id": "47e66dc1-d25f-4252-b8c0-ce7dab679c10",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "529861ac-853d-49ca-a33a-267bdd1a7e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e79f8a-e928-4ad3-abed-d2367321a526",
        "cursor": {
          "ref": "a1098f4a-d36a-4ef4-8cfb-02097caf179a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6d2f9323-3f71-41fb-8502-61339fe6847e"
        },
        "item": {
          "id": "30e79f8a-e928-4ad3-abed-d2367321a526",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "00f6d949-5729-48ab-8115-b16f3c55c68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb913e0c-29bb-465f-b5f1-8e30c68df87c",
        "cursor": {
          "ref": "d143c734-64ae-48c8-9c34-a465abccd7e6",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5016aa22-1ce1-4d89-a19d-2333b6110cb3"
        },
        "item": {
          "id": "bb913e0c-29bb-465f-b5f1-8e30c68df87c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "038521d5-3817-449b-b5f4-8c689551afdd",
          "status": "Created",
          "code": 201,
          "responseTime": 613,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "105bc58f-0025-459b-b484-ee0fc3c2245a",
        "cursor": {
          "ref": "ba6db436-e49f-42a4-94d2-b0ed0bab2ad3",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9958f9a0-f921-49d0-b878-d67598d72560"
        },
        "item": {
          "id": "105bc58f-0025-459b-b484-ee0fc3c2245a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1271f7e3-caa3-4a3a-b46c-753f5ec9bdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb31289-d826-4590-8467-615fbc193321",
        "cursor": {
          "ref": "326597a1-ff61-466c-a6c4-ff99492d66d7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2e4371b1-504f-4a90-93a8-fb6750f4e1bb"
        },
        "item": {
          "id": "deb31289-d826-4590-8467-615fbc193321",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d055245e-48e5-473d-8cfd-338b05d3ff6e",
          "status": "Created",
          "code": 201,
          "responseTime": 5414,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "58f9759d-582d-4149-beb8-b6b5eeb5a4b8",
        "cursor": {
          "ref": "a1912a1a-a151-41d8-80b3-7fe34bf515c8",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1c0ef858-e973-495c-9549-b7787dd7a05f"
        },
        "item": {
          "id": "58f9759d-582d-4149-beb8-b6b5eeb5a4b8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "62b7bbf7-610d-4c8c-97e5-c27b3add16f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d04b0ce-95d3-4173-ba6e-aad54b21ac19",
        "cursor": {
          "ref": "41e53e0e-72b5-4e4b-a243-040b6826b0fa",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "51209bee-de95-47fd-b7b1-593f01837d5e"
        },
        "item": {
          "id": "5d04b0ce-95d3-4173-ba6e-aad54b21ac19",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ba2168d7-a6e2-4994-b634-de3e9a041116",
          "status": "Created",
          "code": 201,
          "responseTime": 4445,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "993824b2-6a66-411a-9738-a1fd40be7191",
        "cursor": {
          "ref": "253290ac-642d-47fe-8a73-f5c2c2adf6cb",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b490a1c6-b11c-4c6a-9c52-31270ae62cb4"
        },
        "item": {
          "id": "993824b2-6a66-411a-9738-a1fd40be7191",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9d472c35-519a-431a-a7df-dec94170265b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cae100-d9a2-42be-ab62-7d0c402be609",
        "cursor": {
          "ref": "10780e71-b1d9-482e-a428-26a769652c3e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1ca8f9d4-0fcd-464c-bfc1-7a8d814de7f7"
        },
        "item": {
          "id": "91cae100-d9a2-42be-ab62-7d0c402be609",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e247f6fd-6e47-481e-86bd-73fd7a7336c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 599,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8462006f-1671-4e67-933f-1c905d3a0019",
        "cursor": {
          "ref": "a3adde0f-0aa3-4b0a-a0fd-8af666045874",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ebb647d9-e48c-4620-92cd-91f20d4c10eb"
        },
        "item": {
          "id": "8462006f-1671-4e67-933f-1c905d3a0019",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "533eb13a-0ab2-4bf0-9b64-6d62f1dfd8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cb15f6-04b3-4c04-946b-f8cf0caf43a8",
        "cursor": {
          "ref": "225bb42c-3d42-45a6-b4b8-5b0f933516b1",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b168b6d5-862d-4c87-bce4-cb49a555f8e7"
        },
        "item": {
          "id": "f6cb15f6-04b3-4c04-946b-f8cf0caf43a8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e30b42ce-8149-4748-be7a-80c938e81b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465607d0-a2c9-40b8-b0a7-e8ca15574e4d",
        "cursor": {
          "ref": "68577251-ec74-4ac5-8613-bd7abfd5523f",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "91a4e73b-a72d-4fd2-8682-9145091f4f81"
        },
        "item": {
          "id": "465607d0-a2c9-40b8-b0a7-e8ca15574e4d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "03ca430a-be05-46df-ba73-696898093e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e51b24-3d6f-4616-83ac-acad44bea314",
        "cursor": {
          "ref": "44f774d9-79ad-4481-99b6-4ceadddc185a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f03d8081-9c16-4312-accf-ddbafbb3989e"
        },
        "item": {
          "id": "a7e51b24-3d6f-4616-83ac-acad44bea314",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b0b5f27e-67f0-4a78-b6a7-8be51f2d5742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c700fd4-3acd-47b0-9688-0eb4840a1b40",
        "cursor": {
          "ref": "1c9a9353-294e-427e-b02d-84be58b12a37",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "07af619e-cb1c-45e4-89c3-4a5ae036808e"
        },
        "item": {
          "id": "6c700fd4-3acd-47b0-9688-0eb4840a1b40",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2892f82b-7926-46ad-a4a9-b8d7041cc5b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4c4ac0-ce7c-4e1f-a2e6-2c1126d5dbe3",
        "cursor": {
          "ref": "c86d2dd1-56a4-472e-8b2e-bfae07471c84",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d4d088da-6924-4b19-9871-c58038c60236"
        },
        "item": {
          "id": "5a4c4ac0-ce7c-4e1f-a2e6-2c1126d5dbe3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a4e6cdb3-1389-4f85-b0dd-e1f266147a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1329ffe-a80d-49c1-a6f9-a2c46e364823",
        "cursor": {
          "ref": "3b3b11d1-2446-4c39-946b-0683a710fac6",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b05c5687-a273-4c49-9f9d-408a3aa969a7"
        },
        "item": {
          "id": "b1329ffe-a80d-49c1-a6f9-a2c46e364823",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e6ad114f-4d2b-4034-94c0-9247b2bc3510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a70122-99ca-465c-b14f-00bf2b915923",
        "cursor": {
          "ref": "aaa55d96-736e-4007-8b81-ce733ce7067d",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6ba684d3-65cc-4782-a8d3-b16f102a0dae"
        },
        "item": {
          "id": "f7a70122-99ca-465c-b14f-00bf2b915923",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c56962b7-47bf-4b77-ad65-e2c496e4dca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5a7f59-b386-443f-8585-67950634e097",
        "cursor": {
          "ref": "1f2e518c-8e85-40f3-b359-c5106a818ac8",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6a8073da-e6ad-4848-89a1-312876f4eafe"
        },
        "item": {
          "id": "9e5a7f59-b386-443f-8585-67950634e097",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6929c410-18a4-4800-a9c6-3c2ad19969e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fbe5d7-0b4b-4787-a738-81d4d999ec88",
        "cursor": {
          "ref": "3e192060-6fe5-4fa0-99cb-01ad9df84eac",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2d2194f6-35d9-46d9-969a-100a314d2cf6"
        },
        "item": {
          "id": "76fbe5d7-0b4b-4787-a738-81d4d999ec88",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "74a15c7e-4b98-4b5b-b1f8-1a18967a57d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1d097a-0db0-47ad-936f-bf17e752c6b4",
        "cursor": {
          "ref": "10bd121d-e5c2-44c2-b350-a61791c02457",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41ff44b0-f035-4554-a7c0-0e44410b81f4"
        },
        "item": {
          "id": "fa1d097a-0db0-47ad-936f-bf17e752c6b4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bc9e91f0-ead4-4138-949d-ab88e5ba715e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214a58ee-ca7c-4d52-ad61-821b59df8c19",
        "cursor": {
          "ref": "6bf42d4f-bdc7-455d-8b8b-872a640203a8",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c988190c-6c87-4a6b-87a2-99799418cbce"
        },
        "item": {
          "id": "214a58ee-ca7c-4d52-ad61-821b59df8c19",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c95a4253-4e55-4b4d-ad37-dfef0075d532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030ff9a6-fd30-4fbe-a01a-d4a85c29e187",
        "cursor": {
          "ref": "0b6169e2-6130-4c4b-bfb4-19826df67fe5",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "85b9a017-992f-4b12-b28d-b5307d5b1770"
        },
        "item": {
          "id": "030ff9a6-fd30-4fbe-a01a-d4a85c29e187",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c59c67cd-502d-4d24-a0c6-6da0e742c5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6ed409-df8e-412a-9da9-4e0f8b9a588a",
        "cursor": {
          "ref": "4f95a261-4270-4868-834b-d81d3a83f700",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "43dd0e12-8157-497e-ab5c-0137558f3aee"
        },
        "item": {
          "id": "0a6ed409-df8e-412a-9da9-4e0f8b9a588a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e0c623ad-1e9f-4e74-82be-cf2e7aa0629e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc52993-e70c-4230-998d-724fbbc480c7",
        "cursor": {
          "ref": "b086509c-eff7-4804-a81a-6d21e37358a5",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5296973e-8e9f-452e-938d-5472b90432a0"
        },
        "item": {
          "id": "4cc52993-e70c-4230-998d-724fbbc480c7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "86a42d8e-0af3-49d1-8bca-93d4ffd36f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9889f8-2ae7-43f2-9c16-9ffa827fda4d",
        "cursor": {
          "ref": "a0587e9f-b665-4bc1-8adf-792fc3783995",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b33bb864-ec9d-46aa-86c2-5539e16c5e0f"
        },
        "item": {
          "id": "8f9889f8-2ae7-43f2-9c16-9ffa827fda4d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "47a21f3c-16d0-4ec0-a4fe-3a49579612f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dceb50-45f9-4a3c-bf13-76433e4f21b4",
        "cursor": {
          "ref": "586754b7-34a9-4460-b53a-185507ee7318",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4ac6a80a-707e-423c-a461-fc43e067a5d0"
        },
        "item": {
          "id": "b1dceb50-45f9-4a3c-bf13-76433e4f21b4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ec078868-6420-4ab7-90fe-be6f08af670b",
          "status": "Created",
          "code": 201,
          "responseTime": 2385,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "742adb4a-4e51-4d40-817b-7d5d9a61e042",
        "cursor": {
          "ref": "f6c0e999-ae80-42b0-bb08-848d17900e15",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f0837089-5b7d-452a-b5a2-3c66af33e1ba"
        },
        "item": {
          "id": "742adb4a-4e51-4d40-817b-7d5d9a61e042",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "82b4bb1c-aa8e-439a-b63d-3a3c94b64979",
          "status": "Created",
          "code": 201,
          "responseTime": 2423,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2abfc6ed-dd3d-45a7-bb72-ab5ae210cb08",
        "cursor": {
          "ref": "d031232f-7b82-44cb-8f45-660886529326",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "775e9dcc-1665-4ab0-a641-0f9cc467bc33"
        },
        "item": {
          "id": "2abfc6ed-dd3d-45a7-bb72-ab5ae210cb08",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e113e716-f470-4889-b10b-013850b42831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ba09e2-8459-4314-bd02-c2dab42fc56c",
        "cursor": {
          "ref": "79cf488f-9782-4611-9dc2-e52568acebf0",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f875f59a-5ec1-4770-91b7-b04b596e3e2f"
        },
        "item": {
          "id": "a1ba09e2-8459-4314-bd02-c2dab42fc56c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "192285ff-825a-454a-b065-92330287a62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 577,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9cd6d7-8113-4af3-816c-c5e02c21e5ae",
        "cursor": {
          "ref": "f4da20e7-a3f5-47b8-98f6-cb2b687e8610",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a1e99cb0-08ac-4dcc-a89b-f337d85a02c0"
        },
        "item": {
          "id": "2b9cd6d7-8113-4af3-816c-c5e02c21e5ae",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f8f9bd3b-cc1c-4ae8-8bd5-23074a1f973a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ab61c9-474b-4aae-b03f-cc079787dea6",
        "cursor": {
          "ref": "0e16d7d0-241b-4e21-8ee5-8edf466817ac",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e480d9fd-5c88-41e5-86ab-9c1d8111f2ef"
        },
        "item": {
          "id": "88ab61c9-474b-4aae-b03f-cc079787dea6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9782d25a-6a76-4043-95d0-1a775a03eb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194fd25c-a92c-49e5-9527-f3caacf9af6a",
        "cursor": {
          "ref": "6c9ede75-cb37-403b-852a-5d8db057c326",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3ab76e0c-27f9-4d1f-9734-a8e7ca5024b5"
        },
        "item": {
          "id": "194fd25c-a92c-49e5-9527-f3caacf9af6a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ec570622-07a8-4054-996b-0338f485bec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613fd08d-4860-408c-ba62-b57a9b47abc9",
        "cursor": {
          "ref": "c12328bc-9d61-4ca4-89e7-70f0bf9261b8",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "09240513-8e83-4a8e-bec3-33b509bfa700"
        },
        "item": {
          "id": "613fd08d-4860-408c-ba62-b57a9b47abc9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d1a300a2-aafd-490a-b9c5-ec4ecc4aa9d7",
          "status": "Created",
          "code": 201,
          "responseTime": 2405,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "30001c87-8167-475b-9721-dc6dfddb6141",
        "cursor": {
          "ref": "c55c49bf-9529-4d14-9c19-4f4335f38ad0",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dcd51a73-8fba-421d-be70-f6a926ad3374"
        },
        "item": {
          "id": "30001c87-8167-475b-9721-dc6dfddb6141",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f7c759e7-59f3-44e3-9840-7299b03ee29a",
          "status": "Created",
          "code": 201,
          "responseTime": 2751,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0641a860-ab10-4669-871d-9c9d2bc02f88",
        "cursor": {
          "ref": "8ca0c55b-b7e7-4cef-9ffa-17d17c62e317",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "64e59463-37ba-48d4-a07e-5de401b9a058"
        },
        "item": {
          "id": "0641a860-ab10-4669-871d-9c9d2bc02f88",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5ca52269-25b0-432e-9ea6-5610a8d4008a",
          "status": "Created",
          "code": 201,
          "responseTime": 2747,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "cea2e111-71f9-441d-9096-f4370fdf744f",
        "cursor": {
          "ref": "5263fa8e-51d8-472a-a287-42f3c6fc9c2d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "39e8ead7-08fc-49d1-a41a-7de00c4db9b1"
        },
        "item": {
          "id": "cea2e111-71f9-441d-9096-f4370fdf744f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f2a3fdd3-8b7b-44a7-9cb9-abda77fb64e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc74a7b-1226-4daa-a9c8-7761a96d77a2",
        "cursor": {
          "ref": "e865b418-fe74-453a-8fe5-ac5dd002df24",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3944488f-0c29-4389-aba3-0e872290b92c"
        },
        "item": {
          "id": "3dc74a7b-1226-4daa-a9c8-7761a96d77a2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d26d853a-b4b0-4a6d-873e-076d5de17c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2fc143-eee9-402c-95ca-4d163d5cef16",
        "cursor": {
          "ref": "70882829-0043-4931-a921-896ccc79b881",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a3c63720-4a58-4f01-b91d-488409e26da7"
        },
        "item": {
          "id": "7d2fc143-eee9-402c-95ca-4d163d5cef16",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d75b0659-a682-413e-828c-b14ac3104114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c3e522-ef17-4e41-9998-38df0bf03d01",
        "cursor": {
          "ref": "0af25997-5247-4490-916d-841665e708d3",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "00aec47b-7df4-44cc-a054-21911b4bc331"
        },
        "item": {
          "id": "15c3e522-ef17-4e41-9998-38df0bf03d01",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "486d6f15-53a1-4734-9abf-cf340592de83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 904,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73f37b2-c20b-40dd-bed8-36613caac5d4",
        "cursor": {
          "ref": "c307b335-31b5-4911-bf38-7ed4a2c3b09c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bbdeaf92-e2a6-4a83-b2a3-bddb9bf0887d"
        },
        "item": {
          "id": "f73f37b2-c20b-40dd-bed8-36613caac5d4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e79b64f5-ce28-41af-a333-37df507f24c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88f3071-cedb-4c08-8c89-f44da95552d0",
        "cursor": {
          "ref": "c35ce294-fada-4af8-bebe-3e10ddfab752",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "868b2f92-6e0d-4ba6-96f5-88c28552ea30"
        },
        "item": {
          "id": "b88f3071-cedb-4c08-8c89-f44da95552d0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b5374857-ac32-4871-8b7d-9db15bde2f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d494afa2-b7ad-4f2b-8028-8021a3c68b94",
        "cursor": {
          "ref": "9e3cf9f1-bb4b-4723-9b46-23477d115675",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b70bb985-bcd4-4763-89d8-862d0ceaa2f5"
        },
        "item": {
          "id": "d494afa2-b7ad-4f2b-8028-8021a3c68b94",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aa670161-e7bd-411d-a9b5-8bcff462bc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32df5cf-57e7-4c43-a73d-0b1c003dab17",
        "cursor": {
          "ref": "4923b460-bd20-4779-966b-76c23f7ccb48",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f9ef919c-4704-4dd9-bf59-7233e6e8831f"
        },
        "item": {
          "id": "b32df5cf-57e7-4c43-a73d-0b1c003dab17",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3ca43687-e29c-425b-a26a-85a50cfa82c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8397d4b-a0d3-4e13-ac6a-43301e2897ea",
        "cursor": {
          "ref": "f8d466c9-6a94-4c8a-a6ea-5ecc2721c927",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "498d8d59-19ab-4f5f-b243-e2d6bf264e77"
        },
        "item": {
          "id": "a8397d4b-a0d3-4e13-ac6a-43301e2897ea",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ea81e461-722e-48ea-af90-8e7f4c357d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c259179b-77d6-46c3-8bda-e7295c225f44",
        "cursor": {
          "ref": "ec4b9619-0884-4c07-9b64-ff3b70a8435a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b4518fca-b907-4b3c-bf38-44d9c91b717b"
        },
        "item": {
          "id": "c259179b-77d6-46c3-8bda-e7295c225f44",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e33af7e4-43c2-4f6f-a007-c144cbd55748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1d4bde-103d-4279-ac83-09b7359be341",
        "cursor": {
          "ref": "c34617ca-83cf-4813-b521-254655971861",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "491e4de3-38ee-4ca0-aa5f-94db05e60251"
        },
        "item": {
          "id": "ae1d4bde-103d-4279-ac83-09b7359be341",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ec3e99d9-d22f-4d53-a71d-9bd09d573d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cada277b-6ef2-46b9-b8ce-d5c47c0b0371",
        "cursor": {
          "ref": "657b1375-ccef-43f2-89e8-844040d3a871",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5ab92831-9812-4eef-8088-4dd1693f40dc"
        },
        "item": {
          "id": "cada277b-6ef2-46b9-b8ce-d5c47c0b0371",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "db83e4d3-0cac-4017-8591-1996683963b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e8610b-456d-4389-9ed6-2f0f985eee67",
        "cursor": {
          "ref": "3d647ecc-f45b-4f89-ba57-3e92bf2ee48e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c27d15b9-6cda-4182-9ae9-7df7f75d3fea"
        },
        "item": {
          "id": "b8e8610b-456d-4389-9ed6-2f0f985eee67",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e790019c-2e91-4636-b0f0-139e1caf6ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d08d9ee-5ee4-4e29-95ec-4f2ae19811e3",
        "cursor": {
          "ref": "cc9ea57a-f56c-416d-8b96-7d8daf27139d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a68131fb-73e5-4da8-b5ac-ab5d15c79ace"
        },
        "item": {
          "id": "3d08d9ee-5ee4-4e29-95ec-4f2ae19811e3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "683d9d28-aa8f-4cbf-b0a3-1f6d73cd1167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997a7b14-e8e2-4ed3-93aa-4a9ce4278015",
        "cursor": {
          "ref": "1aac0fde-6f4f-495c-b10d-b4189d0afdc6",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c6e5427d-4943-4ee8-a245-67341d1d04c6"
        },
        "item": {
          "id": "997a7b14-e8e2-4ed3-93aa-4a9ce4278015",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c557991a-32c8-4e1a-a52a-1b0552d43e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558bcfc8-4c22-420e-a181-a6c92f2d62db",
        "cursor": {
          "ref": "274011d3-43cb-48bb-965e-3158f9e6abbb",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c378cf91-94a0-4c79-abee-9e0af59f371f"
        },
        "item": {
          "id": "558bcfc8-4c22-420e-a181-a6c92f2d62db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "36ab0961-2369-491d-8cbc-1f39bfbe1fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6758b1f3-773b-4af1-82dc-8cc4f0bb39c6",
        "cursor": {
          "ref": "b4fe6f7b-8ced-4934-87c7-6aa1fe5e274d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "61c4eebe-d4bc-49da-94a6-53518caa6657"
        },
        "item": {
          "id": "6758b1f3-773b-4af1-82dc-8cc4f0bb39c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f9d4c2b3-f873-4379-a466-0632bd274f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe26021-d62c-4be4-9913-aac44cc9d642",
        "cursor": {
          "ref": "1cc19dfd-6522-4279-a5ce-6222f0c501d3",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f9a6541a-e560-45fe-a0ef-39dd29e9d8f2"
        },
        "item": {
          "id": "bfe26021-d62c-4be4-9913-aac44cc9d642",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b1b97d02-97a6-4c7f-afa8-a8bdd4c5107a",
          "status": "Created",
          "code": 201,
          "responseTime": 2880,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "644d0cad-6a15-46fd-be9b-5cbe74e4350c",
        "cursor": {
          "ref": "be876b04-13c1-4ccd-a896-cb775d3d88df",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d1480743-3e24-482e-a265-35943d4f21b9"
        },
        "item": {
          "id": "644d0cad-6a15-46fd-be9b-5cbe74e4350c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a9e78cfb-c48a-43a9-a5a7-a4d3a97a25ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91268b09-babb-44dd-978c-26cbf4c85ca4",
        "cursor": {
          "ref": "43e574cc-5cfe-487f-8f90-5b1121d0e51e",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0bf1fded-ac86-41d8-8fce-e67c17e49f41"
        },
        "item": {
          "id": "91268b09-babb-44dd-978c-26cbf4c85ca4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d9fd62df-99ae-416b-8b82-5a9a44374e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 864,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae13dde-d72f-4ebf-9ab8-bd0544838323",
        "cursor": {
          "ref": "29de030d-444d-4d82-8c9f-85283a28af41",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "29462000-d6ab-486a-96b8-85745bc79619"
        },
        "item": {
          "id": "5ae13dde-d72f-4ebf-9ab8-bd0544838323",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "46ec7db3-9462-4ade-9dad-8b1ac9bc1dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268713a6-83aa-4ef3-ad00-accf6f6e4585",
        "cursor": {
          "ref": "cbe48977-a09e-4952-b4eb-d859860ab1b4",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9f66a5fc-2692-4512-b6fa-55d050fae2a0"
        },
        "item": {
          "id": "268713a6-83aa-4ef3-ad00-accf6f6e4585",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5cc73864-d0d7-4f9d-a573-11c8ced7b0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bd94ea-9f5a-4b72-a8c1-cc0fe7e2ea8e",
        "cursor": {
          "ref": "42e686b6-acdf-46fb-b888-ffd46e0a7965",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "443b30bc-e68d-4f87-bdda-59f9d3b88900"
        },
        "item": {
          "id": "e9bd94ea-9f5a-4b72-a8c1-cc0fe7e2ea8e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c26b8170-5543-46b0-9a3d-b60bf906227c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a056005-4fde-4385-a2a9-640ee979b005",
        "cursor": {
          "ref": "4dbeaa97-31ff-4939-9985-f3895068938a",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2eb8c405-b8d2-4dff-a17d-d823ea5d7bac"
        },
        "item": {
          "id": "0a056005-4fde-4385-a2a9-640ee979b005",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4f8fe2f4-f1c2-452b-b779-b18c071fc4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aff1df6-1a38-4963-b975-446cefa70d95",
        "cursor": {
          "ref": "b4410592-9264-4ee5-96b0-8af890478e29",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1073c8c0-c698-4e15-815f-cda06225048c"
        },
        "item": {
          "id": "7aff1df6-1a38-4963-b975-446cefa70d95",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "90a2160f-842d-4067-8410-3e40daaf50b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf2a1c4-8924-446d-a78b-52e4e3d0c70d",
        "cursor": {
          "ref": "2ed9d4f1-1ef6-46e7-b26a-37888954a0a1",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "87d306b6-2a1a-4ba6-ae81-389cc63c491d"
        },
        "item": {
          "id": "6bf2a1c4-8924-446d-a78b-52e4e3d0c70d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "97f8c717-3b51-4af8-984c-a3601f1d6ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d10e7c6-dfdd-439f-b357-aa099baf0143",
        "cursor": {
          "ref": "f564effd-32eb-4714-b51d-e5c588f3734a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1329fb20-207d-4252-8c91-c56cf163fc2f"
        },
        "item": {
          "id": "4d10e7c6-dfdd-439f-b357-aa099baf0143",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "802e1fd0-8117-4239-9b04-4372b0ed124c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3252735-f3be-46b0-9666-236e6409803a",
        "cursor": {
          "ref": "5c70ffd5-f0b9-4ba7-8e94-5b9046c11a56",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f90c1d4d-14af-4a60-ac93-4420c2f58328"
        },
        "item": {
          "id": "a3252735-f3be-46b0-9666-236e6409803a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8dff45df-95cf-49bb-8d89-c5f63bac730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3940b9c2-7d7e-4681-b2c9-dac085552dc4",
        "cursor": {
          "ref": "5cd97de5-a054-4996-aa66-de527b47746a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8cfca887-b123-4690-b7b4-ad59ee36f27b"
        },
        "item": {
          "id": "3940b9c2-7d7e-4681-b2c9-dac085552dc4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "06d911ca-ff65-4cf9-918b-cf480006d9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29aeea35-c2c5-4f4f-8faf-3280599184f6",
        "cursor": {
          "ref": "bdcb703f-688f-4a0b-a64c-dc3269ddd644",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "85dee56b-7148-41d4-8a97-99be19c55fc9"
        },
        "item": {
          "id": "29aeea35-c2c5-4f4f-8faf-3280599184f6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "27138030-f626-42d7-b782-f3366c2ce501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71ec14b-7460-46d1-bce4-d0c7fa34e898",
        "cursor": {
          "ref": "b73f5d3c-b34b-4c1c-a7bc-e82b8061a099",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "da1a773c-25b0-4dc4-ab45-d94fe02a46bc"
        },
        "item": {
          "id": "c71ec14b-7460-46d1-bce4-d0c7fa34e898",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e5512001-04fd-4787-92a7-08cc28c931d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43041c8-b90f-4a66-b83e-8b1bb8fef2b9",
        "cursor": {
          "ref": "aaa5c4f2-1274-4b69-a2f4-8c96c4b8e5f4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b3fcc539-474f-4a0e-bbb1-3024856def66"
        },
        "item": {
          "id": "c43041c8-b90f-4a66-b83e-8b1bb8fef2b9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4a102ebb-72a2-474e-b32d-f19aa4d82309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d32256-2a32-40a3-832f-b0e986900626",
        "cursor": {
          "ref": "5c3fba2a-9c94-45df-b40a-162e7149f737",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a6f266bc-053b-4eb2-a020-93e707884f1d"
        },
        "item": {
          "id": "62d32256-2a32-40a3-832f-b0e986900626",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "81032a9e-8d04-4876-9afe-5e03eecceb2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514a90c2-a74a-4dd6-8f86-fd0b1b0831cd",
        "cursor": {
          "ref": "5b395fbc-9870-4a9d-a245-e8eb8d86c663",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "21cf8578-e75f-4d65-8402-06d63338b1a7"
        },
        "item": {
          "id": "514a90c2-a74a-4dd6-8f86-fd0b1b0831cd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "05ea1101-a7db-484a-9c08-7c62a564a150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e9cdc7-cd0f-4eb2-8823-50ac777ff557",
        "cursor": {
          "ref": "2be372c8-e1d2-4f94-ade2-5280c07a2e05",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "60d420ad-8989-496b-b15c-399bd1676ad3"
        },
        "item": {
          "id": "17e9cdc7-cd0f-4eb2-8823-50ac777ff557",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bb760855-6302-4355-8793-0fff370f17b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd55889a-64cf-46dc-9ecd-55f9e50f73e4",
        "cursor": {
          "ref": "70249217-05d7-44da-a4b6-e70a75b57e16",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b0772bdd-e870-4c42-a955-a9f2034564f7"
        },
        "item": {
          "id": "bd55889a-64cf-46dc-9ecd-55f9e50f73e4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8db644ec-91da-4602-abea-e4f900873a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff947076-4b8a-4c20-80d2-ce99a50b4fac",
        "cursor": {
          "ref": "605c93f0-5afc-40a3-91dd-10bfc7b9abfa",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c7c84d8d-1fae-4429-acc8-16d8b9d1a293"
        },
        "item": {
          "id": "ff947076-4b8a-4c20-80d2-ce99a50b4fac",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3fc6bdfe-e742-4658-b178-01b17aaf7ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d5485a-f7ff-4280-b5fe-5b35e90896ce",
        "cursor": {
          "ref": "ea310a3e-6acb-408b-a470-e0f24e273cd9",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "337c835b-2cd9-4f55-a822-95d73191230d"
        },
        "item": {
          "id": "c5d5485a-f7ff-4280-b5fe-5b35e90896ce",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "be01882c-79c9-497e-8294-160c0bab30ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4a760a-33f0-4a57-a870-81844fbd2ffa",
        "cursor": {
          "ref": "7cb48667-3d97-445f-8fb7-3b480f84f3e9",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e3d33113-cf09-42a9-bebd-acc213cddd25"
        },
        "item": {
          "id": "8e4a760a-33f0-4a57-a870-81844fbd2ffa",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f5293665-5b0d-464f-9e59-9972822a0af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23077631-f263-4cb5-aa5d-e10fd1a5a596",
        "cursor": {
          "ref": "349f0b52-7f8e-4bd7-9661-b89c0700a71d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "abe739ee-781a-46bd-b8e9-673c243448b3"
        },
        "item": {
          "id": "23077631-f263-4cb5-aa5d-e10fd1a5a596",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "facf9ba5-4ded-4d1a-840a-4bcef2e67c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd67f4c4-a22c-424c-abb8-9cc8f3d69020",
        "cursor": {
          "ref": "a24a820c-3f91-42f6-8d19-4b3e0f4c25f0",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a14d8cce-5be8-4a9b-86bd-09335aeec40f"
        },
        "item": {
          "id": "cd67f4c4-a22c-424c-abb8-9cc8f3d69020",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7b64ff67-ccb3-4b89-a797-9cefac31e7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf0c540-2928-4a1c-a118-58e5412ef94a",
        "cursor": {
          "ref": "f0c02dd9-7c00-41c8-99ba-8f62ac2f20db",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c6cb3129-e428-44bc-9518-f9b9b48f0293"
        },
        "item": {
          "id": "7cf0c540-2928-4a1c-a118-58e5412ef94a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "54e3689a-6758-40c7-bcd9-a09b3adfca5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5c644d-fc4d-4fda-b689-73db3cf9241a",
        "cursor": {
          "ref": "c974fc3f-7214-4a49-905d-c542e6e951c6",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3f2b2e68-190d-4ed4-bed3-27953fd81cd1"
        },
        "item": {
          "id": "4e5c644d-fc4d-4fda-b689-73db3cf9241a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "76be9942-b1bb-4050-aed3-62a072a66ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100b2084-4b39-42ec-b44c-14f5c635e385",
        "cursor": {
          "ref": "0d51f7cd-a5f5-4862-9450-8d719e79c1bb",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f2f4f0a6-f045-4132-b29c-b32830ba523f"
        },
        "item": {
          "id": "100b2084-4b39-42ec-b44c-14f5c635e385",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "769cf609-466b-4212-8527-95852ed7e582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749191f6-a94c-4879-b22c-4c652dbebe43",
        "cursor": {
          "ref": "adf577fb-3fd3-488c-af09-eb4e1da0ee22",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "42423ee9-34c9-40ff-b29d-dcbfbec7dffe"
        },
        "item": {
          "id": "749191f6-a94c-4879-b22c-4c652dbebe43",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e5100fa8-873c-42af-a5ba-29150070761e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee633368-c4fa-4909-b595-91ad1d770ddc",
        "cursor": {
          "ref": "16f5c6ae-33a9-47df-8165-d97f212971e9",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a5dc77e1-1a38-428c-9de9-c029efbf4443"
        },
        "item": {
          "id": "ee633368-c4fa-4909-b595-91ad1d770ddc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b5f7f54c-f448-4bee-aeb9-7a59952e7d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e78619a-5099-42a3-b7db-7abd19ef80ca",
        "cursor": {
          "ref": "baa793e5-55bb-476d-8a2a-00a97ae46124",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "35c72286-b170-45e2-935a-e2d39e59d285"
        },
        "item": {
          "id": "2e78619a-5099-42a3-b7db-7abd19ef80ca",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ee2caaf2-6c89-4e8d-b171-6b60d981477a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0904ac0b-b8ea-4957-80b3-382529b79417",
        "cursor": {
          "ref": "7b07408e-f7ba-4578-9f17-3cdce36d8fc4",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "87618e25-a702-488f-83b6-ea058acd6358"
        },
        "item": {
          "id": "0904ac0b-b8ea-4957-80b3-382529b79417",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5f49bc41-1730-4829-9f01-eeaac1fffc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0485bb1-7046-4d6e-b5f0-df550c4edac1",
        "cursor": {
          "ref": "bc57916a-b638-4a01-b8cb-6d97244bff82",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "66fd1a41-9564-4252-b864-98f16debb461"
        },
        "item": {
          "id": "a0485bb1-7046-4d6e-b5f0-df550c4edac1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "11e1c587-4c7b-4475-9d87-301cc3b30342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "510e014a-210b-4564-b653-2a941e3fb78a",
        "cursor": {
          "ref": "c0dc82d0-c1bb-494c-8525-1431bb4c37ba",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f3ff6a6c-d924-4a57-95ce-7d37280879a3"
        },
        "item": {
          "id": "510e014a-210b-4564-b653-2a941e3fb78a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1ff46915-7dbc-4806-b842-4aa1b9c3b26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3ade6730-1e76-41be-8ad0-95c503f5ad09",
        "cursor": {
          "ref": "c8d9462c-59aa-4214-a28e-17e62a66bc51",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d0badabc-633d-4e34-a9b5-b8e0a7b98c99"
        },
        "item": {
          "id": "3ade6730-1e76-41be-8ad0-95c503f5ad09",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7ca97901-575f-4b1d-b100-d03ba45ef786",
          "status": "Created",
          "code": 201,
          "responseTime": 2505,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "44571842-e45e-46bf-bdac-d5c8c5f2725e",
        "cursor": {
          "ref": "943654e1-a27b-40aa-a533-cf2c3b77086d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0ca0cd5a-2c19-4277-9d61-802673cacebb"
        },
        "item": {
          "id": "44571842-e45e-46bf-bdac-d5c8c5f2725e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4ae58450-91d4-4ef9-abd5-1d1191a7ed97",
          "status": "Created",
          "code": 201,
          "responseTime": 2448,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e706ed2f-a145-4f58-800b-467373292383",
        "cursor": {
          "ref": "15969d6f-ac0d-403b-9574-64601f64ebf9",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "49a5e74b-4dbc-4cad-b4bc-7438743fa0e7"
        },
        "item": {
          "id": "e706ed2f-a145-4f58-800b-467373292383",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d5efbd7a-717f-4bb8-a30d-ad68c9b3b5fb",
          "status": "Created",
          "code": 201,
          "responseTime": 2540,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9bba3c-ae53-456d-9b9a-80a537fc774f",
        "cursor": {
          "ref": "7050107c-c0c8-48f9-8fff-6342979c20d1",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b774e839-5352-46ac-9d41-18ae5b59ea51"
        },
        "item": {
          "id": "df9bba3c-ae53-456d-9b9a-80a537fc774f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3808f17d-1948-4a3d-b83a-36330ebe81f8",
          "status": "Created",
          "code": 201,
          "responseTime": 2626,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-22T00:38:52Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-22T00:38:52Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "06f54671-6e4a-4889-927d-6345474a5334",
        "cursor": {
          "ref": "d5be27af-3715-4db4-9af2-34f755fd0f29",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fb1ef7d7-9211-406e-a85d-dfe48a90d66e"
        },
        "item": {
          "id": "06f54671-6e4a-4889-927d-6345474a5334",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "db16521e-3f66-42ce-b022-7df744e05272",
          "status": "Created",
          "code": 201,
          "responseTime": 2457,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a169434-e727-46e2-b190-75ce9c1faffc",
        "cursor": {
          "ref": "9b3b71f3-8bce-448e-bc73-d929b89cb530",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6763fbc3-3053-4c7c-91ca-ae0844602fd7"
        },
        "item": {
          "id": "8a169434-e727-46e2-b190-75ce9c1faffc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1dd332ae-7581-4d6b-b168-714714a84848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a169434-e727-46e2-b190-75ce9c1faffc",
        "cursor": {
          "ref": "9b3b71f3-8bce-448e-bc73-d929b89cb530",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6763fbc3-3053-4c7c-91ca-ae0844602fd7"
        },
        "item": {
          "id": "8a169434-e727-46e2-b190-75ce9c1faffc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1dd332ae-7581-4d6b-b168-714714a84848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4659352d-0a47-4cf3-ac0c-ac2cbd2bdaf5",
        "cursor": {
          "ref": "9b15167d-3db5-45ec-b21c-94b1fa286f2f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4052040b-2739-4927-b5fc-af2dbfb3597e"
        },
        "item": {
          "id": "4659352d-0a47-4cf3-ac0c-ac2cbd2bdaf5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "af2219be-073a-41d7-a69d-4aae97ab6c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde3bc2f-e785-4c1b-b3d5-14df5f9bd233",
        "cursor": {
          "ref": "b6ae2e04-a147-46a2-85dd-7c28d94062fe",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bb0fcfeb-8519-4450-98a3-a7ce72dbfd52"
        },
        "item": {
          "id": "dde3bc2f-e785-4c1b-b3d5-14df5f9bd233",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "207d8ee0-c803-4566-a333-a80fd9a151c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d81f3d3-40a7-425e-832c-082d67412e1a",
        "cursor": {
          "ref": "c04eab8a-9be5-438d-b442-4e8719b1dc96",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "87b7036a-4263-48a7-8f0f-8419a4fadbf1"
        },
        "item": {
          "id": "2d81f3d3-40a7-425e-832c-082d67412e1a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e79534c-fc32-4dca-acc1-4199546504d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1632316-cfe1-47d6-8aae-a7b7ebffb4b7",
        "cursor": {
          "ref": "7faf4f29-5aa3-4a4c-8473-3f68d999642a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e23b5155-0f2d-47c0-9ea4-3f05dd61238b"
        },
        "item": {
          "id": "f1632316-cfe1-47d6-8aae-a7b7ebffb4b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0162929a-d688-47c3-9e61-76ef21b953b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e23afe-606e-4f00-9d68-c5ee313edf20",
        "cursor": {
          "ref": "7f67f501-e60f-4666-b9ad-aebe4ab8b02e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2290db8f-85ca-4bad-8b35-b97beaa6cf6d"
        },
        "item": {
          "id": "b7e23afe-606e-4f00-9d68-c5ee313edf20",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4b000926-7fe7-4100-93b6-6922ec05b9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e75576b-62b1-4455-8126-94fa13fa67a5",
        "cursor": {
          "ref": "d406abb8-1f14-4516-8412-ed90598b099a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9e070ce3-0742-4b46-85f7-b285d0a58c2b"
        },
        "item": {
          "id": "7e75576b-62b1-4455-8126-94fa13fa67a5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1e14b17e-3c8b-4563-8205-6454c6579b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e3477a-5a65-45d1-b098-ddbf18cfba4c",
        "cursor": {
          "ref": "1ee79152-1854-4620-b6f4-d9665df8d155",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8a69dfc4-16c3-432e-b64f-fefc0a0998dd"
        },
        "item": {
          "id": "e1e3477a-5a65-45d1-b098-ddbf18cfba4c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4a70d090-26dc-4d8e-9c93-ad06c0fe0862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebacae4-6776-47d3-99e9-a837617d622b",
        "cursor": {
          "ref": "55a74ad7-ed32-4c4f-937d-18034f97a8e7",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2b518d17-f882-4987-ab25-4f513f442243"
        },
        "item": {
          "id": "5ebacae4-6776-47d3-99e9-a837617d622b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5af806ff-5897-4d6b-a8a2-34ceecd0e8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac0d573-657a-4646-adb2-28e7ea21c966",
        "cursor": {
          "ref": "4e2d0383-6d37-4037-b662-ad971cda2788",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f0beedbc-088b-41bb-a190-9ddd88e8326f"
        },
        "item": {
          "id": "aac0d573-657a-4646-adb2-28e7ea21c966",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d1cbec2f-9ed6-471e-a1c2-43f90e1b8baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fefc061-d16f-4206-bc05-b367fc73e82e",
        "cursor": {
          "ref": "c15eaaab-df19-40de-8375-81f84d58290a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9e0a4051-cc17-4289-b85f-cad3ec0a4969"
        },
        "item": {
          "id": "7fefc061-d16f-4206-bc05-b367fc73e82e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f7f58caa-e06e-465e-8371-6965d93624c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17471448-b203-4530-a5c0-c88bed14d85b",
        "cursor": {
          "ref": "c269f27a-71a4-4816-9972-40524fa280c8",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d4983663-97ce-405b-a6ef-e1edb16f0d02"
        },
        "item": {
          "id": "17471448-b203-4530-a5c0-c88bed14d85b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6dc31cd0-df24-4f7e-afea-287d4cf223fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51fe3ec-dc77-44b8-92db-d8f1f625db6e",
        "cursor": {
          "ref": "65cf4822-dd0a-4441-844c-ae734d157432",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c7627c8c-a198-4059-84ae-3e685f7fb140"
        },
        "item": {
          "id": "e51fe3ec-dc77-44b8-92db-d8f1f625db6e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3dc8b748-5bcd-415f-aed2-607e07bdf755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4a9a79-0835-4e19-9a81-d3b8b7065c07",
        "cursor": {
          "ref": "f1093c3f-c9e0-4f4e-bd8d-ca8637c7e2f5",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e9762151-6e77-48e7-8da3-ff744c63d53f"
        },
        "item": {
          "id": "5a4a9a79-0835-4e19-9a81-d3b8b7065c07",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "80cf3499-ce8a-4820-a364-db8d088270e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad12e235-f8ba-4a92-8a70-2e68040ba41c",
        "cursor": {
          "ref": "d258a460-fb43-486c-bd24-845dde7e44ab",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0923c990-0c47-4261-bf2d-47c6d04b51fe"
        },
        "item": {
          "id": "ad12e235-f8ba-4a92-8a70-2e68040ba41c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6bf9c04b-feb7-42be-ae16-d06f92a122f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5813d66e-78a3-4414-9fd1-01e54d4901d4",
        "cursor": {
          "ref": "fc7d4d76-b85a-4032-af17-b746306cbc36",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2b51243b-eda8-42c7-93bc-d2aa2a06763c"
        },
        "item": {
          "id": "5813d66e-78a3-4414-9fd1-01e54d4901d4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8c4eb3cf-b16e-4190-bfe3-e74b15ab1fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a82c9a9-6204-40a0-b783-65fcefe77375",
        "cursor": {
          "ref": "ce2682d5-9e56-4b27-8b18-274161057136",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "43c30961-b394-4b4a-bc9d-bf3b2f661210"
        },
        "item": {
          "id": "1a82c9a9-6204-40a0-b783-65fcefe77375",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f48cee64-d23c-4e4b-8aa7-d9a65f17a604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214077da-9baf-4e51-8018-7aec58d1678a",
        "cursor": {
          "ref": "c5806d52-1337-41b0-83fc-81ce53eac4a8",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "eace8d8f-b9b3-4e1b-ac1e-e560b12785a3"
        },
        "item": {
          "id": "214077da-9baf-4e51-8018-7aec58d1678a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b6e5bf91-cf2f-4b49-8705-da4a84c2fa1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80050832-ceec-4945-b4de-0323d9d56c1c",
        "cursor": {
          "ref": "4af344ee-571e-4729-aa30-30d4545c9ebd",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b5b0677c-ca66-4bc5-a769-e21b707a1c78"
        },
        "item": {
          "id": "80050832-ceec-4945-b4de-0323d9d56c1c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ab37e55c-a48d-452f-8cc2-9ab369e77ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4516f0-5375-42ed-a84f-d06010ec82e5",
        "cursor": {
          "ref": "1facb691-59f8-4d40-90d5-3093d07a8972",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dc038886-106f-45e9-8f7d-de5cf46e7afb"
        },
        "item": {
          "id": "9e4516f0-5375-42ed-a84f-d06010ec82e5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "da7e6f7c-c2b0-4c58-952a-b038a7dc9e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac156216-4393-44b4-8f2a-e330040e4fc3",
        "cursor": {
          "ref": "52d207fc-ab8e-43a2-9df9-7452e224ac1f",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "647ee1b4-59b3-460c-80d2-17856538a713"
        },
        "item": {
          "id": "ac156216-4393-44b4-8f2a-e330040e4fc3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a23c880a-4c9a-4131-b15d-5ff2c2247fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3c21fc-c1c6-49f4-8852-64a30af763db",
        "cursor": {
          "ref": "8ca8f530-5fd2-4523-b7ca-bf6df08389ed",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c3f458fd-2ddc-44c5-bc8c-4657eb9aeac0"
        },
        "item": {
          "id": "5f3c21fc-c1c6-49f4-8852-64a30af763db",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "61b3637e-ed96-47f3-9d94-d26488138985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edc1818-c1fe-409a-92c2-c0259214d4e7",
        "cursor": {
          "ref": "b1b35b0a-4e1a-4af6-8236-a0fa4095fec2",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6f3906bf-f73c-475f-af9d-1938c8266f6d"
        },
        "item": {
          "id": "4edc1818-c1fe-409a-92c2-c0259214d4e7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "73b2ad30-1d17-45d9-9cf0-89f01abb192e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b81fc5-014b-4e78-b475-819c69dc6d08",
        "cursor": {
          "ref": "4371d121-072c-49c2-be40-48bf40b3baca",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eee4d995-0732-4573-a0de-b23d2ca5a07b"
        },
        "item": {
          "id": "47b81fc5-014b-4e78-b475-819c69dc6d08",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "20db5354-ca52-4dfa-a1b8-fcaf8f6d5520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de91329d-86a5-4123-ad1a-2694d04aefee",
        "cursor": {
          "ref": "0173ac57-e994-44c7-ab53-c98adc168e24",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a43e7157-1723-454f-8047-7894cc7bbfdc"
        },
        "item": {
          "id": "de91329d-86a5-4123-ad1a-2694d04aefee",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4c558137-87a1-4c35-a4ec-37e3b70cc559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f3f604-18dc-411e-bca3-6557d9dc8cd4",
        "cursor": {
          "ref": "2e87dbcd-d507-45f3-965c-8d189dd5704b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "18112932-a744-47e1-953a-07efbe877741"
        },
        "item": {
          "id": "39f3f604-18dc-411e-bca3-6557d9dc8cd4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "05e23c82-d781-4173-8089-96b9d8e9ef5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db05a74-ca60-4438-a40f-0f98890cb406",
        "cursor": {
          "ref": "e646a5ce-5130-450f-965f-c62823c7716c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a926678b-172a-4db5-9d21-a8ab77cf16fb"
        },
        "item": {
          "id": "7db05a74-ca60-4438-a40f-0f98890cb406",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "52e6272a-ec01-4d01-b4cf-b4b5969fc136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08d2e11-9334-4080-a95c-98043c01e5d6",
        "cursor": {
          "ref": "2b4cb6a4-4978-4fc7-b62f-77d90a634710",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9a4a93a4-d2f3-4494-9e93-bc4ff8b6ebaf"
        },
        "item": {
          "id": "a08d2e11-9334-4080-a95c-98043c01e5d6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cb064223-98e2-4b77-83a7-a8d278707ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae2b9fc-b56b-457b-94df-bd997554ecfb",
        "cursor": {
          "ref": "04778b55-bdc5-48c6-bece-d67d4e324d19",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "867ef264-2e14-4b9a-8c90-b02197b828f5"
        },
        "item": {
          "id": "9ae2b9fc-b56b-457b-94df-bd997554ecfb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "24409d38-1214-461e-bfb1-1bcf8f16604c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6090f451-b250-4429-b7c6-282c1f3b6441",
        "cursor": {
          "ref": "f556a69d-4c7e-4b6a-aa09-61b5ae704c25",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "84bc3d06-31a9-405c-87ab-fd38dce1a1fa"
        },
        "item": {
          "id": "6090f451-b250-4429-b7c6-282c1f3b6441",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7a467ad3-5550-4523-9f07-8c8b74e4be69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16455e2d-851e-4c97-b074-87d80411b21d",
        "cursor": {
          "ref": "3d09d555-258d-411c-96b5-81d827a2eefa",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "03b26799-7283-43bd-90ee-4311f660d02b"
        },
        "item": {
          "id": "16455e2d-851e-4c97-b074-87d80411b21d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "88dbc592-ce29-43ae-a96c-865b136f4026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d8c6c4-8308-46bd-8c86-bd506305f8ff",
        "cursor": {
          "ref": "ce6ff905-a56b-4b32-b699-293365910e2f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5aba1d16-3eea-4c6f-bf7d-093100325ab1"
        },
        "item": {
          "id": "a2d8c6c4-8308-46bd-8c86-bd506305f8ff",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e34b11f5-cf4a-474a-b488-46b956b51687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 734,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e003e09-e0b9-4baa-849e-16f65a1fa391",
        "cursor": {
          "ref": "2f178da7-cbd2-47c3-a9b7-f049863b97fb",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e6441919-a817-41e4-bb5e-d23078c7f21d"
        },
        "item": {
          "id": "7e003e09-e0b9-4baa-849e-16f65a1fa391",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "acdd95b8-8860-4b13-9608-5c8a71cf88c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "a019d79c-e575-47a3-8bcb-2042a6a8ec08",
        "cursor": {
          "ref": "a5be40db-f0a9-4f71-9bf6-786e2a6b44b7",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "290775ad-0606-4dba-8ed1-b2587de7f0c3"
        },
        "item": {
          "id": "a019d79c-e575-47a3-8bcb-2042a6a8ec08",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0d0dbdac-ae58-4558-b0ed-40043d0e3bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "61f9d7a6-5d9d-46eb-80f5-cc2d356aba12",
        "cursor": {
          "ref": "1379afb1-7659-4983-982c-c717c87f61e7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1cdd528e-cb51-4e23-8e45-c43b21b019ce"
        },
        "item": {
          "id": "61f9d7a6-5d9d-46eb-80f5-cc2d356aba12",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "49de11ab-3b8a-49a9-891b-4f296c75004a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f9d7a6-5d9d-46eb-80f5-cc2d356aba12",
        "cursor": {
          "ref": "1379afb1-7659-4983-982c-c717c87f61e7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1cdd528e-cb51-4e23-8e45-c43b21b019ce"
        },
        "item": {
          "id": "61f9d7a6-5d9d-46eb-80f5-cc2d356aba12",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "49de11ab-3b8a-49a9-891b-4f296c75004a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b071ba3a-83bc-421f-9705-2191871a3223",
        "cursor": {
          "ref": "2f66f580-8f0d-47ea-9dd2-25a670246c91",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e4312802-174d-4666-96fe-4a110ab6360b"
        },
        "item": {
          "id": "b071ba3a-83bc-421f-9705-2191871a3223",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0b6fb4d7-a1cd-4bb8-8c66-3e3277838f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88608ac-9847-4a6f-82a8-a3e5f8e7d32c",
        "cursor": {
          "ref": "a6849349-5f45-4ce4-a9df-98241e94af9a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "966af8be-6fb8-4d91-8d04-ab5965b1ce64"
        },
        "item": {
          "id": "e88608ac-9847-4a6f-82a8-a3e5f8e7d32c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2b62932b-9f6a-4044-bf26-1e7f0a4acec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cb21b8-4b4c-4f38-97e7-5dab2cb9bf7d",
        "cursor": {
          "ref": "5a781062-855e-4495-b093-294745ca5d3e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "250eefe2-31f2-4fd8-b6a3-19ad21a750aa"
        },
        "item": {
          "id": "d1cb21b8-4b4c-4f38-97e7-5dab2cb9bf7d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f4bac981-ed7e-4441-a56c-eebdfec52920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6def412f-fef7-4138-a48d-9a9ae1887ccb",
        "cursor": {
          "ref": "9cda8fb3-425e-42a8-9a98-d211b4bf3097",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ed3a0ebc-50dd-4d09-be40-089948aaa514"
        },
        "item": {
          "id": "6def412f-fef7-4138-a48d-9a9ae1887ccb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "071acb40-f97d-4a5e-a4af-a62788d55920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53f704e-b109-45c3-9af0-9df29d020108",
        "cursor": {
          "ref": "d64919a8-285f-4881-b3f3-03aa3512c162",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a220d50d-59f7-4ace-9baf-4cc026c0dffe"
        },
        "item": {
          "id": "c53f704e-b109-45c3-9af0-9df29d020108",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cd23cdae-718b-4d45-9367-0f7d7c772bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69691ef-7c2e-40e7-8864-d8c87847a49e",
        "cursor": {
          "ref": "79d2ac29-ef04-4010-bd58-35915296260f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5d424bc6-8a40-4695-822a-f9f1a327159c"
        },
        "item": {
          "id": "e69691ef-7c2e-40e7-8864-d8c87847a49e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "09f40201-e909-4799-8210-4f65a6be7c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79022498-1369-4e5f-9c6c-8af991171ad6",
        "cursor": {
          "ref": "ddc1bc87-4f6c-4f1b-8a8d-d7abddbe14aa",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b4bbcdff-a57e-4904-ac08-362f6e010382"
        },
        "item": {
          "id": "79022498-1369-4e5f-9c6c-8af991171ad6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d2ad177c-1eaf-4c6e-9707-c1d9d2eddf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a853a9f-32f9-49d9-98bd-061496d0edb7",
        "cursor": {
          "ref": "e4bef93f-57d9-4f15-a3bf-673d023ca846",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0ff06b20-a7c7-4310-9b7a-69794cb5e837"
        },
        "item": {
          "id": "3a853a9f-32f9-49d9-98bd-061496d0edb7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "498c09b0-1c77-4bb5-8bf1-4eb8d4610a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87ad5da-cbf4-457b-9e3d-10d60b219d98",
        "cursor": {
          "ref": "2c529906-b490-4883-9d30-5100830c2a8b",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "00bb1c2e-9f28-4670-86d5-0cd47da3a21f"
        },
        "item": {
          "id": "e87ad5da-cbf4-457b-9e3d-10d60b219d98",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7137a5bc-befe-47af-93c7-638f89588f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a61b6c7-f5dd-4c86-859f-c3acf6bb2efb",
        "cursor": {
          "ref": "eadeddc9-7fc2-4f22-b0a7-2cb833b6bc57",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "385710b0-130b-4bc3-857d-fa14101a6f86"
        },
        "item": {
          "id": "2a61b6c7-f5dd-4c86-859f-c3acf6bb2efb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "052dda04-2d22-4b84-a426-92ae9aa9aed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705dbdb7-0681-46af-9a8e-a880674e5df2",
        "cursor": {
          "ref": "96507a4c-12ec-493b-9fc3-03e884e40010",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cc4223a1-9695-48f5-a831-6a7df907da18"
        },
        "item": {
          "id": "705dbdb7-0681-46af-9a8e-a880674e5df2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "233d4b68-f4b0-47d3-abf4-824a8ef17ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101294be-4f8a-4111-853a-9b3c6ebf1ac9",
        "cursor": {
          "ref": "3e8bb017-3669-40bb-9fc1-43244e639e43",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d3b401df-be4b-45c3-a1f0-e6141029edc2"
        },
        "item": {
          "id": "101294be-4f8a-4111-853a-9b3c6ebf1ac9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9b74baa4-a8c0-48e8-acf2-0c161e548283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bfb5e1-555c-4ea9-a77e-6e8cd1b82db7",
        "cursor": {
          "ref": "4b59e3fc-b9d0-457f-b2fd-c67aa20a5bd2",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7754bae0-1210-4bd3-b0d8-12c8ed0d3868"
        },
        "item": {
          "id": "21bfb5e1-555c-4ea9-a77e-6e8cd1b82db7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8c605b61-dc18-4832-aac8-1cb915999794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851443dc-e6d9-4fdd-a8ee-3f0690ab1c5a",
        "cursor": {
          "ref": "2f3cb03e-368a-4bdd-878b-bb96b3696f6f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a069c1b2-d574-4428-b7c7-28ed51847f28"
        },
        "item": {
          "id": "851443dc-e6d9-4fdd-a8ee-3f0690ab1c5a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "94f8feeb-967c-49a7-9354-6539ad1e8fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e776177-f9f6-44ea-8415-d15fd35df73c",
        "cursor": {
          "ref": "5ae8cf8b-a9e7-4680-a301-c7a5318e1e1b",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2a2ce481-74ec-4a8a-9518-063845198337"
        },
        "item": {
          "id": "2e776177-f9f6-44ea-8415-d15fd35df73c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1567e601-a253-49dc-8743-cf31b1be35ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d0cac0-cd52-48a5-b219-256b4135c36e",
        "cursor": {
          "ref": "49769ab6-479f-40d9-863e-79a372c9c2d5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "07b04df3-719e-4e86-b8bd-2a802161b091"
        },
        "item": {
          "id": "70d0cac0-cd52-48a5-b219-256b4135c36e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "424cdd82-aeee-4a0b-9f38-aa477052891f",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "760dd10f-ac79-412c-9847-cae4b4f64cee",
        "cursor": {
          "ref": "d9768f97-fd53-4181-a8fe-3ddadb2d662a",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "31eef8f0-af47-496a-8eeb-93a5fafd0c3e"
        },
        "item": {
          "id": "760dd10f-ac79-412c-9847-cae4b4f64cee",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "535e0dc9-7fdc-4607-a183-3805df0cc5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7ad31b-d583-4e94-bfb6-754f2fbf2c7a",
        "cursor": {
          "ref": "b4668786-7644-483b-8f36-d0c2774c807b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a071405e-30e1-489a-a056-fdefb3b0039b"
        },
        "item": {
          "id": "2c7ad31b-d583-4e94-bfb6-754f2fbf2c7a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "747b8ad1-b77e-4516-853c-000165f89dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7809539c-415a-49fa-a72b-b8c5747768e6",
        "cursor": {
          "ref": "c50e8010-d389-4435-b06a-12c4f3533519",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "03231614-78c1-4ab0-82d7-72ce2bc32986"
        },
        "item": {
          "id": "7809539c-415a-49fa-a72b-b8c5747768e6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "afd7d6cb-99e8-43f0-8b12-fe45cf4bdf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c95d65-0410-447d-8f4d-db1c4ee70e06",
        "cursor": {
          "ref": "36e53bd4-5aca-4b12-98e0-899c1e28545d",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c7a7f370-31c0-4969-b0f4-5c0da54cc3c2"
        },
        "item": {
          "id": "e4c95d65-0410-447d-8f4d-db1c4ee70e06",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a56aec5f-a82c-4e86-bc58-35b51d40360b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8713623d-8ca3-4d05-b49a-a06f170b13e5",
        "cursor": {
          "ref": "7f1ec6f1-9ecf-4647-bb0f-ab3e2877acf4",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "57432d3d-b4f8-4b09-a14c-bb8f3c585a16"
        },
        "item": {
          "id": "8713623d-8ca3-4d05-b49a-a06f170b13e5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2d25a78a-474a-476e-a0b7-f31f19a9f54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962d235e-b63c-40d9-b625-d1dbcf2030c7",
        "cursor": {
          "ref": "d0836146-23f0-4ec7-bebb-15128468cf2d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "493dc38d-1180-48d8-b9e1-deb799578f53"
        },
        "item": {
          "id": "962d235e-b63c-40d9-b625-d1dbcf2030c7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bd4d3cc8-3e87-4e49-9bfb-44643a61fcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c87fa3e-af8d-46cb-8cd7-46283185fc44",
        "cursor": {
          "ref": "a7d0e15f-aed7-4fcf-bfec-4486960b5fc9",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "68decbf2-2202-445c-9823-3c23300adac8"
        },
        "item": {
          "id": "1c87fa3e-af8d-46cb-8cd7-46283185fc44",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3bd1b846-c1d4-4624-94a1-a044de33c747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f75acf-2ac1-41cd-84d1-8086918e85e8",
        "cursor": {
          "ref": "23cc327a-2539-4b0f-8901-ac4556e59a82",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "641b60c4-4e9e-413a-a46d-a96821fb12f9"
        },
        "item": {
          "id": "82f75acf-2ac1-41cd-84d1-8086918e85e8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ada38791-121b-4b35-8bc8-16ed77ff73d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2f94b4-9a1d-4fc7-ab14-4e4fe9f426bd",
        "cursor": {
          "ref": "65692056-26bb-44fb-8545-d037a96a6e97",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "53c722d8-ec52-4ad1-a951-5262d06d27e8"
        },
        "item": {
          "id": "6e2f94b4-9a1d-4fc7-ab14-4e4fe9f426bd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "495179ea-a1d2-4de9-aef2-a37adee510d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc21937-1fca-4535-bb5d-09f4df24ceb6",
        "cursor": {
          "ref": "7715c27c-6fcc-4c67-a274-7df985c10d38",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "11c55108-4b1f-45bb-a175-97e590fce35c"
        },
        "item": {
          "id": "ffc21937-1fca-4535-bb5d-09f4df24ceb6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "30ffad1f-8cf8-4b53-abd3-1ddea5cab1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8c6a8d-8859-45ec-8ab8-fef8021f15af",
        "cursor": {
          "ref": "443e2e91-13cc-4e16-a076-a8b390ccde34",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "470c60d8-5bb9-4458-92e3-926914da17af"
        },
        "item": {
          "id": "6b8c6a8d-8859-45ec-8ab8-fef8021f15af",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "65f3eefa-8c23-414e-9889-17ef27dbdf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe979b2-7cff-424c-b367-108aa2ce124a",
        "cursor": {
          "ref": "6a3dc892-793d-4977-8612-b2e4ee0cea0f",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "51ce6ebd-97ff-43c9-849f-692bef2cc703"
        },
        "item": {
          "id": "bfe979b2-7cff-424c-b367-108aa2ce124a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bdb65c9c-94ec-45c7-91ed-aedc7440f4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88754b7-3ed8-43f0-ab6c-7215dbbf5410",
        "cursor": {
          "ref": "2e113c11-942e-4a61-a30e-b8f935154e13",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "96c29c3c-ee17-454f-9c2f-3a9d89198b23"
        },
        "item": {
          "id": "d88754b7-3ed8-43f0-ab6c-7215dbbf5410",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "41da32b1-d2db-49fb-8453-2363714cc1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fcaf2b-abcd-44a1-bd7c-b58fe2e1dafb",
        "cursor": {
          "ref": "f2da7cfe-0f76-4010-82a4-dcd4cda2dce7",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5e5d9e3e-9b01-4325-aecc-5c47923bea29"
        },
        "item": {
          "id": "b7fcaf2b-abcd-44a1-bd7c-b58fe2e1dafb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "49443305-d537-47cd-bbe0-7e4fc496b3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506147a9-629f-4056-b1f8-ff4e8b579399",
        "cursor": {
          "ref": "16cce5dc-ce6f-4d8c-9614-5a020d28f20c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "90f7ea19-86a0-4373-a2a4-bef363e3ccf1"
        },
        "item": {
          "id": "506147a9-629f-4056-b1f8-ff4e8b579399",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1bdfb49f-6ac7-4237-a770-71c4273bf7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec332389-b831-43b0-b2d9-1413513e5dea",
        "cursor": {
          "ref": "72001089-8008-462a-879a-4d556c6a6c7a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cc51de50-cdcd-4336-88f0-6748794169a1"
        },
        "item": {
          "id": "ec332389-b831-43b0-b2d9-1413513e5dea",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9a43274e-3eb3-4dfa-b1ee-af7df064fa9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566a3c40-87b7-4d6e-8c23-89cab813141e",
        "cursor": {
          "ref": "d277842e-cb2b-4338-b797-6e599c621bf0",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a1dcd193-d2ec-4524-894b-1a995a1913fb"
        },
        "item": {
          "id": "566a3c40-87b7-4d6e-8c23-89cab813141e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b9509fa1-10f0-4320-8f8c-231a435ffcce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c08b3de-4b04-42de-be56-47f6d014ef2f",
        "cursor": {
          "ref": "f10520ea-9cbe-4a42-a0c7-86e7997f072f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3a0d57b0-db19-4652-822f-5bb7ea059e49"
        },
        "item": {
          "id": "5c08b3de-4b04-42de-be56-47f6d014ef2f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cfd85b2d-9e5d-46e0-a4d8-3344e7e220af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1126f0f8-4071-4d16-92a5-0b78d7a90348",
        "cursor": {
          "ref": "4571e797-07cb-4025-a97d-3eaf32d4baee",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "138f2a2d-590b-4811-87cd-d02672ce534d"
        },
        "item": {
          "id": "1126f0f8-4071-4d16-92a5-0b78d7a90348",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1d52f8b1-c635-40bc-90e1-1eda89ffab0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa756e4-98b4-4531-8990-c7e99797710d",
        "cursor": {
          "ref": "425e5353-0d8b-4191-911c-349582c3335e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bf100f57-e62b-4c40-b554-b70e9b673b79"
        },
        "item": {
          "id": "1aa756e4-98b4-4531-8990-c7e99797710d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8300b5ef-0494-4140-9294-73daa57f3cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecc4a9b-c043-49b1-b628-fbfa61303a46",
        "cursor": {
          "ref": "d8e467b3-a226-48d5-872e-256d3fe64872",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "27349ddc-3492-4b4f-912b-139bdd8e0b42"
        },
        "item": {
          "id": "6ecc4a9b-c043-49b1-b628-fbfa61303a46",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "43d847c1-3f18-4f94-ab12-bd0a1fc8b1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a10ea76-7854-4520-805e-a1b388d0ae36",
        "cursor": {
          "ref": "3e1e0e41-1e7e-4304-ae1c-b431d2087d92",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9a09336d-1b53-458b-b78e-23fd5f0d9c51"
        },
        "item": {
          "id": "5a10ea76-7854-4520-805e-a1b388d0ae36",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6a159cfa-0d30-482f-b171-4e27120528b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5301d924-5c63-4f00-b5c0-0f79772168f8",
        "cursor": {
          "ref": "71d47132-e3f3-4d38-971f-e6b05384f84a",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3e5a9981-c936-4774-bf9a-ebfee8ef9fbc"
        },
        "item": {
          "id": "5301d924-5c63-4f00-b5c0-0f79772168f8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8f946f14-05db-408d-8593-f01b0d5699da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b057a99-ab1c-4a5c-b213-b0f88e371626",
        "cursor": {
          "ref": "3e2f4d49-b240-449b-a3c2-9854b486cb48",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0a98f493-cddf-4699-ac95-6dcdda85c188"
        },
        "item": {
          "id": "3b057a99-ab1c-4a5c-b213-b0f88e371626",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "340ef195-88fe-461f-8450-c70ad8541cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cab6e91-02d0-4935-ac7a-21733c5a5119",
        "cursor": {
          "ref": "a55d8745-b20e-46a7-8a7d-4031a50c4342",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2124d0b5-b781-4190-8672-f71603181be6"
        },
        "item": {
          "id": "2cab6e91-02d0-4935-ac7a-21733c5a5119",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "519b43e2-1c61-46d5-8558-19a70c150e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505c1c8b-953d-4f5c-b911-b4a615dfd39c",
        "cursor": {
          "ref": "5754b33c-6331-4171-af43-12f77edf0068",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9a61de4e-b37a-4838-95d2-e55e96ca0f54"
        },
        "item": {
          "id": "505c1c8b-953d-4f5c-b911-b4a615dfd39c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "106a8349-1bda-4fed-8fa5-2ede9fdabacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb547d9-6868-4a2b-82a2-914fa91040fb",
        "cursor": {
          "ref": "3423a820-6b3d-498c-a7cf-bd2d8c3038b5",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e1c2108f-bb0d-44cb-b46a-2918f80de9ae"
        },
        "item": {
          "id": "2cb547d9-6868-4a2b-82a2-914fa91040fb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dc34ae64-c676-41a6-8930-c1db87a24fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de59cd8-b1da-4fa1-8b76-fa5cc5b941b8",
        "cursor": {
          "ref": "562647c2-7054-4b02-8f20-cf4179bd6642",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8cd64415-e3f8-44f2-b075-a436ca220a72"
        },
        "item": {
          "id": "6de59cd8-b1da-4fa1-8b76-fa5cc5b941b8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b81e95ef-fe1d-417a-b34c-c188f311aa6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2287599e-a0ad-4f36-8b6d-e55001b7a507",
        "cursor": {
          "ref": "d2e8f7be-8ee0-4497-a497-1b035f8559cf",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2e0fce5b-8a38-4b85-8360-638b93e4c917"
        },
        "item": {
          "id": "2287599e-a0ad-4f36-8b6d-e55001b7a507",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0c075b72-29a3-4049-a28c-3913bbaeb130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16f7acb-6700-4329-80b1-f826fc6d9607",
        "cursor": {
          "ref": "ff7da10b-f930-4054-8a7b-e5fbba87bbec",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "02cf9dd8-9c96-4933-b98c-7dfb6ab8c8e9"
        },
        "item": {
          "id": "f16f7acb-6700-4329-80b1-f826fc6d9607",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5e9ffd74-5f60-4aca-a993-fe736c4d5e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba13b40-8b08-40b6-b32b-2cdf43ccfbf7",
        "cursor": {
          "ref": "4fbd0125-3ae6-4b24-94e7-f9b9d0cb7a55",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2f8dcb6c-3d59-4890-98dd-bfb520b92ab8"
        },
        "item": {
          "id": "cba13b40-8b08-40b6-b32b-2cdf43ccfbf7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ff840518-aaac-419d-8913-955582547c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ab76b6-5119-470a-a86e-ed01a13fe9a1",
        "cursor": {
          "ref": "c50e7b47-1e7e-41dd-ae5d-39f6f6867d66",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3b26cf68-92c4-4b6a-91e6-95622862e061"
        },
        "item": {
          "id": "11ab76b6-5119-470a-a86e-ed01a13fe9a1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c996ed6d-c157-4227-b06d-6212b6cb1104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93696c59-737e-4c27-8be5-08c89f749cf7",
        "cursor": {
          "ref": "3e9b4014-a7fc-4b75-9151-9a9494fa8b46",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "89abe1b1-aaa7-48b0-8269-2f3f51e6cb39"
        },
        "item": {
          "id": "93696c59-737e-4c27-8be5-08c89f749cf7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5d0fb8c8-8f52-47e6-a4b5-053c77285edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca397df-dfab-4671-802d-fdca235d431f",
        "cursor": {
          "ref": "f053e532-262f-4e11-ad8a-298437e8e3a1",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ff0adb33-b294-4294-bd08-ff077c99e8fc"
        },
        "item": {
          "id": "1ca397df-dfab-4671-802d-fdca235d431f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5eb0f57f-8f57-4a05-a5d1-0b7ae083562e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ab9265-8e68-41a1-8cba-61c70fa9c0d4",
        "cursor": {
          "ref": "86f3db77-2198-4bd7-9d86-d7bda09e9cbd",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a51dc292-8243-4e99-8cbf-df33e45ac66b"
        },
        "item": {
          "id": "52ab9265-8e68-41a1-8cba-61c70fa9c0d4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4fa12b36-ee79-4ec1-8fa4-9dbb5b7df308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d169729d-cd6a-41f9-bc2e-23ba2b8b12d6",
        "cursor": {
          "ref": "869c916c-ef4c-49c5-889c-902eb7e00dcc",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "997a3e66-c40a-4038-9192-55c7ecab3283"
        },
        "item": {
          "id": "d169729d-cd6a-41f9-bc2e-23ba2b8b12d6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f645a8f5-9a81-4f2c-91a1-81ba25e27f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed122f08-9842-4746-a2c4-5fb5f7630b99",
        "cursor": {
          "ref": "eb31bd31-dff4-4e7c-98ae-85119bc6a1ea",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "36bda242-0f1d-4420-94ba-72674c14c3c9"
        },
        "item": {
          "id": "ed122f08-9842-4746-a2c4-5fb5f7630b99",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5669e587-e588-428f-8d2b-72ec8991f30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b632972d-a5f2-4af7-9a14-2a9a7938fd8f",
        "cursor": {
          "ref": "1dfa9fbf-45ef-4517-afb5-abd855db6ac1",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0d2e6386-96dd-42b8-a64a-dd17029366de"
        },
        "item": {
          "id": "b632972d-a5f2-4af7-9a14-2a9a7938fd8f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1ed0cfc4-f1af-422e-b2d8-6aac2ac4f303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef8bea5-1f7a-4734-a2fa-cc7eb5fb30cf",
        "cursor": {
          "ref": "d06c4f73-7ca5-4661-ae87-4e12e7db26a4",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3aeefe79-cb69-4eb3-a223-74c961a4c9a6"
        },
        "item": {
          "id": "aef8bea5-1f7a-4734-a2fa-cc7eb5fb30cf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d9c16924-c92a-45c4-b43e-d1cab3502854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b7dd8e-8486-4991-8239-420167eb70f2",
        "cursor": {
          "ref": "43cad748-ac07-4b53-8455-7b974b88ea48",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3f324704-4cf6-4329-ac27-10228ae79dbb"
        },
        "item": {
          "id": "f9b7dd8e-8486-4991-8239-420167eb70f2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0ac6f529-6343-43e3-87e1-67e3b4a1153b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97434ae-f5c0-41cc-b002-3fa30053a544",
        "cursor": {
          "ref": "a6507cf5-c87f-48b6-bfe3-290dae78a86b",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b95927ab-1ec9-448d-b230-c0dccadd733e"
        },
        "item": {
          "id": "d97434ae-f5c0-41cc-b002-3fa30053a544",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3f6b4298-c105-4852-b319-9bae9ee4a6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec03d1a9-e536-406f-aab9-91de5fef01ac",
        "cursor": {
          "ref": "45a12863-7e68-47bd-a9f4-ba9be4f9e886",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7602fa79-f5c1-4c04-8f06-269ca391c69f"
        },
        "item": {
          "id": "ec03d1a9-e536-406f-aab9-91de5fef01ac",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b876259c-75a0-4cf3-9801-4516ab543526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195850e1-4590-4649-a649-0e37aca21a6b",
        "cursor": {
          "ref": "8b8c56ad-78b5-4312-bcdf-857e01e41cc9",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "416349de-9812-4e53-b59a-d9afc9ef3466"
        },
        "item": {
          "id": "195850e1-4590-4649-a649-0e37aca21a6b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "56581d4b-f6ed-4656-a30e-569b9a350e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a103d3-3ee2-4719-a3bc-75eae71e70c9",
        "cursor": {
          "ref": "1b2ed0a0-d2e9-4779-8abe-94799c50fd29",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "56834579-24b8-438e-acf0-1e07f9f6059e"
        },
        "item": {
          "id": "c4a103d3-3ee2-4719-a3bc-75eae71e70c9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "65d780b5-1aa4-4bd5-95bb-b7288cd9e185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69709930-295d-4123-aed6-71dc935018cb",
        "cursor": {
          "ref": "dbc10018-5139-4d46-9f6f-3b5dcfb5ad11",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2c43bdb7-34c5-4472-9c57-973f49373c4c"
        },
        "item": {
          "id": "69709930-295d-4123-aed6-71dc935018cb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "198db6f3-2f86-49dc-a6f4-be195e5a5ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71721714-cb12-458c-a862-593978f647d8",
        "cursor": {
          "ref": "fe09d1ce-538d-4a78-8990-defcfdbeb2ed",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5b484b6f-dcf9-4909-b8d3-19a593a1341c"
        },
        "item": {
          "id": "71721714-cb12-458c-a862-593978f647d8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6ca07371-b78a-4396-a54f-7f2ac1223dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084c141f-14a7-499e-b4df-095d14d9ff76",
        "cursor": {
          "ref": "012b1480-b239-4911-a556-8c0bbf3797af",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f643b90a-4853-400e-983d-400c26de2010"
        },
        "item": {
          "id": "084c141f-14a7-499e-b4df-095d14d9ff76",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6100bf2c-600c-43e4-a686-98c54b7fc8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b56dc79-70f7-4b50-aed1-bf36f4b964c8",
        "cursor": {
          "ref": "5e862c6d-22f3-4c60-acbf-b04d3d5215dd",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "571855fa-2cf9-41be-b7bf-3e8b4786f227"
        },
        "item": {
          "id": "9b56dc79-70f7-4b50-aed1-bf36f4b964c8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "41d710ba-a090-4117-8814-3ed2ce0cc492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc779a6-0c66-43ac-8728-d1c45889454f",
        "cursor": {
          "ref": "b084874e-cdf7-4095-8f56-9f98bde2ddbf",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "91336ca7-55e7-4ff8-9764-4eda74987cdc"
        },
        "item": {
          "id": "4bc779a6-0c66-43ac-8728-d1c45889454f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f55218e7-2f7e-46f1-b4e4-52b09c7ed6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a111913a-b865-4048-9501-97b2bb518a1a",
        "cursor": {
          "ref": "e1a9a4d1-b6fb-4c9b-aa27-70b3b270faa6",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ed8c55c5-88a0-4c74-bb21-4a71f39f9645"
        },
        "item": {
          "id": "a111913a-b865-4048-9501-97b2bb518a1a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2db8e605-98e0-4cbb-a378-6677dff1b7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3ccbb1-9b7e-4dbe-9b5d-885ac561c82d",
        "cursor": {
          "ref": "5b48cfb3-2a78-412e-8a52-950894d89eac",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a2a5f356-7332-4b6f-adb7-5a39851feca2"
        },
        "item": {
          "id": "bd3ccbb1-9b7e-4dbe-9b5d-885ac561c82d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f27395af-72dc-4d58-a954-6f9e8c0c90c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231c03d7-c71d-4ae5-baa9-bc6027710ee0",
        "cursor": {
          "ref": "2d856ff3-a2ce-422b-8873-2d3b2b4d0ae4",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d8fff1fd-1ab3-4dba-b531-ab23d4510f24"
        },
        "item": {
          "id": "231c03d7-c71d-4ae5-baa9-bc6027710ee0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e9126701-7926-4b34-a0a7-458ba8be2371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53218e26-194b-4211-9970-7d8cec898024",
        "cursor": {
          "ref": "5682d59e-81eb-446a-83ae-68c2b167c288",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "818237b6-5469-47a5-bd92-c93bb2d6bdf0"
        },
        "item": {
          "id": "53218e26-194b-4211-9970-7d8cec898024",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "aead79e2-dc3c-4a75-97e8-0c060ef19dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf07e8e-8cf7-43ad-87ee-9fe0811b2d35",
        "cursor": {
          "ref": "327b4aa5-eb4e-4567-bfd7-f26f72bf0dc6",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "75338296-3312-4863-8eea-499d2279f6df"
        },
        "item": {
          "id": "5bf07e8e-8cf7-43ad-87ee-9fe0811b2d35",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "74dea7c2-fc0b-4935-8336-8e331dd34be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df98540-5a4d-4be3-b356-674e559dceae",
        "cursor": {
          "ref": "a2591f4a-e4c6-4c34-a4eb-ff3a82442c6e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "30551990-d650-4353-9dac-c6dc1b500ef7"
        },
        "item": {
          "id": "7df98540-5a4d-4be3-b356-674e559dceae",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fcef4169-ead4-4969-8f2d-5752fcebd53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b8c452-f3ef-4c93-b3f1-07e052201dd9",
        "cursor": {
          "ref": "d118a40e-6154-4908-ad88-35caa20d0198",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1884a3a4-d923-4276-94cb-d955bbb534e3"
        },
        "item": {
          "id": "f2b8c452-f3ef-4c93-b3f1-07e052201dd9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e896615a-34a6-4758-a993-445dd033964f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6ffd7e-51db-42a7-86be-15db2ad79fd9",
        "cursor": {
          "ref": "f453fd19-d688-4389-ae70-300f1b598afc",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "84b80055-5ce9-483c-953b-5c2ac3032346"
        },
        "item": {
          "id": "6d6ffd7e-51db-42a7-86be-15db2ad79fd9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7ef6dc60-da1c-4b62-9b34-6acf34c9cee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187f6164-a544-4437-8fc7-11f2c384a87d",
        "cursor": {
          "ref": "80435a01-aa62-4dff-a2a3-3e1a2019261d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f6efffd5-e7eb-498f-812a-9d5e694b50c8"
        },
        "item": {
          "id": "187f6164-a544-4437-8fc7-11f2c384a87d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2b938ef0-176a-4a65-9b7e-1fb121a627fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff27c284-a986-464c-89e9-9569b8b37a1d",
        "cursor": {
          "ref": "40827290-34a2-4e9a-849c-f44ffa6a0cc7",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "28f4dcc1-aaa5-4d18-a8ea-0af9ee0afce0"
        },
        "item": {
          "id": "ff27c284-a986-464c-89e9-9569b8b37a1d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8ded0644-be29-4d1b-a78b-fa2393451aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41aabb5-d0ce-4888-918d-916d6cd9320f",
        "cursor": {
          "ref": "56be6b8a-4c87-460c-a30a-daf3c8448716",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "79347825-1f0f-47db-a2cb-f491a009d965"
        },
        "item": {
          "id": "d41aabb5-d0ce-4888-918d-916d6cd9320f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e61ac09f-2848-4252-8c87-c739f9fac35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68e25c9-9feb-4c9f-b1b9-7d919e5d4d51",
        "cursor": {
          "ref": "a3d18c7c-182b-4795-8793-11c4fe550693",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "074c7932-5cdb-4410-9dc0-fd6f5a072237"
        },
        "item": {
          "id": "d68e25c9-9feb-4c9f-b1b9-7d919e5d4d51",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f63fb890-177e-430b-9cb6-7c0e2559cc5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2221ebb-73c3-4e12-9e00-c958a1234708",
        "cursor": {
          "ref": "74c071cf-4f54-41d0-81e5-4953d2eb8590",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2ba8dc0d-fd25-4380-8f3f-d09a53d180c3"
        },
        "item": {
          "id": "b2221ebb-73c3-4e12-9e00-c958a1234708",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "51e2f0b4-1af2-483c-b0e4-ac550343c100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a526d2-3977-4950-8c48-ca2a09b4c5f4",
        "cursor": {
          "ref": "bcc78b1a-bf16-4685-83ba-bf109ce5d71b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d4a0e822-698f-438a-801a-84eac61320de"
        },
        "item": {
          "id": "f7a526d2-3977-4950-8c48-ca2a09b4c5f4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d5b70efc-f6d2-493e-9cff-ecc352c31575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7805a7d0-f508-4ee6-9a9e-88db03c8b093",
        "cursor": {
          "ref": "5bf57d90-ad08-4836-b0ca-4b5fd558632e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "094a8b4c-ba11-4440-a7b8-805b150f2386"
        },
        "item": {
          "id": "7805a7d0-f508-4ee6-9a9e-88db03c8b093",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d49bf2ba-b4ab-4e69-97bf-835eec21e22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9dfe17b-bcaa-4a09-a7bb-67f6ed49a1bf",
        "cursor": {
          "ref": "e07f68aa-f292-4bf6-9a93-332c4c06f19d",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8408f28c-55a3-4728-98cc-ca96b4db6f69"
        },
        "item": {
          "id": "a9dfe17b-bcaa-4a09-a7bb-67f6ed49a1bf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5c61418a-f300-459c-89f3-3b3346f66337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564fa81b-d805-46f6-90b1-66b364c5bd01",
        "cursor": {
          "ref": "f982d00f-32a2-4626-a1c1-2c8c046efd7c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8785ca44-0829-466a-8e24-086aef468f61"
        },
        "item": {
          "id": "564fa81b-d805-46f6-90b1-66b364c5bd01",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b161bf93-92d5-4109-980f-54e84aaf7c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2b5a40-8aaa-459a-bfb5-fe106edd4fdc",
        "cursor": {
          "ref": "babdd9b6-0dfb-461c-88d7-8e44389e2ff1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "96a22ec9-8556-43b7-9acc-b846af056ed7"
        },
        "item": {
          "id": "8d2b5a40-8aaa-459a-bfb5-fe106edd4fdc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6ec02cc5-c5a5-418b-8cf8-0bb974e67c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccc7e99-4730-4acd-8e63-4b63f51aa65b",
        "cursor": {
          "ref": "ac62ae16-73c7-46d2-b9d7-576673792e86",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "294a7e4c-2136-4e5e-aa66-ee84c5e064e4"
        },
        "item": {
          "id": "9ccc7e99-4730-4acd-8e63-4b63f51aa65b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b6f0f347-3ed8-4755-bd42-6c1bf2a85b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc427648-89f3-42da-9776-045c004577ea",
        "cursor": {
          "ref": "06f14eb7-0832-440a-9d45-da3e6b926bd6",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9a0b3cf5-3094-4c85-b2fb-407d9cf3f452"
        },
        "item": {
          "id": "bc427648-89f3-42da-9776-045c004577ea",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d18f97cd-0ed8-42f8-82d2-95830cfc0635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c529d34-0912-4447-b7a7-694d1a3d29d9",
        "cursor": {
          "ref": "4fee15e3-e8b0-4d87-b380-055e531db8a8",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f644967b-3dc3-46c5-afb2-f5111dbee683"
        },
        "item": {
          "id": "2c529d34-0912-4447-b7a7-694d1a3d29d9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a939097b-bfa2-46e3-9a47-eb927b7fa472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e10830f-1528-487e-b945-a4b205d621c2",
        "cursor": {
          "ref": "97f030bf-fd27-41b5-a79c-61c6a2c28505",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9e952e46-5f39-452f-93ab-2732a10b2861"
        },
        "item": {
          "id": "5e10830f-1528-487e-b945-a4b205d621c2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5b5bda55-1982-4f58-959a-7c0717c1b5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1ce96f-0694-464d-af8d-aad2307a63a9",
        "cursor": {
          "ref": "2255244f-9ca8-42ed-9b67-f4702b68b7e2",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cc85d928-ba01-44e0-a54c-39937aed0d1d"
        },
        "item": {
          "id": "dc1ce96f-0694-464d-af8d-aad2307a63a9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9cbf09aa-7265-42eb-9d40-b676128ee3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadb3417-e39c-4f56-8e9a-80e5747b3dd2",
        "cursor": {
          "ref": "8aceed04-1900-41bd-8a37-eb5e4187d748",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a93c944f-c105-432c-a89d-be9ce77d1242"
        },
        "item": {
          "id": "dadb3417-e39c-4f56-8e9a-80e5747b3dd2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "732b25f8-e1a8-443b-a0c7-0a5796139607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f75732-53ae-4bd3-ad59-f9a6196d19bb",
        "cursor": {
          "ref": "f40ea24f-1bc2-4d9b-ba10-76757bc1e0f5",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7fdd22e1-5042-412d-936e-b8ab5e4b3919"
        },
        "item": {
          "id": "82f75732-53ae-4bd3-ad59-f9a6196d19bb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9bc7e04a-e07b-4356-9f0f-628e04c54e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56865485-3c39-4b5d-81b8-70612e5a0c91",
        "cursor": {
          "ref": "cd610be9-5953-4bfb-ab9f-5bda017643bd",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "51d52b0a-649e-498d-abf8-3361e420cb47"
        },
        "item": {
          "id": "56865485-3c39-4b5d-81b8-70612e5a0c91",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ceb9fbdf-d7dd-4a91-8093-71824dfb8192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a1cd66-4085-4877-8737-e4543afba086",
        "cursor": {
          "ref": "7ed2d248-8c40-41b1-91fc-d91c405da977",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ff7b8268-dedc-48ff-83ca-d4998523e55b"
        },
        "item": {
          "id": "58a1cd66-4085-4877-8737-e4543afba086",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "72a10421-07fb-48a5-bc4b-049d2bfe9403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b8ea66-0e33-4ac2-8c6b-2c1efabde892",
        "cursor": {
          "ref": "c8c27625-06a8-48c4-9d28-57beb98d26e5",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "698dc6d2-2e80-4c9e-9e3d-58430297d746"
        },
        "item": {
          "id": "44b8ea66-0e33-4ac2-8c6b-2c1efabde892",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "796723de-2b20-40e4-86ef-37581c09cbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48e39f1-0d7f-4b52-9cea-cabd60956a64",
        "cursor": {
          "ref": "6027c099-1131-4c98-a59e-cd63bbfb38f7",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "392a19c2-f6ef-4432-833c-dd67d2ebd018"
        },
        "item": {
          "id": "a48e39f1-0d7f-4b52-9cea-cabd60956a64",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "19a7e6e2-5e80-4508-b42f-d8263a5891b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dfda3c-6844-4a87-b139-4746b6fc2d2c",
        "cursor": {
          "ref": "794a69e6-1d2a-436b-8359-839a7608f444",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "dc368e9e-a6fd-46d2-9391-04c03b353f20"
        },
        "item": {
          "id": "b7dfda3c-6844-4a87-b139-4746b6fc2d2c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "faeaf0ee-f977-4ac4-a16b-06952f43b8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2b5b2b-8c44-45f0-aa90-475d64e64912",
        "cursor": {
          "ref": "82d4564c-261e-43d1-b486-8e5c3fbd9d71",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5d193035-41e3-48fa-b075-52d80863962b"
        },
        "item": {
          "id": "5f2b5b2b-8c44-45f0-aa90-475d64e64912",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "12687b06-d84c-4ef8-aa9a-e0b67b14112b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5bcb0e-d82f-4efc-8a2a-8cce21db658e",
        "cursor": {
          "ref": "cafc322c-45af-4f22-bce3-844f0ec1ebe5",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d848f5db-c1bc-4d47-aeda-bdad2be3c6c0"
        },
        "item": {
          "id": "4e5bcb0e-d82f-4efc-8a2a-8cce21db658e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0929e4e2-58aa-47be-a83c-6056db69e4f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "afba5584-a898-4c9b-812f-39d7b6da6ae9",
        "cursor": {
          "ref": "38f36950-b4cf-4699-93c8-4c36a9f3fcf1",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7a34452f-a45c-4fa0-9ce0-65bf368382ee"
        },
        "item": {
          "id": "afba5584-a898-4c9b-812f-39d7b6da6ae9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5b116d0e-8399-4560-a004-a2e788a4a8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7d55455a-f49d-4b9c-a555-6efdf18934c3",
        "cursor": {
          "ref": "a4503aa2-f339-4ab6-bb9a-4fa05b16148e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3a1b69f6-0aca-4e92-b574-a09e3b7db2ab"
        },
        "item": {
          "id": "7d55455a-f49d-4b9c-a555-6efdf18934c3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0008bcdd-8fae-44bb-9e85-25660d3f469d",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e978ee-ce3a-4319-8ff3-80689e18bdae",
        "cursor": {
          "ref": "513c5bb6-7b2e-4097-9374-11b3dcc4b421",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b5d24bd7-90cb-43c4-b3eb-21bef25be172"
        },
        "item": {
          "id": "22e978ee-ce3a-4319-8ff3-80689e18bdae",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cfec0cf3-8a70-452e-9927-4e828b6f61ff",
          "status": "OK",
          "code": 200,
          "responseTime": 1589,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc2c47e-6165-46dd-b6ad-c688f544e7e5",
        "cursor": {
          "ref": "6da46041-7b38-42a8-ab67-54e8c621e300",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2ff0d429-7a1e-434c-9d89-8f4bf80e07a6"
        },
        "item": {
          "id": "0cc2c47e-6165-46dd-b6ad-c688f544e7e5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "57c0e250-156a-42b8-9faf-bb0307548bd5",
          "status": "OK",
          "code": 200,
          "responseTime": 2221,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "620bd5c3-72d9-4294-bf8d-2e5314b5d722",
        "cursor": {
          "ref": "38333998-4b22-49ad-8b3f-67fd78d0e9ae",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "eb3307c4-61ca-4298-8108-ae023205243a"
        },
        "item": {
          "id": "620bd5c3-72d9-4294-bf8d-2e5314b5d722",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10e10b3a-cf82-4779-84af-d3ce486a183f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "620bd5c3-72d9-4294-bf8d-2e5314b5d722",
        "cursor": {
          "ref": "38333998-4b22-49ad-8b3f-67fd78d0e9ae",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "eb3307c4-61ca-4298-8108-ae023205243a"
        },
        "item": {
          "id": "620bd5c3-72d9-4294-bf8d-2e5314b5d722",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10e10b3a-cf82-4779-84af-d3ce486a183f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "620bd5c3-72d9-4294-bf8d-2e5314b5d722",
        "cursor": {
          "ref": "38333998-4b22-49ad-8b3f-67fd78d0e9ae",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "eb3307c4-61ca-4298-8108-ae023205243a"
        },
        "item": {
          "id": "620bd5c3-72d9-4294-bf8d-2e5314b5d722",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10e10b3a-cf82-4779-84af-d3ce486a183f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "d41a8f1d-9aaa-49d7-8dd3-214cf4a08148",
        "cursor": {
          "ref": "60484641-23be-46af-bc0d-cfaf8f6ef2e6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c7700147-25d7-4de9-af0c-3f9b8020ae4d"
        },
        "item": {
          "id": "d41a8f1d-9aaa-49d7-8dd3-214cf4a08148",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6ddf86ad-c849-4a67-9c5e-1e21270ee915",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e40e00c8-d635-476d-a3b8-a9062379ca8c",
        "cursor": {
          "ref": "6563e975-93fd-4956-a6af-041d205c4c75",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4013b445-d3c2-4dca-a757-7d3d1dd494f3"
        },
        "item": {
          "id": "e40e00c8-d635-476d-a3b8-a9062379ca8c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "90e6ff94-36bb-4dd9-8854-c5e9f8616225",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e40e00c8-d635-476d-a3b8-a9062379ca8c",
        "cursor": {
          "ref": "6563e975-93fd-4956-a6af-041d205c4c75",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4013b445-d3c2-4dca-a757-7d3d1dd494f3"
        },
        "item": {
          "id": "e40e00c8-d635-476d-a3b8-a9062379ca8c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "90e6ff94-36bb-4dd9-8854-c5e9f8616225",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d056147a-187b-45ea-8180-a5f290054d35",
        "cursor": {
          "ref": "5fd04628-bf4a-4b54-af77-650b58a85c7b",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "45413a3f-50f5-44f8-bafd-57fcc281b129"
        },
        "item": {
          "id": "d056147a-187b-45ea-8180-a5f290054d35",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "872e04b6-0736-4c58-8fa3-3414d73029ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 124,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2da61587-d46e-464b-bd53-a69918537e7e",
        "cursor": {
          "ref": "22b60a1a-7a84-42de-9cee-be845e39c8d3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d18b746e-1b79-442a-97cc-5a78615916b4"
        },
        "item": {
          "id": "2da61587-d46e-464b-bd53-a69918537e7e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1cd1f45b-c71e-4d2d-85bd-5646360acafd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2da61587-d46e-464b-bd53-a69918537e7e",
        "cursor": {
          "ref": "22b60a1a-7a84-42de-9cee-be845e39c8d3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d18b746e-1b79-442a-97cc-5a78615916b4"
        },
        "item": {
          "id": "2da61587-d46e-464b-bd53-a69918537e7e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1cd1f45b-c71e-4d2d-85bd-5646360acafd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "53a3b593-6286-4131-9ac3-9a6e0126c64e",
        "cursor": {
          "ref": "4744c03b-7091-4300-8d06-7aff6f944e7d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "66f36364-9b0b-4262-9407-184cb4c86a36"
        },
        "item": {
          "id": "53a3b593-6286-4131-9ac3-9a6e0126c64e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f4ee8b7d-89d1-4e7c-93b0-11cc80faae01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}