{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d35503c0-3a72-46b9-a7b6-f4d8bbca2f84",
        "name": "Clear Cache",
        "item": [
          {
            "id": "29e47ba8-c8c8-4684-8f5c-b6bc2471457d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b44dcaec-38e9-4393-8597-e10de2f7ca62",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bff99f9b-119c-47f0-9292-758c4e8dba66"
                }
              }
            ]
          },
          {
            "id": "2780f412-5599-4f3c-8fc4-94583647b32a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30092f5a-8e7a-44b5-ab18-41b91e9cdb30",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "295348d9-e0fd-4ab5-912c-fd41b28e5531"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b5a7d91f-50e9-4d92-a280-48420fcdf22c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "909f81ce-2145-4d20-a74e-6d9147529e34",
            "name": "Positive Testing",
            "item": [
              {
                "id": "93df9b6c-6e50-4625-bb7f-437df13f1832",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58e90b35-b353-4a0d-8e09-37818ebb400b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a897f6c1-ad98-4bb1-8aa1-f89550c5352a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "17202513-53f4-4e16-abaf-5ba919f09446",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e2f9884-b571-4fa8-bc42-4cbccf2acbdd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1bda0076-f488-4e6a-9a7b-34c325856fc2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e14209c2-2870-44ae-86c3-30e1885cebe0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80c07bd8-02d3-4a84-ade3-d889623b95c1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2b85e71b-8f05-4db4-ac36-3dceaac80749"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d582f842-316c-48c6-bd2b-77726699b330",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "daa03cb7-a5a8-4859-bfbb-e9b8248a447d"
            }
          }
        ]
      },
      {
        "id": "1fb42508-bad1-42e0-a7bd-6c57a2ea9a3b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "abd3355c-5d56-4907-a22a-a626e9796cdb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6e22c8c-7e08-4f58-8cda-7de19282d73a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ccb02041-f330-4c8e-a6f5-835c2d14ec1d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655884b2-5a6e-4901-bbbd-f7d610047115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbff441c-f9c6-4b12-b584-a2f010595f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596850ba-2692-4886-86cd-2d9720e90d56",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f75d41-7e11-41fb-bdf9-be29d4f05c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53a9be57-5515-47f0-ae0e-425f9ef4a6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2340f441-ca5c-46ea-b8bd-b25fd45cd2fb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70e1c41-0623-4a02-abc3-e9155f35f1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe55e4e1-3f19-4d0f-9cc4-5b92795b8ffd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2bcae854-2780-4f20-9589-792a4e98ba77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d6f229e-104f-43b8-9ca0-32bf071e6747",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e27361-a01a-49f0-b154-8fbac2791124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2548fbaf-4bd4-4226-abd5-7e65529e2cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbd152e-76c2-4cca-97c0-ae9346adf5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00c6d87-114d-4206-a7d5-9ea9940351bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "aa3d01f9-a523-431a-b99e-db4d8baa8fbc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "78c6f3f7-7284-494a-9a13-f0fd148d0239",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a46c916-7177-4c02-aa2a-8bd6d0a4b69e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "921d925d-10ae-40d9-90bf-ef17608c5ba1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7d57221-cd42-414e-9019-119d229e08ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "74ebd9bf-46e0-446c-b1af-90dd03e8255f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72be4e0c-4888-4e1f-bb38-73fb474b1dad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2aade1c0-a16d-41d9-892a-8a722b313576"
            }
          }
        ]
      },
      {
        "id": "a1af121d-4d90-47bb-b5bc-646ad5b63c81",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7187ffce-8b74-4991-8e89-f53eacc1a36d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f30d7d4-518c-4fbc-be4b-a84d9f737d2a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "94d0ffbe-7df6-43c2-b4cc-64d2d63e64d9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dedb393-66bb-4e42-afb6-e06e8d1f28b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c3a441-ebc8-4570-ba55-35e635aafffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6e88f1-cbff-4e31-a424-c9bcd68800fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57b6eaa6-a271-4bb6-ac9f-e9b6fcd16b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c6926b-8762-4e1a-9401-a9bead45597e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcdef93-418e-410a-be88-96882888e69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7b7466-5826-433d-ab64-697ea91358f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32cae1e-4a97-40ac-a510-f4de1ba68219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0404a127-79bc-4154-9666-376bcbd8b9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776fecd1-99a0-46e6-ad26-66fb1e26883c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0cb543-2399-4423-a9ca-b71724bd9b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b22dfd5-2cf1-40b4-b1a8-f5a9bc8c3d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dff1ff-9c43-43bb-a361-64b4f57cf999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10f470fa-c396-4f07-b07a-c5111a100240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2af888-2c6e-45eb-acdb-7f02758de19b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e9e581-c6b1-4b38-bc6b-450d16cac5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6226dc19-4971-4b05-a5d2-63def35185f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdd19f9-663a-4ba2-9490-0eecfa81eb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d452aa16-9218-4c8b-8c11-2aa02b2b8e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556536c9-deb4-4f97-a466-b19989ecea23",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f977ec-6ca4-4893-b100-daa2def6514a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e7af59-d3ba-4499-9be6-87be930d9cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92e57ef-eecc-4e81-b1ae-918647475aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e075206b-e570-460f-8c3e-85620fd7c028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990bc1ae-4ae6-4dc9-8849-97ab499e6efa",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52cc07d-2604-447a-ac5d-bbea855af630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2293c849-00c3-4284-a0e4-dc2f7069ee25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2435f982-c111-4489-aa97-ee0dba6c5c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "897061b9-13ca-43fb-b8fc-b0cbce966bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d6e21a-4ab3-493d-b4c0-248da0834206",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97ef020-3c2b-436c-bc10-01f2aa4e7201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233ab18a-4389-4e27-a911-d3a6ca37309e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04e4fdb-6613-4a2a-b4cf-f12bcadf47ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d29a9f25-fff3-4f34-b181-237a9d173469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860a27f7-c47f-466b-8aec-6d896f877220",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f23a5b-38d6-4d42-97c1-e3b50e6eb178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcaa8dc2-7795-4488-a99a-c1ab70d1b4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849d23cc-17c1-4f47-9cbb-610d4973eff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49e4ee0b-1b3b-4b92-9c39-f13a7e5384a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a120ff-1123-41b4-9712-5876327f9ae4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc17ab18-ac9e-45ac-b587-b34a6ab4273b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18ad6a8-ffd4-430c-ab0b-8fda0a00a7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ebc92a-34e5-4fb7-8fc9-2479ee218569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92fbb6e6-ed6b-4962-8b60-05fc987a6765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b698bb6-d6d3-402a-abe9-56359ecac5cd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f530fdda-7690-4c47-bc64-7b4a999618d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b9a5f1-2c52-4315-95ab-56b09da8a98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c69c45-95a0-41c7-9cbf-994aef8bcb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1983ed9-5646-4d4c-8d61-21aa39768f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dbadf7-bbd4-460c-9546-541c4ddd50aa",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7c8b87-4e8b-42ad-9cee-825644786266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0449720c-a62b-464d-8613-83e3d0b4c948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a77479-1684-44ef-9ed0-17bf51f0bae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "580bb98d-eaf3-44ee-bda9-ec63a1d71b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c28d41-7882-4973-b8ae-a4542013b92e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c96a6f1-5961-4596-8026-dd1825841b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e2df70-b821-493c-930f-a83b72b65fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d586b8a7-5aad-4de5-9749-2c738b341dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f33b5fe4-6d21-4487-84da-bd205ceb83c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19dbc993-cc4a-4e7b-b662-9a279fa69093",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae031af-ecf2-4c5d-bb0a-279b955eb1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aeb69fb-7af4-46bc-9601-a6e703d28595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481654c9-2895-4e71-84d0-e245b4e216cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c40d32d-f278-4f45-9001-2fd830f54cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0c943c-8ee7-427e-ab5c-ce411d818a4b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177d2e4c-ef9b-46e7-870b-4d2c85187ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f83d67-1ee6-44c5-88a6-e6399290d068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7921ff48-adb7-42c9-ab59-7c9e275a57c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "927fd853-f614-48c7-a706-c4cef47e8f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192b16d7-7241-475e-8e12-a98ead5c2004",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acbe8a1-24e0-4708-b1f7-ef21f4d5082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f89bea9-83b3-4c95-abaa-d8a834e31235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58245a8d-04ff-4161-88ab-650d20d68469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78700a82-2698-407b-b165-b28ec1480c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08707b71-2b10-4687-b9a8-a15315992977",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55df237e-3f86-4857-81d3-9ce0883b3509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e46001d-966b-4a67-8b59-36b3085281c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d59b71-5e6b-49b8-a4b2-e44a213b37c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f74f8a0-ba3e-472a-872c-1aad536b0354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd5013c-7f31-4faa-9755-a397cf3dfa9f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032b845f-3142-45d0-ae72-41e3cf3fd3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf46fac-9852-40e6-abba-ff01b78cbf8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ef5b26-7c03-47f9-8d9f-b132b50eaf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ac1f365-0232-4e6b-b28a-e7753e27a520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82147af7-007f-4f0a-90a5-35158c72b3fe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b033ca32-65d2-40b7-a77d-9cafa5a065e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e34e924-a78e-47b2-a178-296c61a06072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f507f9-c3a8-4a45-b382-b639242f21a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f773009-001d-47ba-bee8-63d28438b36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a09816-dfce-4dfc-b914-d5bb3b2ccac8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b28fa70-a10f-4a4f-8827-42ac2323f89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e00b80e-4dd7-4caa-8db7-e7ceedcb66b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68578b06-ce91-4365-b121-41d5fcf6dc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2518d1b3-3539-40dc-a3d9-d14faf99e195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4571a4d-64ea-4065-a9a5-8815e3a690cd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c996497d-d2ed-4693-b84c-9c7a848bfcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e2abf3-c529-4eff-bf00-7c53cb91d93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1edc10-cee9-4fa4-862b-cf4c070b17bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc499de-bd87-4bff-a851-349baa24745f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae4560a-a11b-4f46-86f7-622cd99dfe5e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e4dd2c-49af-42f0-8f28-8baf6e77578c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decb7122-ca86-402c-9d3c-0f49f3ff2190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04db9e42-983b-44cb-9a90-ad910dde873d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f00e4d-9997-461e-9136-98dcc844eea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5540e6-702d-42d4-bd78-bccc25eff5bf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df02ae33-4b45-4f30-b35d-ae59cdf2f6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a88553-6c66-45da-a37d-425c1b146afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01421a53-5e03-4ef2-9bc8-fb6ee0d70a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b1bb39-edad-456c-a1e9-fb663a046b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b71de6-9397-4123-97b2-5393b7a69a66",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ac62cb-5b67-4808-b925-c3de4dd78c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93eb371-4708-49b5-8093-d22c9d505f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d4b6c1-3a62-4f54-94be-eb1765a45625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86ba7eae-6634-4b00-a9b3-33fe04bd89b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3729d284-4cfa-4eb6-a93e-943441dd3c21",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a748526a-7c9d-4545-90c4-91b2843eb105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82104d3d-94b6-4819-9109-b08b4f635ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fd0592-084f-42d3-bb3f-94062e0c5e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b86fa5-ab9e-4d53-b122-1bfe259ef08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c717ff-d0b5-4b86-bf93-964743ef9b82",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce63a218-fa33-4a67-816b-82b9e5aa9a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edd8518-77b0-4ca6-8981-d791f317006c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23381bc5-3893-4cd5-925f-21de88ce3b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fcb4deb-ebd7-4d40-a955-46eac8dc6a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9433b462-9f60-42b3-a6b5-1cb74cdb6482",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a42a43-01d0-4d1b-9fd5-e0caa3a56b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2164ff-167d-4edf-9f49-742552659fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108bc17c-0301-4d81-8bd9-53b9dd9c012d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc005471-188e-4f0a-80f7-6aad06ac2ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faaaf89-b9df-4874-93bc-2721486ab057",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a5d637-f97b-434c-9a36-77069e6deb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b230cbc6-4979-4599-9940-c51216249927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9620d33-077c-4aef-b79b-673ed7c4d533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4876a0-e8f6-4554-970f-030bb2b8aa40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db13248-343c-412b-8faf-b0d2f62e8d32",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708a3c68-1450-47ab-8791-c2c48be9b06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c7926f-2a34-41ec-9fff-2ca55ac60f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf3fd47-d015-42d8-872a-6d3ef9abde82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73845cf6-660e-40a4-855d-b4524976a200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f62bcfd-84c2-432f-8619-edda5a536dcf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52a737-7f79-459e-81d3-636f8ade99a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01be223a-df4b-41bc-9c2c-5bbe5d5ca6e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db42bec-1873-4276-a4e5-9dd2458ab092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0153ced-3406-4fbc-bf9d-c60262933f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ee2b90-96eb-4b76-b893-478b3e0fa943",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba11d56-a0ce-4863-8bd2-b5e050b7ddac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1d2248-c13d-47b8-99ad-c332661726d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edb2f10-c7f1-4ca1-abec-8b1275263344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2072f1-48cf-4117-8413-c39576f4d570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe588ce5-e578-4335-9ccb-a1c0b4c97e8e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090ea8a5-dbab-48a8-ab11-5408fb6ea5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e80186-40f8-414c-9670-1bb69d670e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aef3c3b-2243-428d-894a-2d97eda4ee61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b49cc67-c21a-4951-9009-7e1280f61326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317bfabb-733c-48dc-8160-f7e8ba79f2a5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e0d87e-c74c-4815-8427-36b351f84d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe4dddc-6221-450c-8d32-7bb57dd89e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6508fc4-965f-4376-b73d-988b388793ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8030d700-cc2f-465e-be71-8d7af7ae8770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8361f419-931c-4639-9332-643a8d0fbf9c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24af4675-a7bc-45c8-a540-765aec561611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c2f0b0-bb95-4cce-ad66-aeca6f32b54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0d4e0a-d65f-432f-88f9-898453fa13a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f817d3f-725a-41ba-a4b6-f15fcbf911ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcfa515-51c4-43e6-8169-bccaa27b4ef9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76b32f1-c954-4bd9-9fac-24eae6b9e64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81900be-3026-4096-9ec7-c3d6f750a4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8784ff40-7ed9-4307-b274-9d7314bf0ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94364010-fa67-4b2f-9d4b-329380448586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298b90eb-10ce-4e22-ba6c-40917b3387c1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6658bb-9fe4-4273-aeb9-9adce4be662b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b173a40a-1fae-4e63-95d3-e9da9d11e6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafa6055-acc5-4f00-9d25-09f20fbdf53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc73e26-851c-46db-beb7-dd405bc213be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2c53cf-6b14-4fd3-81e9-45fa12978a2c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85a1303-7eaf-4b0f-82fe-61c981e42439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebcb615e-2e2e-4edd-8e53-b7636813fedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cdd949-3aa9-422e-8d84-b4c60428f4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dabbe512-2e72-4d21-b0b9-3e1813cc6f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da38f26b-c59b-4440-ab98-f93b5e2fa886",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46a4628-527f-4e87-8f48-8d19a5be2718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f877d173-c5c2-4aee-9902-f68dd8d27c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feea697d-a339-4cf4-95ee-d19d0f1f79a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa4fc5be-5702-497c-a69e-ebaf708e8906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631a2762-d6a4-46cb-8d8c-dd5dc4c79898",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bded6e76-bac2-4e03-90ca-18eb10998c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd983cbc-b664-475b-a51f-8aaee9ddf375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f56d291-cba6-4931-9135-5ef8efffeb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b26ba4-f61a-4375-92ce-44d34491567d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc1903d-4607-4450-b4f1-b14a9a63feac",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334e2fb2-7b34-4296-a1fa-4b05a03044c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322f7679-e997-4ca5-9af2-0420c6f8703d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aab965f-659c-42ce-a037-1a79e4f1acc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3353ab0a-6711-467c-984a-30d35956f722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4234a4-b560-487b-9fb2-c27585a71a37",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db01f2d6-e64e-4f16-86f6-f419edc99c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefcdff4-6cb7-4b01-997b-54489f38ca15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdfe419-389a-4fe6-b930-4eaba9aeb94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d622c97-8f4f-49d6-bf0c-5f0a485e3b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1ed78e-9637-4b9e-8cd6-820d1814910f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd23619-3c3d-4ee6-9e8b-330e7794a576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f92343-71ab-4c41-b520-a28ef7ee1c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96f3b38-df5b-40ce-8de3-3e6113bb7255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a75a90c8-4bfb-40dc-a9ba-2ade8d0dd5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d14bbc-1905-4999-9b5f-bb3aaf1fc2ff",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78c1a83-9ed4-4e4f-ab2f-54ab2d43cb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97896762-a182-4712-be4f-1ae6e69d75fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcad08c-cb94-4d2c-9f90-bda1fdefd368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3db310b2-318c-4421-95b2-7fcef869a2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f4641e-7483-422f-80e9-caef9bb8524c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c11b14-88e1-4293-933d-c13a2c2c7be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3518986d-15e9-4f84-a7ab-d7c5b7c614c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6570407-3c29-442e-9e89-20395bcc3fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "48c45192-fa00-4165-a4af-e5cde5116ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb3047e-17b9-4d1e-b10f-88c11952c83e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f54488f-7bcf-4811-a6b5-27afb4a6ac0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5164a316-52f4-4fcc-a3f5-93a3a03c24dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2dfe77-b5ec-4be0-b213-94272fb59432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdae6725-28ba-4bf0-9b79-1249d20e0c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3dcd5d-c286-4591-9d06-7980da8910cc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab4c6d1-cf25-4dce-9885-ccb9e716bd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a6d28a-9033-4ef0-8340-07715bb9a780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3c4dd6-e45d-4ce3-ad93-6ac01399eca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a53707d-a490-4627-ae9e-669396b1ed25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937136a4-2700-446f-9838-32914e5c2957",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12cf6a4-927c-42d1-a963-701f2c8031ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2050bf2-31ab-4eae-8b0e-d999bc1a9a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5116a44-889a-4aec-96f8-928c71484b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3182df48-0233-4f55-adbb-99929733acfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a818d9a9-d11a-4b8f-9424-968ca2814977",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1161615-74b6-467d-84b4-5b83ea374d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5508579c-5867-46ae-9e64-7322d991abc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8582e217-eca2-4c96-a515-05fd6196de4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b067a97-34d5-4b0b-adc5-ef14498ae41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e049ab-91a1-4ef5-bc8b-49041ebb79ee",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4bda31-b7d9-4324-abef-8f5c5a84d39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5345b0a-b9c7-4603-885f-e9ff35e1e916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8573de9c-ec29-4a15-809c-7ed106fac3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94d0da7a-4966-484c-a28b-6436e78d284a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c75061d-8fd2-4851-91dc-695ff1b93abe",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0167ab-b6f1-4de9-ba9b-d2237304e200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf3849f-226d-4752-8305-5191f5f9a868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e786746-f156-4ec4-931d-625cac0e361e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee47661-3cdb-41a0-9771-5e944621427d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb978f79-af09-497d-b898-74610abd64d1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a79cf0-817b-4a81-ab1a-5f8f26d1342d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecdcc4ea-50a5-48ed-9b85-1933789245ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da68ad43-e419-4383-b3c0-b5773bb828e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a80db019-db7e-4481-9bf8-8c7e4accb8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6cb4db-599e-405b-88c8-41bd21f1e2a9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8843c2a-3a29-4a19-82e3-317bddd868d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73867f0-3a0b-4b05-aab8-3a77c1dd9edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ca3d45-7748-4bbd-9e42-8cd4d5e3bb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d989d4-d168-422e-91cc-9a6861f22647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875b187b-5011-4034-9206-2b54bbd32d59",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351a2c17-5b83-4efc-9a6f-1f1ae7bed3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9745c15-0d00-4c79-b8d2-665002f02b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7838b8c3-e3b6-4b8f-aecd-916290ebb6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf7c775-24e5-4a75-af9a-5a658f6aebb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbd12d7-242d-47dc-8ef2-40b08d73f7a9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f390c6d-ac28-4ed6-b4de-039b65a5f11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904eef38-afde-46b2-9f8b-0eeea26ffbc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7e2b24-5c45-4857-9eb9-eabce6eb73ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0696d27-d028-44dc-a21d-ea4215baeaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e49a1e-9856-40e4-833a-c25f591e30d7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172584f6-26e4-4541-8494-412df9fc3448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79241d5-2a65-4dec-8325-2b8b9d31d1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e63edea-d7c1-4334-a853-0472525d057d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7e2be6-7884-4d5d-bf79-f7af4c4bc191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906fa2f1-2487-4635-a4f8-a148ef288689",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9860e96-5d83-45ee-a34d-922b6d9684b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221fc2ab-0af2-46c5-ba6b-7d60f7ad5b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088a9937-5a87-4553-9b15-a57db9397c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed46d5cc-f8d1-4163-b500-241374ec3d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48450db7-7a05-4472-9e80-ae11ca2ea2cf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0d7d91-20d6-421e-a2e4-b08ebdf2ebbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b666c3d-5319-40ab-8d79-8b2aba50fbf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8969d0-ff4f-4e67-a845-d7736363049e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "38f69960-a961-48ad-8f9f-48069612ed5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf7ae18-5f1d-4e71-8373-d35aa9c5289a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a9b635-d64b-4351-9af9-1926ee363f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de883e14-6ab9-4722-a207-0f348d0e5b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336ae414-70ea-45c2-90b2-6e3d3fe3572b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "33bc215e-8818-47ec-8daa-b253f05e19f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5995bb-f986-47d9-8ed8-af1123d4da0c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b816a5-f79c-4048-9a79-58c4d6c64aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c575701-469b-4566-aa4e-998a8d3e763d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe0202e-8c57-425a-8c3e-37f3efb7de97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7378c15a-9c2d-4c35-930e-d4a0a8cab84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e11291a-9397-4720-a909-9b9d1b33893c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3b3069-5255-4c86-b771-ba83ed14b098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1f826f-47bd-4d56-be10-739292447648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5e8e28-d63d-4fe3-bc19-1667fefda9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dddeffe8-77a5-43e1-a710-45449a5e2fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be46b748-c637-4282-960a-d2fbd9a99f31",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd4e3b1-c440-491e-a355-2ba91cb3c913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068d84bf-4c07-49e8-80c5-86d77063f8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1f53da-c688-4b74-9c2b-90ed9de3568b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7160276c-4437-4ae7-9277-a47f53a17113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50ee1bd-ac70-47ad-a4b4-ec5ce1e7de8c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e234775a-7659-4c15-aac8-a9b7a7bb0d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f7bbfe-2245-49bb-9f0a-0f0cea18a98e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801367ad-c974-4e4e-85be-4fcb5fef7b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d973b5-0682-4281-958b-88884a53f386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aea134-45ea-4c83-8335-e5f77313c947",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b775fe0-2016-4176-a276-2bd6d87b1468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae33c52-b5bd-450e-bf62-7fa0bf3dd8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f992f5ff-7df2-45f4-b063-d3819127ef5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e48ec02-8f80-4bdc-8fae-ffcbc1d61f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fff7cb-abc8-43dd-a9f8-0da45262bb3f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30beb26a-eb21-4daf-84e6-390c93fceb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0111146-dfe0-42ac-9b5b-4553c5efeeb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330058cf-e294-4065-b2b0-762376e3461b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5db29a-1377-444d-8e27-8528ae9a1c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94518b4-24e7-4741-829d-90ef9b052876",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c079ae4b-deea-4681-8845-7a2824543112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe055fe2-4482-44e7-8273-dc466e00931b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e81d4ad-aafb-466d-823f-167edd38efba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15366cf7-fda6-411e-acf2-08803d7b1489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489e238e-ffa2-46af-8e25-9f39e2c544d8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411bc6fd-3cbb-4aad-bb52-52bfb6871669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0f02a4-45fb-41e9-90b5-a9bdb4fd0ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2100ce-bf45-4693-bdc9-8485aa80b464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c638fa-7308-48c7-8113-e3d314488777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269fefb6-67d9-4681-9ce7-e8e459db0c01",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1925c6a-562b-4f4c-870d-42250df68336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7687a9e3-69df-44b8-b2e5-cf6089f8437b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9fe5da-e967-4392-a101-67a53cc597f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1651fe1c-002e-4463-8f75-4877c9e1274f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567cc1a7-65e7-483d-89a0-9720bd8c61b4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a246039d-88b8-4b3d-9a2a-8a8870c3e333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8f188c-2c0b-4119-85bd-ede1bf3f2d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc5fb6f-5095-4785-96c5-abbe9ac0fb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a866a0c-4c5e-4f9f-a6a3-04307c3b690f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56733f91-e50f-4076-ada7-3a42ca26d5e7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235befec-ff4d-4378-87c8-b806f4c9c6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a33a650-8f72-4633-9aa9-fe21e2550936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a66f7a-3c25-4a20-b48b-b7b0a4157bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ba7fcc-04ee-4157-9682-32b38baa8196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160b570e-58d6-4e87-a64b-540956c0f8a5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434b13a4-e6e0-4cea-a5e9-a3f13fe5bf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0de3ecc-cead-4e2a-aff6-cda37c0eb4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26ba706-d78f-4a15-9634-d8f7471f3c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aba10a8-cdec-435c-b3b4-5bff5a44362e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1296dec5-19fb-4530-8fb4-32d1b4692462",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4fb86d-989c-46c4-91a5-8d479ed390a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7c98e6-89f5-45ff-b608-f6749cfb2932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273d1a8c-90b5-4979-b127-498845688813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55f2711b-2cb9-4e90-95bb-6d101da2e035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541741a2-b5ec-4a48-b0fb-831851252d12",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df9f166-91bb-4d9a-ba8a-d28a1ac530a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eabcdc5-b175-467b-ba2c-450f5b84c5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb04d33-2598-40d8-989c-d2b06c1f9458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8de4fa6b-3bc6-4cba-92ca-aae501724c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb314d0-488c-4389-ad0a-124fb21e263d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d21e00-e3c2-415e-9ae5-bf9471d30d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2908b1a0-4ff0-4fbb-adb9-b304ff48806c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e898d6f1-3ec3-4188-995b-5090a742fc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca60e9c7-e018-479f-8979-9dc574a0099c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f2a9e4-a575-4deb-b210-dfcbfc023331",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269f8c77-3851-4abc-ba43-dad787922349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac99307-0a6a-4add-ae77-d7f88681038c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08add06-13f5-4692-ba8b-e7901d9cfaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3308e7cd-c1b7-48c4-b4e4-feea6cc24d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4899a06a-47b8-40a6-9407-620f8b6d78c8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe9d28f-be88-4736-a306-b4c646a64e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad2820d-4a63-484f-866a-d97992d9e4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58147ca-6408-4bd2-8856-83aaa06d727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "810e9ed2-3dda-4d4f-aa6b-debb506d5f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff37af3a-8357-4a19-bc61-b098c82a63f6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d43b05-e0d8-44ce-8810-79499e616be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01715034-ae46-40a6-b443-a55e81a1076c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f957f0e8-fc79-4823-91ff-a0e5164c1557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e180cf5a-8166-4b67-b6b8-05d47b573f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab5edb1-8664-44b5-b393-4e4daf7202a8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ec72d1-d9b6-4236-8b46-1f7515b30387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5efdc5-833f-464e-ab54-e3ee05f8b82a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a520cfa-8b19-47ac-bdaa-86cf13bd9ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29bfd196-ed7b-4768-b14e-64b165e15fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b624ad14-9c5c-419e-8b21-f389c11f5132",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f529e30b-58cc-42ca-9e47-77efeaefc930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1d2ef3-e206-4a62-96d2-cdc0dafcbbd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c98ecd-733a-4108-b39b-2e6046337e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4136d1-a831-4dd5-aeac-2c79806bbc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176b64cf-5c9f-440c-808a-fa091343eeb2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ac13f8-d553-41bf-8f12-a5a4856fa078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c95c4f-255d-43b6-a1e6-8eac70202483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8fd145-9ef6-470d-ae6d-cf499a648d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b26dcc98-bdf6-454f-82cd-ea06bda7c48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e8f397-d051-4614-8a93-996721ceba1a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2870f4c-586e-4605-bc35-5629ce027c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c215ffa5-7858-42a2-a918-552d014aa72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebc624d-a4d5-4f70-815a-645de854e878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b21d578d-a664-4f40-8015-2cb780b79bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5783ff-4f23-49b8-8fc5-9260bcd70ba7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308414e3-8095-4faa-8331-bef744d13bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fce128-5118-4e7f-926c-65e7f2afd757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d287c8-95d7-482b-a0bb-69547d216a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e09fe744-09ff-491e-88e3-354ee1459fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0756139-cef0-4b1a-87f8-03202c28c48b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8339b25-8983-4e79-b66b-e798a70fcd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a52657-0ffc-4d50-83cc-2760826dc512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9905b2d0-5715-4abe-936f-1f0b970e921b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e35a58-0513-4a99-b772-1cf7259d1f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1222eca-918d-4872-acae-258174e34b04",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038edc3c-7b1b-4ab8-85eb-08aa683a5e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af80803-4e5b-4f3a-a317-c2db71091b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e1eb12-3188-4023-8086-4f54bf7c0115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d74aba8f-c91e-4727-9f20-f9bf271ea510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e852cc6d-3eed-47ae-8c31-059f15196933",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9d8c4a-c64f-4d6b-aef4-1d4f6a9e973e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204bd711-2673-455c-bce5-6f410b4a2bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ee0984-925e-451e-88d9-f46af1f89097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3945c16b-a968-4879-a900-afc07128b3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd6a640-791a-428b-8795-14ff29dd2e28",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595a0471-daeb-4589-9526-51011f4c1a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561c7d4a-361b-4a77-afb8-d49893bd244c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00d9677-5fe8-45b5-9488-cde43cb0d25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c8d306-07ee-4ed7-b26d-23426bc28bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9838dfc-e284-45d7-a9b4-48dcede4a590",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9f6176-5263-4505-93d6-fbda7e3deb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514bf8c9-2072-4852-9605-bc9b806fc375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d72ae2-e1aa-4e15-85b5-dc67de208551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed85ace-98bd-43da-bad3-b959876f557c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88d29fb-f2f5-4633-8b3e-c62b70cc8640",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d842c08a-e23f-48a4-bb85-d703121b8779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00e891d-23e3-4aa9-ac8d-8f27803d2064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0ade15-b2f1-4757-a12c-93d599ef115b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85a62367-35ac-43b4-8d30-dd0a697e1ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6b5927-a03b-4391-a779-c0e089765dad",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b4f867-947d-467f-8ad8-58ccd4decfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83a463b-033e-4c3c-8a7c-0fc182ef718d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582e8851-02be-424e-8763-7658d80c2b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3e0db1-7a1a-4f2e-b8b4-832c931e6f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc04c58-9dbd-4e32-82b5-bad7b3a24ff8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4d4fc9-c38c-4de2-81ff-e02b23255478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e87f489-615d-4440-a9f5-04675959d678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bb50dd-10c5-4859-949b-0d3beca43a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "97efcbeb-f28d-4e6f-a436-645542f2c40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99877d1f-4038-4a0b-99c3-8497a62c5be5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70db0b7-0463-44ad-b0e8-1bb93b2e88ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1894c2e8-8cae-4bf1-9f52-5d5204e8dae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44820e4-427a-454a-a245-256300fed642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9d7759-513e-48cf-86e9-85a14d0ea3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a04589c-4480-4c78-915e-423f04b436ce",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c0c654-8f1a-472f-9e13-978b424fdd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d9deb4-a5a2-43f4-a3a9-df4c762dac24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23be9ba-6f63-45aa-8bbf-ce6ecbb6ad51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a662eba-3296-4d2b-ad2a-b7e3304ac9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fb818f-fc0d-47e8-85e2-bedc427753f5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f141067-509e-4592-a67a-52b217337332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b14156-a67a-41ee-9fa0-cb3a15efa40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b8c050-6886-4986-b3cf-5e90ee27070b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6045ec40-0a9c-4660-a0a6-ead3ecbbe77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8175cbb-abe6-4bdf-8ceb-7cb6e019b012",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4142505a-ee5d-416f-9a34-cf6a65d3bcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "28cc2026-3a46-4cc3-a3d9-7454519b898b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcb9c9b-a0f2-43fc-9e0d-d3ed10aaf716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "db5582b1-1127-4936-a2a1-19de718812bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "88e6abbb-57e4-44cf-80dc-3964b9ec544c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "435e4d39-39cf-4a34-a198-0d7ba0fdc9d6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ce3e87-541a-4c8b-a463-02a7b629b561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53de76bb-bc08-4df2-9db5-cf231b1033e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b518824f-12ce-4951-ba0b-6739c9d72cda",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f2e9c9f-c5f3-46c5-bcc8-21016c4abe4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fce48fb-9a62-461a-b0a8-2a2406c8efb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39616a5d-1118-4ad3-a758-dc0f11a2ad8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90470b95-3ad0-4d46-8a8e-57f7df448969",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db58dcd1-2365-477d-81b6-a361e873c24a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0733cb05-6a0e-4523-a00b-285f4bbec3a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e37cfd6-bf64-4c3c-8073-d860273d1792"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c600faea-2c1a-48fa-95ab-85fb14e6bbad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8121499-6bb4-46f4-a38b-623910c8a448"
                }
              }
            ]
          },
          {
            "id": "22d49699-fb61-494b-a17a-864390dc4f06",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e614c71-0138-4246-8826-604dffecea6b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b7d659b-4218-4e99-b8e9-133adae51abc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70efbc83-2eae-4535-88b8-36cd470493cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf8e725d-374c-4653-9705-9d5112cc8188",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "301950c9-e26d-49a0-a280-1a3d8c4a537f"
                    }
                  }
                ]
              },
              {
                "id": "d3d87cff-92aa-40c8-98b5-cb386ecb93e9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da0e392b-e444-4676-858f-8881474864bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db8d37d7-0a25-47a9-95b5-d8b67f6cbfa7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94b96d7b-a65b-465c-9a9a-f270747919e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d91aac4-5155-457a-979a-7cfb336bdaab"
                    }
                  }
                ]
              },
              {
                "id": "2b83c1cc-fc3b-4062-b17e-72a0eca469a0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c30bb8e1-05e1-4251-a40e-cfc2dbf9a10f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81c9374a-3425-4f7b-94b4-89fb9d0fc1d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f818c1a-68e3-4555-b789-b4711987ebff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b09f067f-283d-40f4-8bad-7c39f128e68a"
                    }
                  }
                ]
              },
              {
                "id": "119268ff-4e22-497b-9637-de04140008eb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4f38311-9107-41b7-91a7-5b83cae1e53c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d288fe65-ebdb-4551-8445-1c52a43be0eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "522a4806-66f9-465d-828a-679a5c283fc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "74df59a4-2d52-4707-b28b-430b70ac27fa"
                    }
                  }
                ]
              },
              {
                "id": "3c3346f1-3ddd-44b8-ac92-a8ebcca3204a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e93e0ebd-65bc-400a-a1c2-07388db104d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56b1aa37-6dff-46c7-9b87-fd0c4356df73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3b82277-68f8-4a7e-801a-5e7b35676af0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "956d1598-82e6-4298-a92c-1ab8d9972679"
                    }
                  }
                ]
              },
              {
                "id": "6e6ef68c-f52c-45de-a692-e82bbb7a5080",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ece66fb-721a-4995-801a-46ea86adea43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ecc768c-4efb-4833-9022-da992462fdeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e02d2af1-bfc0-4b83-8e32-0f255fe888ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a9678b9-5621-4965-a8f6-00db6ab0aa76"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81b6b87b-82fb-46d4-beb4-84137e0e5cf6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55503ed7-1de7-47c2-a5bc-bc4767bc8c76"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1b2220d-4ff8-41c0-a696-3e51a17eeffa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc03602d-0776-4698-93cb-ddb8c2fddc0a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f03d461-3754-490d-a641-273f055902b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "82f466c7-30df-406f-99d4-c336f15c035c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85253d31-82d4-48e7-8918-92c63332c8ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e07de5a2-0e09-47af-b87b-320ac930c9ee"
            }
          }
        ]
      },
      {
        "id": "b9702ff0-df25-4d0e-bdcb-ac96648eb818",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "baa70086-beaa-4b3a-8b25-2364d0296bda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e90da4c-7c0e-47e7-9ec6-8c33c505f0cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1360f542-3c42-42a5-a93c-a28dde54b51d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78d413f-d14b-4d06-a028-520f9b12262d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6606beba-88b1-40d0-af0a-2ed4e4bf9e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a4b705-2d05-497a-9546-773c23049590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "62638b47-1660-4b01-ad36-0004f063949c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c263e5d-64bf-4825-a574-aabf23d0ead4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11c4694-f8a2-4e44-a620-4a0bc560b81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceccc5d3-fd9d-4536-bf85-9c5f9ff56fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086c7118-de6d-4cd2-902e-121ee4e3d5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dcb57cb-0800-4ecf-ae84-dd7a33d97f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a4452c-08e4-4cd7-aa26-a7e023fcf022",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd605fed-7d64-4386-b85f-aa181fac8ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba5c3ea-c8a6-4966-96f2-e5c66de79247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cfd820-6da8-4970-aa7e-a137b8e3b284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "569ed898-6d73-40fb-8c45-e409f94eee21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f046d01-d8eb-47cc-bb66-01c3f76a2b8f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e30b38f-e056-4466-92ac-d166faca7995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a61098-ce3b-422c-a210-dc3d042a70f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a92de4-c1d3-449f-8607-c4dc0ad65703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8127b3c-1631-45fe-ad23-7aa6e1031a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2647c77f-a895-4390-9444-2cb4e0dd00e9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c90fca-9cf0-4d4e-914c-0b574151ea91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bbb2043-1ec7-4d40-99b2-601ae279c052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f440f93-8b37-4679-85ad-76d68838329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c91c04a5-4248-4ec9-ac46-767028d5952f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebde918-491a-4e0f-b25c-878ff64f5a76",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ecdc7d-c782-46f4-9419-acc121a0cc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591bdc7c-657e-4a8f-bef3-26e5275acb13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24afa01d-7532-4631-afbb-a40e2f9b301f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24611db8-f683-479b-827f-89cf2f0f6018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0df1ff6-9ce8-4fdb-9c27-0fcc868d68d2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f3581b-7bb0-4a85-9438-e55c7f539d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b296184-d65c-4ddd-a146-981c661a5dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aa7ff4-1d9d-479b-beae-43696caf0ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "073ca0df-145b-4389-8dcf-2d994ac476c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6166c8d9-675e-4e3c-9bda-b5e046636de1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f82195d-6a2e-411d-8370-9a5f516d1d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021255a3-83d4-4b2c-b480-6a12b45777de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f05d60-4fb6-48a4-bb58-230e388ad13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7435a8d-485b-48ed-983c-3d194d028956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285c16d9-50df-4baa-8f21-ba98a39a769d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15170941-5d72-487b-b58a-0acc41973e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93833974-729b-4fdb-b37f-70c6fdffce8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a82651-8d49-4957-abe4-8748ef6e15e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "619a830a-abe0-4321-90df-739ca85ae061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae40b4fe-3f9b-44e0-ba03-dfaf23a0c593",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96aa6a2d-80cb-42f6-9fa0-0749b087d9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c2f9ca-fe30-4b6d-a5a5-23b3b8e1b96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c540bb-cd09-44b2-8907-206aa500a759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "daa5a8a1-6cb9-45f7-86d4-425d992f52b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd15d59-d0b5-4464-9ec4-d8562721178e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee53ac0-05ec-4890-b038-19147c780888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af28905-31b9-4166-98ca-92b42416da08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aa6176-ce0e-4569-8570-5db4a8068765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6b2616-51bd-4a05-ab73-6bdebf27926b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f13212-f14a-496b-b2bf-dd366f96bbf2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198ee8b2-8626-4e33-a5ec-dcce1ac46d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10909ba-90ca-4d47-9040-7396d52b7f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8baa426c-97cf-4ffc-a281-fcc34d88524f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1a0af5-c4fa-41b9-87eb-11807704caa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eda227a-dee3-4424-bfda-151c38d2fdb0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e401aa3-8a7d-4dc4-8f8c-481dd223f4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfad5380-3d45-482f-8f95-b36467dc5312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a4c27d-553c-4abf-a4d1-f9bdca85ef49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd731c3-ffa6-435c-97db-c8473f9d97c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfbc29b-2378-439d-91a3-8af5be62f97b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224e1c55-159f-423e-b792-e30a52a36728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1ef74c-d567-4f07-99df-2395f7bee9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa9f6b4-cdd0-4360-adb2-319ea8db2545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2eb25cf-4850-405f-a23d-c16220991c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a0963f-2f4e-4488-83ac-a71c252d6ca7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f93a12-f925-443a-a787-822197dc43a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb85e682-543a-4b01-a93f-0b00aec35dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6471b27f-6245-4a65-9fd5-b157c99c2e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "77872b83-c38c-49a7-b5ad-4bad50d6472d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa5de5c-6995-4795-b2e6-01fbe007f7fd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d34627-0dc5-4359-b102-607576e43c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fecc75d4-23f0-4793-bf03-d1b2ada896e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d846b49e-1935-4a23-b4bb-83ca2b16da56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "559ba9dd-abd5-49cf-a21a-77dd15227d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f75b7d8-bad1-412d-8cdf-d0459bf766e5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8df9961-cfaf-4e3c-845f-0f0df422eea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30db0176-abd6-4d28-b4f0-0a9640c1bf5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf7f547-016e-496e-991c-5e9b40ff6e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "87286ec4-5bfb-4f28-a95a-06e6250741cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afaa242-5aca-47eb-8240-954e7a380c2f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5724a2d-c0e0-4b0d-83fc-c569ecb23e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b823ebda-ab1d-4c0b-9e1d-c460507d8aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18c7810-efd3-407b-94f1-dbdf35365312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0260ca3-b3b1-40af-996d-38acb6a3cd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f7cd6b-3350-49a4-a08e-32b0e62beb7e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b7b479-e9db-4032-999a-eb6ca6f19d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a236ef6e-71b9-4e36-b78c-aec2b62d63ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f11deb-2c87-4a4e-8a05-99913dd3cf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c7a497-77e4-4e51-a7be-c484c10ccb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861eb34d-8bde-4829-aea3-f5ed086442e3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e877141e-085f-4da9-af52-1b419a8fb627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc459fa-afee-40cd-b975-1fc03d2a8305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aba2482-bda0-4bfd-913e-59b88b54f235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0481e2-b395-46bd-a383-dfb760495fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2669a190-1faf-48d7-8443-e5295dfda1b3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ece1800-6637-4077-84ca-308d100a30f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39577d4a-55ec-4732-aaeb-c61bfa8f7b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea902a3e-83fc-407b-a34e-bc249a186031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0cc465-c7c0-41ca-829d-f4d600e544fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7efd59-fb0c-4c38-b8a8-64d25073b94f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9575b45f-f7b1-4ae4-9dbe-e483b9bfb8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1136852f-4e96-4475-976f-3cd92f20cff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a84834d-5290-4956-bec2-7e6d579e8c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a51f066-cd60-4b83-b4bd-12ef3aefded6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fc9b68-395e-4dae-a23e-693e66cef08f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbe7b4b-0275-4bb4-a82c-90bb2e3275cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d444f6c7-16eb-4cf0-8a75-14aeabb55296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d88819-9227-43e2-b2f8-f25a73a4ff9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e4b7eb-11de-423d-8c53-789b08ab1cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b23352f-d7ff-48f0-8c8d-0139c4e530ab",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32182a56-0266-46ce-ac9f-caf88364d6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb95e1a-ec44-480c-9931-6ab553f64162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9416b59-ad58-43f2-aecb-3aa873c632a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca52b7b9-cc32-47f0-a4b2-f856d6b56a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b834ff-f829-4a65-9440-d34c55d32aeb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119b7f75-b6fa-4b3a-a432-f35350c8d1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632212d3-3996-43d7-909b-1b7216da92da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12923108-7894-43df-bbea-1ea69bcfa90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "611bc49b-92a0-4007-a831-872fe419cc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128938da-a223-49c7-86fc-c03f949b64cd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00995cfb-1848-484c-a247-d291b3645ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf5255b-68b7-46d7-afce-c38c681a6993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f851fdd4-dcd6-409c-a27f-cd572db9dae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5efe2f9-9e6b-49ca-8e3c-b9761c463313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7913deec-1e6e-4e1b-b00c-3a4e21f124a7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca93dba1-63d9-4fc2-8f37-b68aad706356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefc7d94-c15a-4c77-8389-6c52ce8a171d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0235aa43-af20-42d2-871d-c0bd29301f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80a51315-3ff9-4435-94dd-97e712215448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28def77-ec4f-4181-9377-d8ba3e516671",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48474902-2cb3-415b-a30d-67920eb6775b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40480e77-d645-4dc8-b4fd-6132d3906ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efae18a9-39a8-469a-bd61-56fbdf961a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64a8e681-f52b-4c11-83f6-3e30ea712f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2face785-d7ac-4834-903e-3d52d552825d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c84fec-7350-4629-b930-87162f247a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72f137d-1bbb-4525-a156-fc12f4870f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a700efa-40a5-4947-8341-30c388afdbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c6df2b-81e4-4cdd-81a7-3e8ec203a8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f966c3f6-c4e8-47e5-96cf-a578c614ab31",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b6aaea-dbee-4fec-9873-ed70a4f8a587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46afe70-3abe-4c49-b909-4150bf5d2fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f843c9-fb0b-4282-9499-74019f110a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf26b8c-3bea-484d-8f02-453637818b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20b7b01-362d-4672-b2ea-cbce6f051a45",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa667a51-b263-49d6-8369-8325a809e4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21878c36-c031-428d-bcd6-33a9ebcee8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d13fe2-db46-4fbe-8c64-1e308bc95655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67fccccc-7150-4ec7-9ae3-c7290d73bc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b66945f-a75b-4de7-be38-d800b31be6fc",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd860f3-057f-40a2-ac16-50615dbd75fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded12f2f-392e-4b18-813c-29d1a3c40216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c162037-1cdd-405b-a223-82e784233bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d5fa87-07d3-4d07-b8af-d10648c4a57f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a0fbc27-df3d-4d18-9dc2-2465da6c30b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d258f85-c1a3-4547-a63e-b8e7960ef5e0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4284275-e8ba-49eb-8f76-02a636e63567",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "82d4b48e-72ea-41c9-bb48-f6e98add65f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb0a20c-6f4b-498d-9541-f4f8235d09eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abfe3932-faac-4e19-acee-abb5a52132f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ef16e93-2801-49c0-a99e-a97fe30acdfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f8846e3-3e4e-43ec-a4f3-3def5c9de2bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a0de72a-decb-4678-b844-2500a5698846",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d044c791-458a-457e-b6b0-8997fa464e00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae8dadfe-0a26-4678-b19e-7f6be080710c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "191da776-f7f6-4dc6-8eaa-d21dbad831a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db6cd27e-0cc4-4754-9b85-a43f20bfea25",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0145b940-4737-48a8-94e1-fab7f236421d"
            }
          }
        ]
      },
      {
        "id": "ea5b1682-0276-4600-9477-f623158cdbc6",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5370737a-697d-49b5-8443-dac4f785a22c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c422c3f8-1916-42fb-b516-44066d12445e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c41dc73d-7e09-422b-afa5-5ad613f2bd59",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f356214-813e-49b4-a215-91e9474f0c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df093d85-9f2b-4b2f-a077-0e0dc6334e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c02fa5-8c06-4b94-a309-9dc151420358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e079ed2-3b7a-4f0f-bbde-e8fa762b8913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e40883a-822f-4459-9a33-3eb5b72b538d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12e7fce-ff82-4fa7-b313-3c86bc34492b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbcbdc3-ea04-4f31-a594-082c63fbb1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce457c9c-77af-4ec3-87db-199fe3e0f515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "09f5f62b-c02b-4424-9281-8aad2b6a81ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a531d4ad-387f-41b0-b705-acd34e317fce",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13a70d2-6167-45af-9550-d8fbde334732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b090128-58b9-4f5c-a991-0cf2340e8be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e62ec2-267f-4c7a-acc0-ba5e42df93d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a18df9d-23da-472d-970d-dcf8db1ea311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da39ba1b-1a25-4087-bec3-e8a79c718ef8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93524945-87b0-41a0-8884-18ecbbb978d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fd8e9b-1c50-4506-bd4c-68348d229402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83452dd-984f-4655-9da5-f6c0781dcb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d046d897-46c1-4fbd-b75d-3ab7ecc6d007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535be70b-1618-4ecf-b2eb-5bdc6518fda7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267697eb-37b5-4c8a-8d73-c26904ae74dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cdcc5f0-2e10-4ec5-a59f-057698ba0876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2e1f97-c248-496b-801a-1a8bae377bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80199e97-39bb-477a-846b-5e4c8f65d589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbba1a3b-c2ee-4162-a0a7-cb04b5ae294b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f472c2f-b1f3-4268-b92c-eb5af8e166b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf12e26-b1c7-4c76-a81a-29282c7a3e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e6e253-6c9e-4bdc-a0a2-b8ca0c4c81f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba24739c-8d69-43f5-ab34-2be7fb0256ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4bbe76-c39a-4f2d-b3eb-f033801fd035",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae0939e-d6b8-4365-ab03-f2ea3c33f265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2563d755-5ea6-4285-86cf-b707415a8810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7938302-1734-435a-a5c5-41009cd0ec60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d70bb6f4-8f1d-44a5-853c-68b4c98d289a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727098ba-d6a0-4410-8207-3b35a25a4c54",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0e063a-3709-41ad-8063-d8244093f78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf0bc72-b1d3-4a85-9a4a-fa51d8c55f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e7f1a1-db5a-48e2-9799-9af426bcf4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "904f4464-b6f6-4c07-97e0-d8b4e5a03170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6280a250-551d-4d17-b9c3-ef6e3eb9914d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75404c8e-6926-445f-9ab9-fdb1fa1a8f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d49ef66-be8e-4b53-be8f-600cc08b2ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7129726-a26b-4fa5-bf65-dec77d4e31a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72312dbd-434a-49ae-8872-642e68a29b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bde3b0a-a1f1-46ee-9faf-f6417d619e7c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4835bd4d-50d3-4487-bbd3-5b9a4a7065ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5450807-405c-43f5-be73-c38c97e43cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3962dc76-f044-4330-b785-a5816d92e8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8724a519-6b48-4046-a43b-ac7214f383df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126ccc33-6c24-4ea0-84bd-9d6e3ece1340",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fbedd1-8b3b-46a2-966c-bc841049dc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5159972-dcc1-4f37-b1a2-3964564b2cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82191442-eb20-4512-9579-e24d060e2377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a4670d6a-ff23-4684-9bf4-005091ac52cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ccae17-9edb-45a5-96d3-bf1fcb3f50c9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77ab7b9-7811-4bb1-8c44-1adfaa5f065d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfbb301-d42f-4058-afdc-1a1600d4a65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226df003-1c83-4413-bf32-c480dcd5098e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59d75deb-44e4-44d1-a089-b7482aef968e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8347ce0b-97a7-4803-8782-844e02657088",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb826be-53ca-4b3b-be57-07a387acb3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e353ae-273a-44b9-8c28-fcae9705bf2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d7dd9a-6193-4407-92b6-d0efe0df5083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa422b24-8793-4480-9120-76ad181b1809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9574ae-484e-4c31-90fc-fe1aa41c2d8f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0de6e2-c85c-456d-98ad-d913a25a5d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451160cd-61d4-4b33-bb05-0e8bfbfd8727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe81915-60a6-4f10-9936-dd0fd57b86a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "68f6f519-915a-4006-b485-72e1382e0446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7dc8d2-7246-4cb3-962c-7f2f0e373d8b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98f9bb8-518d-49cb-bf8a-2455801a4f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d594ae06-3206-4e92-9508-ba7c15c02120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80604ce2-1d81-4d5b-9f5d-5edf1c56b028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a37f7501-ee99-4fb3-baba-5db5545c7c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b4ad69-9f9c-4e27-8f93-6e7751bd9dd1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909698aa-89bc-4d90-9297-7c99aa2c2a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8bd1cf-9a5a-4b4d-a36f-8a3aa5fd345c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07630640-37e7-48b3-a89d-f98f593723f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4faec4-5de1-4e90-a90e-707a63b5e30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30d7630-77ff-4809-9eb0-50f2323531c8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8fde70-c1b4-4e52-a820-ea3a723cc634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1303ea5a-c9e4-4c4a-9f96-56b40df6b198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18685371-0e45-4223-a156-f01902b156c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f09578e0-1a45-4491-a921-30e3610e6b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e47ab4a-5eb2-4552-8a31-fc08df5438c4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41674e56-dbe4-4141-8ecf-bc64faab46d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d50307-c15c-4f93-9a19-d1c23604a51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e316244-122f-4f5d-8418-edb63039700d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd9721d-90ab-4da7-a0f7-f93f818e5ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca493a0-acd1-43b2-87b0-7cb4b2e60729",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ea0c8a-0a49-47da-becf-24c9350f0e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5efdb85-1ab8-47e0-b0a2-389f8c0eb572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42c0d32-f9e2-4bca-90a9-c7af85399e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f4d8db-b9f6-409d-86e4-3c4a0a9f6548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d2d3a9-1691-4f98-ac67-c40b8214b249",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1d1479-3cdc-48c5-9ec9-39fd0ccc0c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d4b945-9a29-4a2b-a6b2-5bd08d57bf74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf7cac3-f56a-4717-9c33-589c9cf7c9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84920a73-a739-40e3-8374-a98b740ba5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f28240c-2673-4a21-8289-85bb7230460c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7818515f-b295-47ec-926d-c31bd33de701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdcfede-a471-409b-a372-4df6d1bda274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc24d31-4b47-42e8-b872-eee7fdcb0887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8123673-1b7e-4c2c-a68b-ad02c9fd58ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb90c76-720b-432e-b105-db114fa165d7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513ca7ce-d145-417c-96fc-1c87a0f75ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25f862b-bbc0-43b7-929a-f57e2153e4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e943e8-a9e0-4595-84cf-4a3eb0604966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db2f2ea4-425e-4232-b1cc-ec296781ba5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66aba67b-9491-4aae-acaa-45a3a3a2e9b3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a539f3e-1b48-4a8e-8141-e03c4fa7bbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdba0759-4370-4155-a763-979d73ef94fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbeb686-3cd2-4ff0-bdde-b094f7ef1404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "890ec6fe-d77d-4c48-97c3-3cb62347fa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83639292-d5db-4e3b-9325-2d2d2d06112d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cbf007-61ea-4cf0-8bb2-24e111a43d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0f1425-154d-46ef-aa9e-411c8f0d656b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03141d2-2840-4bbc-9b00-631a180deb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d269394-ef37-4437-b771-d42221882df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5a5727-c970-4746-90af-6c142a517083",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1e13d7-0cce-47ed-87e5-e6259a809da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8603d3-3008-4e8b-a4a8-c6c104a2889f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3b107d-ffaf-40ef-98d4-1b3e4da0af14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5b2be8-95f3-4339-b7a8-880dad119bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd0b48d-e533-41eb-a983-aa0fded6ba29",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5c328b-2950-4235-9c37-af86622fb1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b20c8a-2710-4ac9-874d-c03fcc761cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e48af58-c9ab-42b4-b389-e53e9a112082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f530733-0a07-48d1-8231-485fb16984d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35226747-8845-4d78-a6a3-bec15be9f321",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbd8fc9-eeec-40d0-b3d0-f3d8efb4412d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44564e4-389e-49b2-a1b3-f16154c6ae77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40803b2-ffeb-4551-86fb-4d932ecd54b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23acc1fc-c809-4c3c-8770-6a85c69358fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d70cdd5-8b73-43e9-a89d-162e16db6c8a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96adb3e-11ee-40cd-9cb0-8aa31a2c0b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77110516-99d7-42b5-9110-485a647aa254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86174c05-e48e-4e34-ad38-926b1dc9c50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1dd141-6a6e-49d3-b960-f210aae3296f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0c3cef-25a0-4699-b4ff-2fb5ffc1e816",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346a585a-1215-4ace-a2a2-f41c21af6d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd13377-cf42-4072-a60e-632b57af5c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171712fd-98e4-4038-8835-59a911d54042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62a7aa54-429c-4f3b-b976-b0fbf13f051f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142731a5-48e8-40b0-a23a-a3851130a37f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6114a237-91ad-4c95-a981-74c95c7ef226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26407a2a-5ddf-46ac-acd9-e8c39f5fef3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa22c50-47cc-470e-8a9b-a6a4880ca05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b38d9bc-1c7d-4314-9796-04f836cdf033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f965fd64-e0b4-4c3f-adb7-64501673c1d1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610e70c3-fb48-40fc-bfc8-2c35b6fe4d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0d8ecf-57b3-44af-aa24-0a978f96e446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0855c86-1957-4ba5-b0d6-e58ffdc8440a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eee979a9-9ab0-4b02-9a62-bb2173451841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcc4ada-3971-4bad-80df-b83b6496877d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4ab91e-6205-4e2e-af4c-5df899fbaaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce9d779-2246-455b-8f39-184d2023ab09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a20c902-f084-47d1-8283-9b11c8c6643e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c33afd94-39a6-4b49-841e-2f575fb04d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07032895-6981-4dcc-a589-b1dcf935c80b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b419020-8473-486e-b624-3487bfd2456e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33086c5b-71eb-4fd7-8015-56c515e8a222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade1a6cb-f5f2-497b-9808-b89e071ae026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9c8c83-9cce-4e96-87cd-6ad159c81d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea6e8e0-d941-46f2-97e2-e0b73311e5da",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a69f37a-72e7-484a-8a46-2f267df0a07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c402ba-0e65-4409-af47-6d3f41d6b884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3f550f-b489-4eab-acf4-f6beeb360a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd9799b-b774-4fc5-afb1-1e131bdba359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4ba442-7a01-4862-9f55-883e0f4d5f6a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc1d271-254f-4701-b406-4fe5f0928d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333b6d33-8957-43cd-b4bf-83dee8645fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c18744-81e1-41b4-b84b-4be5e6456b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "560a9118-dc33-4554-b678-b565fc2bc9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715819a8-7c87-4f38-97b6-ed13105c955a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dd5cc1-6781-4f73-9dae-a8724847a6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06b7b74-2f28-4a73-932c-19908985415c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec168231-e1e5-43bb-b789-28cecbc4c59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8b059a-877f-4fac-98f5-38b28d5b14a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f36663-803c-4855-b400-02f68c3067a9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b18544-aca1-4a0b-913b-f55ddd899649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0699d2e3-95f4-49cf-9012-836b5881d5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555c2a9a-f5ee-4872-8715-466b9cdad3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bcc1e36-bb79-4f72-adaa-d3f2322adbf9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db866f40-330e-47c8-86f1-d4610ac6b12c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af4159d5-a036-41b1-bc31-23c34c548aec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e5b035-409d-4259-8c80-8a2607ce76a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cd320040-5430-4a22-8877-dfb4b4027c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3c9ad5-aec1-4e94-92f5-8695fab697dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ff13ded-8f08-4a0b-b8c7-92ea0e0463c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91f795a9-f73c-46e8-89a8-4b3eb507225f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79a198cb-04a7-4391-bdd9-6e386c8c5ea3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79af7a74-d970-494d-a5e9-51bff8cb2b68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca93c7da-58fe-471b-9565-75db770d84f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b12eeb3f-b2f0-4876-a937-6f3edc439f84",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4accac9-0b23-4f3a-91ea-c3f8fa06fb18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15653583-0d61-46cc-bea2-9d73bff9315b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dd79dce-5a7f-47ff-a739-69a236fd4e1a"
            }
          }
        ]
      },
      {
        "id": "21090c34-fda9-43fb-858b-ed07966f2f74",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4cc8332b-4a35-4271-8abe-db9c9be67ddb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ac978e8-3dc6-4506-b64a-f365683f3c64",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bfa64232-520f-467b-afd8-0831f4b13ead",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7532e4dd-edf4-4457-ac59-bb6bcd676f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bc23c5-8884-4ee1-9e42-4668b835ed22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8e98ec-5e88-4452-9d98-d417ec8ffe70",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf7ab0a-f3b8-4441-b053-85075c8fc057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d22de7-edc4-4fd4-ae5d-0c74f3842e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a660f378-1f5a-439f-8aa7-77507b953fdd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc30e41b-7505-4a40-b6a1-2c3302a65188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aeb9e7f-b63d-4bca-b88d-eaff102d7c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413b5395-c797-4056-a6f3-88595bc964ce",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48808f2e-d6cd-4b51-acb4-7040de8dcb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b3e0d0-98bc-44c1-b201-b9eeecfb0021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae759b93-0d82-4d52-8d6c-3084066dc605",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5bf2db-a746-4c1c-83a4-ac32475da7fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c71c62-873c-4afd-bfa2-59ab49534532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b0e1d1-d6ec-4233-9a14-831e72b95155",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651f1414-c529-414e-a859-ac7d05b4d5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f88adb-bd90-45af-aa5c-0246a76e4c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ded1761-4a8a-45ed-a9bd-2e046ab22d08",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3b7823-1ff5-4f85-9c42-fa3e0a7ef9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d675cda-e30d-43a9-ace2-44fe18fd6201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f78256-22a1-4d63-abf2-86de3f0b5f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c73cc7-a733-4e1c-8353-0296deb81403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5977c1-9a41-4706-a405-c15ac9e0c331",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d63fa0-f18c-4fed-9e88-0662fe53b302",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deba3482-8576-487f-949f-a740f075b811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0420ae-a0f2-45e4-95a6-a12cbd8fe03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484db5c9-a0b2-4117-8e8c-e3d3898a6ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221986b1-f4d7-46ff-b78c-23dcbedb55f2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e500cb41-2c22-4d12-8faa-e7e168b0abef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278d6672-5024-4c7e-94be-c221e83389e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643c1b79-0afe-4eb3-ba7d-3163054835c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e24f86-9a7d-43d0-91d3-b10cb6114f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49924c13-1efc-40a1-9edb-7fdb9159324c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31d7fb9-cd4b-4ce8-b64b-a6507444034b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a06186-0120-4787-ac38-2378d1e599ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d220f4-0dde-4db8-92fa-eb9e35d6400a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ea053f-3387-4be9-b2b5-cf9d561da2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2420f9-b07d-47bf-88c6-cc5d2e6cdd3e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b554421-6ce3-4819-83ec-bb5805480fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edda7c59-c53c-4c61-a67a-eda48534ab70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7d33d1-8455-40d8-aeb1-78eaa13ef0b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade532da-e05d-4839-8e6e-a9f35c015bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099f1242-ec24-4c40-b5a7-c70d2b4a16d9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222cfc25-cb1e-42bc-b292-0eafcfc0cfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1575aae4-6198-4709-a355-e64e4a4cfe11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81d9d37-bc36-4eb2-b25c-bf4b109b14ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b4c956-720e-4d99-bfea-9734f5499a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67dbe73-aaec-44fd-88dc-9510a24c9413",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06822ea4-dba3-4bc4-bf5f-1a097972c3f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115deaf3-5717-4025-b03e-f373474eae7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e216e8-8e85-4591-af6f-1ebf215da726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa48663c-7f67-496f-a2cf-717067c5a321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a810a102-fc85-4675-9a83-772e30b4992c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74b2ba7-bee9-4cea-946f-6d0bf3ef6100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93b5c3f2-d3c2-417b-ab5f-412dba24d025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce0880c-cbe9-40cc-9c85-4cf800399a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c314289-76e1-4e0d-a1e6-c8b1e9c645c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad7fef8-c43d-454b-bcb9-c4e0da1de21c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4786a870-7b16-48a7-8a40-15636dfce3f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cec9dea0-462e-4329-98ff-d21ff866a436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d963ca16-c576-42fb-b97d-1cc85d28a509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f16449-6c66-42b6-bde8-8f8bb1250d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41e0166-3534-4598-b1a8-f12b456e4584",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65eb7a7-0880-4587-b101-61bbe4743657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0eff106-b730-464e-9a56-02febd2de1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dfce5d-7a60-4699-b602-7d0ae666c648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40983e8-5090-4bf6-adca-f776bae8a8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ef505e-0e15-4678-9cd9-e4412bdf98ae",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b598b8-103c-48f0-bd1e-3841253d8d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c28549c-b7f4-4bac-bbb5-6f7936f104d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915335a7-136d-4d52-9b32-8331ec8627c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a5b197-028c-4cab-8882-1255518cb07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2b9bff-4b48-4c04-b4fb-3cf21f552813",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7929c3-130c-459d-810d-c0acac3c00f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0364c4f-40bb-43d2-8435-9f7232cf368b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff765e8-3d8d-4935-8589-c7235ef9dfc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b616f4ef-c30c-47e3-b92b-66e67151a178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db74c85-518c-441f-b720-4a92cc7e07fd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8517e02e-4598-42ca-bb24-281efc3af6da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fd435b-996e-41af-be11-d00997564cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c541f7-7767-467c-b517-6d7488376051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdfbf7ff-7662-4d6d-a109-499338747208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ea3f12-65a4-44db-a873-5d65dd04d3f7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109268aa-6f6d-424b-b50e-65d5c08330e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b420eed-0d4b-4885-b345-d8266b045a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abaee2a-d42e-4ed3-a94e-894d4932a42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38de23f0-0d81-4b85-844d-f00c9a663c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3711388a-5b7f-464e-a3bb-c6b2d45be0fc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591317be-8f72-4205-b20e-632f576f820d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e584d5e5-26f1-4320-bf7b-3a75f5b8e66a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e828b2-68b3-4abf-85db-2d584004adc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078f7a22-df49-4fea-87fa-2e8d030f6837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b94718-44f4-4746-9f24-783f9df2998c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba67833f-e6ec-4f9c-91bf-6fe2452c5053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c41227-214b-41e7-bb38-c59716cc80ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1c00b9-f2fe-4a5e-bdfe-9f0c25f021f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59986c65-45e4-43c8-a102-ef9ffcad1b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1873d0-7230-40de-b98e-05d4cc9c5824",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d26be8-7da8-4cb5-a9d3-df3b84fb29ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fa4306-d3b2-4feb-99b9-9ddd9274d06e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38f94e8-6523-496a-ac5a-1d0ba3e2496d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3eb6c4-ed7a-4d4e-a14a-0d618d165c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d72c39f-cb97-4742-8abc-92474d49ddc7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67be173e-2e2f-42cb-9edc-a759f9591ad7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b52aeab-feb5-401b-8697-b44bdb6105f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8f2928-d58f-488f-9b60-2a306ff49bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c92c1e2b-e491-45d2-8d28-d6f109b50297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c899fbe-6e9a-4745-b395-d08282930909",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f63f3f9-016d-4b81-8561-6df1cf48fdc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc033a07-b2fb-4254-bfd7-9c4f9ba51e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b08d40-f5dd-42d4-922a-c871b3b0dcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7366e0e1-ec52-4227-889d-9540feb234ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d201d71e-ab6a-4284-86c3-6bf21c8fa7ea",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf887a9-2d67-4ade-904d-f98ff98c3b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92687855-c740-4e96-8173-84bab0220866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c6c11d-40dc-4eb8-b3f0-9d66d3142993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e93d7de4-49eb-4373-a594-44360a4a33f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe54058-93b6-4838-99d2-6d44bcfcbc2a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746db148-6a18-4bc9-9ce6-9cafa8fb8ed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a6e808-96e0-4569-927f-cbf10bdc4c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c9d304-f238-4c1e-81a3-60992a059211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31168da-8a2e-4d46-9d92-4f02808c6dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066490a4-255f-4ea6-bbaf-628019dc0016",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5c8bec-5bcb-4625-804d-f219d9bf3b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef74a00-bb78-46cd-8a85-7b1d376f9c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b325a8-5018-4ccb-85b8-f84507817003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05634c05-91ec-4f19-9a89-35fe2ee8f8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc3ae1b-2299-4151-b19f-fd8e0dbda1ad",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa3374e-e99f-4550-a99f-4d7473d9c4a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b029267c-7781-4656-ae9b-3304ada8ddce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7be17d-3362-4beb-879f-8985743968b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd34869d-f725-4fc2-a47a-6b4f0e5749f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca13426-0029-4741-a938-a9e5732872ca",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d516d5d9-3fbb-4ca2-b4a8-567a2963f4f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d09d8a22-fcb6-4dab-b1c4-6ec6d1abd8e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a10d8b-fc4a-4283-8f65-ae424ab92bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44310c9-c967-4508-bfd3-9a6836649b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69245c47-2422-402d-97b3-7bbb0bf207ec",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662b23a4-728a-4d5f-87a9-15c07cc9ea4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0da1c1-69ee-4674-af9e-ea53e7a93f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e11e53-0837-4925-abf9-4824d2b45c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c03eebd-7c25-4e86-ab0b-fc8d28201180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2a27ae-0843-4843-b92c-dc90d5053e11",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c168c9-8cbe-42a6-96de-3692d9623310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e245ff-87fe-45d5-8a2b-3e91593ba91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1524c505-f67a-470b-a8c8-f5109c75c9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30243b6-76e3-40ba-b6f7-4badd475735e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904d91dc-1fd1-433b-af00-d849c3169f00",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3086085d-e8e4-4492-b047-6b19f12971e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab0d3706-56b2-4138-b461-2c55ca89f824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac488b14-0057-40eb-bf69-90eda3797486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5450093-54e4-458b-a12a-6a548c8e0079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c240fcd-400d-4725-a3c5-024a470a4c51",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54406de-2bd0-4069-8809-8a7babcf14fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6248f67d-a9d1-4b92-8a54-53099a6375f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1f4df7-30ff-40f4-bebe-c2226537b023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5404f7-ed4c-4a9e-a082-c29aaf64a261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fbd753-7d1a-4763-bb99-63a3eba2cf10",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d53409e-83e8-49a8-bcc2-6a763be6c144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435e0907-7eb4-42e7-b8c6-a17757bbfcd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cd01b0-ad67-4128-b381-128aae100f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24935d19-0350-4fb3-ad70-7561a5be48a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0b183f-128e-4a62-93fe-7f90c700910d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69921e4e-cdb4-450b-ae88-eec13411aa3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67f725b-1e23-4d4b-937f-bfa9cd7e40fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8939931-2874-4b75-b9f9-71ee37451f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab705cf-061a-4a52-9104-ffb3d2af5310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46d65e3-0eba-416d-bce8-0c65d2297d51",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6553ead5-2a89-4b50-a3bc-d362b36fde2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4f6ee9-e7ce-446b-8dd3-1140b7fb2c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd610922-9708-4883-8286-73e6d7472792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d54b18-d3e4-41e9-a2db-6c5594ee225a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440b121c-bb40-4cf6-be21-c1b0135b3088",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eac99f2-73b7-4ab5-92bd-725e7178a3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a335c5-a8fc-4187-b4d5-9144516fa463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083f7fa6-c8cd-41e9-9585-4629b9be32ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129f9437-4af3-47d3-b9f8-ba7c03ca94f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce1db07-83e2-474b-9d58-757124b5c98c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0841e1c0-42e1-4a86-9796-b028285ceaa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4632dcad-7137-4dd9-92f5-6351e8410346"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2d38e0-b514-4cb8-81e4-d39e17f52ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba572a31-7eda-4ff7-bcbe-bc4481f33051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445ce25c-1fdd-44ff-b100-aa07c3e7bd93",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104fa1ba-86bb-4476-b9af-027fdd38f01a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb09508-050c-49f4-bcc9-004534a01395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cf0261-28e6-44d6-acf1-0e8a7b768a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecc1576-e484-44d4-b38f-bdc265cf7853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c9463f-6927-440d-a3d7-e9bfa194e1ab",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86404f62-19c4-4188-86ec-dd4ca01acbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186642d8-bf9c-4386-808d-0fcd2465e388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fbccbe-799c-4526-a44a-be853612d054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8854d0b3-7bb9-4665-8185-a663966439cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8ff1d3-5f6e-4c7a-9428-188ba8f102ed",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743441fc-43f8-4650-83b4-fd45d58bc983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa672373-a515-4103-9483-e3fb3f785e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12280c05-9b31-4a69-ad0f-0fa47cd23e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703ce0b8-1e31-4aa9-8ee9-c73562dfdea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbad2290-91a2-4216-9a03-6db092dd7e32",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92296211-a1b3-4dfd-b2d1-3b3576ca1507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb2dd9d-2dd3-4671-8b04-0200740a3cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9941a73d-82cf-43e3-90a1-ec8e2ee57a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b6b9bc-04d5-4445-8443-98a418cb724c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41363af-54b6-40fd-8f43-a627810fbfde",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16762a13-ff00-4026-a900-b7efa1642436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05528a69-fb0f-42e4-b5be-2602f8b46fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb36e922-6112-43c3-b108-2e8315c81107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c0c96d-329d-4515-b80a-4c5d7fdaf3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07a77b9-7fb9-475a-bc59-15e9942f390c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c902ec0-4fe1-43f6-a9ec-a9d6431166b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee88c008-f814-4c0c-8452-be3ca43b9341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf16e522-24ee-415e-8d9e-758305ba9d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de05c791-c4ec-45ba-bde3-2005b1deb2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f5a971-ba65-4da4-8fe6-f9a6f344e8d8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d8dd4d-98f2-44e7-88db-37c34f47c27f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed85d57-e23f-4975-90b5-a904f9071ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e0ec6e-de65-4649-a7e2-f90856a53a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72305b80-3693-4bfb-a7a9-8ab41d377c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024e73cc-5a75-4b8f-af94-91fe494a1a91",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc6dcbe-d123-487c-ad68-1966cf3fbceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6668e7-1bf8-4773-a245-c552834ca607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43c4045-075c-4529-95e5-b7fc559304c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51e2455-9db1-418a-b999-aa76842c8c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dd2b8b-cc54-4087-84d7-b5ce995d032d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3652d035-07c6-42f2-b7ea-b597a78f2051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc521d32-3dfc-4c9f-9b23-4c240874ce0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8734e4a-b445-45f2-9bc9-d9a3d51e081b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495b4e87-e9c7-489b-bb7d-e8fd17c36e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0e6aca-3f14-4d4b-adee-08f14d428e8e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f87b56-d3b8-47c6-accb-65a43162ecab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298a14e2-eed6-4d29-830c-24a8b9d84514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb180b7-5456-4d81-9dfd-45bac3ecbec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2545c7c5-81e3-4fee-8334-f27f2f5af2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b8afef-5404-488a-bf90-68f1dec2e6c8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af03efe-c5d5-4a34-83e5-2e018b235c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a876bcf-6cae-4050-80cf-7f388c083059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30821d49-01e3-4a50-84ab-1e0432e51182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80bbe15-764d-480f-8eea-d94b082f1bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59347234-611f-4645-8b44-18b131832e18",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3b7f97-e46c-4aed-8db2-26544ca6fe14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688d84a2-d4b4-48ec-b129-348337499873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768fc62d-f941-4867-b9bb-297d23477ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fae8c4-0903-462a-857b-59dbda4a414c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eee922b-5aa9-464e-ac40-88c5a927fb20",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cec8b6-4fcf-4007-99a3-fcb8fbf89cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d0b3eb-4e61-4c03-ba5f-98c728196f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675c754c-215a-4117-a890-54442b44924d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7183fd-a947-4179-b7bf-1017ba39dc8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5da86b7-a3b0-416a-8b03-6940451890c1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba8a053-b289-4595-a6b1-9c11518d2023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2507234-7290-432a-93b6-1adab7e46947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90fb6bc-cf3a-4e1b-924c-319e8059ecf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b504a1-cc17-4cb6-84c2-6b5cd4f7df01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6257cea-ca05-46d8-9384-496c021ab271",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca0e1eb-1f58-4284-be50-51af7d882104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bca86d7-ca8f-47bb-a5f4-f389e96877a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11def73-3b84-4625-a74f-53fa3cf954fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6622c9-7658-4cea-b796-d0cf5d00d2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c2420e-f094-43e2-92d2-c408d136bed9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5477fb96-5cb2-46d7-8c18-6a04d704010c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e74446b-f541-4f62-8f8d-d64227ed378b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30869729-6aa8-461d-aa10-6ac8ed6ba5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bef30b-779c-417c-9746-d2562bd35563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4eebe6-908f-4431-9605-349924a72116",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2688b7b9-dd98-4b4d-8aae-6cd65976af4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa150254-e5ae-4977-89bd-4d1231ca8a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "961b495a-3185-42c8-9c39-5f60a9a9de24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91eeba2-7d5d-435f-817f-13291da410fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4716ecc7-db0f-4dd0-9306-57c45ccc4d50",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e13a51-5301-44a9-99fd-4e16b061c737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ef67e4-0f9d-46fd-a1b4-882c28db859a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c169689-7750-4660-b79f-d45294358f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ebd8eb-f145-440b-ab31-a28bf4339f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14384d8a-d11a-48d8-969a-10c2dbbdd6f2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df764457-403d-4ab4-8514-612a9cf940f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06481e4e-a285-4335-9e17-a69fcb8d313d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8579781-2d43-41c5-bd84-7e16f2ceb8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16162eb0-d226-44e7-8306-a1514c39aa8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23aff1fd-a03c-4a08-860d-e45089a26b25",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f966028-c04b-4c56-9b50-eeaa9b5394ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb68227-0727-438e-875a-107c9f40c00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94b588f-bb51-477d-947e-032007ad0959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e63e7e4-e25f-4fe3-abd0-e997f1d9759b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60674e01-f737-410b-844c-ccf0c473d247",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4db6b6b-f2a8-40c9-90ac-08e5f3a1b01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd1d27d-e7fb-4c17-996c-5432419a1144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9299874-900e-49fd-bae8-cc87305a1cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668d97ba-eeba-449b-820a-4df4bc39135d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f409e7-ecda-49e7-91af-c51c2e52ecb8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bb588f-cd3b-4e22-bffb-d56aa50eca43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7278ed-8955-47e6-bc19-d96413e296dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e23619-1bd2-410f-a51c-6f0a50d3b691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd568c1e-b0fd-408b-9cd6-42d6097f96bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a384d745-4f7c-4d43-9593-8a161346de86",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef0165f-025e-45cf-81fe-d5d621ab566a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0109991f-10da-455d-aca6-ae5965abed44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f812b9-8ce7-486f-b87a-44e939de0ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "665081ff-df35-436d-9160-baf80a2c851e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5421d5a-fc41-429a-b5fe-77d81e7d3436",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302d67cc-e1e6-4e73-a8f0-6717d5ef0646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d7c1fb-ff37-4d02-8db8-6ab5ff7ec62a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef5666e-94a7-4117-9400-a38ac937aa06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2847fd-3b05-492e-a13b-948cc8d90a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10544b27-bbcc-4edc-a147-a6ae164c0bfb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed7c3f3-1238-4084-942b-a5f29e751e27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb52c15-6435-4a3c-9a70-edd31cc5dec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc5938c-716f-41e4-a797-870a423bb0ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9296c64-db50-4757-bfb0-a0640a609bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a0e7ba-31f0-400d-9746-25696e7354f8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f857a6-7e9a-41b9-b67b-3d7ea7b62a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2a1a81f-d015-4c42-ab7a-da122c6102f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363399cc-121c-4f5a-a5ce-d04f881e37e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b51e6a-bd7a-4385-8153-bd7cf3def170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eafaf44-194a-4389-ad58-90a982bcd09c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78bc663-bd0f-4b6c-91d9-b809a024ac36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e654ed2-9c73-478f-b4c5-b269b505e3f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f8c317-16cc-4c31-8a0c-f653527502e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959862b1-8a6d-4b9b-8e9a-67c1c18e118a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b09cc9-0f01-4211-9a46-dc8a5dc46534",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20399f1-47cd-407e-95db-34f2077fe99b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d6c6a52-ac7d-48e4-a54f-f2683a0da7d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2a757c-d2b2-4ab1-92a9-149ce0f1b6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c0a75e-fb68-4831-bb70-8ae6444eb41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddba096-d3f7-47cc-b99b-02efd5b5c98c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708aef50-a0e2-4110-a8d2-4a4baf889863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc9d65e-81ed-4ff7-980f-41c0c0e8af6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf4c29d-9dd8-405a-92d3-d5b1b02c7016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dadd4f7-4393-45e4-b145-3ca33631317b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d68d785-efba-4c31-b3ef-7d143f07401a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76ba087-e54e-45e8-a7ca-626db347a37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bba823e-1e3a-4ac4-88be-8d2a7c38840e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb806b31-6519-47b8-b1f7-e81fbd7b728a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452e5728-bbdd-4563-bb3f-658cc877be54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61336017-a7b5-49bc-a450-c496dd45cd24",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb78767e-eaca-4703-ba64-a21703741f8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46231c1b-43d8-4ad1-8af1-9cee99c24f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253a0728-1d33-46ae-ae5b-cd865c6400d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76a0749-edcb-4081-bb44-6c563a22b1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c315e43-e742-44c0-95a3-37a26d77ff84",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8ddba3-cfcb-4579-ae58-621d8f87bf6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8294b356-ab18-4a17-a628-237336a59595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acb1557-5882-436c-b381-1de783886166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e6a86c-da13-40e8-b5e7-a7cb41fbb7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88df947b-2be6-4f57-ae9a-ca8bf2fb8031",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35ac05f-9b20-4c11-a89f-00edb1c2da71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "856138aa-d7a6-4030-bcc9-eacd3b30e84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92763e24-126f-45de-87da-76ce85bb955b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595382dc-df40-483d-9492-b3da361385ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50dee8e-acfd-484f-b04c-977a69de36cc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd079a0f-1c98-4404-8112-f86e9d54ab68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20d32525-066f-4af3-8c72-d317d16fa7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35285f73-04b7-4d6c-acf4-230627b131c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40898b9a-1c16-469c-a1ce-ba100c7f7dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071a7d28-c6a6-47ba-8236-1e8598a459ea",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9a0805-221b-4519-b550-724c18238dd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "683a08f8-4945-4e5d-9e14-960c4d2e71c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b336fd-82ec-4ed5-be78-9df77f924c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f662a3d-e778-459c-a6d1-b44beb5b6b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93914146-aaed-447d-a42a-44f36447ba99",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daee2f57-4f9d-4cc9-be5e-628a826e6c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a630241-df29-46b5-90eb-865ef68e7825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24f40c6-fd69-450a-8579-09ee2466ffd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d83b0c-be04-4bf1-adef-7ae37d61d6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0108337a-f598-46dd-ab7f-bb87ad37aefa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64011cf7-25ef-4080-8868-aa6f2e098cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be4d5458-d4d1-4271-a111-2b1e56f44311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf4e6a1-aacb-47b9-91f2-8eb72fac2ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c04706-609a-494e-bf4a-e88f566f5a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a77d6d2-7a67-4c30-8aab-27d68a1adfe6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f2d0fc-643c-428d-9278-a2dcdef6e0d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549189f3-5160-42bd-8fcd-6517a9d700ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618b261f-b065-4698-a2c0-29600fbdf660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7391515-d8b2-428e-94b2-e4aa23055d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c1d3e6-8516-401e-bc38-e24e82bbc187",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98a8dad-cd5f-47df-826b-15efa9959f5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "138878f6-94aa-4394-a51a-6563bfdb3f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6828a654-42d2-4ce8-9a34-67a7478c9003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822a4181-7b10-4870-8a9b-87b2db6236a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b58659c-f941-4a1c-832d-bdd01f62df60",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beea9aff-b45e-49cb-b0e1-7e294d606844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0999986e-3fc9-4020-b6bc-485e4ea91a77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4ead24-e56c-4df4-b05f-b47ba5361615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f405f279-873e-45af-b070-3203dedb634e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd25c859-4f58-4776-a9c0-65773419f3a3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c130ca9-3e8d-4a3e-aab5-a96bfd8b45d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86497479-a73c-4869-a4ca-07be7fc05d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a07025-38b0-42d8-9f19-53d1e90522f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa90801-fed6-45ef-aac0-b6228b172da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e763b1-b2d7-44cb-9ce5-1459d232e898",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e308fb-48e3-43c7-8a11-ed125836cb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a94e588a-66bf-4ade-88b3-29321bdeccc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84fe2e1-0875-4338-82e4-1195603c1bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a56a937-97bf-42f8-b641-a422ac0bf98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5079fd9-fa8c-484f-ab8d-457a7a900526",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41da731c-7c48-4a8d-abb3-cf5a9835f6f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9313417c-2a67-41a7-960a-419249af4519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878439bc-cad2-4e7f-8eaf-f3789cfc853f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c928331-d1bb-4aa3-a614-7c9b9a95d978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77442249-e64a-4c86-b0b4-50c936f9473b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056ca22a-bbdc-44f9-abc1-3740897560af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d925454-9233-44ac-8c8b-9d482aea293c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312d5933-f1a4-41c8-9634-1ce0473873c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdd0523-0394-49a5-8ef0-6c2658b78dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a13508-bacd-4e62-b6eb-c5faf58c0df3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a742ec-f809-47be-a11a-01e9920c951a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a736b74-bd4f-4952-bf88-36b377df3594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2527b9-34ea-4113-ab66-46db15ebae4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8525ef2-8b7e-40be-8507-fd1cf5104e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc2f8ce-053e-411d-a852-1bd5b5d5e831",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e6e096-a1fc-4f03-b50b-e8dee1ca54fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d3fd6ae-48b1-46f6-a83c-60096515177d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6ab16b-cefb-4d9a-b893-b28f448ca239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe68ac4a-7d6f-4f3e-9d84-c0183e47d0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314e91f4-6ffe-4a23-8c68-14c4511a1f55",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b52503-c815-40ce-bdb0-3310eb4722e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c41b6dd4-2cf7-4f14-98b1-39baf6b301a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153e9f99-3376-4293-8e0c-728b14e1b503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14dc0a6f-dcb9-4a72-9d08-c74ce4174475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e9819c-f404-47ba-9f77-001e48c911ca",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc21d25f-fca8-40ea-b6b6-4bf2d1370339",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f45228a3-63b3-43dd-8086-2e7fc572a3cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f159987-d930-4224-bdc0-d354658c0796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db04e0e7-0834-45f0-8f28-ce433770c48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821bb34c-31d9-4d08-9949-7d894c9f138e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d066a18b-0bb4-419b-9603-c148581182df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19ed873d-fb80-4181-a1fb-d86b829695dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc74978-d90d-43d1-a573-78e97b8e2210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429df72e-bae5-4b86-8930-159051570b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f34dcb-cb31-4c86-a9c1-3153826909ac",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843ac18b-c4b4-4033-89de-f7006242363c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "184660a1-2ef3-4c9b-94fc-f3c0f97b0b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0489ee-e00d-4b5b-8311-ff4ee4580ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0113b37a-def2-4618-8f69-5655c1c67235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94d3f14-5935-46b7-a8a5-1a74a4db6177",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547e4c94-53d5-4d0b-9839-eb9a07302b70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60238306-ca41-4363-bd68-9490f9f491a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29c43b2-fe63-4b71-aadb-5d6e396d574f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcda362f-8044-4da7-9133-72afd3fe522a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac61b07-6625-47a7-8645-2a44aec10e57",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72721d04-de47-4b9a-b0bd-5ae84b742dc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "940fb435-f160-4b97-a506-d3d29c85b61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a2ce9a-1c07-4ec5-a023-ac7124495bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92a8bd8-6b6e-4a8c-a6c0-ec5eafd46307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e934496-f905-4b56-9c53-e408ecbcdad4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096041f6-4895-422a-8f0c-7d18617d472f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec4bdc4-e27b-47e0-ad6a-2a3b877583dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aef3469-2332-46e2-8fd4-fa2990cdf405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc142e24-9118-40a2-bc8e-f5dd78bf3b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8e1476-e215-423a-8de7-7b8bfdf74f07",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860979d1-a76c-4a21-a955-b910ff64c511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b73034-7289-4f64-97d7-f3ceb7908ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f07769-1c91-4c5c-be36-e14d13ac19c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49469885-09a8-4a0c-82c2-7eeb9b20c510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bda925-616e-42c5-9a6b-0c9ea8e51662",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f52e2e-b43b-4c6b-8eab-2374382cef8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efbc8bb4-fa6f-40e3-ba73-5d8786c24862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4708536-7bc9-4c8a-a042-d19b02534cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b89b8de-94ee-49ac-9465-a381a0a85a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bf3c54-083e-43d0-bd84-818511477114",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43c4cc5-cdd1-4d76-ad37-62c3dc39f929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ece42638-68a2-4fc1-820b-119bb3895d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72244b34-2a4d-4cbe-b426-12c0cc227fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341382a1-9775-4acc-adcb-f63318e40cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc92b5b2-b467-4b71-bd2e-40eb6450080f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e122a0ae-bcc1-435d-97a8-8405ce3f3601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcd2e13a-15db-4f4b-b1f5-364460124c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07483908-c171-4f53-94e1-20be7a833868",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac1e096-8910-4f47-ab77-e490b87fd49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a10be15-f752-4625-b511-5f5f18cb31a3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4da6739-9cc7-46c5-9edd-273e57fd88de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8227b570-4ace-44d3-b8cf-287e284371d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459bf2d8-ac5e-406d-8d5d-c724b84423ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618ef55d-37a0-498c-8691-f59895d38e19"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e85ec162-e2f4-4655-a660-cc609fce3f4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9470868d-af9b-4692-8dae-70143f7245fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69e1e293-d0d9-4187-bf7b-04932644d777",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "492b04b6-1d34-4f71-98ec-da964d397495"
                    }
                  }
                ]
              },
              {
                "id": "6d93a382-6382-4d3b-91f2-bcdd2323dff4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a8ea70b-f14e-4f05-a251-907686b88ef5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0110afda-d1aa-4bd5-8a4e-def1fe3dc4cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "836b9b3d-8faa-4357-99e3-db176122ca77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5f8274-2926-406f-91ec-b3dd9a560037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89ea66ec-4190-4bde-aca4-ab7140503a70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4563dff-6a18-4e41-ab9a-4090336177ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e55d1d7-349f-4027-bdde-0511b355d5e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cffdf90a-5230-4114-b8a0-280fbe09f7af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88dead8c-0728-4b95-ae35-b42a8e3fd4e3"
                    }
                  }
                ]
              },
              {
                "id": "98966458-a7d3-466b-a0e2-a17dc66e74c1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f855e875-4ed6-49aa-be32-6df94fdb97bc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8ee552-be7b-4445-b575-fe93264c56b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2364d4ba-ff58-4060-803b-4f69add0f32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3670948-7ec2-45d7-9162-92ba5785f0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc706642-d37a-4e49-91d9-b375653fcc46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f4135540-17f4-4bb6-93f6-124235ec575c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5f92aead-2b9c-468b-8e77-ad12f1432115",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf3d45d-c76b-42ec-bb01-411d6b5589d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "21398c96-10d0-4802-ac89-317c4232cee7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce5eef35-1473-445c-8930-6960c29f4a45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fed2d80b-4b3f-4f72-9bf1-70811bd7429c"
                    }
                  }
                ]
              },
              {
                "id": "91e2d6e1-625b-49c3-a285-52cd61f314bd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4784845-1f37-4b92-9add-0b4dd2e8dd18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ab09a18-0dd9-4210-aae8-3c8cd2d08b09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e25de43e-73e5-4127-bcb4-7d32bd4bc3a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a0790b3-22fb-4bfd-92f5-2ae7629a7020"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70b5f814-b573-4bc5-af11-9ad3cc0c1ba4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "49f9c3cf-2e20-46c8-85e6-28c1f3f0b8eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "753bca82-2263-4187-b801-03546d23e0ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97a24290-3f8f-40d3-b71a-c5e456c23811"
            }
          }
        ]
      },
      {
        "id": "71c2ead9-6ae3-4e72-96b8-023fc98da991",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e33a1ba4-1add-4d45-a651-4c163547204b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f1e2d1c-42d8-4a01-b587-fcbf66b83321",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e474142a-feec-43f5-9977-9d40ec11923d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe8b133-643f-46e5-9bbc-ae0453fda3e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7f39df56-3581-48bb-b36b-b83f7d0efe08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830fd377-5d1b-402d-9ea9-6de76d443f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78bd4c07-4391-47ff-a107-52694cc361c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1e3d626-f81f-4814-a2eb-f1a949ca3ac1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "069b1415-00d3-4349-a481-4e99001d2a1e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4c56b0a-30e7-4c7c-b820-7cabbe04026e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91204610-60f9-47c9-84b3-e32c195a85cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79ef8ee4-6e46-4588-bb94-69472aa22aed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "517f32d5-9055-43e3-a55c-36e19a19ea2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa0ae610-4a8c-4f45-bf48-c5879b32d012",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8725e0dc-8b31-45c0-b478-f6a234bdb6c6"
            }
          }
        ]
      },
      {
        "id": "99f25944-97fb-48e0-895a-2451c83a53b5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "260f4928-6715-4b1c-be94-2b63bde3fb08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6135876-acca-4912-bd61-6a91f40495a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9712be0-4ad1-4eae-a9ac-3de230966164",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81edead-02ce-4183-bac0-4641d350f48e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6147609e-9a8a-4ee5-93f6-bcd1b2f834cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b909a1-8c53-4882-8644-58e76d4d8707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e7be0cd-a384-4bac-aad4-ae6f9df540e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcdf644f-bc38-400a-be1d-f5508a95047d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "893ca60c-fd21-4b10-a5f6-accced87669f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26aebea7-f27b-47a3-8dd4-e29dedfa4a92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2663e45c-ae3d-4a4d-82a5-e5d66434275c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efbc51fb-d1c5-4f76-945f-12bf1aee45f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "142886f9-6187-4e7b-bfd5-6e6effab15f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf4718cc-4504-445f-8025-1a950c45d4fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a98c32b2-cc8d-4102-80c0-e71eede80d23"
            }
          }
        ]
      },
      {
        "id": "fc73f39c-903d-4e7f-922e-0d9209a52f98",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5333ec95-6124-452c-97a1-a7856a53d928",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ec17591-d493-4764-8131-81e393eca0c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfee3629-d482-411e-a57a-96b4af525e16",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839a805e-1465-4fdf-b739-8c2257b548fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4627e9ad-eeb4-4562-988d-9490e39017ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34366aea-0219-4441-8454-519e456e1421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b032de5-75cc-4ac0-9ed4-fab9c2532e6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2c35194-2e15-4ffa-b739-d02f0df5ea13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd061a8c-0199-4440-9f82-b22bfa486152"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b47514a1-9c9f-4a48-9da5-ae0aa43c6180",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e123675-fece-482d-a486-557315c7790a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07688432-dfe2-4ecc-82f0-850ae160f4c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b2d32dac-67ee-4571-b1ac-aa460a64920b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77613924-69b9-4283-8442-9b2889170500",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9350ccc-eeb9-408d-b3f5-ccf3b509aea8"
            }
          }
        ]
      },
      {
        "id": "49420690-6758-47ec-9c24-543f3141efc4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "630ad2ab-9640-49b5-924c-7e115db31ae9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b351cf90-28da-439f-b15d-a33d66232162",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6fdf9855-3835-4c9b-9dbf-974150f91af8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3763d355-ab42-479d-95fe-85cfb931d13b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ace81747-6d94-41e7-8928-6032913f85ca",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 143.1338028169015,
      "responseMin": 7,
      "responseMax": 1684,
      "responseSd": 201.66384415771742,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697243554850,
      "completed": 1697243610594
    },
    "executions": [
      {
        "id": "29e47ba8-c8c8-4684-8f5c-b6bc2471457d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d36abd8d-fc9e-4758-8078-2194673b8ab3",
          "httpRequestId": "557dfdbf-af47-4a38-bf21-3efe9fb2bb18"
        },
        "item": {
          "id": "29e47ba8-c8c8-4684-8f5c-b6bc2471457d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4ad2dd19-5e36-4511-ad10-a31998a90f02",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "2780f412-5599-4f3c-8fc4-94583647b32a",
        "cursor": {
          "ref": "08db4d2c-7b28-476e-b1a3-8736fdc683b9",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9cb78be3-cbe4-4abc-8be3-53e6242194c5"
        },
        "item": {
          "id": "2780f412-5599-4f3c-8fc4-94583647b32a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f42615a0-8e62-49e5-bdcc-8ede63a6c0dc",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "93df9b6c-6e50-4625-bb7f-437df13f1832",
        "cursor": {
          "ref": "8a019490-fd05-4355-98e0-44afdde9cc99",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b044c401-6d2d-4efc-a3d7-c0c993fa9676"
        },
        "item": {
          "id": "93df9b6c-6e50-4625-bb7f-437df13f1832",
          "name": "did_json"
        },
        "response": {
          "id": "09fd2dc3-aadd-4099-b7a6-ec0fa010272d",
          "status": "OK",
          "code": 200,
          "responseTime": 446,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb02041-f330-4c8e-a6f5-835c2d14ec1d",
        "cursor": {
          "ref": "9f6319cd-d114-4fee-b723-b36c51cde3eb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca1308ed-54d8-46c4-bcd5-27c62a3844e3"
        },
        "item": {
          "id": "ccb02041-f330-4c8e-a6f5-835c2d14ec1d",
          "name": "did:invalid"
        },
        "response": {
          "id": "ac7293ec-4345-4c96-aa66-e783f530c99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb02041-f330-4c8e-a6f5-835c2d14ec1d",
        "cursor": {
          "ref": "9f6319cd-d114-4fee-b723-b36c51cde3eb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca1308ed-54d8-46c4-bcd5-27c62a3844e3"
        },
        "item": {
          "id": "ccb02041-f330-4c8e-a6f5-835c2d14ec1d",
          "name": "did:invalid"
        },
        "response": {
          "id": "ac7293ec-4345-4c96-aa66-e783f530c99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596850ba-2692-4886-86cd-2d9720e90d56",
        "cursor": {
          "ref": "4b25e8be-ef44-47a0-bb6e-36de215adacd",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e0c596d6-2f60-40e3-8fd6-29444d0ea818"
        },
        "item": {
          "id": "596850ba-2692-4886-86cd-2d9720e90d56",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f10ac1e0-c667-4abb-b616-56b04e7750e3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 144,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2340f441-ca5c-46ea-b8bd-b25fd45cd2fb",
        "cursor": {
          "ref": "905d033d-782c-46e5-b40e-f09ee713567f",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "25e45b44-0be3-4b53-8d78-64421847cb66"
        },
        "item": {
          "id": "2340f441-ca5c-46ea-b8bd-b25fd45cd2fb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9319500a-85c8-4fa8-bf67-c54916d099a2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6f229e-104f-43b8-9ca0-32bf071e6747",
        "cursor": {
          "ref": "9644e29c-681a-4106-9cc3-a694c7dbfff7",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "18a0b608-2d3c-4f76-84c1-903fa515131f"
        },
        "item": {
          "id": "7d6f229e-104f-43b8-9ca0-32bf071e6747",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "622d2bab-1861-446b-bb85-00463663bbc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c6f3f7-7284-494a-9a13-f0fd148d0239",
        "cursor": {
          "ref": "7ef81067-dd7a-4946-b409-53a3f87bc8f9",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "349137d5-a7ce-4748-acf6-1da48852f979"
        },
        "item": {
          "id": "78c6f3f7-7284-494a-9a13-f0fd148d0239",
          "name": "identifiers"
        },
        "response": {
          "id": "2019c6ca-04dd-402b-9ca8-84a0cd2ff42f",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d0ffbe-7df6-43c2-b4cc-64d2d63e64d9",
        "cursor": {
          "ref": "4b2718af-bf37-4ac6-9c65-377e0cd320d6",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a24d78d2-0f3a-44ce-8d89-8f65e67fc6d8"
        },
        "item": {
          "id": "94d0ffbe-7df6-43c2-b4cc-64d2d63e64d9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dca9cba6-28aa-4462-a148-5ad3cbdd3b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c6926b-8762-4e1a-9401-a9bead45597e",
        "cursor": {
          "ref": "81722b87-3600-49c3-8a4e-00cfdc096292",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "24c8d41f-0e33-477b-8418-08f2d8936447"
        },
        "item": {
          "id": "04c6926b-8762-4e1a-9401-a9bead45597e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1aff7424-8b89-4b87-a7ce-14c0d1cbade6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776fecd1-99a0-46e6-ad26-66fb1e26883c",
        "cursor": {
          "ref": "84570cbf-dbe6-4013-8d62-c53344fce694",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "29871a43-a0cb-4120-9c57-83ffdd14f13d"
        },
        "item": {
          "id": "776fecd1-99a0-46e6-ad26-66fb1e26883c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "73880b2d-f721-4f28-b22c-ff9eb846b04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2af888-2c6e-45eb-acdb-7f02758de19b",
        "cursor": {
          "ref": "66d00cae-1926-470c-9fd8-bce6b1b2e7b0",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "70eb9129-52f9-497f-86a6-fda281be636c"
        },
        "item": {
          "id": "5a2af888-2c6e-45eb-acdb-7f02758de19b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "375dea70-6f48-4d2f-a09c-6765aa9f4dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556536c9-deb4-4f97-a466-b19989ecea23",
        "cursor": {
          "ref": "f6f379f2-c5d2-4908-8b35-d46a1f06458e",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "084c7490-dce4-4bca-aed7-6a5e51e16788"
        },
        "item": {
          "id": "556536c9-deb4-4f97-a466-b19989ecea23",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "99081179-94f9-49fa-bc18-ff96fbe782ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990bc1ae-4ae6-4dc9-8849-97ab499e6efa",
        "cursor": {
          "ref": "530e0b0b-91b2-481b-a5ea-6cb398984065",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1f0c8274-f2f5-4c59-a4a0-6d9783700d1c"
        },
        "item": {
          "id": "990bc1ae-4ae6-4dc9-8849-97ab499e6efa",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fa957428-21a7-4a88-9a2e-9594ebed1431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d6e21a-4ab3-493d-b4c0-248da0834206",
        "cursor": {
          "ref": "40c03876-36ff-47f9-99ba-7bafa6fb033a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "151c2571-0325-41bc-859c-782544d5f457"
        },
        "item": {
          "id": "b5d6e21a-4ab3-493d-b4c0-248da0834206",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5871ddcb-b810-4c65-aa09-625b5429fb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860a27f7-c47f-466b-8aec-6d896f877220",
        "cursor": {
          "ref": "70e65b2b-9683-4f49-a649-11a006367b45",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c1f9a61b-ff71-4745-80e5-55380c702cee"
        },
        "item": {
          "id": "860a27f7-c47f-466b-8aec-6d896f877220",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f5e961e3-5dcd-405d-93a4-6ab14ecc4c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a120ff-1123-41b4-9712-5876327f9ae4",
        "cursor": {
          "ref": "05acca9d-0fe2-4b36-b5ca-89aeb3ec9ad6",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "eea49221-cac0-4f82-aec5-88ec57c1628c"
        },
        "item": {
          "id": "38a120ff-1123-41b4-9712-5876327f9ae4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6b388605-a12c-49ee-bb39-6c78b76a25ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b698bb6-d6d3-402a-abe9-56359ecac5cd",
        "cursor": {
          "ref": "5bc933d3-6d4b-4550-b46f-5de70f9770de",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e65d16e8-4d3a-47a0-9cab-d45849678278"
        },
        "item": {
          "id": "5b698bb6-d6d3-402a-abe9-56359ecac5cd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e5cb5186-49c8-46ae-be54-6396b93c85d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dbadf7-bbd4-460c-9546-541c4ddd50aa",
        "cursor": {
          "ref": "1b85865d-2107-49fe-8106-c802a99a2b71",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2cccb143-7a54-4a4c-9a34-046b5360c335"
        },
        "item": {
          "id": "31dbadf7-bbd4-460c-9546-541c4ddd50aa",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "28df7432-5626-43f7-876e-c1ce7f973ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c28d41-7882-4973-b8ae-a4542013b92e",
        "cursor": {
          "ref": "74cf5828-c4e7-4c8b-9cfc-e84c1f96e02e",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e7a58a07-d46c-4bac-9363-ff5aac88d710"
        },
        "item": {
          "id": "10c28d41-7882-4973-b8ae-a4542013b92e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c60d9bbc-a7de-4d32-b32c-4671097924ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19dbc993-cc4a-4e7b-b662-9a279fa69093",
        "cursor": {
          "ref": "9c09175d-1db5-42c7-bbac-8bc72d4e2843",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e3ab1d13-7e61-45df-bc4e-cdf369de9cc2"
        },
        "item": {
          "id": "19dbc993-cc4a-4e7b-b662-9a279fa69093",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0f3c7ebf-f9d0-491e-86fe-67dac4537fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0c943c-8ee7-427e-ab5c-ce411d818a4b",
        "cursor": {
          "ref": "34011462-58e5-49e4-9d5e-eeb6a074285a",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0a847ee-6351-40d3-865d-2af825414e43"
        },
        "item": {
          "id": "df0c943c-8ee7-427e-ab5c-ce411d818a4b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5df431c6-2b3d-465b-8114-26d5d5e505b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192b16d7-7241-475e-8e12-a98ead5c2004",
        "cursor": {
          "ref": "ef0c778d-cead-4913-b57b-9e33be6e34c2",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "17a18dc1-83e0-44ec-aaf9-7031d9784439"
        },
        "item": {
          "id": "192b16d7-7241-475e-8e12-a98ead5c2004",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4a3baad5-69ac-4e67-a51a-95d34999c160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08707b71-2b10-4687-b9a8-a15315992977",
        "cursor": {
          "ref": "df51d553-fb49-4b14-babe-fd5bae57cce8",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e18254dd-9158-4447-bf78-bced00d1d70c"
        },
        "item": {
          "id": "08707b71-2b10-4687-b9a8-a15315992977",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f6a9e02a-c55d-4ad9-a920-ce089d88a09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd5013c-7f31-4faa-9755-a397cf3dfa9f",
        "cursor": {
          "ref": "8faee52f-e8e8-4062-a104-c0413f5c6698",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "457ec129-58a0-4a18-8b12-b9d90ac23911"
        },
        "item": {
          "id": "2bd5013c-7f31-4faa-9755-a397cf3dfa9f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1122b1ad-2f24-4699-82a1-c1e5e678408d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82147af7-007f-4f0a-90a5-35158c72b3fe",
        "cursor": {
          "ref": "483da86e-a338-4fbf-a016-5a989a26fd7e",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "71052b5b-2324-4296-b980-f1e8a1fcda95"
        },
        "item": {
          "id": "82147af7-007f-4f0a-90a5-35158c72b3fe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "37f8f90e-b18c-4770-8003-06c56e4a97e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a09816-dfce-4dfc-b914-d5bb3b2ccac8",
        "cursor": {
          "ref": "1100162d-69f2-4a84-b631-e902a70ec224",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7bb87039-e2e0-4195-93cb-6851236aa2c7"
        },
        "item": {
          "id": "25a09816-dfce-4dfc-b914-d5bb3b2ccac8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1ca31fe2-2616-425b-bab9-a2a95d99abd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4571a4d-64ea-4065-a9a5-8815e3a690cd",
        "cursor": {
          "ref": "6b7e2a91-f98b-4a30-ab0d-3a96f93c575c",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "506a76c7-5bf7-4475-9f02-2938a0797946"
        },
        "item": {
          "id": "b4571a4d-64ea-4065-a9a5-8815e3a690cd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "20931350-e708-4ec9-b55c-b9e16a2e9ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae4560a-a11b-4f46-86f7-622cd99dfe5e",
        "cursor": {
          "ref": "3c18d89a-8107-4850-a125-acf33ada5d12",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a8bf1ab7-8ac5-41be-acc6-e6037aad1eac"
        },
        "item": {
          "id": "6ae4560a-a11b-4f46-86f7-622cd99dfe5e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "166daf8a-ff59-4c5d-8fc5-4e248406cecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5540e6-702d-42d4-bd78-bccc25eff5bf",
        "cursor": {
          "ref": "cf9223a9-3e45-45f4-873c-55b4cd6b6dcc",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8e82bbc0-5d5c-4e8c-b08a-704a00e8bc6c"
        },
        "item": {
          "id": "ce5540e6-702d-42d4-bd78-bccc25eff5bf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d02a96ed-cd20-45fc-bc96-05ee9256cbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b71de6-9397-4123-97b2-5393b7a69a66",
        "cursor": {
          "ref": "14dd0348-6533-4e2f-ba32-1e2a9e0d5950",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7348f7a0-4144-418a-8db7-2ea8142e028d"
        },
        "item": {
          "id": "30b71de6-9397-4123-97b2-5393b7a69a66",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a9594a08-4518-4f4d-85d8-591ba92d291b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3729d284-4cfa-4eb6-a93e-943441dd3c21",
        "cursor": {
          "ref": "d590c2da-8abb-4e6e-9c78-3ea7a9ceb1fe",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7d8ed07e-4396-4b20-bbdc-4ae011fd95cd"
        },
        "item": {
          "id": "3729d284-4cfa-4eb6-a93e-943441dd3c21",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "423675f7-8ea2-4ba6-97f8-b046f9e6f810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c717ff-d0b5-4b86-bf93-964743ef9b82",
        "cursor": {
          "ref": "1b118b6e-3f4e-4b7a-b0d0-80b0e4be9e19",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f79e4b46-4386-4c79-8f7b-c162077f1523"
        },
        "item": {
          "id": "30c717ff-d0b5-4b86-bf93-964743ef9b82",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b0a4484e-e823-4d8b-820d-7fbeab6c00f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9433b462-9f60-42b3-a6b5-1cb74cdb6482",
        "cursor": {
          "ref": "747e4064-76f6-439a-ac78-b65668e97344",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "363fd9cf-faa0-475d-bb70-f4f78380af6f"
        },
        "item": {
          "id": "9433b462-9f60-42b3-a6b5-1cb74cdb6482",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5247c6ea-932e-463c-9bc4-85f0f2f94ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7faaaf89-b9df-4874-93bc-2721486ab057",
        "cursor": {
          "ref": "1e98d3d8-7ad2-473a-aaf4-b5f51f27530f",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c0f3eda9-8a91-4350-b931-d7799deb80f7"
        },
        "item": {
          "id": "7faaaf89-b9df-4874-93bc-2721486ab057",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f9713117-e34a-4679-9764-7555d17fa00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db13248-343c-412b-8faf-b0d2f62e8d32",
        "cursor": {
          "ref": "718979f5-fccd-4056-b917-0780d5128c0e",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5852017b-d149-4968-b64a-322e88f588ee"
        },
        "item": {
          "id": "9db13248-343c-412b-8faf-b0d2f62e8d32",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0568e422-cbb6-4396-9400-cf552d2b09b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f62bcfd-84c2-432f-8619-edda5a536dcf",
        "cursor": {
          "ref": "944eba0d-546a-4398-ba89-44472e42ba67",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2f77e662-136a-41c0-8090-c3f447368295"
        },
        "item": {
          "id": "8f62bcfd-84c2-432f-8619-edda5a536dcf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1d2ddb16-bad9-4efb-b007-8121ef4badea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ee2b90-96eb-4b76-b893-478b3e0fa943",
        "cursor": {
          "ref": "0cd7a1cc-753d-4c76-bf15-c3ce49951839",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "399eb04b-0c6f-4a39-b1ad-a6535f0f5851"
        },
        "item": {
          "id": "d0ee2b90-96eb-4b76-b893-478b3e0fa943",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "27c1e15c-6a26-4a3a-a7eb-ec7297c306f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe588ce5-e578-4335-9ccb-a1c0b4c97e8e",
        "cursor": {
          "ref": "7a901f1b-7129-41f4-a3f0-e36d41145e5f",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "28cc28a4-1a7b-4b5c-abb7-4f15233c33ef"
        },
        "item": {
          "id": "fe588ce5-e578-4335-9ccb-a1c0b4c97e8e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cf7ddcf9-0db8-45e4-8c5c-4e1d6dd95b35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 111,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "317bfabb-733c-48dc-8160-f7e8ba79f2a5",
        "cursor": {
          "ref": "9abe08d9-b83f-4f95-8fc0-7099a7ab7b53",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c4c5252f-9746-443c-b4b4-378a5a10249c"
        },
        "item": {
          "id": "317bfabb-733c-48dc-8160-f7e8ba79f2a5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d3f6213c-1176-4074-a32a-a0b1e94c6450",
          "status": "Created",
          "code": 201,
          "responseTime": 1684,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8361f419-931c-4639-9332-643a8d0fbf9c",
        "cursor": {
          "ref": "36c4ef36-035c-4985-ab06-e341416626be",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "042a3de5-64bb-4d1c-8279-f60c1b89fbde"
        },
        "item": {
          "id": "8361f419-931c-4639-9332-643a8d0fbf9c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "784ff4ab-ef0f-4e73-89d0-64fc431979e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9bcfa515-51c4-43e6-8169-bccaa27b4ef9",
        "cursor": {
          "ref": "a467c67c-5132-4480-b885-fe2ee0e0a83b",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f8704fc9-414d-4ff9-9922-c0434330856f"
        },
        "item": {
          "id": "9bcfa515-51c4-43e6-8169-bccaa27b4ef9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "88975ab6-33eb-427b-9aa7-a6d6509bf675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298b90eb-10ce-4e22-ba6c-40917b3387c1",
        "cursor": {
          "ref": "d9de4f89-d415-4b35-963e-515950fb7e66",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ffaad74c-2837-48d9-ac1d-400d58ca4419"
        },
        "item": {
          "id": "298b90eb-10ce-4e22-ba6c-40917b3387c1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "505ec98a-bafd-489f-a968-f5aa48b433f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0a2c53cf-6b14-4fd3-81e9-45fa12978a2c",
        "cursor": {
          "ref": "b57e3f26-bbf3-4bae-a4f6-1a3d0b1159a7",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aeae1ae6-d166-41bd-9d6a-4546874b8297"
        },
        "item": {
          "id": "0a2c53cf-6b14-4fd3-81e9-45fa12978a2c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "97cba2ff-9ed8-42aa-bf5f-d08c6754a812",
          "status": "Created",
          "code": 201,
          "responseTime": 1018,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "da38f26b-c59b-4440-ab98-f93b5e2fa886",
        "cursor": {
          "ref": "b7c467c5-1d0c-4ad8-b9d3-62baa32a7fb8",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "efefa670-deb6-40b2-9cc1-146ec3566e58"
        },
        "item": {
          "id": "da38f26b-c59b-4440-ab98-f93b5e2fa886",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8daa547e-b720-4675-ab07-e3fece937324",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "631a2762-d6a4-46cb-8d8c-dd5dc4c79898",
        "cursor": {
          "ref": "dcdbb867-a6f6-421b-9e4e-3d6985567371",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cc571eb5-966f-470e-9736-3eb7ba273ecd"
        },
        "item": {
          "id": "631a2762-d6a4-46cb-8d8c-dd5dc4c79898",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "44bf4262-4db2-4178-b943-c600bafcf50c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 697,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fbc1903d-4607-4450-b4f1-b14a9a63feac",
        "cursor": {
          "ref": "6cfb2fdd-b734-45ae-9e2a-af6d4ea40df6",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b42a44c8-2bd6-447b-930a-60b6c520bb12"
        },
        "item": {
          "id": "fbc1903d-4607-4450-b4f1-b14a9a63feac",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5b767d15-cbfe-4e03-ac0c-9afa431aaead",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1e4234a4-b560-487b-9fb2-c27585a71a37",
        "cursor": {
          "ref": "399f09ff-7b67-4034-82ff-c42a016db9c9",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4137c4cb-1d74-4c9a-88f6-9ddeec33fe67"
        },
        "item": {
          "id": "1e4234a4-b560-487b-9fb2-c27585a71a37",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "db52690a-fc19-4e17-ad38-1d50a1d136d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4e1ed78e-9637-4b9e-8cd6-820d1814910f",
        "cursor": {
          "ref": "cb4996b6-9e95-4043-8035-40fbe294da2e",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c8d8a1c1-84d0-4ceb-a165-bec96ba8b101"
        },
        "item": {
          "id": "4e1ed78e-9637-4b9e-8cd6-820d1814910f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3ee73e38-15da-40ea-bd5c-6c47c25fd92d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e8d14bbc-1905-4999-9b5f-bb3aaf1fc2ff",
        "cursor": {
          "ref": "f14d69fe-d15e-4e85-9e6f-1816e28748b9",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ef26c787-121f-4318-9d24-374f02d551ac"
        },
        "item": {
          "id": "e8d14bbc-1905-4999-9b5f-bb3aaf1fc2ff",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "111be13d-f992-465b-8a33-de114c7fc88d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b0f4641e-7483-422f-80e9-caef9bb8524c",
        "cursor": {
          "ref": "b5725a46-9339-4f4a-8266-8c51a1b5dc5b",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eac4ad85-cb54-495b-8002-96cf50084f76"
        },
        "item": {
          "id": "b0f4641e-7483-422f-80e9-caef9bb8524c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f9a878aa-bb98-40ce-beff-a39c35026d72",
          "status": "Created",
          "code": 201,
          "responseTime": 922,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1eb3047e-17b9-4d1e-b10f-88c11952c83e",
        "cursor": {
          "ref": "56b6f002-2179-4153-9238-236fcedaf8b5",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c2a84928-a141-418d-a17c-e5f918d62614"
        },
        "item": {
          "id": "1eb3047e-17b9-4d1e-b10f-88c11952c83e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "668c1132-8182-4f43-a701-8f51da1e948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3dcd5d-c286-4591-9d06-7980da8910cc",
        "cursor": {
          "ref": "a6543b8a-c774-4cc2-9423-5ed94dc1101f",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2b002711-e3d1-4366-92e9-df23dc0cadfd"
        },
        "item": {
          "id": "5c3dcd5d-c286-4591-9d06-7980da8910cc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ed1e56f8-c6e0-4d41-8366-d4601299374d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937136a4-2700-446f-9838-32914e5c2957",
        "cursor": {
          "ref": "936faf86-e9bc-4167-b636-82bacb8e9626",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a2e0cf2d-7714-400b-a0ed-3c9bfbd05aaa"
        },
        "item": {
          "id": "937136a4-2700-446f-9838-32914e5c2957",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "012d17d9-247a-404d-b678-1ca972fc5b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a818d9a9-d11a-4b8f-9424-968ca2814977",
        "cursor": {
          "ref": "a3ebc05e-b844-4136-9506-1fafb5d5aa6f",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7bb90ed9-c66e-43be-9f3d-654d73b4ea9d"
        },
        "item": {
          "id": "a818d9a9-d11a-4b8f-9424-968ca2814977",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6ed7e649-31e8-426b-a9cd-0d15980e9d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e049ab-91a1-4ef5-bc8b-49041ebb79ee",
        "cursor": {
          "ref": "706d0221-a44a-4a1f-8de4-f5d2fa563f96",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b55869ca-4345-4b24-8057-285290c3fec0"
        },
        "item": {
          "id": "17e049ab-91a1-4ef5-bc8b-49041ebb79ee",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5aaeafa7-b54b-4e0b-8f5b-f4fcfb1a304c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c75061d-8fd2-4851-91dc-695ff1b93abe",
        "cursor": {
          "ref": "a0ee4579-df01-40f8-b8bf-5c7e653ac58c",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ff73c173-d4c5-4e85-b39e-df2ae333db46"
        },
        "item": {
          "id": "4c75061d-8fd2-4851-91dc-695ff1b93abe",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bb95260a-6786-4844-b05d-460938769582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb978f79-af09-497d-b898-74610abd64d1",
        "cursor": {
          "ref": "d17ac9b2-8708-4fbe-9867-905f8c1cfcbe",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9de5f45d-d812-45ed-99ef-7359fe208cbc"
        },
        "item": {
          "id": "fb978f79-af09-497d-b898-74610abd64d1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "632e56d5-bd48-4513-9de0-4a4340836900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6cb4db-599e-405b-88c8-41bd21f1e2a9",
        "cursor": {
          "ref": "e69d8e96-c59f-44c5-aba1-3861a20acb72",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3337eba1-144a-4161-b9c8-2b414fc032ba"
        },
        "item": {
          "id": "1b6cb4db-599e-405b-88c8-41bd21f1e2a9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e9ebe22f-09a1-4d4d-b6be-1ec4e966b401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875b187b-5011-4034-9206-2b54bbd32d59",
        "cursor": {
          "ref": "d6f25cf4-6809-4534-9154-d3d9cb803fdd",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d0be5728-549b-4b74-98fc-87f39e6d6391"
        },
        "item": {
          "id": "875b187b-5011-4034-9206-2b54bbd32d59",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5bae10ac-32c5-4a33-8614-1082badbc186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbd12d7-242d-47dc-8ef2-40b08d73f7a9",
        "cursor": {
          "ref": "298d3e06-8838-4caa-a8b8-7400812a16f4",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0395c269-ce50-4cdf-932b-7e6e10d16305"
        },
        "item": {
          "id": "4bbd12d7-242d-47dc-8ef2-40b08d73f7a9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "127daba0-9c95-4cdc-951a-f51702ebcbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e49a1e-9856-40e4-833a-c25f591e30d7",
        "cursor": {
          "ref": "3f5a87af-15d5-412a-ac7c-1d8d45106a44",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6ecebe7c-0ab5-4ee3-830a-f686a56f27d8"
        },
        "item": {
          "id": "a5e49a1e-9856-40e4-833a-c25f591e30d7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1ea01a85-a363-4ca4-8a72-b0042255e548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906fa2f1-2487-4635-a4f8-a148ef288689",
        "cursor": {
          "ref": "2c539371-72a2-4818-9c23-701f58143a08",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6328b2e3-fa6a-4a94-9272-97bacb8d3949"
        },
        "item": {
          "id": "906fa2f1-2487-4635-a4f8-a148ef288689",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1942a85d-04df-4669-99ae-f5b39a086984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48450db7-7a05-4472-9e80-ae11ca2ea2cf",
        "cursor": {
          "ref": "69055ac9-b4a8-4d23-9b90-9e5bc25229aa",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9501127e-d71f-4e1b-bbd7-3bd2a08a0416"
        },
        "item": {
          "id": "48450db7-7a05-4472-9e80-ae11ca2ea2cf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ed514ba7-d9b2-4f28-b970-cefe5d4b107b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf7ae18-5f1d-4e71-8373-d35aa9c5289a",
        "cursor": {
          "ref": "259f406a-a48f-4f07-b631-b5831c4198ef",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "587ea674-bfa5-4f9d-8fe3-50a825b9b289"
        },
        "item": {
          "id": "7cf7ae18-5f1d-4e71-8373-d35aa9c5289a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2d277585-ced3-4114-80c9-6c85c4fa3b01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 571,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ce5995bb-f986-47d9-8ed8-af1123d4da0c",
        "cursor": {
          "ref": "fa883036-3f7a-40c0-8e81-a7e2e116b555",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e1c582f8-29dd-45a5-b0cc-a4cdcbcc035b"
        },
        "item": {
          "id": "ce5995bb-f986-47d9-8ed8-af1123d4da0c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4475ad2d-5dbd-43b1-b53b-c94dc0276824",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 930,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9e11291a-9397-4720-a909-9b9d1b33893c",
        "cursor": {
          "ref": "fde4c4f0-61b4-4441-ad49-d328a8a91d90",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ba092d83-55cb-4062-9b98-d091226ef89a"
        },
        "item": {
          "id": "9e11291a-9397-4720-a909-9b9d1b33893c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "13c853ca-df05-4d00-98eb-c1e77a188a63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "be46b748-c637-4282-960a-d2fbd9a99f31",
        "cursor": {
          "ref": "90e5b2c2-01c9-4bf7-be5a-8a054ced862b",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b6b28a6b-d5cc-48b4-89b9-62e528ea2d2c"
        },
        "item": {
          "id": "be46b748-c637-4282-960a-d2fbd9a99f31",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f8f60ecc-4859-4b51-aba7-7035864bc61b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 595,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a50ee1bd-ac70-47ad-a4b4-ec5ce1e7de8c",
        "cursor": {
          "ref": "959a30f7-c1ea-46cd-a6e0-60a8e3ff1341",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1e7509c3-1cf8-418c-9835-773b41b1bbd6"
        },
        "item": {
          "id": "a50ee1bd-ac70-47ad-a4b4-ec5ce1e7de8c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "67dac538-5f75-4765-8e16-6681f70789ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "24aea134-45ea-4c83-8335-e5f77313c947",
        "cursor": {
          "ref": "d7369e1d-5daf-4085-9a41-feb790c30302",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a1aa42cd-692e-4f6e-81a2-d3263bb6412a"
        },
        "item": {
          "id": "24aea134-45ea-4c83-8335-e5f77313c947",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5212ffe6-379c-40e2-9662-b3e4f462fb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fff7cb-abc8-43dd-a9f8-0da45262bb3f",
        "cursor": {
          "ref": "c994db5d-9362-4d57-9113-a1a308e14c98",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "98deeb99-5bd1-4d84-bfe5-fd1771b85468"
        },
        "item": {
          "id": "31fff7cb-abc8-43dd-a9f8-0da45262bb3f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c9ea862c-ede9-424b-84c6-925347a98667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94518b4-24e7-4741-829d-90ef9b052876",
        "cursor": {
          "ref": "4134f5c3-0b60-4cf5-b41b-6cf6f7fdbb76",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3815c6d0-142a-4a2f-8458-a4865f1504e3"
        },
        "item": {
          "id": "f94518b4-24e7-4741-829d-90ef9b052876",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c52906cb-9765-4c64-a55f-c49d8840a221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489e238e-ffa2-46af-8e25-9f39e2c544d8",
        "cursor": {
          "ref": "bdd35e53-f34c-49ac-b66d-70061ab4f3dd",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "774603ef-298b-4129-ae28-d05f6de3d6fe"
        },
        "item": {
          "id": "489e238e-ffa2-46af-8e25-9f39e2c544d8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e9e1ef02-c44d-46af-b2ca-4cd724775132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269fefb6-67d9-4681-9ce7-e8e459db0c01",
        "cursor": {
          "ref": "c7b2c98f-5e30-491d-861a-177644cbfdd8",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5d13ae51-22f5-4475-9e56-3785a085def1"
        },
        "item": {
          "id": "269fefb6-67d9-4681-9ce7-e8e459db0c01",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3076f43d-47fa-4943-b15b-3b88979b75f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567cc1a7-65e7-483d-89a0-9720bd8c61b4",
        "cursor": {
          "ref": "04b5087c-f40e-4fa1-8b9e-8370fe73c84c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b42d79aa-2e4a-47d1-b56d-f26eda66ffbe"
        },
        "item": {
          "id": "567cc1a7-65e7-483d-89a0-9720bd8c61b4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4131c5bc-b252-4b84-ab88-7abb842f20ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56733f91-e50f-4076-ada7-3a42ca26d5e7",
        "cursor": {
          "ref": "34e06391-c8fb-48ed-b57d-db89843decbc",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c8104cb5-e864-48f0-bf5e-51855f097a6a"
        },
        "item": {
          "id": "56733f91-e50f-4076-ada7-3a42ca26d5e7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2cd5c5d6-b32d-4ff6-bc03-3c9dc78cb305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160b570e-58d6-4e87-a64b-540956c0f8a5",
        "cursor": {
          "ref": "f27e2e24-be41-4d20-b99c-8c08c60d001b",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ab1f9965-a51b-436f-9814-a3572b032c8b"
        },
        "item": {
          "id": "160b570e-58d6-4e87-a64b-540956c0f8a5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1ca75a19-0f57-4396-9287-b8533c39356b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1296dec5-19fb-4530-8fb4-32d1b4692462",
        "cursor": {
          "ref": "374dd3e3-ccf0-4490-9107-ae6ef4b5fc4c",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "aca83452-e262-4dfb-a6ac-454555b8b51f"
        },
        "item": {
          "id": "1296dec5-19fb-4530-8fb4-32d1b4692462",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c61638e2-9c1c-4562-8bf8-d09ad6766be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541741a2-b5ec-4a48-b0fb-831851252d12",
        "cursor": {
          "ref": "e8464a0f-c072-4b80-b8a5-4d34e9b5d65a",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a3b31da9-2510-4367-967c-1696ca3932fb"
        },
        "item": {
          "id": "541741a2-b5ec-4a48-b0fb-831851252d12",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e348bf43-ac14-4290-9f52-2f88d261e602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb314d0-488c-4389-ad0a-124fb21e263d",
        "cursor": {
          "ref": "2925c248-4688-451e-a450-7072ce01ccab",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fd75d6b3-8f7c-405d-aaf0-dad05a38b941"
        },
        "item": {
          "id": "edb314d0-488c-4389-ad0a-124fb21e263d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7baafcf4-1d7c-4af0-8a4a-67ae4b2970c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f2a9e4-a575-4deb-b210-dfcbfc023331",
        "cursor": {
          "ref": "6dc7223e-f239-445c-b9a1-4d252e31854b",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "807723fd-d3a2-441f-8620-adebddf0b9b7"
        },
        "item": {
          "id": "77f2a9e4-a575-4deb-b210-dfcbfc023331",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7f3b918c-65fe-4e0a-a985-9965f88656b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4899a06a-47b8-40a6-9407-620f8b6d78c8",
        "cursor": {
          "ref": "991fc8ac-520f-441c-b626-7823179d2dfa",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6def7c3b-c9da-4163-840c-da02bf169029"
        },
        "item": {
          "id": "4899a06a-47b8-40a6-9407-620f8b6d78c8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b165b616-5e84-41e5-ade5-870dd5930e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff37af3a-8357-4a19-bc61-b098c82a63f6",
        "cursor": {
          "ref": "d1104407-e6af-45bc-93c7-640ae44aea02",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c7a2af20-0535-4c02-93e9-275717b7722c"
        },
        "item": {
          "id": "ff37af3a-8357-4a19-bc61-b098c82a63f6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "321244cb-518a-4adf-ac80-56154091847e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab5edb1-8664-44b5-b393-4e4daf7202a8",
        "cursor": {
          "ref": "a1f761a3-a57f-4597-9141-e8b9cc971473",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c94c7cf6-5abb-46b8-9b71-d046aac5f3af"
        },
        "item": {
          "id": "5ab5edb1-8664-44b5-b393-4e4daf7202a8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "99a02f0d-ccb0-4363-8977-9f75528cb9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b624ad14-9c5c-419e-8b21-f389c11f5132",
        "cursor": {
          "ref": "ddff191c-115d-475c-a50d-bdb74b50dbf5",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5506fde6-dfee-4757-8f1c-be6e8ac6bd7f"
        },
        "item": {
          "id": "b624ad14-9c5c-419e-8b21-f389c11f5132",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a3de40a6-1df2-4d63-bdf4-8c4db6c997f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176b64cf-5c9f-440c-808a-fa091343eeb2",
        "cursor": {
          "ref": "e81e9ec5-b89c-4157-b4c1-b36b18804162",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "08586919-4d81-4ec4-ada2-d3fcfed65b66"
        },
        "item": {
          "id": "176b64cf-5c9f-440c-808a-fa091343eeb2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "22c40bcc-aceb-4d87-917c-1f28e6a9b570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e8f397-d051-4614-8a93-996721ceba1a",
        "cursor": {
          "ref": "93c1a2e0-23d7-4280-97ad-e28bcc836b65",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "36377ea2-ecee-4b9b-bac3-7aac38ce91af"
        },
        "item": {
          "id": "72e8f397-d051-4614-8a93-996721ceba1a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cabe30cf-962d-47a6-8073-ea93537973ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5783ff-4f23-49b8-8fc5-9260bcd70ba7",
        "cursor": {
          "ref": "9ace7fc2-f9ee-4127-a038-381eba6124e8",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cc325e4a-557e-4a6b-9b0b-36428d1ea463"
        },
        "item": {
          "id": "bd5783ff-4f23-49b8-8fc5-9260bcd70ba7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8bc4546b-af16-4ec7-b06d-0032327ffc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0756139-cef0-4b1a-87f8-03202c28c48b",
        "cursor": {
          "ref": "bf779e37-681b-4f23-8243-37e0b155caa4",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "42a72635-5968-44f2-ab78-daf6bfd96dec"
        },
        "item": {
          "id": "c0756139-cef0-4b1a-87f8-03202c28c48b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "759a21ce-ff72-4204-b7e4-f57a79e67f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1222eca-918d-4872-acae-258174e34b04",
        "cursor": {
          "ref": "a9d00673-22fa-44fd-81c5-e8b4739ee082",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "06b031aa-a189-4aa3-b676-019de8ff722f"
        },
        "item": {
          "id": "f1222eca-918d-4872-acae-258174e34b04",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "35749d8f-9058-4cc3-9435-f0b4468df30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e852cc6d-3eed-47ae-8c31-059f15196933",
        "cursor": {
          "ref": "41225687-9a3f-4771-a5fc-bba172522175",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ef103e5d-0b03-4cc8-8ce5-5aaa48edaac3"
        },
        "item": {
          "id": "e852cc6d-3eed-47ae-8c31-059f15196933",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e5fce777-e73f-499a-ac25-b4293f95af89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd6a640-791a-428b-8795-14ff29dd2e28",
        "cursor": {
          "ref": "109acf29-92a0-454b-81af-cacb8eb4e449",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "53662a20-e23d-4c66-a500-6cb8be9fe670"
        },
        "item": {
          "id": "9cd6a640-791a-428b-8795-14ff29dd2e28",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "25d0e1fe-2909-41c4-974b-dab25fd0d5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9838dfc-e284-45d7-a9b4-48dcede4a590",
        "cursor": {
          "ref": "bff01009-f300-4642-af35-8b28cd6e2e44",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "83dec912-33b5-496a-9071-411125f33be6"
        },
        "item": {
          "id": "a9838dfc-e284-45d7-a9b4-48dcede4a590",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "88d7f495-3ac9-401f-8481-9942ed022dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88d29fb-f2f5-4633-8b3e-c62b70cc8640",
        "cursor": {
          "ref": "00e100d2-9461-43c0-ade5-80b4e15b4003",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8f158e8a-7bd7-4ad8-8a5f-d55a84021c3b"
        },
        "item": {
          "id": "d88d29fb-f2f5-4633-8b3e-c62b70cc8640",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cc1c45fb-57c1-438e-a60e-441e7deacce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6b5927-a03b-4391-a779-c0e089765dad",
        "cursor": {
          "ref": "f2ad5fca-72ef-4ce7-8117-b85a5db7146a",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a8d26ad5-b2d7-4fd2-b065-ad4726687b70"
        },
        "item": {
          "id": "6f6b5927-a03b-4391-a779-c0e089765dad",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d93a40e4-8ae4-43d2-9162-735604eb1010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc04c58-9dbd-4e32-82b5-bad7b3a24ff8",
        "cursor": {
          "ref": "3a9a689a-4909-46a8-adb0-01b977e90157",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "710a6e30-1507-47c9-a118-94cb1690aaa6"
        },
        "item": {
          "id": "cfc04c58-9dbd-4e32-82b5-bad7b3a24ff8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "713b8b5c-0f65-4947-aafc-d60abccdb016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99877d1f-4038-4a0b-99c3-8497a62c5be5",
        "cursor": {
          "ref": "17d32de8-3249-4ac8-9b53-b3aeabb7ec38",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "40eefa92-228f-4ff0-a071-5591115f774b"
        },
        "item": {
          "id": "99877d1f-4038-4a0b-99c3-8497a62c5be5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "05f656ff-c7f3-4ecd-837b-19f955f0b96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a04589c-4480-4c78-915e-423f04b436ce",
        "cursor": {
          "ref": "cd5c3061-308d-4d03-9d7e-cb92995a0d33",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "16eb00e5-47e0-4b00-95c1-667593a71300"
        },
        "item": {
          "id": "1a04589c-4480-4c78-915e-423f04b436ce",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1a76c44c-6db0-4b5d-bb96-b37faca6bc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fb818f-fc0d-47e8-85e2-bedc427753f5",
        "cursor": {
          "ref": "5b8bd299-60fa-43de-bf61-bab09168f577",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5b60bab6-b8d0-47c2-abb8-adb2f9bec139"
        },
        "item": {
          "id": "e2fb818f-fc0d-47e8-85e2-bedc427753f5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "807b12ef-6bcc-4628-8488-74dc29448eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8175cbb-abe6-4bdf-8ceb-7cb6e019b012",
        "cursor": {
          "ref": "773bfacc-a429-4e85-86ed-95a6bb6da1d7",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c7701244-e69e-4905-95a2-5d6b215fe1f4"
        },
        "item": {
          "id": "c8175cbb-abe6-4bdf-8ceb-7cb6e019b012",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cb1c2ba9-cf8c-41b7-b373-71558de88ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435e4d39-39cf-4a34-a198-0d7ba0fdc9d6",
        "cursor": {
          "ref": "df60eb86-c081-4641-ba49-fe3c8b7c5060",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b14fc939-6c6f-4634-9cc4-5ea23af46dee"
        },
        "item": {
          "id": "435e4d39-39cf-4a34-a198-0d7ba0fdc9d6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4ee527d6-f7bd-48ea-918d-b8579f8efd9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e614c71-0138-4246-8826-604dffecea6b",
        "cursor": {
          "ref": "ac1724c5-bfe1-4d2e-b785-f58f6c8fd316",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2f25e2eb-f862-4ddc-b058-1ff8e2b8207c"
        },
        "item": {
          "id": "0e614c71-0138-4246-8826-604dffecea6b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cc2be386-820c-4f26-af71-0191f3fe3e9c",
          "status": "Created",
          "code": 201,
          "responseTime": 935,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d87cff-92aa-40c8-98b5-cb386ecb93e9",
        "cursor": {
          "ref": "f332dee9-095c-4865-b89d-5f73d59d40d5",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4bf4a203-288d-4ee9-b6cb-cb953c61394c"
        },
        "item": {
          "id": "d3d87cff-92aa-40c8-98b5-cb386ecb93e9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ca83277e-d65b-4870-a7c8-e188e0559a1f",
          "status": "Created",
          "code": 201,
          "responseTime": 865,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b83c1cc-fc3b-4062-b17e-72a0eca469a0",
        "cursor": {
          "ref": "30c284fa-10c2-4edb-8c5d-35119901c91d",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "be593fd8-6e7a-4282-8461-cbafc8560d02"
        },
        "item": {
          "id": "2b83c1cc-fc3b-4062-b17e-72a0eca469a0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6c00dc53-e84b-4147-9081-d7bd940ccb4d",
          "status": "Created",
          "code": 201,
          "responseTime": 865,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "119268ff-4e22-497b-9637-de04140008eb",
        "cursor": {
          "ref": "df92e5f0-2b3d-4484-b5b9-ba7746444bd1",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "65772f3e-f1da-4db1-b6fc-b0cb00b843c1"
        },
        "item": {
          "id": "119268ff-4e22-497b-9637-de04140008eb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b815f090-da3d-49c7-b49b-3491f83e59c3",
          "status": "Created",
          "code": 201,
          "responseTime": 852,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3346f1-3ddd-44b8-ac92-a8ebcca3204a",
        "cursor": {
          "ref": "1b74c254-8139-4388-899d-b07aa9f17664",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bb769fc7-eb91-496c-8d7b-f1ccf0faab77"
        },
        "item": {
          "id": "3c3346f1-3ddd-44b8-ac92-a8ebcca3204a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "88d61240-7158-4d31-96b7-b41a4ce75ffd",
          "status": "Created",
          "code": 201,
          "responseTime": 1171,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6ef68c-f52c-45de-a692-e82bbb7a5080",
        "cursor": {
          "ref": "f2a63bb8-ca86-4f6b-a915-3b57cc9ef959",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "64dd700e-8e68-40d6-a34f-25688dd41292"
        },
        "item": {
          "id": "6e6ef68c-f52c-45de-a692-e82bbb7a5080",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ddfe98e2-3343-4b06-a0ef-78e469d48fda",
          "status": "Created",
          "code": 201,
          "responseTime": 913,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1360f542-3c42-42a5-a93c-a28dde54b51d",
        "cursor": {
          "ref": "89efa80e-39b2-4f84-8997-98c4faa2319e",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3269575e-0196-4ec7-b671-f3547bf6fef5"
        },
        "item": {
          "id": "1360f542-3c42-42a5-a93c-a28dde54b51d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ef0ae1f5-f720-4572-88e4-bafb9bc2414c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c263e5d-64bf-4825-a574-aabf23d0ead4",
        "cursor": {
          "ref": "30cc4a8d-e5e0-44a5-84be-86f0c9ad1ad8",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e9f06862-e3f7-483b-b0c6-1aca8957e6e2"
        },
        "item": {
          "id": "6c263e5d-64bf-4825-a574-aabf23d0ead4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "14d93610-4634-4d27-9e8b-28d8425c9df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a4452c-08e4-4cd7-aa26-a7e023fcf022",
        "cursor": {
          "ref": "acefa8c1-f556-4f1e-98a0-ef5185efdac1",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9e479f45-d7bd-4167-8fee-52de74872cad"
        },
        "item": {
          "id": "27a4452c-08e4-4cd7-aa26-a7e023fcf022",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "93ee039f-b0e0-43a2-810d-c081672f0bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f046d01-d8eb-47cc-bb66-01c3f76a2b8f",
        "cursor": {
          "ref": "ac0ba56b-23ac-4334-84e7-ec677e327687",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f9f7fdd6-43f8-4753-9a55-754d50975e2f"
        },
        "item": {
          "id": "6f046d01-d8eb-47cc-bb66-01c3f76a2b8f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "81aaad19-1f05-479c-9f04-e93ab5dd6487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2647c77f-a895-4390-9444-2cb4e0dd00e9",
        "cursor": {
          "ref": "2cb562d0-f693-4a5b-bca1-c7144ed0f50a",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "73f8139c-21b9-4377-93b9-1a09b53f4e03"
        },
        "item": {
          "id": "2647c77f-a895-4390-9444-2cb4e0dd00e9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "91901f8e-ab74-4ceb-a701-c26c796c0c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebde918-491a-4e0f-b25c-878ff64f5a76",
        "cursor": {
          "ref": "c4175a10-a9b9-4bef-94d7-00cf76f0c61e",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "50a027fe-640b-4890-a41b-892a1bc05bf0"
        },
        "item": {
          "id": "aebde918-491a-4e0f-b25c-878ff64f5a76",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a3a9352b-f73a-4eb2-8296-e5a96f9a28a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0df1ff6-9ce8-4fdb-9c27-0fcc868d68d2",
        "cursor": {
          "ref": "ba19f3fa-df18-46b5-9658-039586f7ac45",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "057750f5-d780-4819-8531-43129fc03402"
        },
        "item": {
          "id": "f0df1ff6-9ce8-4fdb-9c27-0fcc868d68d2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "668a88a6-9864-4d11-a220-eaeda0d999a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6166c8d9-675e-4e3c-9bda-b5e046636de1",
        "cursor": {
          "ref": "271f29a8-150b-408c-85a3-54a3c1c8f04c",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a2fdaa0a-c7ca-480c-9478-b13ea4f56409"
        },
        "item": {
          "id": "6166c8d9-675e-4e3c-9bda-b5e046636de1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "390aba9c-5268-438b-974e-4f19f6bc9a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285c16d9-50df-4baa-8f21-ba98a39a769d",
        "cursor": {
          "ref": "620295f9-3a2f-4d98-9c0b-dc29d136b2fc",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "066e717b-fb92-461d-8b8b-59daae55a45c"
        },
        "item": {
          "id": "285c16d9-50df-4baa-8f21-ba98a39a769d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9fe2e29d-6164-4142-81f3-2d438f1126ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae40b4fe-3f9b-44e0-ba03-dfaf23a0c593",
        "cursor": {
          "ref": "8a4c46aa-d9f1-4d06-96eb-f81b90373c2d",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c6f4fe22-45b5-4f46-922b-3782981621c9"
        },
        "item": {
          "id": "ae40b4fe-3f9b-44e0-ba03-dfaf23a0c593",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "82351b31-cf44-4d5b-a287-42e904770e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd15d59-d0b5-4464-9ec4-d8562721178e",
        "cursor": {
          "ref": "d0790d17-434b-4794-bfde-505430f325f6",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7b2be584-742f-4ee2-b8b3-b558d6c1ae5b"
        },
        "item": {
          "id": "4dd15d59-d0b5-4464-9ec4-d8562721178e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4d4f04e1-6622-44fc-b646-fd6e82a41f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f13212-f14a-496b-b2bf-dd366f96bbf2",
        "cursor": {
          "ref": "cf1a6320-d2e6-4b68-8514-d7dcc489f05d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "365920ca-400c-4de3-a0c2-0f9251477b7e"
        },
        "item": {
          "id": "c2f13212-f14a-496b-b2bf-dd366f96bbf2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "255af471-6fdd-4e72-a6b1-a5d1bcc35564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eda227a-dee3-4424-bfda-151c38d2fdb0",
        "cursor": {
          "ref": "7fbd990e-e19f-42aa-bdec-0ff261c7bcbf",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "58ce2c8d-d807-4970-be8c-04e1c1b3aa8a"
        },
        "item": {
          "id": "6eda227a-dee3-4424-bfda-151c38d2fdb0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "75d247db-d413-4ae4-b220-74159b68d463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfbc29b-2378-439d-91a3-8af5be62f97b",
        "cursor": {
          "ref": "85657b84-c78c-4dbd-b9f4-7adc78fd2f42",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "abd52ad8-e910-42d9-9af8-b3ffb14a7b37"
        },
        "item": {
          "id": "6cfbc29b-2378-439d-91a3-8af5be62f97b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1f8ea241-c8bc-4b11-a323-9da640d19faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a0963f-2f4e-4488-83ac-a71c252d6ca7",
        "cursor": {
          "ref": "7e51bdc6-e45b-42a2-a1d2-de4c9716d91e",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "220e0edf-2f66-41b8-bb8f-fe86741b0548"
        },
        "item": {
          "id": "76a0963f-2f4e-4488-83ac-a71c252d6ca7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "87498107-6c81-4022-9447-c97fb8ce728e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa5de5c-6995-4795-b2e6-01fbe007f7fd",
        "cursor": {
          "ref": "9df1c833-77c5-462a-b0e4-aed599ae27d8",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1732dfca-ffd8-413c-acd1-41397bdf1e5c"
        },
        "item": {
          "id": "8aa5de5c-6995-4795-b2e6-01fbe007f7fd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "438b9bd7-71c6-418b-ab97-ea16c45363d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f75b7d8-bad1-412d-8cdf-d0459bf766e5",
        "cursor": {
          "ref": "974d62d2-5f54-4e07-baa3-b4a5bccfde46",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "43bb784f-4922-45b6-8e23-668c947dc738"
        },
        "item": {
          "id": "4f75b7d8-bad1-412d-8cdf-d0459bf766e5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b18c77c7-de2d-4cfe-a696-9384c998a5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afaa242-5aca-47eb-8240-954e7a380c2f",
        "cursor": {
          "ref": "41a3f99e-63a7-4171-b49f-2828d0111e42",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "83ca4071-bac5-4d21-961e-bf88556fedb0"
        },
        "item": {
          "id": "0afaa242-5aca-47eb-8240-954e7a380c2f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6a9ba832-0ab0-4913-b6ec-4b145cf94899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f7cd6b-3350-49a4-a08e-32b0e62beb7e",
        "cursor": {
          "ref": "5b186894-2502-4bae-b9c5-355624cceab9",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "280899f6-017e-470c-86ef-199db8322f8a"
        },
        "item": {
          "id": "23f7cd6b-3350-49a4-a08e-32b0e62beb7e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7f95186a-872d-43f7-a1a4-28bbf75aca00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861eb34d-8bde-4829-aea3-f5ed086442e3",
        "cursor": {
          "ref": "f62d127a-6b45-4efe-bc8a-ae04ed556993",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4e380c80-14c8-4695-979a-ce212befc8b1"
        },
        "item": {
          "id": "861eb34d-8bde-4829-aea3-f5ed086442e3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c9144ad6-752f-4827-b7af-f08f7390dfdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2669a190-1faf-48d7-8443-e5295dfda1b3",
        "cursor": {
          "ref": "6f35f73f-0a37-46b5-acc5-a6782b1e0615",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9e0eb349-1447-476c-bba5-d41ae0b94c9e"
        },
        "item": {
          "id": "2669a190-1faf-48d7-8443-e5295dfda1b3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ddcc53d3-97eb-402f-8a3e-ad6644d948c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7efd59-fb0c-4c38-b8a8-64d25073b94f",
        "cursor": {
          "ref": "3a0f0592-0cf6-416f-bae1-fdce5ff16eb1",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3cf8b8aa-6efa-4013-86f6-af7759b125af"
        },
        "item": {
          "id": "2f7efd59-fb0c-4c38-b8a8-64d25073b94f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8e10c21a-a56f-4037-a64a-36608f721110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fc9b68-395e-4dae-a23e-693e66cef08f",
        "cursor": {
          "ref": "6f48bc5c-508a-4f7c-b72c-94e3c9a22441",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e84de08f-5f8e-412b-ba65-6522d3f41135"
        },
        "item": {
          "id": "e8fc9b68-395e-4dae-a23e-693e66cef08f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7f8a1807-4e5c-4610-acb4-a174b8c3faea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b23352f-d7ff-48f0-8c8d-0139c4e530ab",
        "cursor": {
          "ref": "514e841d-d80a-45bf-ad11-655b0d316ea9",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d8667445-82f2-4452-abdf-703f07c9acb5"
        },
        "item": {
          "id": "5b23352f-d7ff-48f0-8c8d-0139c4e530ab",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dec03f89-1df7-4f1e-94c3-3631227b2872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b834ff-f829-4a65-9440-d34c55d32aeb",
        "cursor": {
          "ref": "926989a5-5926-4c6f-bb89-d8a1afece69e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0944e774-584d-4bb2-b7a8-90301cc91c7f"
        },
        "item": {
          "id": "04b834ff-f829-4a65-9440-d34c55d32aeb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bc8b849e-6da1-4fd9-bff5-7b150473a681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128938da-a223-49c7-86fc-c03f949b64cd",
        "cursor": {
          "ref": "aa4398ad-edfb-4fee-936f-38e90383790d",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3002db99-0e20-48d1-aa80-efd7e40fb70d"
        },
        "item": {
          "id": "128938da-a223-49c7-86fc-c03f949b64cd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0c139062-3ec2-4b59-a18d-e6772fc29098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7913deec-1e6e-4e1b-b00c-3a4e21f124a7",
        "cursor": {
          "ref": "6483ac30-04fa-4f79-99b5-991afafdde26",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1a075851-c656-40ba-9236-18664224bcb5"
        },
        "item": {
          "id": "7913deec-1e6e-4e1b-b00c-3a4e21f124a7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a758bd78-c11a-4e2c-ad83-03fe2d7fa8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28def77-ec4f-4181-9377-d8ba3e516671",
        "cursor": {
          "ref": "5ffd7bc7-28cd-44c8-9023-34b0921163e1",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "06f01b4f-8cff-4f38-876b-2651778192aa"
        },
        "item": {
          "id": "c28def77-ec4f-4181-9377-d8ba3e516671",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c2833972-b84c-4abe-9da5-2a327233a331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2face785-d7ac-4834-903e-3d52d552825d",
        "cursor": {
          "ref": "be48d553-d989-4ba2-bfe6-95ea89090f09",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "40da0ca0-8ea5-4d13-9864-b4cc915dcb25"
        },
        "item": {
          "id": "2face785-d7ac-4834-903e-3d52d552825d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "14ac95b2-c81e-4a53-8f08-131d545e68fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f966c3f6-c4e8-47e5-96cf-a578c614ab31",
        "cursor": {
          "ref": "2028aa3e-f40b-4a52-bf35-462543e8745f",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "795910dd-02d3-4576-980c-4695a02f457b"
        },
        "item": {
          "id": "f966c3f6-c4e8-47e5-96cf-a578c614ab31",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "138600c5-6d26-4f15-9777-af9514b65716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20b7b01-362d-4672-b2ea-cbce6f051a45",
        "cursor": {
          "ref": "02f1975c-66e0-4cac-82c4-3455e8acb7fa",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1ca13dd0-521d-4f06-b5b1-5c957b7fb1d7"
        },
        "item": {
          "id": "b20b7b01-362d-4672-b2ea-cbce6f051a45",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "45af6be1-86a7-4b1e-8879-2cc62bfefff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b66945f-a75b-4de7-be38-d800b31be6fc",
        "cursor": {
          "ref": "6d0c310b-70e8-4a54-b74a-569a00a1866a",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6bc39e76-9232-461a-b3e3-d232b0e82a28"
        },
        "item": {
          "id": "3b66945f-a75b-4de7-be38-d800b31be6fc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a97c6fc7-3763-4df4-88c2-7dd42274cce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d258f85-c1a3-4547-a63e-b8e7960ef5e0",
        "cursor": {
          "ref": "1f23c2b4-a4c1-4978-9f83-defcdefb8bd0",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "64f156e7-f626-4acf-b920-c2f234234686"
        },
        "item": {
          "id": "2d258f85-c1a3-4547-a63e-b8e7960ef5e0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1332ee13-f172-4a8f-88fb-6ca262c9fa96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41dc73d-7e09-422b-afa5-5ad613f2bd59",
        "cursor": {
          "ref": "d55f4252-f32a-4cda-bf68-ccd1a92fef1f",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "18a5195e-99ef-4b2d-959c-c70db8e8fd83"
        },
        "item": {
          "id": "c41dc73d-7e09-422b-afa5-5ad613f2bd59",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "73f9c094-0355-4e0b-a312-7b4a58fa0b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e40883a-822f-4459-9a33-3eb5b72b538d",
        "cursor": {
          "ref": "93b5dc4f-c59c-4912-a46e-1769bae9db8d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0e5d43e3-6429-46d4-9b51-47c9e7aaa0b8"
        },
        "item": {
          "id": "3e40883a-822f-4459-9a33-3eb5b72b538d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6c80a8af-487f-468c-9c0e-2c8296985bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a531d4ad-387f-41b0-b705-acd34e317fce",
        "cursor": {
          "ref": "2144b0ba-3795-433c-909a-c90cc0d3b731",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c2226c48-e78a-40fc-9483-8ef33ac10cee"
        },
        "item": {
          "id": "a531d4ad-387f-41b0-b705-acd34e317fce",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c2ff0c69-aac7-4017-b949-d84fd1b06007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da39ba1b-1a25-4087-bec3-e8a79c718ef8",
        "cursor": {
          "ref": "f6f89709-a417-4467-8560-745246b5dff9",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bf5a19be-0168-49d1-9f51-6710a11038d8"
        },
        "item": {
          "id": "da39ba1b-1a25-4087-bec3-e8a79c718ef8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "95fb09e6-6c20-43e5-9de5-3c88a56c4f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535be70b-1618-4ecf-b2eb-5bdc6518fda7",
        "cursor": {
          "ref": "dd92b013-e53b-4171-ba23-d0b9a8d5aef4",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8b56c80e-9e58-4b41-bd2c-48ffee35787b"
        },
        "item": {
          "id": "535be70b-1618-4ecf-b2eb-5bdc6518fda7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2cff3256-c22c-4345-bf27-e559bba46b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbba1a3b-c2ee-4162-a0a7-cb04b5ae294b",
        "cursor": {
          "ref": "1c839a27-3664-4d5f-b6a0-c98113c95322",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0106e6b0-0418-42c3-b210-6484543add39"
        },
        "item": {
          "id": "bbba1a3b-c2ee-4162-a0a7-cb04b5ae294b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fb18b262-6b87-4139-9e4e-9b503708ef22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4bbe76-c39a-4f2d-b3eb-f033801fd035",
        "cursor": {
          "ref": "861e5d83-4b3d-4b47-b5db-162b49fc7157",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d6fb1c0d-3685-48a1-80aa-406dfbae6231"
        },
        "item": {
          "id": "3e4bbe76-c39a-4f2d-b3eb-f033801fd035",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d3cb0985-7b41-4abf-9449-bcc1dbc23dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727098ba-d6a0-4410-8207-3b35a25a4c54",
        "cursor": {
          "ref": "c09de05e-1ebf-465c-87a9-ea463e49f0e8",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3917016b-a3df-4769-9956-9a638f9db36c"
        },
        "item": {
          "id": "727098ba-d6a0-4410-8207-3b35a25a4c54",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6839c5d4-b4b6-4a88-9475-2c9eca5e1c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6280a250-551d-4d17-b9c3-ef6e3eb9914d",
        "cursor": {
          "ref": "ce216e7a-2585-4e84-80b6-68673fcea8ba",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "eaae371b-7ebd-4e68-94c6-9c4843ebbec5"
        },
        "item": {
          "id": "6280a250-551d-4d17-b9c3-ef6e3eb9914d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3ae20c91-706a-4a31-a711-fafe54ee1231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bde3b0a-a1f1-46ee-9faf-f6417d619e7c",
        "cursor": {
          "ref": "b5ab3c41-3f35-413d-a494-432503816eb0",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0d424c76-8a9a-4427-bffd-eca202599371"
        },
        "item": {
          "id": "4bde3b0a-a1f1-46ee-9faf-f6417d619e7c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "248521ea-1488-4e48-8f39-bafe1f5eb06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126ccc33-6c24-4ea0-84bd-9d6e3ece1340",
        "cursor": {
          "ref": "b32a3cb5-cbc4-436c-9334-bacbf73f8165",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "811aa6f7-9de4-469d-aa7b-b4260677f700"
        },
        "item": {
          "id": "126ccc33-6c24-4ea0-84bd-9d6e3ece1340",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "54d3afc2-36c6-4bc3-ab8f-f95788c2c053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ccae17-9edb-45a5-96d3-bf1fcb3f50c9",
        "cursor": {
          "ref": "22ddab33-0b1a-4ac2-9d9d-d8dbebd65c35",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a643ada7-e96c-49cc-9de9-6fe67d7934f6"
        },
        "item": {
          "id": "47ccae17-9edb-45a5-96d3-bf1fcb3f50c9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1744986c-5c1f-4052-8913-acad958d52b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8347ce0b-97a7-4803-8782-844e02657088",
        "cursor": {
          "ref": "43357b95-f119-434b-a4d0-411b0dc4cda1",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "43a5e61b-116e-4e25-b466-9becb28225bc"
        },
        "item": {
          "id": "8347ce0b-97a7-4803-8782-844e02657088",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef5df469-c2c9-447a-8136-04d9cf109cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9574ae-484e-4c31-90fc-fe1aa41c2d8f",
        "cursor": {
          "ref": "15667093-d018-47a6-8a48-e197a6e0b4b1",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2c5a407c-e116-497d-a38d-d62f38d4b79e"
        },
        "item": {
          "id": "6b9574ae-484e-4c31-90fc-fe1aa41c2d8f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f23fcab7-3684-44ef-bde0-989c38d2ab3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7dc8d2-7246-4cb3-962c-7f2f0e373d8b",
        "cursor": {
          "ref": "f5ae6d19-e64f-4951-8d8b-7ace79fcf248",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "58e80480-4781-4331-88f4-bb971b8b97ed"
        },
        "item": {
          "id": "7f7dc8d2-7246-4cb3-962c-7f2f0e373d8b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1d1707d4-8aef-4009-a2bb-e15d9fc63494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b4ad69-9f9c-4e27-8f93-6e7751bd9dd1",
        "cursor": {
          "ref": "4364e816-0430-446d-9035-6f27008d6345",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "99da7b9a-dc34-4797-9e09-68ad4487c448"
        },
        "item": {
          "id": "33b4ad69-9f9c-4e27-8f93-6e7751bd9dd1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3d5fcb7c-22b0-400f-8438-956137bd5c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30d7630-77ff-4809-9eb0-50f2323531c8",
        "cursor": {
          "ref": "8c433843-a49d-4593-9bc5-45ee0cb9b947",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cd8c97e9-ce92-4664-9ab9-9e7e85a14bc6"
        },
        "item": {
          "id": "a30d7630-77ff-4809-9eb0-50f2323531c8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3339253c-54a4-4ded-bab9-f37246bbf892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e47ab4a-5eb2-4552-8a31-fc08df5438c4",
        "cursor": {
          "ref": "ad5740c0-a55b-4184-b7c1-aaa1e3bf2fd8",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7dd30ffc-180d-4fc4-a472-0db356d083ac"
        },
        "item": {
          "id": "4e47ab4a-5eb2-4552-8a31-fc08df5438c4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2fdb6bd9-f4e9-4d44-91c1-eae7dd6374e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca493a0-acd1-43b2-87b0-7cb4b2e60729",
        "cursor": {
          "ref": "56670afd-15e5-4515-8bb2-5243a798ce87",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4bacce7b-e6aa-4b69-8999-28a8c8dbe160"
        },
        "item": {
          "id": "5ca493a0-acd1-43b2-87b0-7cb4b2e60729",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d0cc2b03-70d4-48f4-89db-ecdcccec4bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d2d3a9-1691-4f98-ac67-c40b8214b249",
        "cursor": {
          "ref": "39767389-c358-4d58-9365-d5df08675aaf",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "acc19b2f-6b66-466e-8514-f86132ba9391"
        },
        "item": {
          "id": "50d2d3a9-1691-4f98-ac67-c40b8214b249",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "11b92e5d-6fb9-4b3f-a415-8324f1066e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f28240c-2673-4a21-8289-85bb7230460c",
        "cursor": {
          "ref": "e9dae650-5c80-4d56-9d51-28599f85a263",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cc744db3-df9f-4444-bc33-733a741985cc"
        },
        "item": {
          "id": "3f28240c-2673-4a21-8289-85bb7230460c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8583133a-d980-4a7c-8ba3-1d4d1d7edb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb90c76-720b-432e-b105-db114fa165d7",
        "cursor": {
          "ref": "a56ace93-159a-4a1f-826b-df66dda550bf",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a16d2a80-bbdd-4363-990a-d834441c5b02"
        },
        "item": {
          "id": "ccb90c76-720b-432e-b105-db114fa165d7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c43892cf-7d5b-4ab5-aba8-2671fbf77910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66aba67b-9491-4aae-acaa-45a3a3a2e9b3",
        "cursor": {
          "ref": "06d09c83-b948-4cae-9fba-9fabb9c70353",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a736b168-1598-4526-b720-a0a61dfb8e8b"
        },
        "item": {
          "id": "66aba67b-9491-4aae-acaa-45a3a3a2e9b3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8a9a6d56-3ffc-4a81-95a9-6b27c0ef52c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83639292-d5db-4e3b-9325-2d2d2d06112d",
        "cursor": {
          "ref": "1c0b5946-ffc6-409a-a6ef-bc3a80fcbc85",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6891b3ba-1787-411c-bbfa-d2280d85ae56"
        },
        "item": {
          "id": "83639292-d5db-4e3b-9325-2d2d2d06112d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3cb763c4-8317-4d47-be3b-cf918869611f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5a5727-c970-4746-90af-6c142a517083",
        "cursor": {
          "ref": "5e948148-e20a-4fb7-86d2-baac857ac6a3",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6fbba061-1f48-4156-a02c-021df6379c2d"
        },
        "item": {
          "id": "7c5a5727-c970-4746-90af-6c142a517083",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "79bc9b2b-3d1b-4885-9593-7a173a87e880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd0b48d-e533-41eb-a983-aa0fded6ba29",
        "cursor": {
          "ref": "f93140bb-296d-4084-b047-2f2c8e346205",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a5355921-dc11-431e-a2a9-ac220bbc7548"
        },
        "item": {
          "id": "5bd0b48d-e533-41eb-a983-aa0fded6ba29",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "23662503-8f3e-447c-aaf4-f4a74c72772d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35226747-8845-4d78-a6a3-bec15be9f321",
        "cursor": {
          "ref": "cc2dc36a-2ab9-4964-b663-9ff7dc5d1673",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a5fb6cdb-e140-4fdf-8ec9-5804fa33b824"
        },
        "item": {
          "id": "35226747-8845-4d78-a6a3-bec15be9f321",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6aa958ab-4085-4445-a6a2-fced1c8df4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d70cdd5-8b73-43e9-a89d-162e16db6c8a",
        "cursor": {
          "ref": "1aae916e-943d-47d0-bd61-46b8e271a752",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "04aece7d-521c-4802-88b0-a2d1d8433515"
        },
        "item": {
          "id": "7d70cdd5-8b73-43e9-a89d-162e16db6c8a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6b5217d5-917a-4e47-83c4-4d65d08a0a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0c3cef-25a0-4699-b4ff-2fb5ffc1e816",
        "cursor": {
          "ref": "9267c92c-99ec-4333-9406-9e6f31f48064",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4aa843e4-b0ad-4d39-95d2-61ed3d25d7fa"
        },
        "item": {
          "id": "bc0c3cef-25a0-4699-b4ff-2fb5ffc1e816",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1a16d4b6-c3d0-46c7-8391-378107096523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142731a5-48e8-40b0-a23a-a3851130a37f",
        "cursor": {
          "ref": "01e2c624-f605-4199-8847-1807dd64eb5f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "de71d61b-896c-4631-bc7e-10adc79fdcea"
        },
        "item": {
          "id": "142731a5-48e8-40b0-a23a-a3851130a37f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1538899f-979f-45fb-8b81-b102cfabe6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f965fd64-e0b4-4c3f-adb7-64501673c1d1",
        "cursor": {
          "ref": "f663dd73-8ca5-4087-b9fe-c72cf4156af9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f5d3e447-4229-4caa-804d-6906a5ffc32b"
        },
        "item": {
          "id": "f965fd64-e0b4-4c3f-adb7-64501673c1d1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d0ab0fbd-cc80-46eb-8c52-7d30effce3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcc4ada-3971-4bad-80df-b83b6496877d",
        "cursor": {
          "ref": "dab18f2d-9b62-442c-b68b-83a213c1f33b",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "017f8cd8-a55e-4dcd-ab11-a0c3c0cde648"
        },
        "item": {
          "id": "5dcc4ada-3971-4bad-80df-b83b6496877d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "449fbf8c-38d2-4f5e-8598-cc1770faaf22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07032895-6981-4dcc-a589-b1dcf935c80b",
        "cursor": {
          "ref": "c03fea53-e678-43a2-b5d5-f6f28b9387dc",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "27a5549f-82c5-4dc4-b200-5f00d2c2f736"
        },
        "item": {
          "id": "07032895-6981-4dcc-a589-b1dcf935c80b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a08ca525-ae85-4b33-8af1-83e67e75722b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea6e8e0-d941-46f2-97e2-e0b73311e5da",
        "cursor": {
          "ref": "ead96c0e-4678-4f62-9b34-33ae6ec76fb9",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "827cabfb-0bd1-4dd8-a830-72b9c81625ef"
        },
        "item": {
          "id": "4ea6e8e0-d941-46f2-97e2-e0b73311e5da",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "91f26303-94df-47e3-95f2-93281fc98d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4ba442-7a01-4862-9f55-883e0f4d5f6a",
        "cursor": {
          "ref": "69a368f2-8002-445c-97cc-99df205c1340",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "41fef7ee-d40c-4fe2-8867-26276cd827fc"
        },
        "item": {
          "id": "ad4ba442-7a01-4862-9f55-883e0f4d5f6a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a07fce13-46e8-4a96-9962-75da7038b4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715819a8-7c87-4f38-97b6-ed13105c955a",
        "cursor": {
          "ref": "87e95cb4-17ac-4c2d-bd9d-9233cd1b3b40",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b1e97d64-e782-48dc-b49d-a64adebbccfc"
        },
        "item": {
          "id": "715819a8-7c87-4f38-97b6-ed13105c955a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3458f0ea-205f-4746-b873-b215872e43f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f36663-803c-4855-b400-02f68c3067a9",
        "cursor": {
          "ref": "93d11d67-42d6-4f76-87ef-e8f1e472b7b6",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b744c00a-f8b2-4bbd-a438-fdf8a3c9b83b"
        },
        "item": {
          "id": "20f36663-803c-4855-b400-02f68c3067a9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8c2ac6b0-ad3e-466a-bcd6-0a1f43038377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4159d5-a036-41b1-bc31-23c34c548aec",
        "cursor": {
          "ref": "8e9479c0-1a8c-41a3-a046-ef18d4193565",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0afe2511-01de-48eb-98f7-06b9b4152597"
        },
        "item": {
          "id": "af4159d5-a036-41b1-bc31-23c34c548aec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c7ba86d8-6706-446b-b7f1-1759b6e1fa84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa64232-520f-467b-afd8-0831f4b13ead",
        "cursor": {
          "ref": "5312f716-8311-4e27-9770-1bf74f0f3866",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "38a3a781-67ad-49c3-a890-e10302d7e51b"
        },
        "item": {
          "id": "bfa64232-520f-467b-afd8-0831f4b13ead",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "013a36cc-90a0-4712-aa5c-94aa6195b321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8e98ec-5e88-4452-9d98-d417ec8ffe70",
        "cursor": {
          "ref": "d3d22372-17c0-4ed3-9cf1-be2ffe03e16c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5ea1a1f5-635b-4b4c-8ef7-51ec2ab9bd5f"
        },
        "item": {
          "id": "cb8e98ec-5e88-4452-9d98-d417ec8ffe70",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5af40baf-8c57-411e-849a-54375112f607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a660f378-1f5a-439f-8aa7-77507b953fdd",
        "cursor": {
          "ref": "f22d077c-9c60-4241-b58d-825236792599",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "87ade4f3-9e02-42e0-ac39-f5cf39772941"
        },
        "item": {
          "id": "a660f378-1f5a-439f-8aa7-77507b953fdd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f7686ae3-2bb7-4ffe-8b8f-0576bb5644e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413b5395-c797-4056-a6f3-88595bc964ce",
        "cursor": {
          "ref": "310869b2-ebd7-4663-b6d8-045fabf67a4f",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fcf615c3-1add-4cff-a6f2-46205d1ba524"
        },
        "item": {
          "id": "413b5395-c797-4056-a6f3-88595bc964ce",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "046538b3-7337-4b3f-a31b-4c576eb5c23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae759b93-0d82-4d52-8d6c-3084066dc605",
        "cursor": {
          "ref": "c38307a3-ba82-4eff-8966-9a86e1bc0a8e",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b7c25ece-bae7-42d9-ba29-61e403085a03"
        },
        "item": {
          "id": "ae759b93-0d82-4d52-8d6c-3084066dc605",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "10324fed-2da0-4dc3-8e87-45454cf3731f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b0e1d1-d6ec-4233-9a14-831e72b95155",
        "cursor": {
          "ref": "cbcf4e37-3a02-4ef3-b3a4-3280cab0449e",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9e46bdad-400e-4058-8910-5a0f91bdbc30"
        },
        "item": {
          "id": "64b0e1d1-d6ec-4233-9a14-831e72b95155",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b93986d0-bf55-461c-ae3a-573b2b07c8d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6ded1761-4a8a-45ed-a9bd-2e046ab22d08",
        "cursor": {
          "ref": "082db438-ee0d-4da8-84f6-8c242f06337e",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "45a51b19-959e-400a-9c5b-8500b82acc13"
        },
        "item": {
          "id": "6ded1761-4a8a-45ed-a9bd-2e046ab22d08",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5fac7c98-3e3e-4fc6-bbec-a973bad64d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5977c1-9a41-4706-a405-c15ac9e0c331",
        "cursor": {
          "ref": "fb020b9a-ae2c-444e-a542-344d72f5f1f8",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3747a887-5012-40bf-832e-2346315a534f"
        },
        "item": {
          "id": "3e5977c1-9a41-4706-a405-c15ac9e0c331",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "67bac1b1-34b8-4d80-8ff7-7c9278f39430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221986b1-f4d7-46ff-b78c-23dcbedb55f2",
        "cursor": {
          "ref": "d0bc3bf4-069c-48a6-8a26-0d448433ef9d",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d0a8c928-c531-4163-93d3-43f5c248e21f"
        },
        "item": {
          "id": "221986b1-f4d7-46ff-b78c-23dcbedb55f2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6f79e6de-34f9-477a-a408-0073bd2bd284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49924c13-1efc-40a1-9edb-7fdb9159324c",
        "cursor": {
          "ref": "d12cc568-6279-4d13-84c3-cd34f49b475a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d9854a2f-1baf-4dc7-8954-bb488cf362b0"
        },
        "item": {
          "id": "49924c13-1efc-40a1-9edb-7fdb9159324c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2b73a323-870d-41bd-afc5-6b5d2e9eac66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2420f9-b07d-47bf-88c6-cc5d2e6cdd3e",
        "cursor": {
          "ref": "c215eb62-7b44-44fb-b383-98ee00633cc2",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c318d11c-1caa-4e64-a187-12c7d3e2b7d1"
        },
        "item": {
          "id": "bc2420f9-b07d-47bf-88c6-cc5d2e6cdd3e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3cc38452-0e34-4b17-abfd-edd5c397fd8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099f1242-ec24-4c40-b5a7-c70d2b4a16d9",
        "cursor": {
          "ref": "8c3103b3-1083-4596-a7b0-a103b602a0e2",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b6488899-d471-4af0-b1f4-ce01ba553be0"
        },
        "item": {
          "id": "099f1242-ec24-4c40-b5a7-c70d2b4a16d9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f4137368-e4c4-4b14-a26b-f1c4fd16a45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67dbe73-aaec-44fd-88dc-9510a24c9413",
        "cursor": {
          "ref": "28bae81c-2465-408b-b840-5e3a99066418",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "642a3d3a-5c1c-4460-9ddb-53cc818bbe53"
        },
        "item": {
          "id": "f67dbe73-aaec-44fd-88dc-9510a24c9413",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "42879b2f-441b-4c9e-a252-fd8f9151aa9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a810a102-fc85-4675-9a83-772e30b4992c",
        "cursor": {
          "ref": "3cd6cc36-40af-477d-8c88-5ae94da7dab9",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d0d91a66-1f9c-430b-8770-0f418136e407"
        },
        "item": {
          "id": "a810a102-fc85-4675-9a83-772e30b4992c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9a4a6848-b4da-442c-b5b1-1e65a33da6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad7fef8-c43d-454b-bcb9-c4e0da1de21c",
        "cursor": {
          "ref": "76f216ba-ee7d-4b93-85f3-fbf0897ead28",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a0334f94-759b-4ca4-8f7e-c6c753175980"
        },
        "item": {
          "id": "5ad7fef8-c43d-454b-bcb9-c4e0da1de21c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f62c292a-214e-4780-b8f7-756cd93717ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41e0166-3534-4598-b1a8-f12b456e4584",
        "cursor": {
          "ref": "4fc30b18-c7dd-4e42-adaf-27d243e6dd0f",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c3f766ac-d0cc-46d9-925c-9f8ca669392d"
        },
        "item": {
          "id": "c41e0166-3534-4598-b1a8-f12b456e4584",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5983165a-9097-41ee-b542-a6bbf89d107e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ef505e-0e15-4678-9cd9-e4412bdf98ae",
        "cursor": {
          "ref": "98cf4f79-d1cc-49ba-bea8-76e9d5c1f663",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "498468fb-4918-4672-ada3-4117107b88f7"
        },
        "item": {
          "id": "48ef505e-0e15-4678-9cd9-e4412bdf98ae",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ee8ea11d-189a-4ff1-a65f-6994730481b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2b9bff-4b48-4c04-b4fb-3cf21f552813",
        "cursor": {
          "ref": "4a877eb4-4f59-4447-a251-442484a19bff",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "cda59bf0-b8c6-43e0-bbc0-0c8a303ddce9"
        },
        "item": {
          "id": "2e2b9bff-4b48-4c04-b4fb-3cf21f552813",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8b061542-05b6-4db3-9118-3a04dd5cf99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db74c85-518c-441f-b720-4a92cc7e07fd",
        "cursor": {
          "ref": "a1c0c091-e124-4c23-a27d-5d6866b0c67b",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "17ad00da-8961-42ce-b1d8-4bdbf4b5fd20"
        },
        "item": {
          "id": "6db74c85-518c-441f-b720-4a92cc7e07fd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6e07ccdb-aca6-4336-9e0b-80362dc7ed42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ea3f12-65a4-44db-a873-5d65dd04d3f7",
        "cursor": {
          "ref": "066fe53d-49e6-4ca8-892d-f16777d665c4",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "75132c18-0e79-40d4-a99b-6a6cd93ec074"
        },
        "item": {
          "id": "f4ea3f12-65a4-44db-a873-5d65dd04d3f7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4b1d1296-d396-4592-a6cd-374feabb079d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3711388a-5b7f-464e-a3bb-c6b2d45be0fc",
        "cursor": {
          "ref": "553e5391-40ed-480a-b061-da71d1fa490a",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a7e26f98-314d-4d2a-b376-a0cda92fc310"
        },
        "item": {
          "id": "3711388a-5b7f-464e-a3bb-c6b2d45be0fc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b4b2b35d-9553-4f41-a996-abd159e1a11f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b94718-44f4-4746-9f24-783f9df2998c",
        "cursor": {
          "ref": "708e49fa-06e3-4686-a733-37f1b1c5c0c2",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1855a54a-3aed-49f0-a925-16271bc682fd"
        },
        "item": {
          "id": "55b94718-44f4-4746-9f24-783f9df2998c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "12a25d73-4952-4ce7-9c35-3e8b5bae0fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1873d0-7230-40de-b98e-05d4cc9c5824",
        "cursor": {
          "ref": "b042947c-b967-480b-a1ab-6214a8d335e1",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "05a18340-ed36-45cf-9aaa-d61ced9a3a26"
        },
        "item": {
          "id": "da1873d0-7230-40de-b98e-05d4cc9c5824",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "35063d3d-da8c-4f50-9cdf-8e66ff55aee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d72c39f-cb97-4742-8abc-92474d49ddc7",
        "cursor": {
          "ref": "aa489630-e625-45d4-a1e8-7a3169a848eb",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a0762fab-20cd-4892-8efa-fc99746f6332"
        },
        "item": {
          "id": "5d72c39f-cb97-4742-8abc-92474d49ddc7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "38aaa053-3d94-4c2d-9536-b75da920fff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c899fbe-6e9a-4745-b395-d08282930909",
        "cursor": {
          "ref": "5266a5a6-78e8-4d7c-8df2-f04799fb9e4d",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4bd133b8-c0eb-4135-a190-2c45bced729d"
        },
        "item": {
          "id": "7c899fbe-6e9a-4745-b395-d08282930909",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9e5ad851-df1f-4782-9c48-c50d12659a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d201d71e-ab6a-4284-86c3-6bf21c8fa7ea",
        "cursor": {
          "ref": "9201d772-783d-4324-8e01-69a3e7e4cc46",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9a711656-b9e9-4d60-9926-59b8b75af519"
        },
        "item": {
          "id": "d201d71e-ab6a-4284-86c3-6bf21c8fa7ea",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "af4f4252-8487-416a-a0e3-22862324aa67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe54058-93b6-4838-99d2-6d44bcfcbc2a",
        "cursor": {
          "ref": "c5f888c5-f2c0-4d19-8c15-6df01494e2b4",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9f0cc7b8-ab9c-43e2-b1f8-e1a90df33b57"
        },
        "item": {
          "id": "9fe54058-93b6-4838-99d2-6d44bcfcbc2a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "15381a80-5662-4d8d-8f18-870339cc9a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066490a4-255f-4ea6-bbaf-628019dc0016",
        "cursor": {
          "ref": "d08f3963-ffab-45d8-9316-87a3aea68b7f",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "359173df-69c5-4826-b9db-2a1192c517bb"
        },
        "item": {
          "id": "066490a4-255f-4ea6-bbaf-628019dc0016",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "88358500-506a-4bc8-9539-06a3e3ccf35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc3ae1b-2299-4151-b19f-fd8e0dbda1ad",
        "cursor": {
          "ref": "55b49d8f-66ce-464a-b302-bbb9b8fdf035",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4e67315b-7c79-4c8a-9ff7-74b6bea7de2d"
        },
        "item": {
          "id": "2dc3ae1b-2299-4151-b19f-fd8e0dbda1ad",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "334cd340-3f6c-4e6f-8c9e-a495d8317128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca13426-0029-4741-a938-a9e5732872ca",
        "cursor": {
          "ref": "dacf66ca-4612-4fc3-b712-c7283ea4c0bb",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6db04809-a355-4714-8050-3251c7e9cb52"
        },
        "item": {
          "id": "2ca13426-0029-4741-a938-a9e5732872ca",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e6ede4a0-3fb2-4237-804d-5a754c260fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69245c47-2422-402d-97b3-7bbb0bf207ec",
        "cursor": {
          "ref": "aa6146b1-dad8-43fe-ac4d-70bf25061e75",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "93a647ca-fc7f-437c-a1fa-8fdf09e44dd3"
        },
        "item": {
          "id": "69245c47-2422-402d-97b3-7bbb0bf207ec",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6eb96c3d-3c17-4e75-b8c1-bfbd0d0c45f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2a27ae-0843-4843-b92c-dc90d5053e11",
        "cursor": {
          "ref": "f6adc53e-d806-48dd-9ead-9e32e8a61568",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c3e559e1-cc34-48ea-bdd8-9f28fd76ecb8"
        },
        "item": {
          "id": "ca2a27ae-0843-4843-b92c-dc90d5053e11",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b7a3d198-4739-4f7a-8f88-903cc7c44ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904d91dc-1fd1-433b-af00-d849c3169f00",
        "cursor": {
          "ref": "032aca4f-243b-4a56-935a-ad5de05c3234",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7eda06b7-947d-4f30-89e9-e0383b95a545"
        },
        "item": {
          "id": "904d91dc-1fd1-433b-af00-d849c3169f00",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0d879fda-d4e6-4ce8-b318-4b9282fa3a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c240fcd-400d-4725-a3c5-024a470a4c51",
        "cursor": {
          "ref": "bca484fe-50b0-4f3c-8a4d-bdf4c2ccf392",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f7eec419-959c-4b02-a117-40c232345736"
        },
        "item": {
          "id": "8c240fcd-400d-4725-a3c5-024a470a4c51",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1c588a40-f184-4f0c-a939-9cb8858b984c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fbd753-7d1a-4763-bb99-63a3eba2cf10",
        "cursor": {
          "ref": "640e8c56-570b-4180-adf1-b88bcfd16ab3",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "09785bae-32ce-47df-aec5-c66a91da3339"
        },
        "item": {
          "id": "d7fbd753-7d1a-4763-bb99-63a3eba2cf10",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6a0cf10a-1610-4f0c-b615-243d2cd3cf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0b183f-128e-4a62-93fe-7f90c700910d",
        "cursor": {
          "ref": "5904436c-442a-4cff-b13e-c77aafa2fffa",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ee0f1448-9a37-4fd3-810c-80fa77a9b41b"
        },
        "item": {
          "id": "ef0b183f-128e-4a62-93fe-7f90c700910d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a25ae721-a062-4ccb-b3c3-768d8d7690f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "c46d65e3-0eba-416d-bce8-0c65d2297d51",
        "cursor": {
          "ref": "035abc51-2423-4cda-a1ab-244151d52824",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "05297e10-2953-4740-bea2-cfd23c262832"
        },
        "item": {
          "id": "c46d65e3-0eba-416d-bce8-0c65d2297d51",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "64abd992-6891-4142-bd74-bee63c4d18e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "440b121c-bb40-4cf6-be21-c1b0135b3088",
        "cursor": {
          "ref": "4434d165-e61a-4586-b76b-482380b083fd",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9c1efbe8-05bd-45d4-81a1-7f34acfb83e1"
        },
        "item": {
          "id": "440b121c-bb40-4cf6-be21-c1b0135b3088",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f2851172-4e67-4ad4-a820-1a3a07e69016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cce1db07-83e2-474b-9d58-757124b5c98c",
        "cursor": {
          "ref": "18345170-236d-475b-b4dc-40ef31ea730a",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e9f45026-8573-47d0-988a-29ce1d3c2514"
        },
        "item": {
          "id": "cce1db07-83e2-474b-9d58-757124b5c98c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "58857167-b697-43ee-8c06-e92f707fc16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445ce25c-1fdd-44ff-b100-aa07c3e7bd93",
        "cursor": {
          "ref": "991ea122-399f-4d82-a421-ea4cd64e5f76",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f937a7da-1c42-4a74-99f9-cfd2227ffe98"
        },
        "item": {
          "id": "445ce25c-1fdd-44ff-b100-aa07c3e7bd93",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "27f9cf4e-42c2-4e4c-b35f-ffbaf4af2327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a0c9463f-6927-440d-a3d7-e9bfa194e1ab",
        "cursor": {
          "ref": "54de55e4-7a87-4708-ad36-d94195b02c29",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "692dbc7b-aa10-4d59-988f-4b589795f84f"
        },
        "item": {
          "id": "a0c9463f-6927-440d-a3d7-e9bfa194e1ab",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7288dab5-8588-4cf0-9b32-0e6976a77f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 718,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "da8ff1d3-5f6e-4c7a-9428-188ba8f102ed",
        "cursor": {
          "ref": "c5230d4a-130a-41d0-97c2-b9ab52ca724d",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "08f2e906-4b81-46f5-ab8a-ee1706759c40"
        },
        "item": {
          "id": "da8ff1d3-5f6e-4c7a-9428-188ba8f102ed",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "966aa2e8-ebc8-4a34-b768-9a521dea7cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "dbad2290-91a2-4216-9a03-6db092dd7e32",
        "cursor": {
          "ref": "fe7826e0-d904-4a52-abb1-f0df4f6cd7cc",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5dd4c96c-a578-4ff0-a845-060c1b9b9295"
        },
        "item": {
          "id": "dbad2290-91a2-4216-9a03-6db092dd7e32",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "753579af-32d9-4d2f-90e1-0ad036957c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a41363af-54b6-40fd-8f43-a627810fbfde",
        "cursor": {
          "ref": "3e5d83be-d204-439d-b2bf-e4dd6faa15ed",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ac27225f-17ee-4088-9455-3e5058bc5586"
        },
        "item": {
          "id": "a41363af-54b6-40fd-8f43-a627810fbfde",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0567ff9e-3ce8-4045-9db3-612514b4b9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c07a77b9-7fb9-475a-bc59-15e9942f390c",
        "cursor": {
          "ref": "89e07630-04d8-4ba2-8fc3-f95647eb5b33",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4e1239a4-ef55-499f-9752-e50c59f55b6c"
        },
        "item": {
          "id": "c07a77b9-7fb9-475a-bc59-15e9942f390c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6f802482-4f5b-4983-aca4-da0968f79a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "77f5a971-ba65-4da4-8fe6-f9a6f344e8d8",
        "cursor": {
          "ref": "cc617521-ac0f-4d03-9f9e-c8082be401ac",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "491c5eb5-de57-4788-9666-b5816e7fa035"
        },
        "item": {
          "id": "77f5a971-ba65-4da4-8fe6-f9a6f344e8d8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0b117268-b2e3-47cb-817c-7bd68c789a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024e73cc-5a75-4b8f-af94-91fe494a1a91",
        "cursor": {
          "ref": "3e207a76-bbbf-456c-a8a9-eeaf71ba5158",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ce11a597-32be-42e9-a759-0463420c171e"
        },
        "item": {
          "id": "024e73cc-5a75-4b8f-af94-91fe494a1a91",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "536173c8-14d0-4e98-a718-a52d6cf9649e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dd2b8b-cc54-4087-84d7-b5ce995d032d",
        "cursor": {
          "ref": "4e49c8d5-502a-46d4-9a75-c995e2eb15b1",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a13a319e-1cb3-48a5-966e-b52af4002d23"
        },
        "item": {
          "id": "a7dd2b8b-cc54-4087-84d7-b5ce995d032d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "73a960c9-269d-4880-820a-d73d1f5337a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0e6aca-3f14-4d4b-adee-08f14d428e8e",
        "cursor": {
          "ref": "594da2b9-434a-4724-9afb-b47fa9d015df",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cdadd80d-d2e3-4ebb-bd4d-d576c62acac4"
        },
        "item": {
          "id": "1c0e6aca-3f14-4d4b-adee-08f14d428e8e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3f21c0d1-2e8c-467c-b143-1b08dcc969b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b8afef-5404-488a-bf90-68f1dec2e6c8",
        "cursor": {
          "ref": "548db659-88c6-44c3-aa0d-e33cef7e69b7",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6188148e-d302-44ae-9abb-02cc495821fa"
        },
        "item": {
          "id": "99b8afef-5404-488a-bf90-68f1dec2e6c8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4f5348cb-79f5-4e5f-8997-30f249eef156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59347234-611f-4645-8b44-18b131832e18",
        "cursor": {
          "ref": "d9b8142f-38af-4dd1-88e2-43452949ae3b",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "aba88743-4fdb-4bf0-955e-a3ed0450c457"
        },
        "item": {
          "id": "59347234-611f-4645-8b44-18b131832e18",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cd19224d-4d57-4e01-bdcf-ae6b219dcf8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eee922b-5aa9-464e-ac40-88c5a927fb20",
        "cursor": {
          "ref": "91972910-5f44-4c25-9256-845231e08236",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7fdf650d-8511-4ed3-8536-4f8bfcf254bc"
        },
        "item": {
          "id": "3eee922b-5aa9-464e-ac40-88c5a927fb20",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c5056b17-e286-46e3-9880-c190082da8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5da86b7-a3b0-416a-8b03-6940451890c1",
        "cursor": {
          "ref": "0ea898d3-184d-4207-8ca8-4e731857bfa0",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "895ac5ca-0206-417e-bf68-2fb192d8745a"
        },
        "item": {
          "id": "f5da86b7-a3b0-416a-8b03-6940451890c1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "792d8a1c-1e12-46da-80fa-a8fb3615a520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6257cea-ca05-46d8-9384-496c021ab271",
        "cursor": {
          "ref": "fb433915-5321-4b83-af9d-ba82302f10db",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8ffc3b2f-1a4d-4b9b-9d68-b4125448657b"
        },
        "item": {
          "id": "c6257cea-ca05-46d8-9384-496c021ab271",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bd3206fb-ed29-4d83-9353-32a62d665b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c2420e-f094-43e2-92d2-c408d136bed9",
        "cursor": {
          "ref": "4c5de883-5895-41ea-bc2b-3f640ae12546",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9118deea-fab8-4cc8-be4d-4df4b292c30f"
        },
        "item": {
          "id": "95c2420e-f094-43e2-92d2-c408d136bed9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "71c936f1-1f6a-4065-8b79-8f99e26fab8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4eebe6-908f-4431-9605-349924a72116",
        "cursor": {
          "ref": "be71d963-1a18-447e-be08-bc3ccc7e973a",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f7662f7e-06c7-45bd-8c21-5fa2ce4a3481"
        },
        "item": {
          "id": "6e4eebe6-908f-4431-9605-349924a72116",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4a82a634-29f9-4524-af1b-6152333804f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4716ecc7-db0f-4dd0-9306-57c45ccc4d50",
        "cursor": {
          "ref": "03cbff88-7e4e-467d-b0f4-89918b63008d",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1238cd1f-fb4b-4b36-a6be-732fc5783a15"
        },
        "item": {
          "id": "4716ecc7-db0f-4dd0-9306-57c45ccc4d50",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8c68022b-3cd6-4a54-9a8e-8dca25f5eb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14384d8a-d11a-48d8-969a-10c2dbbdd6f2",
        "cursor": {
          "ref": "8ffefb31-be9a-491b-83c0-a0bd407ad6a9",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7a97ca53-7919-4181-a016-b63a399ba7da"
        },
        "item": {
          "id": "14384d8a-d11a-48d8-969a-10c2dbbdd6f2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "be57ec18-e187-4900-a6ea-57894dc71c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23aff1fd-a03c-4a08-860d-e45089a26b25",
        "cursor": {
          "ref": "60a07b80-3eb7-468e-92d9-b8a2a6457744",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "95547987-1248-49a6-ae60-4975c5bd4a2f"
        },
        "item": {
          "id": "23aff1fd-a03c-4a08-860d-e45089a26b25",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "843f3fe1-1c12-4917-a36b-989931c31bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 556,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "60674e01-f737-410b-844c-ccf0c473d247",
        "cursor": {
          "ref": "9d6e52e8-26f9-41d4-94a2-9bbc33b5e2e5",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c1408ea1-1bf6-41c6-8808-84606852e38a"
        },
        "item": {
          "id": "60674e01-f737-410b-844c-ccf0c473d247",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "808130b2-85c5-4d24-8c15-4a0fc3235bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 612,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a5f409e7-ecda-49e7-91af-c51c2e52ecb8",
        "cursor": {
          "ref": "1dc0816c-9b85-480e-b89d-2381fdecf89d",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f4783f79-5ba1-48ae-901a-ba380655f1d3"
        },
        "item": {
          "id": "a5f409e7-ecda-49e7-91af-c51c2e52ecb8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "48dcb5c7-d209-4355-a133-dadea53c6d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a384d745-4f7c-4d43-9593-8a161346de86",
        "cursor": {
          "ref": "9decc472-fe02-4c23-9f15-5a8d0b12be00",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "19e85426-70d7-4de0-9b56-14a1e51bc4a2"
        },
        "item": {
          "id": "a384d745-4f7c-4d43-9593-8a161346de86",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ba41e67c-cf3c-4901-beda-6f6c59beecaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 892,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f5421d5a-fc41-429a-b5fe-77d81e7d3436",
        "cursor": {
          "ref": "9eec8111-9323-43ee-ac01-e164905cbc3c",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9349ec9e-c2df-4b36-8c8b-a13899c4ac62"
        },
        "item": {
          "id": "f5421d5a-fc41-429a-b5fe-77d81e7d3436",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "630d9f77-fecb-45c8-8a1c-d70483765cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "10544b27-bbcc-4edc-a147-a6ae164c0bfb",
        "cursor": {
          "ref": "30e0d3de-1fd8-4f1b-8f2f-6a6a058d7955",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "758d58aa-ef80-41bd-9e4e-476f3d511af1"
        },
        "item": {
          "id": "10544b27-bbcc-4edc-a147-a6ae164c0bfb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "02482846-63bc-44a9-b49e-dbb1467845ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a0e7ba-31f0-400d-9746-25696e7354f8",
        "cursor": {
          "ref": "717ffaa5-4016-4995-bf63-935c31d6fe92",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3227bd92-61a0-47e9-8518-d96b7a407a83"
        },
        "item": {
          "id": "77a0e7ba-31f0-400d-9746-25696e7354f8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c8944446-01b6-4d36-963c-7f3e2f4f93db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eafaf44-194a-4389-ad58-90a982bcd09c",
        "cursor": {
          "ref": "b949af75-5021-4ae7-be67-512d302cc42e",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d63622e0-3b3b-46bc-bd2d-b11a39c9254a"
        },
        "item": {
          "id": "9eafaf44-194a-4389-ad58-90a982bcd09c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "77240fcf-4a8e-470c-bfa4-6e5183830fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b09cc9-0f01-4211-9a46-dc8a5dc46534",
        "cursor": {
          "ref": "e5d9cadd-03dc-487b-aa00-aefe0d525b74",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2274ef05-d05d-414a-8994-3fe0257424dd"
        },
        "item": {
          "id": "76b09cc9-0f01-4211-9a46-dc8a5dc46534",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "309f4ba5-fc37-4dd3-bd26-ef51b5d2e4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddba096-d3f7-47cc-b99b-02efd5b5c98c",
        "cursor": {
          "ref": "6472d5a4-d83a-45c0-ae67-09895d6bc117",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a9455c69-0bb2-426a-be0c-43d86c8fcaef"
        },
        "item": {
          "id": "6ddba096-d3f7-47cc-b99b-02efd5b5c98c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5cceaf85-5739-4f12-83d8-c8182b3579e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d68d785-efba-4c31-b3ef-7d143f07401a",
        "cursor": {
          "ref": "34364c20-be65-4c3f-bad5-991ac69ff90c",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5e0b3cc2-860f-4ab7-9b2a-841bddf23703"
        },
        "item": {
          "id": "2d68d785-efba-4c31-b3ef-7d143f07401a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "386bb779-9b2e-431c-96a1-4df7c62d3735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61336017-a7b5-49bc-a450-c496dd45cd24",
        "cursor": {
          "ref": "d404ad0b-7931-4765-93ae-c3c695e97fce",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cdbfb258-9e48-4381-aa77-4a67ad6f6658"
        },
        "item": {
          "id": "61336017-a7b5-49bc-a450-c496dd45cd24",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "216a026f-ba82-451e-94d4-e236a0147306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c315e43-e742-44c0-95a3-37a26d77ff84",
        "cursor": {
          "ref": "65785cfe-d14e-42df-81e8-0f62459ed328",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f85aa18f-eb6e-4f0e-ae7c-536d7d415976"
        },
        "item": {
          "id": "9c315e43-e742-44c0-95a3-37a26d77ff84",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3292b68f-171b-4463-83d8-7d05890dc51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88df947b-2be6-4f57-ae9a-ca8bf2fb8031",
        "cursor": {
          "ref": "aa1cf3f8-0e3e-4979-b45a-c82c7dabe0ec",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9ca9f639-8939-4fd1-9ff7-ffc04a1cd27b"
        },
        "item": {
          "id": "88df947b-2be6-4f57-ae9a-ca8bf2fb8031",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e3e95bab-8043-40df-9b23-571dc630d2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50dee8e-acfd-484f-b04c-977a69de36cc",
        "cursor": {
          "ref": "8161dc1b-e75b-4b18-8ad1-793a93866eb9",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cebf29b1-ad28-4548-baf1-36f6363ce3ba"
        },
        "item": {
          "id": "b50dee8e-acfd-484f-b04c-977a69de36cc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d6d7783c-d874-42f0-94bc-8962e27b0b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071a7d28-c6a6-47ba-8236-1e8598a459ea",
        "cursor": {
          "ref": "754948c2-09f1-45e7-96e0-d571b605f688",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1da60598-0ace-491b-8d28-ddc47d42ce41"
        },
        "item": {
          "id": "071a7d28-c6a6-47ba-8236-1e8598a459ea",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5cbb1a7d-0273-409e-964f-71ecf7826743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93914146-aaed-447d-a42a-44f36447ba99",
        "cursor": {
          "ref": "43925257-207b-4652-90ec-6f35b5171d67",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f0b3c553-1ac8-44c8-800f-75f60ba39b00"
        },
        "item": {
          "id": "93914146-aaed-447d-a42a-44f36447ba99",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9a71da29-f60a-4748-911c-433ced38b83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0108337a-f598-46dd-ab7f-bb87ad37aefa",
        "cursor": {
          "ref": "25244ceb-2b4e-4295-89d6-efdbbc88f30e",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f8c88e2d-3afa-4b81-bf65-a261b9775499"
        },
        "item": {
          "id": "0108337a-f598-46dd-ab7f-bb87ad37aefa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f56deabd-53b1-4c2a-ac27-1db335288ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a77d6d2-7a67-4c30-8aab-27d68a1adfe6",
        "cursor": {
          "ref": "16d42c79-6fe9-4e30-87f6-4a31865650d2",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a1069dfb-0fa3-49be-b217-c329529069d5"
        },
        "item": {
          "id": "2a77d6d2-7a67-4c30-8aab-27d68a1adfe6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "177c14df-5945-4f8a-b549-c157752cecc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c1d3e6-8516-401e-bc38-e24e82bbc187",
        "cursor": {
          "ref": "57fbf0b8-d615-41f1-ba64-b5315f6c558c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "02592dbc-98fe-4405-974f-0058cb21a53c"
        },
        "item": {
          "id": "33c1d3e6-8516-401e-bc38-e24e82bbc187",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "50d4a6a2-011c-4a0f-8837-3705444e04f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b58659c-f941-4a1c-832d-bdd01f62df60",
        "cursor": {
          "ref": "7a5ba26d-3974-4de7-a04b-ad6886cd3699",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "276f72d2-6f1b-447b-9f00-c5485689f907"
        },
        "item": {
          "id": "0b58659c-f941-4a1c-832d-bdd01f62df60",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6d2945a3-6a3d-4f04-846e-037ad3946080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd25c859-4f58-4776-a9c0-65773419f3a3",
        "cursor": {
          "ref": "dca6aeba-a256-4964-a51f-f49fff40bf83",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "34e378bd-2df8-485a-916d-7f80b052705e"
        },
        "item": {
          "id": "cd25c859-4f58-4776-a9c0-65773419f3a3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e7f7dc83-a87f-4e16-b100-66b5d58c804a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e763b1-b2d7-44cb-9ce5-1459d232e898",
        "cursor": {
          "ref": "2df662db-b2e9-42c8-8853-1c0a0ca5bf46",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "540eb171-9dbf-4bbb-b467-536b7358196d"
        },
        "item": {
          "id": "e2e763b1-b2d7-44cb-9ce5-1459d232e898",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b645c906-90d9-4083-98e8-207ad44ca300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5079fd9-fa8c-484f-ab8d-457a7a900526",
        "cursor": {
          "ref": "6d818bcb-f9f8-413e-abb2-cb12a7da96b6",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9b0f28b5-ad13-45e6-8d6b-967f179f9009"
        },
        "item": {
          "id": "f5079fd9-fa8c-484f-ab8d-457a7a900526",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c06a0996-561e-451f-94fd-7290e606ccb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77442249-e64a-4c86-b0b4-50c936f9473b",
        "cursor": {
          "ref": "ed1f9f62-ca04-441b-b018-081ab48d6836",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ee8f18ef-8b1c-4812-b7e8-0a966e398be5"
        },
        "item": {
          "id": "77442249-e64a-4c86-b0b4-50c936f9473b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4146ed25-d80f-4f35-abe1-f02556363e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a13508-bacd-4e62-b6eb-c5faf58c0df3",
        "cursor": {
          "ref": "593ca89c-6470-4885-93c8-0503fd06ba2c",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "a5ab3bc1-2142-4aef-b7ea-20fbe2d1b0d8"
        },
        "item": {
          "id": "c1a13508-bacd-4e62-b6eb-c5faf58c0df3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2383ff5a-6af7-4352-9e2c-dc0171e8ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc2f8ce-053e-411d-a852-1bd5b5d5e831",
        "cursor": {
          "ref": "0bd24612-64f8-4fd5-aee0-159d6db61ef6",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "42edd5ff-ec50-485d-8e25-e14160b38ba6"
        },
        "item": {
          "id": "0fc2f8ce-053e-411d-a852-1bd5b5d5e831",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "13480b9a-80aa-40bc-81dd-f762128e5e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314e91f4-6ffe-4a23-8c68-14c4511a1f55",
        "cursor": {
          "ref": "949cfccb-538e-4ca3-90fe-17fd95799334",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b306a914-60da-40c2-91f9-821bc21bb81f"
        },
        "item": {
          "id": "314e91f4-6ffe-4a23-8c68-14c4511a1f55",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1c67f544-cea5-4f7e-a7f5-67172655b182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e9819c-f404-47ba-9f77-001e48c911ca",
        "cursor": {
          "ref": "29e6f9bc-f890-43e1-82a8-fe97da961b38",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "98376ba0-7acc-49fc-b525-410154394b79"
        },
        "item": {
          "id": "05e9819c-f404-47ba-9f77-001e48c911ca",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ab76be1d-c328-416b-9dc9-02f72b132c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821bb34c-31d9-4d08-9949-7d894c9f138e",
        "cursor": {
          "ref": "8da90c62-cd0c-4f3b-8a02-cdc17a6d283a",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e379b18c-28da-4ff9-81b7-57cf014151b0"
        },
        "item": {
          "id": "821bb34c-31d9-4d08-9949-7d894c9f138e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bbe18d1c-6590-4329-92f5-2d3f00457599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f34dcb-cb31-4c86-a9c1-3153826909ac",
        "cursor": {
          "ref": "fff1a574-74ed-4052-a1e2-eba0e1ed0742",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "058bb9e9-1b44-4a04-8483-2d193d57088f"
        },
        "item": {
          "id": "54f34dcb-cb31-4c86-a9c1-3153826909ac",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0e73b12e-a5fd-4c69-a3a5-64bbb4f6cdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94d3f14-5935-46b7-a8a5-1a74a4db6177",
        "cursor": {
          "ref": "ced1b60a-f722-417d-b5d0-65b7fa60c8c5",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a377f6d1-7936-442e-af98-173a3ec1de39"
        },
        "item": {
          "id": "d94d3f14-5935-46b7-a8a5-1a74a4db6177",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "57552b54-5c89-4f49-801d-636cd8b6dd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac61b07-6625-47a7-8645-2a44aec10e57",
        "cursor": {
          "ref": "092ddd90-608f-429e-a917-35798106c56d",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3beae8fc-12f3-4af2-947d-995ef7bad881"
        },
        "item": {
          "id": "8ac61b07-6625-47a7-8645-2a44aec10e57",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d448e0f2-7ec9-4be6-9cb0-dde41e730489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e934496-f905-4b56-9c53-e408ecbcdad4",
        "cursor": {
          "ref": "b7efbacd-d7d2-4e05-8d53-26470d6b3d16",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6acc9dc1-ec73-4986-9093-0716c95c5cf8"
        },
        "item": {
          "id": "1e934496-f905-4b56-9c53-e408ecbcdad4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "18c57f4e-f269-42fd-900c-9611c795584f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8e1476-e215-423a-8de7-7b8bfdf74f07",
        "cursor": {
          "ref": "6a7e0123-50ff-4c00-bea2-b6a0961d47a1",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "04aef2f2-2453-4c33-a1a3-77f41723ddb2"
        },
        "item": {
          "id": "fb8e1476-e215-423a-8de7-7b8bfdf74f07",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3dcaff42-b47d-4e4c-85fe-1db8a76ecf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bda925-616e-42c5-9a6b-0c9ea8e51662",
        "cursor": {
          "ref": "68902bbd-24d0-438a-8fda-e13af84d3614",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d546f41d-6ec7-4f48-b8bd-d6893596e1ee"
        },
        "item": {
          "id": "62bda925-616e-42c5-9a6b-0c9ea8e51662",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d8d768de-d128-4855-9eed-a4c4c83dc271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bf3c54-083e-43d0-bd84-818511477114",
        "cursor": {
          "ref": "d74a1d4f-f7f5-4821-920c-2d6011904c3c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "845c6352-bb59-44f6-894b-b0d9788df9d0"
        },
        "item": {
          "id": "b3bf3c54-083e-43d0-bd84-818511477114",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f5c6a26a-ee6f-4947-96cf-b35ac8818cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc92b5b2-b467-4b71-bd2e-40eb6450080f",
        "cursor": {
          "ref": "e4e2ca36-c3f6-4909-9928-47c2cf6f7fe2",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4c2efe75-e283-480c-b3dc-1ffa57c59054"
        },
        "item": {
          "id": "dc92b5b2-b467-4b71-bd2e-40eb6450080f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "19c2867a-b41d-41b0-b8ba-6782abad55c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a10be15-f752-4625-b511-5f5f18cb31a3",
        "cursor": {
          "ref": "94d168e3-7848-44e5-9c65-cb59bb5db671",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b0a685de-9b6b-4e52-af92-ec456d140b4a"
        },
        "item": {
          "id": "2a10be15-f752-4625-b511-5f5f18cb31a3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2cc364a6-d1aa-4477-bba8-d8e7cc22a9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8ea70b-f14e-4f05-a251-907686b88ef5",
        "cursor": {
          "ref": "8769191f-e22d-4080-a505-065692d0a6df",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "44f6acc2-25eb-422f-9f2b-63f136d59076"
        },
        "item": {
          "id": "5a8ea70b-f14e-4f05-a251-907686b88ef5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "57e29d68-68e2-4def-b8f2-9d2a0dd6feb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f855e875-4ed6-49aa-be32-6df94fdb97bc",
        "cursor": {
          "ref": "dc5255cd-0cf4-4281-9fae-cb5c8e400ecc",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7c0d13eb-a7d2-466b-8114-ab736872a35f"
        },
        "item": {
          "id": "f855e875-4ed6-49aa-be32-6df94fdb97bc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bf60fcf9-2bed-4612-baac-370e3e204fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f92aead-2b9c-468b-8e77-ad12f1432115",
        "cursor": {
          "ref": "9e77ad60-8c20-4f10-a922-4da212a9c12b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f4308c4b-e385-4247-86fc-cbcda635bb32"
        },
        "item": {
          "id": "5f92aead-2b9c-468b-8e77-ad12f1432115",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8417d06e-1494-4521-abae-f9ac6b636260",
          "status": "OK",
          "code": 200,
          "responseTime": 610,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e2d6e1-625b-49c3-a285-52cd61f314bd",
        "cursor": {
          "ref": "c9d0c2c7-cebe-4eb0-9410-dff35951ffd0",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f531edb2-b1c1-4622-ae46-69166833f9ed"
        },
        "item": {
          "id": "91e2d6e1-625b-49c3-a285-52cd61f314bd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "64779c24-a0de-4080-9a1f-358976973a7f",
          "status": "OK",
          "code": 200,
          "responseTime": 710,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e474142a-feec-43f5-9977-9d40ec11923d",
        "cursor": {
          "ref": "dabf45a6-9396-4d57-9272-4a1282c188c4",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "108e7df6-6e9e-478e-a29b-70a4529e843d"
        },
        "item": {
          "id": "e474142a-feec-43f5-9977-9d40ec11923d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "926cdb73-3feb-459c-8b9d-c7501b96c505",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e474142a-feec-43f5-9977-9d40ec11923d",
        "cursor": {
          "ref": "dabf45a6-9396-4d57-9272-4a1282c188c4",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "108e7df6-6e9e-478e-a29b-70a4529e843d"
        },
        "item": {
          "id": "e474142a-feec-43f5-9977-9d40ec11923d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "926cdb73-3feb-459c-8b9d-c7501b96c505",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9712be0-4ad1-4eae-a9ac-3de230966164",
        "cursor": {
          "ref": "cf81bad6-b633-40d8-8c41-841a9a6600e1",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c357e2d9-3593-4047-9ceb-f9204d637dc1"
        },
        "item": {
          "id": "f9712be0-4ad1-4eae-a9ac-3de230966164",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bf25eb43-b99f-4e06-be9d-22b5242ddc90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfee3629-d482-411e-a57a-96b4af525e16",
        "cursor": {
          "ref": "13c32fcc-82df-4eba-a792-1831cbd54205",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "73d398b8-2128-4c3c-b3e9-4ad67a377cd7"
        },
        "item": {
          "id": "cfee3629-d482-411e-a57a-96b4af525e16",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1beb16e7-d968-43b6-bf3f-dafea231d7ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}