{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e724a620-43a4-487e-b93e-295079487a76",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bbe3505f-aa34-4416-ad2f-fb0a79ba77c8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e0692df4-1b48-4d28-9d83-14b34dd2e706",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "16670145-531a-4686-be2f-f16bd706464d"
                }
              }
            ]
          },
          {
            "id": "31aec7c1-e19e-4153-b396-5c48632d92d5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d208ae0-a193-4391-b1bc-15242e424e82",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b72b5aa-b528-4d1c-8811-52a07f9cc8b6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "aa97c44d-6f7c-4063-9202-c4b073615e04",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1761e0b1-3ef9-4095-bb01-3557c9471709",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b236a968-6da3-44c0-8b9a-1ed9b7fb827b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44b12be4-8939-46c9-a0d8-f36e4dd11081",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5cb8243-a204-40c0-b301-93c0af33815c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "335cbd22-03b1-4741-acf1-abdbc436f7ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d1bde6c9-89e1-447e-957f-1e8c1d8cdf76"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "69fbc07f-c5d9-4eb8-b229-7d6550fad7c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8cdf61e4-ef6e-4c2e-ba0d-932058f0b172"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4881cb70-bcbc-41c4-ab04-6b941f6b447b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0f4f47b0-b704-4f36-b06a-01985bc2d004"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1ab16be-b16c-4291-b364-d6e342696fc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d06bed92-b844-45e4-973b-dd54883188e4"
            }
          }
        ]
      },
      {
        "id": "6f7473a3-93d4-4223-a197-9caa5a1f115b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ba0b0a27-dfc3-42b3-9d41-beb73998220c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0877fedb-bbee-4e16-8554-684e541b068d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "86b22dfb-3539-4849-968e-9b43520687c1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479ad79b-843c-4ec3-9054-774b8133282d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daa1056a-b9b0-4115-b6dc-63ff922f6fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b8a577-2908-491d-b9d7-4d5524ff4d15",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bb0d5c-abe0-48e4-8af5-cb6794944efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f88dcd5-2835-4eee-9ec1-2dbb6a2fdc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e069b4-85e4-433e-8d35-22b12bfdb3d5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7acf35-0bc4-488c-936b-43d454ed12fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1fc88019-aff5-42eb-8393-99b39e16cd6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91630b57-8b1a-4eed-92c7-d52e54f22f93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49094e99-c661-4cf7-9a6f-fd72db480e1e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43776c46-6f68-41ad-bd5a-b76669c74eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16ace551-1165-471e-a2bd-9ad7b5f10132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ba9d46-f811-470c-9f45-f54a910aab84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c79c821-4097-4204-b9cb-84dc5b4c6fd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2f0f4458-8396-4d00-9677-ba04fd4acc0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09242417-0305-416f-8454-6bb33ee02a24",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f952e1d-60e6-494e-a829-9be93d9922a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dfc4532e-30e8-4ec9-a879-1ad5c79697e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d92762a-e213-4b13-bf54-533bd74e3147",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "cf740c9a-26de-429e-a20f-c2c012739180"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "146b2eff-b6be-413c-bf60-eb5954131a6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c258cc09-cd51-445f-9033-8441a3835034"
            }
          }
        ]
      },
      {
        "id": "2d4d761d-365c-42b2-b558-98df2c78550b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7b55d925-7520-418a-95a6-f80ad5279144",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e8bbd4e-d424-4d1a-acd7-191bf6dbd271",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b1c6df1c-a6a7-45b8-8cfc-6e61224dc2f3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0871980-5bce-454a-b26f-a77e19a8d84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6355cd0-2090-4f42-88e3-03bc04cc8790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2f46c9-63bc-495a-800c-b92d7b1d5e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a5d72e2-7558-4166-b806-6d5a60af7a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10d8b9d-1998-471e-a877-d87548fe3b74",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a82b33-3614-430c-be8b-ddd6010049d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7430ae79-04af-47a5-ab9c-bc325105c90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817ec568-9931-4c2a-b01e-bfbbc9d7141e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ddf04b4-a8bb-42cf-8ebb-c9067c4099f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e4e1d9-eac8-4cc5-a9da-530170b504ff",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19b6169-41f6-46ac-943f-aa341ba06e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc2c9db-bd22-451e-990e-235fb10f840a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a34a0f2-5f63-4bed-bb1f-dcee8305960e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "113b96b8-2209-4607-9dc4-b5da4b92575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef49f3c-28cb-457b-ad6f-6c0c08fb8bd9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a831b43-57ee-4dc5-9db4-30c9491b32ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d75f85-2cab-4a70-91e2-f97ba61fbcf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c674f7e4-b4ce-4454-8183-0dab980403e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0779094-a915-462c-94dc-2a81287b298e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2d163c-44d9-4d40-a349-7becbd2fc01b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5a8564-6d4f-4ae9-a4bd-d4b67cd9056f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b870f95-ab41-4a1e-b4e8-3403d5ee983e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ceb1ba1-3e21-4fb3-b604-4c23ee3542af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60b99506-4b51-4264-bf13-05c7bff5db37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654df233-78cc-4c5b-9c18-c406561d66a1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed3536-6866-4ee5-a575-61f0287dddb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbe5f67-0f34-4ca3-93a6-21c862c97664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73113d75-560b-4b4f-a981-00426a6cabb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ed5d6f2-83f2-4931-8be2-1d6260fe1293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b725d2b1-868b-4aeb-a4a2-250c4bc0b27e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95241113-1d3a-4d74-9d3a-34f1f116cf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f1d53d-7c43-4505-bfaa-e46e7ac4e176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e46617-7d44-4d81-8452-bfb77f049de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f1a17b2-c74c-4ae8-8719-2637fb64aa03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694e0615-e482-4f98-a9e1-bebfe5317859",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d78a253-4941-4dd6-a939-85dc4a301a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fbef4ad-eee7-4de9-9653-91f866a03cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cc596a-ef0d-4094-ac57-6792bab49983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e72dedef-e941-4e73-b151-78fe4c025931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50c72e0-5ced-4499-a882-274b93ccec04",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d757e96d-61e2-4a2d-b411-a8728e9042a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6a62be-5812-47be-b753-f764645a5bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64ad017-db7b-477e-a92d-77bfcf0fbba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09516ee4-8bdd-492d-b335-ab7bccf3fc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f3d6bd-39ab-476b-8f2c-ac045c290b33",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4e6bed-a015-457f-8579-0228b8f11613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9c21d9-8969-4553-bea9-7a92ce0f5b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e30cc3-8aaf-42a8-865b-07c2d58c0e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53d0ba81-d812-456a-a94f-d29cf95c7f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b044f56c-f3e4-4f4c-9e60-6b1116ef339c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3be6c3-8542-4862-8848-1f885bf52517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b23f37d-b1d8-41b3-a564-035a029d2b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11560d50-72c7-4a45-bc45-5238efb07b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaf86580-1911-45bf-9fb7-ce6ca3acf9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a32e6d-44e9-4fda-9f2c-fc55324fda3a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33dc7fe-2dd9-41a4-9e0d-d17b1c04e740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57056b0-a500-4652-b431-da478cea0406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce59586-c6f6-4312-b2e6-d03bee9ad285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83de6ee8-f363-4c17-9789-3abdedd49914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ec4359-2333-4578-921a-2de94bfc7a7e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716cf0cb-b930-48cd-b4c1-0297f5c9e50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4a9469-4262-43ee-80ce-7fb797eef97f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dca0434-bd68-4f66-9a3a-1c936453ead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22a877bf-2545-4209-abc3-9dcafd871fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bac589-0308-4b18-8b7f-cb7992e9527f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814de84d-55e3-4f8b-903c-ac031fe5c068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af6214f-7eb7-489a-88eb-783aad8d83c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2115b5df-4428-442d-b7b9-0120822d0d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f22f0767-8980-4c24-b0e5-744c7faf2d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f33243-d5a6-47bd-bb28-9efaeabf4c55",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a28659-ff08-4d40-98c5-c952e3cf49ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5914d19-38d8-4ef9-a19d-c0d67df4845c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948e52a4-9328-4e20-94e4-13db2c21b41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad16c7d5-4f24-48d5-b5b3-61237fad94a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a567477-7e2c-4a65-bed4-46a8c67a4a8a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3841604-d7ec-4bc0-8cfd-76ce8c013484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ea1551-b4b2-48c7-8fe5-1b9ea91b2b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03290fb5-51fa-45c6-b312-803cabc4ab6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0529af54-d800-4724-8817-87dc81bd7bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99a39da-c242-4e52-9c7f-ab498c168fb1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ca6c48-b49b-4518-af8b-78e3f8b516a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32e61cb-abb7-4b28-a623-460783768e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2749722d-25e8-4f1a-a144-5c90a1266462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "891bc7b0-a993-4311-b27c-7553100a9e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d958095-b18a-422c-8a02-33474d708bfc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a28ed4-537b-4be8-acfe-b19e337b4100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894b8750-f362-49da-8b23-2733864c9d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3359158b-5c40-4f5e-8224-0b33a2fa4751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab7da9a-1dce-417c-813a-ac90fee5db31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8258ee-9606-4237-aa20-042022f09a93",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6649f31-4ea9-49b8-9f95-640a84e8621a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf2ed6d-17c1-4ba1-94df-97cf688edaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a5b77-b566-4e83-a31c-1a5cb5cee22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70e0164a-4371-452d-8cd7-59517e579af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740daf29-3e5e-4b71-a85c-68c43a492b0f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9503c7a-77fa-41a7-ae36-33cdb49ec09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e9c693-ba57-43e6-a557-c9d00e7ec5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01938d4-afc6-4f95-a053-7a65875f031a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8406186-8f53-4893-9734-5699878cf400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a32a4ca-18b9-4206-b3a3-44caa1b28ddf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db51276-fa51-48ea-adc3-391ded7bb237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f1ec99-00a5-4a79-afc8-6cc4af14a31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af3561b-6751-4158-a31b-897197285f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c977907-1ae2-4c1b-86f0-2d35a68cdbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dee2ff-3323-4b75-9c23-aa0538396cb0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c0ab9f-3e88-433f-ad29-4c9ba2dc7ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3abf452-9039-4e96-b190-29ce5829b29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5153dff1-8c89-43bb-bfa1-a199df3be8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "add27894-90ae-4491-944d-cab24a922596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ea003b-ba51-4446-bcce-2efb689f8328",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c88a67f-abce-43f8-af14-88e8b252dfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98be760e-ee34-4f88-a6dd-40619519ff60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d40d4c3-8fc8-49dc-ae32-e812ec40e043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de269acb-621c-41be-b512-b0ce23596681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906f6eee-cdb4-47a1-8e90-9b91a1a6d71f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3d274c-ed2a-49a0-a383-d7d590168f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f101c74-1e7b-43bb-8809-323ef24fcd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3032c5f1-be6a-47af-97ea-3712720287d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4a26f1-2ba0-41fb-8175-c87102388c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60b17d5-8021-4add-87ed-9e0500a0aac8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c758d4-04b6-4edb-b6f5-7e35e0415b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996c8f7a-31c1-447d-9ca2-f151ea9ddd8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234419f3-a39d-4e48-9b29-6b349974a658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a31d47-10ea-4a7a-a12b-30cd92cf0283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41928d2-ea14-463f-9fda-31c163d47a76",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b9e18f-fd36-4659-a2fc-a8f83d7fa684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcffd445-4f6c-43c3-91ac-5126a0463ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56535d7-5ce5-403f-b644-d8d50c005929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9acd622a-c36a-4e5e-99fe-4ec921eaf1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e29057c-63fe-47ee-8143-5bdf7f69a711",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb869edf-8a56-48f8-99ac-360ac4ed2973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d00fbd-4a65-499c-8391-b0c990d58cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46798347-578e-4bd5-bc26-6bffa635bf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a635d5-636f-4d57-8504-a28cb8e895ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331b7456-cc32-47d1-8439-7c30c0585a95",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6062bc9a-7088-4dd2-853d-97be9b1758be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874a3b10-9201-4a35-8a98-3b0e5a07539e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d169d65-d6a0-4865-932f-92d9f1d94b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9228903-e518-4ee0-b8e1-f5b23e2dbd65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c578979-2511-4cd8-a088-28d9dfb15fbd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a127efb-b1ff-44f5-903f-83e881810ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163d1c6d-32d0-4285-9c00-fbd13ead2aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ed1362-5bbb-4855-93ef-70a4089755ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa502131-d6b3-4e67-beeb-06138c313910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ace9c7-da90-456c-9acd-301fc960b35e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33af41d-9638-4a4c-a568-86bf06f02ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8280fc9-5c9c-4e0a-bc33-4f77b997d4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e0d8d5-3b8a-49af-ba0c-ef3fc264c1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8770725-4028-47cd-9d34-0e3accc41ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c685be0-d276-4ff8-8571-c96d08da37c8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55447a6-81d1-49cf-8067-c30c6f30896e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded1ddfc-327b-4df2-a7db-3fcd39bb8abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e93ef6-3d10-4457-ae24-9e60dedb9738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "934cda66-f72e-4f54-9c46-a74af53119aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c8b127-86d1-49cd-a322-d3b7d26ef0fc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe0faa7-1230-4da2-9b5b-5799f261c405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ebf29d-954b-4e84-bbe8-2714b221bd3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54999fb2-dd25-49cd-8049-e19dede79c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d554ac8-e8fe-49ed-b2f6-01234c499d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea542df6-8733-4c6a-9488-22748cbe3f46",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8dd3ae-9b24-40bf-b925-77b08b2411c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0b158e-b73f-484a-9af3-0b90c042ded9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5e31b4-5419-4115-b3ad-87c64e0800d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c93fffbf-594a-4943-aa66-9d8922a58061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc01512-7074-42a6-9c74-e224b944e782",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50616c3c-9c38-462a-8e70-81d538438ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3744de14-04a4-4157-9b7f-0389920134ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6837233d-d61c-4843-9b99-6db1bb1c58c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74c838ce-013c-41b8-a917-48b1ffb58a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90424eb1-6d16-428a-9fb0-bd2d2a6e3976",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517bc987-3940-47f2-a409-ea0a81ea7303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64882a8f-3532-4b86-bc25-87fdc90b3d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ede7b2-af33-4560-bd69-ef3f4181bca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5b21f8d4-9160-4665-b327-f936ef1c6a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62fae6c-97fd-427b-974c-8ac888a5a494",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad613283-970a-438b-986e-c6bd46571f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ab84487-6e54-49c5-a8ef-981095e4c438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6e9086-6ee2-4d42-b14c-1289f31254b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5899468-faae-43f7-8c9b-56c8d143d2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2535e9-39ad-479e-86bc-44bd3a73b757",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f7867e-65cc-43e6-a7e2-bee181dc5c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c79cd88-af0b-498a-82f3-44d63a1fcfc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0c1f87-a6fa-4132-a3e9-75e1c81c3ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b84463da-fe71-4d24-9017-3d8926f23f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7915d5f3-4c64-4d8f-a02f-ccbfc640414d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c382240a-1a96-4b01-aa1d-4d4609508bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c781b8-91ab-44ab-b051-4da057cc7414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09145fdf-19f7-438e-97c9-f9fde776a4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "77d37419-4ec8-4910-9dda-b59a6629743d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ecc6c0-5f9c-45e0-b54f-84fa30a35047",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1348835e-ece3-4f33-ab82-80f6ab1c5d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a5d2de-6dfa-42ec-9aa1-df855d82274b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bdbc1b-763c-4ca9-912f-0c9d49b7b8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cae4c2a6-e57f-4e4f-80fe-c4194b769830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4fa8e1-5dd0-4bb0-bf88-22c0b219ffd0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899f0249-d194-4c27-9539-12e60e127382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579e3ecf-76d0-48a0-ba89-75a153d20baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566d11f4-3ff1-46ce-842a-de9d31e9ec2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b341ff5e-0609-44e5-b2b8-75139a17ed31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffc3626-d8f7-4c5f-bc54-2abe211b6d2c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2947fd9e-b372-4090-8be6-03308f6ae234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f95fcc4-ce1e-4de9-ba58-13c4550c0ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a05174b-b19f-4ff8-8c98-bf301e77fb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c130acd6-4d60-49a3-a398-9db0e5bd660a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c56ef7d-d01b-4c94-9fec-30b2c9f3ee92",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b964ed8d-0e32-4c4f-88e7-e2ba39e28071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3303541-ca3e-4bf9-afa2-48a713691012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fdfed6-7044-4897-a792-1fa03a110085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "05d0e31a-6b06-4fa5-a187-a99bc99b9b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b932bb-c821-4410-9d0c-9bf8d79853e3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969af19d-0b98-453d-a411-a05ad978940a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850ad894-9152-4ee5-b741-db93aedb6451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43004c2-745c-4fce-af26-cbd4463d8f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf2f8b3-af94-4aa6-8c48-78f322b6e81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60cca80-5648-4d8d-afd1-eb3f07172a09",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2976e2e7-75d9-454a-bb2d-1a7e6c285336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1be2d8-831a-473d-80d0-de89a671cb17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc813f4-0ff4-4617-b7c4-31f5764f6320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b3fe1e-b96b-4d5b-92b1-9aded32b6343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f813a4-2c63-4eca-8bbe-a803b3b98e24",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb69c5cb-76c0-4c36-b6fd-5174d9457ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05aba80f-2908-4171-a7d9-323cc0559e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7cb72b8-4b0e-4ef6-bea2-1ad5b0f3b224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "85a07a1f-dee2-4d6f-be5f-5ef5ae2111aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69e01d7-1a47-4a9b-8b21-38e02fe51c08",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdc6dd7-7938-4a75-b72f-e4ed9ceae59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b751cd43-b5c3-4f00-9f5b-fc108242eea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733b4b9a-eaeb-46cc-9d5e-fd123108ae1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee5e482-a6a1-42b3-8c46-493c5d481db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b9f470-b90a-4f85-bce9-edb31015697b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d899536-3b32-4972-a0e8-54c6784d038e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a024e086-aec6-483f-8181-938692a671df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1eeab1b-bc8a-46a4-a524-1c35e89b053f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d46687e6-68f4-4943-a989-37673eb715c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ab90a0-61f3-4dc6-a842-5b09dcc21bf9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6985eb52-50f6-4f6f-ae55-2139598d3e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959640db-2b34-48ff-bb1d-77a68b859965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1031d5ca-5380-4010-af96-5562a69d7be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4014888-37ce-4bf0-a34e-0c04a0c2765b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445245ad-e138-44f3-9c5b-e354c99dcf5a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c45e1d-ce46-49b6-965a-e45ba9e22bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b4ddb8-9cca-4e8e-97e6-80b4a92edba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5875ca74-1c6a-458b-a318-52678a8df19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8aa4a9-e1f9-4c7f-ba4c-dc2e220fbaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f497b52-2073-4ea7-9205-153f05ee4c01",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd684f8d-cd09-49cd-8733-e574eafd0e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49644195-3b21-4310-adb7-b5225e7ade05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6c2333-f3ad-4080-b3ea-3a50682b5bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac3648f-1eee-4788-a902-42a7739dc52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17313a5f-869f-4db7-9fc1-54628519061c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4546118-63fe-41c6-a874-3dab5aee2db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fccb226-1b5a-4903-a14e-eeead6616621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f7303-a654-4e83-b701-a5cfc146479d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "07060a39-cbd7-44b3-9820-eea3598a6ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334b7bed-4b86-460f-b5f6-b6fcf9c04b59",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7242d1cf-b850-4354-ad40-0f3e51450467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1efc4e-aa5a-457b-a3e1-8c8797b5f523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00635513-e9b4-480e-9300-6e6b8423ea33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da1e904-5304-451c-bb40-6dbd67c785a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083d990e-b915-4302-ab02-2ff166c14c2a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beca777a-afae-4716-952b-40f9d811571d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d907be84-ecfe-4572-a3d9-fbc4741fc462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641ddaa7-2922-43ba-a374-7c4e469284f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb272bb-eb70-4c24-a192-1d293913ce2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb7ab09-f05f-4320-9c73-7fe409bd2af6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60084d0a-4368-48bf-b861-0600d197db69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d8397f-2032-4d2d-9594-26a113272886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761f37eb-c3ee-404a-9488-a0077d57ce3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "521009c2-8686-4f3c-ab91-0776833e9af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a7484e-e3cc-4689-9c87-7d69ee7d8fa5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1abbb7a-b37f-42a9-8db9-1343fbc42e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9185eca0-8c2c-4747-994a-e37663f87bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188695b4-b150-4945-99d6-6b7eb6e0faba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f617036-ad61-441d-9a41-e1eb83ce94cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8f3dd6-5e32-4745-9742-17e216d19d60",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73f211f-58a0-4d9e-bbd2-9e537d78ee3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebfae9a8-a2ec-4a4e-8285-273fc51c12a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98e24d8-10c6-4d0b-9cb7-c9ff2e5ff364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "88c9f5bd-8af2-463e-b257-372a36f43805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b9f381-740a-463f-881d-0be49819ae9a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cca177-9e0a-4ca7-a10f-ae29f27ddbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17eec372-6610-47fc-9054-eb8a48340f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab50541-e9d2-4482-9977-44c1d09d553e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3efa554a-5760-4c8b-92b5-d4f6241c9c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d767c0a8-7699-4551-918b-70f16430c473",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f502766f-94b5-4af6-967e-f85f228ea0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb89ccf2-cfa7-49d8-83c7-e920300f0880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e947ba-aee8-421d-93b8-f23a577c88cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e024dae2-89a5-424c-9aa1-86b7b8217da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e738321-13f7-443c-b17a-4d29d99b2766",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff16c92d-e5f1-45f5-9c0b-678d3a76a1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa96190-7c8e-4cbb-8a94-ea1daa38d4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71714580-f935-4482-b6e5-e12931985d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "320fd096-7c22-4b83-af60-b06601e07931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfffe65b-3bc2-4d8e-899b-af79cf4a1bde",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea38467a-1ddb-4529-8bcb-4b443d2b15bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e1002c-f8f6-4a16-a336-d15e4ba2326d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9476b133-6553-44f2-8064-11921f38ac4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72cff679-3dcb-4d97-923d-be1f215eeaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e0f98f-b038-464c-b945-ab0a6fdb10e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dba2b4a-66a9-483c-951e-f991cf70ac86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3838d373-ec9b-4602-8329-f8e99e5d73c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19bb22d-344b-4135-a367-7634ec80a2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4a4d2d-5a81-4c3a-b2dc-ff7a1c8f5fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48f5848-0d53-4f23-83e8-63f04c6de687",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b107d28-c917-4558-ad05-3c8846bde567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f707073d-3e8f-4401-b2d5-d94a8a987674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac381c9f-ab11-4059-9b98-cd4210c88424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6611576-4c7b-4688-8f79-57dce593e923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40384cb5-c12d-44a3-bd95-1575fcd198fd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72594d18-83bb-4d73-af0b-c1cc9061ebe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9f4e17-b76b-4771-a5d1-19c897b914f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480356ff-a5cd-4311-a025-1de2ae0b958f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "312c2e48-93d1-491f-8da8-416f96077236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c8d144-67e3-4685-8d58-cf873d0677c9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cc0194-3f7b-4d0b-b923-85a68eeef544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a13bcc6-0705-45b1-9926-cde831ceaa18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ab6e41-888c-47c0-b15e-d59357265145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c73c428-aa58-468e-a857-59de0a5932f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2a5843-4393-4d58-99df-755531da439e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed9c015-3ef5-4960-afd8-279c90def067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7673a42c-437d-4436-8d4a-1ab98388c098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41007c42-f596-4c21-a79a-20be7f071e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb5d88b-13bd-4b5c-9b94-78b59e201380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630b3131-fbe2-4b38-bc7f-ef50f26007e5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f26728a-a081-4ee8-b8a6-50c4cc2e7c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fee1697-6a2d-4ab5-9fe2-4c3b4af39d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402220e0-28af-4c5b-aa71-61169e8be5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6beac2e-0633-4aec-8752-ec3207534ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299894ab-bfb5-4d14-abc8-19bc1da72b5a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ad2c96-d15a-4935-8c96-b65bcf244682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96639d3f-8488-4172-b0bd-1bf3f1a85fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38165b88-1174-4080-ae6a-f84725cb3e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7631909-06b2-4f6f-9162-411c3182d08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1670c102-b4d0-463c-a6af-687c296bbafb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c165f279-cff2-4096-920e-2ba950615e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159e48e9-9ec1-4fb3-b9ed-5f2bd77e1de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fcdf73-e0a9-4ed0-9b0f-8bb8268561bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "04847caa-d5b8-474b-b6b0-c5e470da2f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131acd61-bf5d-4ac7-8a2e-85d7d616c83d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afde39e-bd51-4d8f-81ee-e5a743615c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57e9192-26f2-4d7d-9281-201551f01a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82540ae-a6d0-42f8-af63-b8cb52bd5c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d964fb1-387d-4a1d-8422-9f5dd515ae04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3de75c1-8d97-4507-9b28-aba28dcc1a0e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1e299e-6ada-48e9-8e22-272bd4faf0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9055b5d5-05f5-452b-a876-60be9d06e13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf392bce-fdd4-45b0-b486-aca3a77f6085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3247e740-1ad6-418b-bc77-39799032dfda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa07007-87ce-485f-9bb5-c633cf656011",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2206123-6c9c-4e7c-a861-e20edb24790b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60250df0-6d49-47e2-a979-834f8d646498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c52a816-2d05-484b-8682-c14c72c01a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d38fe2b3-2ba8-4b4d-97c3-6bb1842e8025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac3fdc6-9475-44a7-9ae3-e1c8c61e3df5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e430244-a123-4bdf-855d-82ada2c157af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbde9e81-8229-4289-8fec-52120f060725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91585af-2ac0-47c9-9d02-440f65db50e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9875ea-00b6-4379-ac43-577371e05ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9cebe3-af57-4eb0-be39-5979bed31f22",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8e7f9b-dfe7-4ee9-b9b8-61240e8a711c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49b5394-1545-4f7a-badc-d3b72148fc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3566e1bd-6732-48d6-b0ea-f9e16ab0e0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "805c2976-d26c-4ac1-b7ad-a19f86012cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ba220d-a608-4bfa-bebd-d96993a9d277",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691167c6-a4b4-4135-b09b-1ef99a2c5587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de01dc78-7686-457e-b74c-e9f45b5e71ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d727f3-4dc1-4c97-a755-e215b00ca084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56ac22e6-c753-404b-b27e-49bf0992dd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae5a1e3-8ac4-4def-9853-5f65a6633ec8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1d0b7e-c48b-4694-a5ef-c1d1cac7030e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c15075-661a-4150-b733-7e6aa5728c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5609cb20-e386-4c45-b1e7-0f3d674c1e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eacd2459-4a38-4900-a75e-e0320a45cf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1895c93e-ddb9-4265-be1f-acbdfb0ad8f7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f32121-23a1-45bb-8755-206007578284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8f499a-a1eb-426a-aa55-163ee916c642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b6e02d-e977-4179-9656-e974be1d7844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "138c6973-f599-4040-b5df-91c2f85062d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da319095-269d-44ec-aa7a-f91af152c573",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0491fe-4514-4cd4-8aa6-1f483c40321b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ab6642-36c5-45a9-ad48-e5cd4aae1945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc14408-bb03-4d57-b765-8aeca51edf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "411fe28c-963b-4909-ace4-b48af7c505ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9213c9-0b19-42f2-9c7d-67266fb47cb3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1751d869-0783-4635-a564-9159c7bd7e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add1f3c3-5dfb-41cf-baf7-a9b6f590fc37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837f38a4-207b-4910-8962-28a30b5a3f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1fae8c-8d94-4bb9-b128-3f369aa68a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cf01c8-4dd6-45ca-bb3b-7b61445c43eb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c024bc4-e8ba-4146-a38e-a9fbccf4bf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4eb442b-055b-4271-ac13-724ad092d8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6792da-1026-4b8a-b293-20a522ae0f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06450bb1-106b-401c-a907-110a9fa6ebd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fa864d-2cbf-442f-a923-2b31aabba9c0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebab7ca-a229-4715-9e0c-5280fe22bf3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998ce8a3-4d53-4c7d-8f10-38ab83e760d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209f4c82-1cfb-4b92-85e5-c88dac26c728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "830b99a9-da07-4ce2-934a-6682a0f757b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b425a348-1f71-4e09-8faf-e5fb76277cab",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23167ca-4dbc-4e80-aa17-c32c20efb4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed521b0a-63c4-4719-b483-731673832420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6475fe14-a41d-4630-aeed-d3588183de25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3b8998-ae53-4b4a-8da4-be8da9191217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4accdc2d-bed6-4c5d-b8e4-bfb22c9f9210",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc19f5b-4318-4d9a-9032-8782e1862f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608f3b42-9ab0-4a66-b0fe-8431e9158149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685e0b01-7691-474e-8e0b-eba6a06fb32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc6106e-e611-4f1c-ad19-fce4ea56e803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8befd504-f86e-4152-9bf3-cad49b2a060d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c0c6c6-bd86-46a8-9efa-4008b7d7d826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e339ad94-f41b-4f28-a72a-f92f47ddee33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c763295d-f47a-45ef-bb2c-47671f44608d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcdac48b-9dae-424f-9b70-4186ebf7b22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7199cb8f-ae69-46be-b30f-7bf0d9731a62",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ad77c8-598e-4709-a398-f8e4ba921a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd5cb62-d77f-4254-a775-e1ab9acf7120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bc949a-a8d5-46c5-a31a-cf9a5bc9cad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5036363f-b661-4f66-a6e5-b6703def5a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0835503a-fa27-479d-a5a9-e1717b69215e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4420a4fe-3748-4cba-ae40-657e6c1ef30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbda2f57-db32-4b36-9b1a-242704e54e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f9d51f-1a90-4864-8bb4-0cfb6caf6730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94970809-ac34-4d6d-871d-500784294c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896fce4c-bbad-41c9-84fe-8b70a5fb3cca",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138e668e-3cd0-4191-a447-3755357a101c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf0a2c6-5ab2-4596-909e-233a7b675ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685dcdba-883e-41f5-94d8-0bab7275d5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27800004-ba98-4a71-9e8e-aab30745ab37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e91d200-7169-4712-826c-5aaaf4179cb6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18202d98-f4fa-4382-b23e-ac5fa34650cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb3cf5b-4ef7-4e9b-991b-a5cdb86a9f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e85f94-ea2d-47fd-803d-18d1f1db7750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc812d9d-2ce5-4438-ad18-f07cede6f92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037ac30b-7931-4016-a661-93bd5c879f74",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e5ab75-d30f-4028-ad8e-5d938950e5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2a96cc-61c3-4936-bb18-02ee76b23bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b6df0d-6a45-494b-a55e-98b166295747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca38169c-4e8a-4d7d-8e6d-83611a705fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af49e84e-edfa-435e-8a70-a3e51a997437",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9588f7-41ac-4652-8ffa-dbe12c15cc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21a3235-b046-4679-9eef-efe54ac56de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b127f35e-f9a0-4ddf-90e7-b40f8154856b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee76630-cda9-476a-a77d-6f3f5d945377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201cdd02-6c26-4451-b076-d0c329d2c375",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f4164a-ce47-4719-99ed-3e1d553fd2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f754c0-4e2a-4936-93e6-f955fe32c9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0ec631-ecb4-4e3f-9123-6ef6c3fe8b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "493ad17e-ce49-4871-a169-d6a08eba1687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1551090-2bf0-4f80-bca2-ecae1d2a4ada",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb12710f-89d8-4161-8023-121c81a5d3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6c26a3-5c82-4b9e-a4e3-a6204fd54215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d8444d-2b27-4580-83bd-cc248064aabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "72430b42-4350-488c-8a29-a03b4cd996d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76200240-ae9b-45f9-81e5-a19a28f65e27",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f36eec-01c4-4912-9926-2d4925fcca42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2959639d-ea6a-435e-a182-9a4156a6eb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794c1840-b833-4a8c-8802-4c7bd61bb89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "67d4e915-4c02-4325-9d78-a88c0eca5b4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b57165dd-0aa7-47f7-a3a9-8b1a6d01abd9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38ca1caa-5ff9-4f95-9bc6-d371f666a0e6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a8a8c3-2caf-43a4-8122-ebbed1271770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66755dcd-21d4-424c-864e-ba525ef7b991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ebde6b-cb92-4668-99d5-36ebc8bed30f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5e75555-0116-4a2b-b7b1-7a2d4805d54e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc3bdf41-f858-4d64-9160-84535b123662",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfbadbda-0540-4003-a012-220901e924ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f00b15a4-d181-4951-9c4e-aa8906e89341",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d96f0c51-d708-47f4-abc1-cad49b9defb0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a91c2385-2111-47a5-95ab-6054b46dc627",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22a4587b-3864-44f6-b818-184c708c323d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "506129c3-a8b2-4f7e-9253-3d10d35a7b46",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6fee2ae8-6597-44a4-af6a-fb8783fb0f59"
                }
              }
            ]
          },
          {
            "id": "79a81cd8-733c-400b-a364-dc95f2c21af0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb18e79b-7f41-4019-87c0-9c75b513b67a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d60158a0-b2ba-44d0-8e0f-eff1b83cb5c3",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e623aa05-c062-4eb0-acff-87eeeaa309b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "00be09d2-489e-4273-a7f8-3ce466d83d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e1a04b-90c1-4d38-93d4-7ec6fb99884d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ebbf34-0aa7-49ae-b74f-527f1ca1bf1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "397153c2-1564-4650-8593-e1c77d2191d8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b6da0d2-e1a8-4101-be00-578e6f196a36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aae98cea-b0f0-4320-a178-c178147660d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a867807-d8c8-4ed4-8ece-305889f3b85a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8fddf2df-b6a7-4c95-966b-393d81e470e1"
                    }
                  }
                ]
              },
              {
                "id": "0d59f42d-2600-4827-bdf4-35e841100dff",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "820ac78a-9ce7-4675-bb36-cf2034c44509",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "793cdd33-8908-4722-9e55-5a43052a0b37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "974b3a25-4197-40cc-8a63-8524f5ce3af8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9f17962f-cadb-4689-9b0e-23ae08caa07c"
                    }
                  }
                ]
              },
              {
                "id": "0896ffb7-f9c4-47ca-911e-4bc5e2ec20cd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33248ac5-15ee-4e69-af64-6f38d1d57453",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6635ce3f-0172-4927-9eb7-7d3c71c8cfad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65ce830c-bd1c-4e0f-9a84-7fa89ba942ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "19a60a11-3764-454d-8b67-17357ac49c88"
                    }
                  }
                ]
              },
              {
                "id": "9f71bf02-5067-447a-a8cf-2ab08e6ca4ce",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca28dfb8-4e99-4f78-a220-74d44dd9c3e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d21c4c87-3d46-429d-8150-add6c194dc6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e601c11c-0378-4d86-a393-69aff229473b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7fce09a1-65fb-43fb-8b66-230ef919cfe1"
                    }
                  }
                ]
              },
              {
                "id": "ac5bb20c-a548-4cfe-9ce7-a3fe2d491a87",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a2c4f77-c8c5-4cbb-9c0d-fe62ecf7dc55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "500e0810-a245-4a6f-9c96-33e8c76e7d20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f95bd415-76a7-4429-88a9-8fd42011041a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f6a607b5-8b7f-499d-99ee-f6a575d155fa"
                    }
                  }
                ]
              },
              {
                "id": "505726ed-6c63-42f4-89fa-d031e7e4f326",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac551b7a-dd60-48e7-b390-f246d4744da4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "588dd7a9-2304-4091-b522-5b93912e75dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ef27ee9-2eef-4bd5-b75b-818855ec1f15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8f7154d8-0c8e-4f5a-b93e-c33c60383bae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c86e64d-1b19-4f86-bca1-63876724cb83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5757c646-1c1c-4ffd-94b7-2654d11cda2e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e2cf8c4-b2b7-41e1-95f3-6fd3bd20bb0b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed9178ac-81ac-4b70-b9a3-b4e1dc1ee873"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "869714ff-4840-469c-950d-7a068c0d2def",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ebd1504e-ce92-4abf-9694-213890375045"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b46bb07a-8f69-4625-9c42-79e268d2c5b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b328b5d5-b32d-469f-b67a-7ce03ab9c4d6"
            }
          }
        ]
      },
      {
        "id": "15dc2ab9-e992-46ea-ae54-226524bdf527",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "04bbf303-bbc8-40a5-bfef-94338927ec14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92caed84-b7c9-44c7-be03-820bb9263096",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d0ecb4a8-d2ed-461d-aa68-cb2071073ab5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a954407-8fff-4963-8a02-6c233a00a5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d68da2-12dc-43bf-94bf-ef3b8d5851af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc49b34-9f8c-482a-8226-f62327a36a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bce4e10-6f38-44e5-9e35-5600eb59b264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceea8eed-987b-4411-aa31-11d3da35c0f6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f9f717-179c-4490-a2f0-d07d7e71e4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfce0639-f6fa-43ae-867d-b07cf3c7da36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53277c3f-5ada-482f-aee4-47f85bcd880e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e71800c2-cdfc-4ee0-a1b7-0b5fcd055b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5228cda9-ba0c-4cc7-8a5b-71cb018a0608",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200843ea-912d-4038-b857-a5fbfaba46bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7bff4d-0889-4eaa-bc04-f20ecb16d373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5161074-be4e-4f2f-9508-7de4035f205f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7b3d67-3ea1-49d8-a07a-85d2593cf390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91706466-23cc-4c3c-9512-4e3ffe93b730",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f650d8b4-5e62-4d93-bb17-ad0a095c5de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927ee99a-3d41-4dc7-81be-15c6416a75c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf153b6d-e2d2-42a5-b72e-727309c3bb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58577bad-0136-49a1-8adb-2992b0013327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174513d7-4b0c-49d9-9267-6ff83d9b9b7f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e560ead-18ce-4b70-b512-dd95a92a2626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c310e1-a87b-4de0-bda8-5d383e1742cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3431ff29-2b88-469a-b4c1-866da02d6f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c67c0f8e-f2ef-4c12-bb39-3ffc867025c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603e147a-43b6-463a-83ed-ad73cbb7dd09",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e24d220-8726-4e13-83e7-adf5fb1093ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f961ed-66b2-4b48-8af1-54aea13d683d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d75c29-cd1a-4d62-a32d-e5caf3578464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3f8a5a-b990-44a1-b546-8671763342c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f3158b-9462-48ef-b9ec-b7e9bdfb567b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34da34e-a866-45a3-8957-11476b502586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79af19c-662b-4b7a-bb85-c3f16c900b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8055d4-eb23-443a-97fc-dd0469a4f822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "62983d84-d263-4081-8b86-2b2aa47d5d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d2d1ae-ef8f-49f9-afee-64e43afe7bfd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c888ea00-74ba-4334-907b-5ec7d814c7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b265eb47-9e6a-402b-8b81-88fb71561072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4679f08-98b2-44f0-b09d-c7fef1c4b948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31b4f418-9ae2-46fd-a611-83a45c0a1817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adc1cd4-6000-43aa-b052-ed07363b3cca",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7fd664d-c3c3-41bb-871d-7c702555ec52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca106582-3e1c-46b8-8dd3-4c1b38a237d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e1239f-2eb1-44ac-a274-a82197edc9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab962d83-9e06-4aa1-9420-8b1fe2ba455e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d160707-6273-49a6-8d88-21573970b0ae",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020aa3c5-235a-4e9c-9369-4e5bb1ad577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363ff613-cc24-4111-800f-823faece1d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d796f0c3-0fc8-42db-a9d6-6080366a83a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdfaad30-bb91-479b-b339-03217c4f0c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32ce519-c426-4859-aba7-3369767c7abe",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7907cc-4d75-403f-ae8a-6438202c0b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d34611c-fbfb-42bd-95d3-383b319ae9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f9f9ea-6e58-4081-814a-199dc8f1e601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a7877b46-8c38-46b6-9690-94237d6e21b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e18225-ccf0-44eb-926c-7dbec242806a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3827495d-fe0d-432a-885e-6e30849c80ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a308f18-eaaf-4985-bf83-e65058a822f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c97eb7f-2369-464b-99ec-9573b076d70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e67cec4d-3e55-41dd-8521-766338d299df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ada6e04-f394-412e-839b-23e66bf54c47",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2637a156-cb58-407b-8c39-3e27468581e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a3cf30-f315-488f-9706-e04124a407a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd3f44c-a465-49c6-a62f-24f0f68c0116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f10206f5-7e49-40e5-bb1e-beafe0baab83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80be9c6-6459-4502-8f8e-6adce7fe4dff",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e79ead-2718-4c98-a345-664c7dfcef5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0bdcd62-c4bb-454a-9ef5-5bb4a4da79a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eac6452-8891-4f1f-a358-6bb6068a552f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbe108c-7afe-4ae8-aed6-2516584a11e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9240dfee-ca27-4288-b9aa-124eede14fc7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62236ebc-9196-4edf-8983-4df16f08b6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a0f5b3-551a-4489-a4d5-ac77cf7702f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d58150-dc33-42e0-9faf-d5f975788581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cda7622-4fcd-4949-9b14-ac8b2b0dd7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c11c3d-4a48-4a4f-8878-1eba9fb5fa9a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe59c372-3560-4ab3-88c4-12f1fd42d62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c51c0bf-a569-46d4-9c07-af086b99b76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14d4857-c088-405a-8b7c-476e67c5a7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d13f008a-82e6-4f29-a963-b6019b289c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e8534a-97ae-4a76-94cf-a5b7323ec13a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362d6ee7-feb2-435b-8416-33d2e76419bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5314e24b-6fa4-4204-a293-67522c2d80a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c18971-a2c3-40a8-90f4-68ef3d7697c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "25c5499d-5899-4416-90a6-845c335173f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28575f58-face-48da-8d0c-9790dbed0bfd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa82a7e-d769-479c-8dd5-ac1c301f1161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9318f87-eb37-4088-bd00-f381ea446ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424fa50a-0956-48bd-9471-952a2a71a8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3aeb417-7acb-4b3f-b67b-0800609ccda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a25c868-4733-4cd6-b9e5-ba7bbb0b2b37",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f2620-48d3-4939-9c58-97e1b2a40848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135db09e-b4ce-4e7c-b6bc-947836689a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc4c3ba-4706-4386-9c6b-2e07af2b790d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23442218-4c69-4c30-901f-2921c4699a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82719b12-6f42-4663-a6f1-b67399bf6453",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01554945-78c0-481e-8c21-eaacca34b610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dde0c8-c25c-4f2b-a9d9-91ea938b5c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f30eb6-aba2-49d1-bc79-f35e060e19fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c904f502-a921-4c97-b426-b426f6051c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacf06d1-8eba-462c-8f5f-871d026819fc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2d9500-ae52-40d7-b881-726cdcdf9923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaebd69d-a0a6-4829-aacd-0e6f68375ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1188f3-b3f3-402b-a30e-7b399f74763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ef4bf7-0842-4cd8-8b20-a9f58eabe28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1463f0b-a2df-4456-a3c0-fb8bf95b0866",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab06248-9573-49ee-bb3b-3c554da2dc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddb723b-7194-46a6-902a-d75e0008156c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2969f74-f7b3-464b-9f56-c58747e62391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c77bb15f-d582-489b-9393-46e443cc353e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673674a5-5f34-4d78-8b5b-78ab8ba2aac4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2022145c-6eff-40b8-9581-8b16c59e41bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619f6509-a70a-434b-8b4f-5a457a226c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8e4b8e-abef-47a5-afa9-0e5521c1ad6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dcfc4fa-1fa5-465c-8850-701d22e033b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c34c176-6065-4014-a32a-f7b68ac17bce",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe215490-dc66-49b2-8aab-37be59e5f32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75578ad-2a54-4004-9067-bfcd4d0d5e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede7b2ca-c57e-4f69-ad17-b449d64ae1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae778d6-3964-4148-a0d7-fcf6e50334e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb54522-8697-4e3c-8fe3-b460324e4632",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dfddca-7856-48fc-b3a5-d84c7af5bf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce4116c-2ab7-45e0-817e-4d84505b4039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61666e8a-557d-407b-bd7c-1c5b45150a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "738d8abb-03ec-4055-8fce-345e63be7f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6ed1ce-88d1-4ff3-a905-fa59a5b6de5f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bf208b-3959-4bc1-983f-050ae4abab5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a140e04-b376-41e0-bc8a-54e21b7c09f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9007b713-30af-4eba-b757-02a088da89d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2dd1c15-ab2d-420e-8309-a2a077b3ddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96171ad3-2cee-4bff-9f1e-f62f4a312463",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9f2411-e2bf-47df-bfbf-f807bea2b751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a019800-be8c-429c-a717-1a2c47552e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e839908e-2161-4e1c-9261-e1d3ce80549b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d30aea-e5bf-48db-8761-c8d7c4b85a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c171fb15-4fdf-43bb-aacd-a1b987adee1d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d467e7-0522-4304-9a48-1e34abf0f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97e9dd7-0417-4540-8632-fbfb170dfe80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd5f978-4f5f-4749-8e38-e1efeec6f6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a55b841c-7207-4de0-b2e0-9dd0233c43c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14309fe7-dd1b-485c-a42e-6ee9a4f86730",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91be2092-82ae-48fa-b4e3-3ca80da14f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030e5e39-265b-4c2a-be88-2ce50f67c595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e05db0-8dc1-4d50-bac5-f237314ebbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc877f0-2fa1-432c-8e01-7ef51ed42f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b47d40c-48ed-4f9c-9b21-8677b10c6963",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce817c46-244f-415f-85fc-d5a8fb2ba527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478a045e-b177-4581-9489-2dea2d37e0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e97a225-ed24-4bec-a60a-e288931f1294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61754eeb-3e9e-458c-804c-12ae5de84d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d964e4a-31a9-4b57-bb5f-89127c4c04eb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a01dd5-155d-42d7-9a00-a7f154feb7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188bdc9e-7ab9-4bf0-a621-2c450cc86601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cc24e5-3c19-40c0-b92c-2271d019287f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5c412f-9853-48d2-8314-a282a0cc17a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ced969-47fa-4722-86ae-d74a040e0f55",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd51a3fb-e326-454a-83ee-165bca033629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053b4c46-76c2-44cc-94e8-f7b99d175411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3aa2fbe-8c78-47bc-8619-fbab0fd2bc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5c8567-b9eb-4916-bdc4-444d55d02565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb0294d-96d8-4a71-8121-9342a303f4a7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbbf365-53cb-4c7f-b7af-6472cfa78473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1f30f3-170b-46c3-a8a3-2f0586e6efe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bcf276-d6c0-429d-a94f-b22101d8fca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "789f4337-2c48-49c0-9fb0-0f1a1619597e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60c8dad-a43a-42c0-803e-4b7796c602ea",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09194af-4041-47de-9348-1fdc0cc88cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf64d31-5c4b-43e9-8127-2d06fd156279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dea4314-7f6d-4016-9d61-15aaf102b230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92ad93cb-3f44-422a-b3dd-0f9a8718c7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd5b04d-1e54-4da1-8bfe-c2fce04553b9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda1790e-4768-4cb9-a00f-70c43641a4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187c887d-5277-4ae2-86f7-73841b32b9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74a946d-cd81-4f9a-a6f5-620295df6cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f84e21fb-4e6c-4c74-a652-1c9d750db53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67667a98-2eba-4022-a4dd-6e536b3a9def",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee40795-65b3-4555-8447-366a519c9701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9e417b-c850-43a0-a873-067294e21a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433ac736-ae36-4977-ac08-467cca6cf6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7598268d-8d2c-4a6d-b42a-08af9948182b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceaf8a06-948e-4f30-97f9-1e690bd7eb64",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c02b0e-b6e0-4669-930f-e7b653e10090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7932e3c5-ef5b-4f67-979c-f1848eb0d56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc75895a-b6bf-4ec5-8467-7772a0355d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dccc02ec-2286-411c-98d7-2ac9c92317cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95be66a0-cce8-4105-81a5-3d8e409a1de8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57c8128f-00c3-4eee-b02a-22460eedf719",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a394ecf-202d-4575-9896-22737d0f29a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ae625ca2-477b-4d7f-8b86-1492a4649ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b381124b-ac10-4ae8-8eeb-f8d9241045d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9ee38e8-62a1-41a3-ba3e-40bf4e67192e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac3264b3-c273-4480-98fc-66c533777b93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbe1227c-3ab8-4f05-a0e1-edeaa1484483"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a9893d3-0b94-4fb6-bcae-8ae1e1db669c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c34f1a1-3256-4675-88be-665765534603"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f332d0a-c4ad-4a53-80cb-cdd616bc410c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6eb4a753-95a5-4571-bfdc-d657a2b99d97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68e121c3-6d69-40a3-8685-0ac2153720e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e17ce317-863f-412e-b0f4-8e2ff45e5409"
            }
          }
        ]
      },
      {
        "id": "a7d8de68-26a1-4fcc-b6f6-f3c22bde12a9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1417bb90-7375-4583-83f5-136e15d75dfb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f22eca01-9289-45e2-a40c-cbd0398b4200",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9666bc95-1566-43d9-9ef6-b9baa11e1217",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcc81fb-e650-4c71-b8df-0e413b525272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513dc0af-ff82-4add-830a-e3e7b0a9d9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f34db4f-d099-48f0-91c3-541e15a18c88",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5715f7ac-f482-481a-b988-7d80ec5f09c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b91573a-f547-41bb-bc2c-c17b5f98d25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8589a084-3af6-4ab6-9138-ca0fb008eb53",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837f5719-4920-441a-8a02-d2874b48d205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6249cb6f-ac3a-4401-b5ef-a44571c04957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658509c5-3036-4ed6-b058-f744f70775a0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc4b4a7-83f3-48e3-acfe-a6e410fdbc6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdce84b1-621d-488a-b867-95636469818d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96534adb-ef1b-452a-baa1-0a658f13fb62",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2258e55-84d4-4fd4-9fac-65eb6662810f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe35d963-d7a9-46d7-b924-49d0c15bf9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1234ea0-7df7-4c8c-accd-9eaf1906c402",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc05341-355d-46ca-882d-0a2436162331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f91813-2c3a-4341-b71c-1c954addc4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a0ad29-9cfa-4472-a314-3929c7aeb5f5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81b445c-95bc-4a72-86ca-1cb54b26efa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1f3cb3-986f-48cc-b397-9603c7966cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a7de18-d529-478e-89e3-2151b01aa012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bcec9b-dfd2-4832-8a9b-04b2a76ba7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fe54ec-661f-4020-9a51-6a3144fecb70",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5671801-484e-4405-98fe-31225c6b9dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b9df227-ba55-4b8e-b9e1-d34346428e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08db778f-c94e-4efa-9a35-79c75157cff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bb14d2-6e0f-4248-b8d2-9cec4bde50e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b173aa-ad40-4dab-8f64-fed7ab999192",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b474e9ae-f732-49e8-8d31-e84f2c5db3cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e8a1f0-c6e5-429d-bfda-e91de8eed3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c4366c-7034-469b-a68a-9bded067eea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cc94a6-f2c9-40d6-9e38-dcd2b3e57b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0caef224-c8f0-4836-a04e-510289f43fc2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a34ed2f-e92e-424a-8129-cd88d3d400c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea69c66-104e-4537-8009-26f20f59983a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55d4c12-1f60-4f04-80e6-7510a9604a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7327f6-595b-4c64-8785-d97d5f4055b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a710f8f7-baf2-4b4c-81bb-a81ec7f837c2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55588ba0-1974-4757-8157-b22086aa0a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7ad739-ebe4-4b2a-9196-7ad6ad0f1f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fac92e5-abc9-4006-a564-34db8c3e13da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f468846e-8507-4ee0-b829-a688e0177deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f890e6e5-621d-49dc-ab69-076cd43008cd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cbdcc8-677d-488e-82a6-bceb7c2c990b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f869cb1-7a93-4d3a-9b19-4c540d3f479a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af783eb3-8e72-4dc8-b935-79df118353d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8069e1-024a-437c-ac77-cb6851106a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f88d6c-8f4d-458e-98b4-225aa3bc825f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e77b01-4453-41d7-b3d8-992e1aa29317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ce9f306-bc48-4214-b0a9-dba62b2a284f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241f97c3-6027-4a00-8d0a-36cfbcf38a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e380e802-5c8b-4036-a5de-acd6b4a5ccad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75656fb6-d100-41a6-a395-057e99fc5b0d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a010e0b0-3231-42b8-bedc-266b22b6f5ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b99f78-46aa-42a6-87c7-de60ce02ccce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369122ba-a578-458c-835a-83eacc771691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ce53ee-3fb1-4e57-bf72-85c6367cf961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe536ecd-9d1e-430e-9868-4d7d9698934e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be866453-13bb-4dfa-9d81-e603371c40d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72fd79dd-69c9-4152-8e5b-0f4af744c71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c25483-622f-4e24-b526-05272ee007d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f86755-3392-446b-aa55-1f2010118682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da987213-f881-4e0d-af8b-d9d33ab117d9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083d66ae-064f-465e-bc79-8afabfb84ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571ec0cc-63d8-4dca-93dd-7a16165ee45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f708e03b-96de-4788-89cb-f5b3f69e2afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e2cb60-6153-43df-a99f-368c906b6937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598cde8e-3f8a-4ff4-957d-c8075481ef4f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535b2376-18a4-42fa-be77-350f045cbb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ca730a-40c1-4cb8-a1ef-c17105448b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b87bc9-5b25-4875-b39c-0f2121a94df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e159cc52-2821-407b-9131-54764fe26d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d12ae9-9141-4f70-b2b3-80abdda7bc96",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda8286a-d575-493f-9430-615761790957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09eb56aa-2026-4e23-89da-331b8665846a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714cc5f9-2374-4fdd-8816-b277879d0939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934cee8f-0c09-41b5-86fe-61cdc139d603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd737f29-a24b-416e-a099-f6444bde018b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0204378-3440-408b-b2a3-9fd8150f96f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a1034d9-a642-428f-9f8c-ed72714c75a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff594ce2-30e1-44c6-adcf-1dfb2485fa6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb22adb-50ab-426a-a555-8d66f91d3270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862c821f-60e0-4ccd-a633-cd3ef18f9c76",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b6cbf9-f8c4-4afb-8151-c81745089083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49940614-6b60-45c2-8378-805a9fda44c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fd2cd3-c303-494e-9eab-8443065aea82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d9882a-7d93-4e51-96dd-c9619297c8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfea5e5-e4f4-48e4-91fc-ac6085742ca8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038a2bb6-0247-468b-ad52-fb21af49a0d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6b0c44-73f2-487c-b403-fcfa18764335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17c5a89-a8d6-4250-a8c1-e77dc3a7934e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab0b1581-8ec1-4a65-8409-ca29802b678f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311911de-92af-4be1-b119-b44b15ec488e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4e764a-901f-4ce5-8182-b9b4b00adb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60a7c09-ec63-49d9-8e7b-c1f02e58a5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57105f23-a5f0-42ea-a345-d461709d043a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45fbf3e4-ac3d-4d5c-8174-a26f122983ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5c0a59-afd1-4995-a2c3-01427f91ce1a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2961b384-6d88-40ea-a016-3917445683d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d6e55a-4c32-44fd-8e52-0e53e681744e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8068d7f-2bed-4974-a4e4-104cb50522f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33511b96-e031-4584-ba58-1b1823d5e082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359810ca-435e-4da1-9f90-95f306cb7897",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1505293-9e10-4111-add2-b03f39412170",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99213499-ee0c-4d3c-bd3e-6e99ffbdd22b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "699b6e5a-775d-4538-8b7b-dc9d1d30c61d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89024bd7-99e3-4afd-b969-2ed889ebf9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecd992f-9ea9-4825-a18d-f86403b9648e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7332ce-42ed-467f-9dab-dc5209882f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "369368a2-b048-4441-95d0-95aa3232119f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860cd837-b094-47ef-b2e9-ac4aad1783ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02892619-173d-40d1-a008-d210793fff64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bd0087-d106-4da0-a63a-d2f96fdd4762",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ccf3db-0d8e-443d-a275-357222501c05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a765e87-d631-4092-81b3-008f78aecb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4c034e-0388-44e6-8021-ab1f43b4bc7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b494523d-f0bd-4641-861d-2ba7707b51de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3005346f-4d12-4c20-84e9-d479e39ab83a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526fa0c7-a02f-43f3-b8b9-61830f1fad9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f128619-0b3c-4a81-a1a0-e0bde30a7db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae8a555-a70e-44f7-b586-43bada384b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d372e746-3adc-4487-b386-58e8bd27bb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d425706c-aa9f-4862-ab4c-2194922a59d1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29587ab4-fcd2-4359-bfc8-c6bd461780b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b68880a-9a34-4031-8ed6-13b333ca9014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3f0e08-4439-4127-ae96-6bfaa0308eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3fd54c-f887-4eac-969d-01c556161176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5c9c69-0f02-4cd0-af8e-410e48d25cbf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb55ede1-9d84-4412-ba45-7479033ecda0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dafb38f7-3bc0-43cd-8314-6017926171b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44cf7cf-df7d-4d34-95e2-e19c1b73a4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29b37c4-7188-46bb-a4a0-ea97291723cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e82db6-d9c7-4951-8512-ac215b30f7ec",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ebd8df-9162-4554-a129-514890fe1d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ddfef6d-0541-408c-bdb8-1abd1127b271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7ad7cd-2881-42cc-bd52-e9b9459eac16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e98017ce-de71-4be9-8544-0155dc1c4e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c91d395-caeb-450d-bd9e-9dc16f36f604",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf643fb8-dbb6-4e7f-ab5a-80e922b97078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cd5c7de-e4a6-46f0-a0e3-05b151ba051b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43c436a-54a7-4608-bb13-2cf5c38ed26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b678f569-bdc3-4c99-bfda-1c56b4e371e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c074591-6afe-4687-926a-891c2c82c6d3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b81c1c3-4f15-4579-a260-ed2ef09d29c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a09dc2ae-2389-44b2-8e8e-5427b02075ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2494fa54-45e5-4e21-b446-8ceb11601593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f012951-b1c0-456f-a4aa-9398875bb57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe94d982-81c2-4bf4-b225-c9c61931971a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816d7d89-9252-41e1-9dab-42782f344602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf67210c-f827-49d2-a28b-805737a12ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b053933-fe51-4ff0-acde-ce371105a8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8970d987-aac4-453f-aa3c-48747d170e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b4dc98-4b6b-4c4e-b99e-995496299a60",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccd9e15-6171-4eaf-b651-ee16cbaea3c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29e83dcb-458a-4b81-845c-375e8da965b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2311abe8-3965-438f-beb5-9c063623a880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bcb58a-88ec-4caf-8a31-b83ab920bc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ad4d66-3899-406c-bab0-797b5f573231",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17665a8d-5153-4245-bc61-7df513d8a51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022f8876-3bd6-4ec7-acb2-d637ee48b2a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4760bd7a-5184-49c9-bc9c-aee23c7f0e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd84d6f6-49a1-4e5f-8f1e-6b843727a04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbd53dd-b1ac-443b-a40d-335389be0cba",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a91e62e-9d2c-43fc-a985-48fd9aba1113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac78055-6bd5-4788-8048-eb592942ddea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d47dd7-b781-4fc0-b52b-9e1e7f12678d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c847ec44-f349-40d3-aa5d-66a58c2f68be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f154eba3-ac51-4f5b-80b6-a9652776dcfa",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47385216-4e20-4a9b-8672-886c922c5019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4571c9-b4b4-4d06-b2e3-c0c6355273e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050cc46e-f16f-4aa9-b48b-df7442aba858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee03090-417d-44f2-8a85-f5ed588ced61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1e532e-e30e-4bfb-b7fd-8e0dfbcbb5e7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8939d213-c401-4269-a859-b58cd83d4598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64beec8d-b260-4e9b-b4c4-3d959839ea2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfc4ab4-cc0f-4cb7-826e-7c6bd1afbb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a5e2f4-7e83-434e-91ec-8592cd298d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb0eabe-f085-4b35-9af8-1b139ccf5b6d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8210b67-faae-4f36-807f-179210eb3a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8201396-1da7-42a9-b780-4df43ce82d5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90575fdf-298f-42b4-8a9c-f3d1846c0bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbe831a2-8ed2-4f60-879b-bbfb592bfbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc70643-1aaa-4cae-afcc-3f706378ec71",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce631d61-cdf3-4010-90bc-b3b06aaf3460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7036bf3a-d981-425a-ac57-556d7ef9cfbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c000c3-3c4c-41c5-87ca-be88857ca82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f479c42-a637-4c1e-9b25-67fe9b8338d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc2d8ca-8e0d-40eb-b9ea-92b8593f3770",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761514c2-d448-4217-99ec-476517a5414c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752a1bc9-e634-4564-b9ab-b3f42e4327e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "750bf592-7e03-4a74-bce6-ea9ddc948f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c3d78c-b9e8-46e7-8aeb-7b5fc1f8f5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6221b8-4be0-4caf-b608-0bbe5008b49c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049d65e6-2e6b-417b-8a19-7875e81b470d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea8d217-291a-4864-b107-923679936b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a57bb97-477e-4e3c-8107-97a5f6d37a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679e2c8c-7393-4fbc-be25-2942d90acf02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f775c9-9407-4179-bc8c-2ab4b48ccf73",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82fc5e4-83c6-4874-b581-ebe91ae3eafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0560da5c-a5b1-405f-ad64-856e8e20db12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e32ee7-3b11-4f77-8d90-06801a78dce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ff0831-a3d9-4344-9c47-5de83d26253c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e577795-6d9d-49b7-b384-dc45c5735171",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a58c4a2-041a-421d-8a75-90c87206e701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00a1981-b6ae-42be-ad31-864a0ef28a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584cc3c6-bc7d-4d92-bc22-6b867c9f914a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b9be7d-f5bf-4097-a8a5-5e8e91072a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace0e183-1428-46a9-b0da-89c6a7ea3389",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed423eb5-9bc3-4bfd-b360-db0ddb70c8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3ad4ef-f3d6-4d7b-b370-4ccf64f840c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c169771-a13a-468d-b4f1-b06871cbbfb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7ea8f7-8fdd-4b23-8088-fd97e03f4b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1291be40-bdc8-4d82-8dc0-b2465f576a96",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4019255-3ef6-47fd-809f-4f34f27ebd45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbde8da6-3938-4d3a-a3fa-ac9bfa7dc053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c46e3e3-1d8c-4936-bc72-2e34e2db92b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2fac6c-e5f3-4f47-95db-eac9d1e9c958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222131d4-ad63-48c6-aaeb-2e2d0bb39da1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89af20f0-b968-4031-aee6-537517d58d3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8a9bbe-38ea-4964-b006-bc8f1a9f3d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26872b13-2f25-4741-988b-a34b7a4a831c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4194a1ef-3d84-402e-9315-295fbcb3c28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61eb1ea-2723-4bb9-bbbe-35daefe29cc9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbd2e00-7521-47ca-b9a5-10ecff91fd9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884a4af9-837f-45c3-abc1-09ee9c85ca59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab9b430-5f33-47ab-8ac0-07e7c3fa9679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae188c4-9832-4f7e-b540-f197ae1e911f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f089ed89-b0b0-4c69-8269-d255c4367716",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0082e6-4a06-4b1b-9d61-65c4f6e2d594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b10a2ac-9fdc-4dc9-ae89-8fe8869d5a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8eac9b-e2f8-4e77-a056-a1633417369f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96dfcdcd-897e-47d7-acb5-925e20cda8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d12c75-5d87-4948-8f1b-23c173a42751",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a87eb0-fca8-448c-81a3-e58c51b327ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d771f596-1ebe-4bf8-9e01-c5391c5c9645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebc1c12-4a48-4e2a-83b4-f4301852e16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157177ad-2e6a-4514-b880-6ec764673bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ada78c-f3b8-49b2-81a3-25f8d021d25d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa400031-fb6f-4218-aa34-bcc0099e85ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f7d54d-8a77-45d4-8859-5ede7ef8bd3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef3849b-5e3d-4e1c-b418-a6f169a8cb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2c68ef-c069-4a85-b659-4dc4d98f3d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4701a79f-9106-4aac-8b2d-57be2c340373",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040bcf4e-4dcf-450c-8134-a73f00182e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdadd819-3507-4abd-a8f7-8f62e116d875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d645d945-7bfa-4976-91bb-62ef786277d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e8883c-77ad-4466-8e54-dbc923d318cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b1936e-3588-4fc9-9b75-ff09d6d02ab6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040e63ab-a89c-4115-9281-bfe9cad830a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6c7f0d-1537-4d99-928c-e6efe041ae19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905e8ff1-d7bf-42dd-b519-4c7f454d657f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200dcb8c-d8e7-43e0-84dc-c26f801c0fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2834ebbf-ae70-4fc8-a58d-1e2007f12c27",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c322db-a3e7-416f-95aa-82bb0ea0d452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c331501-11f3-4fbd-8abb-84829cf9e76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effd71d0-074f-4cf6-b52a-4e7015ea41e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de0bae8-b1a8-4556-a84b-18ef524679fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f0aeac-98ef-4be5-a495-bf2e022a1e60",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899f6baa-6c1d-4afa-93da-90b2f720a467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0476bcce-45de-46e2-b0f6-da891a4e0c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a267ab67-d86c-4976-8149-6f3208567011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d58fcc9-ec84-424c-be3c-41cb06f3c945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271b5983-b01e-4fde-84e6-9a3a9e038b11",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889cd916-2c12-4e40-b59b-c5178407d1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5dd2969-ffe1-4a15-9042-b5cefb75b399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b307e4ab-511b-4e6f-8fdd-0061c5cbe8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f04d8e-d642-4544-a75c-2fba60e3abc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c58164-9a97-4599-8398-a4e0578b6299",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073ed8dc-87d6-4544-8949-26098b19168b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200f35ec-4a44-412a-9a0f-1ccba1548c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20828c77-a2ab-463c-a4b8-02d6412f3bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306e667d-d23c-425d-9277-d988ed0002bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604d7b77-0383-416c-9a9b-1c0a32539cf2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4046f0-0b58-461f-8429-09a2f0aa5d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82241755-a7b1-43ac-8f9c-9eb12b27cfeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c72f50e-2261-49c0-8214-df7ec521a88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8505d88-485d-4d5d-b5a1-dbdeb340017b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da72eb58-dc72-4f25-a794-fe90ae05e226",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7509c43-6e30-43f8-b0b8-f61c52d9c78d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e215bf-2180-4888-bc91-4bcd8a90d777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83119cf2-3124-4556-a531-ae6ce2b1cd1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e733979-9da6-4cdf-bf9f-a26aac6167aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ee1031-b2e8-4c66-89fd-4160e6733771",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad18d97-3398-46a4-8fb8-0eeaeb0acb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26553561-3b54-4aa0-8ba0-920d7779dfd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af2c12c-b15a-4f1a-852e-2bf3eeda398d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d356a0-c59e-482a-9702-c79d65cd5915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7636dbb4-806f-41eb-a7ab-4089c6fe6321",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f472b8-01e7-4568-8fbb-f8e1444fc128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be417178-b057-4883-ae73-afca658d00c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "848f95dc-6eff-44e5-8723-07becf881020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e410d93c-8a07-4b65-bc58-3cf10d77d8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ee042f-c28a-4ed1-b3b7-11aa3f91bedd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48014d77-1b5b-4a24-82c3-a74c1792e9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c36fb7-42c6-4ef2-86b7-c7ff168f5b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1ed609-aa67-472d-a8f8-3e50f89635b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a77c405-bac3-4188-9541-45bdb7042dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf388c6-b024-47b6-95ce-04fd758f2143",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8634fb8a-5f51-42d1-9ea3-c5b8386b31e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a3abab-d035-42b9-bdf2-c3a67a13ac0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd62b0b7-835d-45eb-b0cf-577514cc70a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c787d93c-bdd7-4aa0-beaf-09526926fac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dddb17c-a4c4-4125-9b49-54f82f1b215a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c93b7a-d973-4a25-8707-cf890ce237a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca4bbde-bd27-49b1-b3a0-0e32188f44c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a0e952-4cd7-4792-89dd-b5d8f7957ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b85eb7-0429-4bd2-a374-5d5fc99d3875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ce7310-69d7-4e67-9df7-51d0e65cf923",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb62cd8-6ec6-4071-9d39-8e09e47413f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "037bd919-8259-4586-b88a-5bed2eb8684b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ca9072-7714-483f-9e58-ae67bbb874e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c09b88c-0722-496f-aeae-d91f28da0b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdbe004-12a1-476e-92f8-b8f812426521",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5843e55f-86fb-4037-9362-ebd4021b979a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62c5665a-1bd4-40ae-a7e0-6757117735da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a3a32e-0bcc-4e52-b23e-dc2cb2a068ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a550211-0a7b-4195-86ab-259d134770f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b58eb43-d8bf-4d04-a181-571f345fafc3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc349632-2b73-4701-8266-61e8b4028d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca10360-8f7c-47d1-8aae-fe513775ebba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6640e13d-56cf-4db1-b428-6b0bfa551ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "facc5b75-cf4f-4ebf-84ca-dc958e9e7064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f935f317-b940-4a1d-8186-9269263ad568",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b50c48-7aa5-4f21-b3e5-6a800596a0f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8a5184e-e3d0-40cb-b264-5a3aa4073737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ea9034-5e74-492e-b4dc-e9f5d045714d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06aaa777-1815-40d3-b0a6-8d4876edb6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae78881-dd38-4a0f-b0f8-5469daf3745b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c67b260-4772-4e8b-a787-ca6b0f8481f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce295d66-e763-47af-815d-324c84ee7e1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e9875d-44c1-40ff-8f69-d02b6283a6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfe1654-03c3-456b-aed0-110c1be94bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ab9db9-a666-42e7-89f4-95a149d30759",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d338ce6f-154c-4288-a378-01050baaad5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef106d33-f2ea-4c08-b4b7-4e2decddfbb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb5939d-50cb-4a85-9f6b-a20ad010a03d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6c72a3-bc9a-498e-97dc-644c52e6b562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59efa406-22ff-48f8-8a38-f57b17e08ceb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6ce701-977d-46df-b5b3-1c4b23cfef3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c41198da-3e41-428b-a5f0-4176296f9730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59038c5-5f42-449f-845b-fefed11f84c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343f3ff3-9226-43b3-ae99-3fdb9fc26d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c86fe3-f373-4934-b2c4-2f503287590c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67ee774-5793-4471-9895-f8824dde0090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375f4ee0-da43-4f8e-b030-6e5b9aef37d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db2ac94-cbcb-488e-b367-9b8b13616c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd9fcc6-ca57-49c0-9d5d-70c2a2cc5516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d9e1fc-eb34-4153-b928-f439c7ce52ea",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf201d0-3180-400a-8ce6-a74d21a259ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87899533-13dc-4405-9975-5287dab7d8b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "387042da-22ef-4432-a8dd-7001ea6a34e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b35d47-ba54-44b8-8cfc-e20027485a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf502bb-fccf-40a5-9d9c-e01d8ac2af97",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254e7a97-343c-4f83-92fc-017b27f72735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97042329-6bf1-4c15-8cc4-5512081766f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5414e9f9-fb0c-4ee4-8b2c-356fae4daf27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bc6dc9-9032-47d8-8cf8-05092ecd3e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854dad40-52b9-4ecf-810c-9f5d1156168e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074cbfb9-f512-49ec-a072-8e9e9aacd01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172359fd-0ada-4a9c-bfb2-01cf612e645b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c1e3ab-7fb6-46c6-8460-c6649207d82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fdc597-bc54-4558-bb42-19c2aaf597d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d8d820-2153-4fda-a143-ca282328afba",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cab61e-76d0-4994-a10a-c4db1f879647",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad64d505-7d05-4850-8ece-a9f22e0737d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d5dc1b-7c36-4e3c-a680-a659e6b3f2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d18ac2-6250-45bb-ade7-79de24a2c52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d414aa7-c22d-4a44-9b10-e865744b9b18",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7cfe03-b9b1-4b41-a4d0-fccf55bd4b8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ef2ae1-7732-4ca2-9afa-cda7af871e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ee0325-0962-4b4f-a80f-c3132dcc0443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af22c142-75b5-4896-8306-a678688dd3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d845bde-c219-400c-982e-a0c3f008c3af",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7e8e4a-472c-4575-85ae-13187d63bcd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e87909-a30a-412b-b383-63c6d3ebdf89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974e23f7-a013-460b-8b0b-9276baae4451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f5d764-9937-4c73-a6fe-375865756860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73fcc97-07a0-46b2-8315-78b550374a03",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4813af18-07f0-4e5e-85b9-42aba72c234d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cfc7132-fee2-4d0b-8ed3-a58b2ec4d038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d66837-5d0e-406f-b47f-914c05c58097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0428a1b-49d5-460d-a54a-7704d888b414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f826f002-fad8-4899-9a63-c442582131c8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c68197b-c443-47ac-aaff-692e6848e389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b0408ec-9572-4c4c-ae31-08f7d240d7d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85844af-3e56-4c88-b1b8-17a299f00149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51a4270c-4b45-4840-be5a-8cb2be2dd1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b409a5-e86f-4036-bd08-11e488e89651",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16710756-68f1-4234-a2b3-b08e16936006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16556625-8515-4d51-81ff-892e998d4cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7681a36b-19d4-4187-b9f8-6b6d081eb73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97039c26-94c0-45e2-ace5-418106c52722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7df202-8c24-4885-9808-486704b5272c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666bada1-e786-48cc-b871-3b71321deb02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ba8b73d-5cec-48cf-806b-d44dbcac0be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adcbe6c-ae2d-43ea-91c5-344725c8bde7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff10b71-9682-4497-9b00-78f97ec9f49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491c37b7-f5a7-4ea2-ad90-7d357b5723d6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3ca0a8-c0df-4129-91bb-8e2cc9a40479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760b7afc-defc-4c33-9338-ed461d444e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38a8561-c89e-484e-80f1-9069ec6ff940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08596aa-cce3-4291-a16c-5c1a5bb95966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ed5cbb-5a2b-42f5-9b80-d342cd5f2d28",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c218b07e-6ff5-4110-b4b3-bec37e5a9d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03da806f-962a-4b09-a01d-1d5b523581cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5b0bd1-aac1-416b-9a3b-195aeb0f7ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e717851-842f-4245-bf12-ad2681addb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd74d29-2d82-493d-91a1-413ce28e0b08",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdb948d-db5d-4f10-a4bd-0b49c44428ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec6ec8a8-94a6-44bb-971e-e0eac6aa8925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de80e1fe-2b6e-4860-ae56-3975137932b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1df23e4-8222-4fe8-8dc7-a43297a22da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1e4e16-ecbc-47c3-977b-df7c317f61ef",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2e8c0a-6b72-413d-960b-171709ba46a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb8dccc-f5b9-4f9d-a671-7d06d32aec2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8703445-e0fc-4bb2-a412-329323309d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1039ad1-5fd5-40b0-82e1-bfb4adf3d329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5535b80-bf4a-4142-9705-f09d845ee7c4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe8a04f-baeb-470e-bd2e-d48334e059f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3da205b-4186-4368-ba63-31fea3f7a2b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0badc8-15d3-45c5-8afc-d1bb63f9079b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d0ea82-3905-45ee-b286-a2cd015de96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8cc6d2-7479-45b3-a0fa-188b3af2d101",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97448868-9eea-4549-9e8d-5bdfb612bb05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "051652b6-28c0-45c5-a02c-6d31a9d130ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3d5a82-4988-4641-b381-426288f2ce92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f3df8d-2896-40c8-a36c-d681338a8f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cc0161-6dc0-419b-a053-d613c5f990db",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eab525b-7638-46e1-9423-7ddc51958368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bae5806-b2d7-4abe-8db3-aec8b1e6efff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb230e0-3050-49dd-a6a3-6d6fd89225bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbb12dc-4e2d-46e6-9288-923a520b706c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea3f8b2-5e94-4db7-9897-19ffbe89577c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4bf87d-c947-4585-ac1c-23ae236b4d03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "445b8000-0d7f-46ca-a5a3-f3fdfcd4e512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad1172d-bc3f-4c5b-b54b-c04b82acf848",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f7c117-3342-4184-8be6-63d2c99319e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09981908-b036-4ba4-8b08-53d29db092ec",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3f5cba-f178-4aaf-bb9f-650799ad5e50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ccb567-f106-4322-a79b-7f00fc448035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e95e780-7816-4720-9213-c9c6329d7032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501892c6-ee6a-492f-8371-df0ab514cc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b747874f-0ba1-4b68-a3ab-3093993fcc29",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f031e7-0fca-4f5a-948f-390d86c252e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9f66937-05aa-4e2e-8cf8-5d1bef84abb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6662592-7656-42a3-a224-8aa0ccee2e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f654e2-cb6d-4d77-8702-b6b3b88581e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb68b9e0-cae9-4272-b34f-02f72b66f4ce",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53de74c1-9b43-4f16-a799-8e010a382b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964a53cb-c354-4a07-9ca0-00527e6c49d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23ad772-c643-411e-8c5d-e0529b322c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3917bab1-bd43-4098-9d8f-27ed3e5e8171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2f18d0-d6d2-4794-9be8-78c53ba23681",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae577430-404c-40ee-abdf-b64a682ca670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97384e5f-a7d2-44ed-893d-2df7790e22d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb882bc6-2f06-4b87-8e44-11bac84453f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c9a89b-dc0e-47d5-8ad5-90ae1272d76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8e4b43-86f4-4226-9fcf-001982bd111d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01d5353-5948-4f13-8dac-4edb126f88e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b43f9933-7e7c-4b5e-99a4-04aa79a416a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f20be2-6eb7-4fc7-a65e-3c28968e18f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4762b392-a7a0-4d0a-9f76-8d7676c4f1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5978433e-c8f2-442b-9885-b8173f22258d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925ac662-8c93-4401-a11b-8fa8c60b92cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44950388-7361-4603-81c0-a17d12a1955c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6a43d3-f322-49e0-82f6-6f80cd22de89",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0006b941-38cd-4305-9a14-8eccf8401f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae55bdeb-ab26-49ec-a359-d935659d01f1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e1618a-3f1f-4e54-aa07-102e32406a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "190f5511-2d36-4dbd-8cf9-5b0ea7de1f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6d4359-38ec-4be7-8931-4971a1f70e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2489ea8f-4ee0-4a1e-9649-fb1d26b52d70"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d10ab08-7440-4ecb-bea2-861acb402728",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "214f39da-d308-42c9-963a-e391297c3343"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ac8fb49-c7d9-4a91-8e73-009e1943cd10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e68270c-82e5-48a4-acea-1a6927fe3880"
                    }
                  }
                ]
              },
              {
                "id": "9f8f1edf-9feb-4580-9a48-643bfe104c77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c4f50df-de19-4ab8-b6be-76d07b7c48f6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167c7015-a73f-4ed5-8078-d9eee53c60eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b52a6d3a-e28d-4f79-99a7-54e6877db5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041fa529-1a93-4616-8b69-acee8a21aa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "997550ee-7e81-4da6-b6b7-b1894c06a55a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6907796-38c1-46e0-b94e-4f469ada03a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1ad6f06-56b2-4949-89fe-e1adb19717cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d7f74a3-2e62-4408-8b14-7b01c1abc476",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ec16a2d-4f68-4d13-8ca8-26913add8b76"
                    }
                  }
                ]
              },
              {
                "id": "40f55b8f-88a4-450c-baac-7c7aa5e9a647",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "822341a3-38da-4df3-8ca5-1ac3fff7d917",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdda7af-9d82-45cf-87d9-21551caeafe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "54fcc16e-e89b-408b-bb15-3b4849d95c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151c1716-b3d5-414c-a649-084b10041ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9a77d6-e044-47e8-abfe-b43a9607893a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "acd4d52c-6eca-434a-8739-e7716f4f6396",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c72a0c6d-2b71-46e3-a070-b88f7f29ed1b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cec099a4-cef4-4884-ba1a-d5d85fbdccb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "11060904-ad31-4361-8f7e-6987a5e097e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1458471-7c1b-479d-9397-a860f6984a36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbfb1423-d24b-4ae2-afa8-a6c9ea9358b3"
                    }
                  }
                ]
              },
              {
                "id": "2f7d9756-3795-4c54-9aae-f2c027f12344",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "feae8352-c958-428b-bce5-3b484e770291",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c7505770-369d-4bf5-b7a7-08c28b514d65"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90e8cc11-0aaa-4a4b-b593-bf4bd6285afb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df932ee3-c627-4e5d-ad92-c17e6c9ecfaa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1672f21-c061-4a07-89ff-996b9b4da695",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "74c3ba60-9cfd-4f48-bec6-0f21c4288e06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84b044bd-2cfb-4425-9eef-1ec2c1fdbb6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81c4c771-0417-4444-828f-fe28fc732c8a"
            }
          }
        ]
      },
      {
        "id": "9d6dbd32-c817-405b-9f89-a25954bf9db8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1b13b93a-40fa-432c-aa0a-8458cf5ec9b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5af40c4b-5efd-4d80-9233-d468e182e199",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3798b662-5e02-4173-a5ea-e348ad3d1fb6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff084ae5-a7ce-4c66-84a7-908e239589a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1de698ae-cbcf-429e-873c-eb58dcc02140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0714689-c5ae-49ae-a557-1a251a2d6aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18233890-ec2e-42a3-b999-a471e3136964"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17eaf107-d56f-49b9-904b-d3637c65249f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e3ad831-ddcd-4364-ac1d-ba38eb183496"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b667f88-783d-4f76-b33f-8c4889d1d5ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef9f14e0-4653-4cf4-a219-4eb724eb9471"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2f1d46c-7825-4924-8aee-359d98a4fdb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "071814f7-cfca-4c64-9d64-a884362c36c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14967be6-04af-4580-a27f-68e369a2c4c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60647a12-1590-4203-9697-c53af32842d5"
            }
          }
        ]
      },
      {
        "id": "44548f2a-60ed-45aa-aac7-bc8748fefb7f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0de72299-0ac4-4dde-a2e8-7b18df749f1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a90dbb2-8cb2-42ac-af42-52ab6fa9afa7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eba3e088-42a5-45ef-a94d-c4a5a03f2142",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581ae21c-f99a-4a4c-b935-f5c55e45be93",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b178989-3bc9-4983-bd7b-617f07c04121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9158334d-f41c-4205-aad5-aeea1128349c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c53247b4-22d8-493f-8154-92e8e38dd234"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c80e7db-3eaa-423d-912d-44cb7edf2151",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b65f7457-3abd-42e0-aa39-5a800c39c2f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df2e9f4e-da8b-4a66-8734-8753fad5b40d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a0e92d8-e133-4f82-9eb1-b8133badd949"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f4b124b-2454-40f4-b175-666d886d8100",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd5ab737-a881-4f75-ad4a-2f7ee1d2cd9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9b3758e-cabd-461a-bedb-79bb669b232d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4c11ddb0-229e-4d6a-a985-30c95005834f"
            }
          }
        ]
      },
      {
        "id": "aaa77b9b-e8e2-4e1e-a4be-e98a053ddacc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4de9f67b-4182-4a08-9bd5-66c58ce4d784",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f858e767-83c9-475e-91a9-0bb48a260a79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c08519d-84c5-4b93-bc0c-8a53fb9e4a9d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f45661-d9f2-40a4-be54-8c43dfc1caf0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fcb3148-ab92-4120-a899-f8ee7f3d42ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f6efe2-bbaa-48ce-977b-590fbbae139d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9afdac8b-bed7-40e3-b7a5-bee8722de252"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b04abf3-dff2-4116-b334-32852ecd7477",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "328717f6-0986-4507-89ed-a46857272166"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a8f057-26ce-4160-8c42-3861f7104a1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ebc3f7c-44ae-4a63-a809-9d06aae2f5f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0797c38e-4dd0-4e3a-9f9b-8751b4e492a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1666dcfd-91bc-4ef3-ba20-79d1ecd802d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95ce3c82-97db-4f74-9298-a802835edc47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01fbd151-f8ae-4755-a681-aabdd5bf698f"
            }
          }
        ]
      },
      {
        "id": "f7684b0c-3042-45df-b1c0-266cc8ec1793",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9223d14c-9454-429d-af9c-5e6890a3084f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4a9e4bf-49ee-4d90-811b-c915e46eba41",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9c64387b-b69c-4891-be01-02eef34a7c52",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b9a2c8c-bf33-4e63-aa59-ae95f163945f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2fcf12b-0fe7-40d4-afa8-1138fce6eafb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.72619047619052,
      "responseMin": 7,
      "responseMax": 636,
      "responseSd": 78.67236932374249,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1720139903849,
      "completed": 1720139928826
    },
    "executions": [
      {
        "id": "bbe3505f-aa34-4416-ad2f-fb0a79ba77c8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "49198db6-b2ed-4c53-9501-4624abb98dd6",
          "httpRequestId": "afe8e416-6fec-49dc-8c4d-c3018c4412f9"
        },
        "item": {
          "id": "bbe3505f-aa34-4416-ad2f-fb0a79ba77c8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6b8be2b8-3191-4880-a3a3-8fa265a40cee",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "31aec7c1-e19e-4153-b396-5c48632d92d5",
        "cursor": {
          "ref": "cb08cf9d-0671-4561-87f8-b01639ff196d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d9f8f43f-51f1-45cf-9c8d-4cb761a06674"
        },
        "item": {
          "id": "31aec7c1-e19e-4153-b396-5c48632d92d5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f6d6aeae-30a9-404e-ae4d-654fc98e1bb6",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "b236a968-6da3-44c0-8b9a-1ed9b7fb827b",
        "cursor": {
          "ref": "d8eab960-558b-4bac-b4b1-c777290c8792",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cb7c5ee4-c190-431e-977d-d412c06bc018"
        },
        "item": {
          "id": "b236a968-6da3-44c0-8b9a-1ed9b7fb827b",
          "name": "did_json"
        },
        "response": {
          "id": "bd8bed61-8df6-4ae5-a670-9a1bddb52aed",
          "status": "OK",
          "code": 200,
          "responseTime": 232,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b22dfb-3539-4849-968e-9b43520687c1",
        "cursor": {
          "ref": "b2dd8506-3be3-43ed-98f5-746af0366b31",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ada642fb-b86c-48a4-b561-8fed2d862243"
        },
        "item": {
          "id": "86b22dfb-3539-4849-968e-9b43520687c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "f03e1fb9-67d4-4218-a1ce-3be21f27b299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b22dfb-3539-4849-968e-9b43520687c1",
        "cursor": {
          "ref": "b2dd8506-3be3-43ed-98f5-746af0366b31",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ada642fb-b86c-48a4-b561-8fed2d862243"
        },
        "item": {
          "id": "86b22dfb-3539-4849-968e-9b43520687c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "f03e1fb9-67d4-4218-a1ce-3be21f27b299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b8a577-2908-491d-b9d7-4d5524ff4d15",
        "cursor": {
          "ref": "f17ebc78-2588-4c42-9404-541227f27365",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "25d7dbe5-b260-47c7-bace-96a03bdf34f0"
        },
        "item": {
          "id": "18b8a577-2908-491d-b9d7-4d5524ff4d15",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3d7bc629-4f08-49f3-af11-6820cedd93fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e069b4-85e4-433e-8d35-22b12bfdb3d5",
        "cursor": {
          "ref": "194520d6-123d-4971-a209-dcf4a54e1ca8",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "76952d59-0bfe-45e4-a087-6a54f5708f2b"
        },
        "item": {
          "id": "65e069b4-85e4-433e-8d35-22b12bfdb3d5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6ce723c3-d640-4928-b18a-1ae50856acc1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49094e99-c661-4cf7-9a6f-fd72db480e1e",
        "cursor": {
          "ref": "725dc49c-15f0-48b1-99af-fb64a39c06fe",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a201bea5-afe3-4616-9007-201c503505a9"
        },
        "item": {
          "id": "49094e99-c661-4cf7-9a6f-fd72db480e1e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fd4f4ccc-121d-45c9-b15f-7146399b749d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09242417-0305-416f-8454-6bb33ee02a24",
        "cursor": {
          "ref": "ec3bfe24-84f7-4e83-9390-16409d4d1be7",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "75a4f8ed-5053-488e-b4ab-9afc987cd12e"
        },
        "item": {
          "id": "09242417-0305-416f-8454-6bb33ee02a24",
          "name": "identifiers"
        },
        "response": {
          "id": "e6990052-c6a1-4247-a886-c87e775b79ce",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c6df1c-a6a7-45b8-8cfc-6e61224dc2f3",
        "cursor": {
          "ref": "7890c740-351c-41e8-a7ca-38cd037920cf",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a0999b61-b2f1-451b-ab30-0988ed98cdb3"
        },
        "item": {
          "id": "b1c6df1c-a6a7-45b8-8cfc-6e61224dc2f3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "271948ff-288f-41b7-ae69-9d783eb5e4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "b10d8b9d-1998-471e-a877-d87548fe3b74",
        "cursor": {
          "ref": "844ac6d6-5b3d-44a3-a5e2-13afa3a405c2",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d866a71a-7ca8-4618-b34b-0b5fda7372cd"
        },
        "item": {
          "id": "b10d8b9d-1998-471e-a877-d87548fe3b74",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2d5955cc-20e4-435e-93c6-0bc9a34c83c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e6e4e1d9-eac8-4cc5-a9da-530170b504ff",
        "cursor": {
          "ref": "73ca9096-a031-4691-a685-3d469dbf606e",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "356698be-e0a7-441a-8fd2-027829e62204"
        },
        "item": {
          "id": "e6e4e1d9-eac8-4cc5-a9da-530170b504ff",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e09da8be-3c61-467a-9f72-50d7b4b4480e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6ef49f3c-28cb-457b-ad6f-6c0c08fb8bd9",
        "cursor": {
          "ref": "42a84687-b456-40ac-a0d2-1ed17956be5d",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "38faf74c-aa22-4600-84a7-2c3d3eba3053"
        },
        "item": {
          "id": "6ef49f3c-28cb-457b-ad6f-6c0c08fb8bd9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9bbcd6bd-90cf-4485-b1ce-b9126fc5bbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "3a2d163c-44d9-4d40-a349-7becbd2fc01b",
        "cursor": {
          "ref": "199eed83-8043-4809-b3bc-65ab3bcf3ae9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "067d3035-cdbf-4a08-b4e2-374615b3cd70"
        },
        "item": {
          "id": "3a2d163c-44d9-4d40-a349-7becbd2fc01b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7e953b04-0c13-48d3-acab-2c6f0c7d390f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "654df233-78cc-4c5b-9c18-c406561d66a1",
        "cursor": {
          "ref": "081470c8-b0f4-4d34-b26c-c260242a7ca6",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1e5f5c1a-0718-4c98-a791-b3105e79b788"
        },
        "item": {
          "id": "654df233-78cc-4c5b-9c18-c406561d66a1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0ab7fea6-f7ef-4756-877b-b5074d34c3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b725d2b1-868b-4aeb-a4a2-250c4bc0b27e",
        "cursor": {
          "ref": "aeda57da-8c87-4a51-96ba-7c8cbde6dd80",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a4501a20-3a20-448e-a0ac-9aec285ffc1e"
        },
        "item": {
          "id": "b725d2b1-868b-4aeb-a4a2-250c4bc0b27e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2bb04412-0392-4313-8aa7-ef23e51c3135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "694e0615-e482-4f98-a9e1-bebfe5317859",
        "cursor": {
          "ref": "63f7fda9-0f1c-40cd-bc45-51c7aaee2cc8",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "717d2be1-eedd-465d-938e-8be1594da9aa"
        },
        "item": {
          "id": "694e0615-e482-4f98-a9e1-bebfe5317859",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c52bc6df-8dc2-41f6-bf5f-86dbdbac39c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d50c72e0-5ced-4499-a882-274b93ccec04",
        "cursor": {
          "ref": "e3f8d51f-498b-4085-a8b5-fb9ab0d311d3",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "032aef48-d4d6-4da5-83f4-e4e326ab0e4a"
        },
        "item": {
          "id": "d50c72e0-5ced-4499-a882-274b93ccec04",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "61a20119-bbe7-4bbe-9328-d19a6324e67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "45f3d6bd-39ab-476b-8f2c-ac045c290b33",
        "cursor": {
          "ref": "62397402-9639-489d-8d68-e991befc2142",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e56207ef-c725-4cec-9759-5013ba6e843b"
        },
        "item": {
          "id": "45f3d6bd-39ab-476b-8f2c-ac045c290b33",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "461d573e-0016-45c5-b996-cdab3d9568f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "b044f56c-f3e4-4f4c-9e60-6b1116ef339c",
        "cursor": {
          "ref": "d5b354f3-b042-4952-a3d5-3db86a1f4a95",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7ac57a4c-f6f5-4917-bf16-3a9a4f05fa23"
        },
        "item": {
          "id": "b044f56c-f3e4-4f4c-9e60-6b1116ef339c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "69979ce7-70ca-4ce5-9b0d-81955d36e836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "b7a32e6d-44e9-4fda-9f2c-fc55324fda3a",
        "cursor": {
          "ref": "8505f179-0680-487f-8f50-31cd630a0046",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d01cbd89-ffc9-443c-a945-8ce9f8f24a2f"
        },
        "item": {
          "id": "b7a32e6d-44e9-4fda-9f2c-fc55324fda3a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0d32b42b-fc10-4365-b933-3d4401f93a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d5ec4359-2333-4578-921a-2de94bfc7a7e",
        "cursor": {
          "ref": "0fd564f9-a3be-4fd3-9519-562000521fb7",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f46991cf-397f-49c2-9253-8c1e40fde5e3"
        },
        "item": {
          "id": "d5ec4359-2333-4578-921a-2de94bfc7a7e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9be4d578-cedb-4e63-abdd-804a2e33f6ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "01bac589-0308-4b18-8b7f-cb7992e9527f",
        "cursor": {
          "ref": "99b678f9-e811-4a9a-9a61-686bcf79047c",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ac8c5723-4c0f-480d-b141-bb3a6bab30bc"
        },
        "item": {
          "id": "01bac589-0308-4b18-8b7f-cb7992e9527f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4b3107ba-39c9-45a4-8b38-47c95ec5ac7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c9f33243-d5a6-47bd-bb28-9efaeabf4c55",
        "cursor": {
          "ref": "e2fd9224-a322-4dd9-b8f4-3886352d4392",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5c8fdc28-d88d-4176-b8bb-93c531ffc124"
        },
        "item": {
          "id": "c9f33243-d5a6-47bd-bb28-9efaeabf4c55",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0ffe8dfe-5e4b-4552-8a2c-633ce90df966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5a567477-7e2c-4a65-bed4-46a8c67a4a8a",
        "cursor": {
          "ref": "587f06a1-1f5f-42d5-bc9c-e8cf9e35c4df",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8da4e704-d43e-4988-b913-c572b2399c1d"
        },
        "item": {
          "id": "5a567477-7e2c-4a65-bed4-46a8c67a4a8a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "76d59e15-4cea-4165-a241-2fa3b4f676ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f99a39da-c242-4e52-9c7f-ab498c168fb1",
        "cursor": {
          "ref": "1f2b8150-5d5c-4fac-83a2-113655e98fd9",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6b8233c0-58c4-41a5-8c16-fd90dfe23923"
        },
        "item": {
          "id": "f99a39da-c242-4e52-9c7f-ab498c168fb1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8e9529d8-f386-4710-bdea-30c2e0c7cead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5d958095-b18a-422c-8a02-33474d708bfc",
        "cursor": {
          "ref": "b1494dd9-41a8-4645-aae0-32198a0a0678",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "41ad5449-3931-447b-ba9a-a21a71df03b2"
        },
        "item": {
          "id": "5d958095-b18a-422c-8a02-33474d708bfc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0f070553-7644-4df6-90b6-1ecf5318505d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "2d8258ee-9606-4237-aa20-042022f09a93",
        "cursor": {
          "ref": "4723aa51-24f1-494b-bf84-54c5622b57f9",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5ba83842-bf7d-423a-9682-4a9fbf2b5dd4"
        },
        "item": {
          "id": "2d8258ee-9606-4237-aa20-042022f09a93",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "82b6b90b-7cc6-43c6-bae5-5b5d4cf81639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "740daf29-3e5e-4b71-a85c-68c43a492b0f",
        "cursor": {
          "ref": "e58ecc03-8add-41f7-aa39-abe987adbeb2",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7507d46b-13a7-4d45-b108-2b97727d3d71"
        },
        "item": {
          "id": "740daf29-3e5e-4b71-a85c-68c43a492b0f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "195f17d2-f799-410e-b735-574d1af57d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0a32a4ca-18b9-4206-b3a3-44caa1b28ddf",
        "cursor": {
          "ref": "f6ed9ef0-1c74-4e95-a345-61d3a86f7425",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d414b9a8-ca3b-4fdc-bf1a-504a1eaac1c9"
        },
        "item": {
          "id": "0a32a4ca-18b9-4206-b3a3-44caa1b28ddf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f659b76a-388a-435a-9ee5-a3f67ac0645a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "09dee2ff-3323-4b75-9c23-aa0538396cb0",
        "cursor": {
          "ref": "5cb992b7-4f9a-44c8-8a75-faca6b1cd72f",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9368b765-0c09-4d1e-a724-cb6c266504d8"
        },
        "item": {
          "id": "09dee2ff-3323-4b75-9c23-aa0538396cb0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b9ccde28-bcc8-43f0-b3b4-af2f816a590f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "30ea003b-ba51-4446-bcce-2efb689f8328",
        "cursor": {
          "ref": "5eebf6dc-3147-48fc-bcb3-579eed30a1b3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3c07dd21-ca58-46df-bb29-184b70fbb2a5"
        },
        "item": {
          "id": "30ea003b-ba51-4446-bcce-2efb689f8328",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d1b04b79-eb8f-48b2-ba99-b2a52245d792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "906f6eee-cdb4-47a1-8e90-9b91a1a6d71f",
        "cursor": {
          "ref": "d87a6e97-ce6f-4d5a-bea4-5d28980a9b52",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2d9cc560-5bd7-451f-853b-889648ae8d0b"
        },
        "item": {
          "id": "906f6eee-cdb4-47a1-8e90-9b91a1a6d71f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2dcbc41d-78ad-428a-8381-91cf810006dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a60b17d5-8021-4add-87ed-9e0500a0aac8",
        "cursor": {
          "ref": "ce5d43cf-c504-4bce-a7f5-b6dbf722b3d1",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d9d095c9-be9e-4256-84a0-9e7e5a7a7ffd"
        },
        "item": {
          "id": "a60b17d5-8021-4add-87ed-9e0500a0aac8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4d7fef40-b624-4efd-9015-8e7f2cd5da7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "e41928d2-ea14-463f-9fda-31c163d47a76",
        "cursor": {
          "ref": "c82a0402-18a6-4609-89f1-c250e37957b5",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8cf51ab5-4321-415d-ad72-f4083bca0e71"
        },
        "item": {
          "id": "e41928d2-ea14-463f-9fda-31c163d47a76",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9da00de4-92b5-4367-a75b-45a1de00e473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6e29057c-63fe-47ee-8143-5bdf7f69a711",
        "cursor": {
          "ref": "cf169aa5-d41b-44b1-b218-57ca5bba032b",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "59da9aa3-7195-4ce3-8b00-e27d8c31159e"
        },
        "item": {
          "id": "6e29057c-63fe-47ee-8143-5bdf7f69a711",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e21dc8f7-da77-4102-958b-bf1a3ab4bcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "331b7456-cc32-47d1-8439-7c30c0585a95",
        "cursor": {
          "ref": "4c73b356-4fb6-4ec7-bd96-0dbbdd9869ee",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b3e6a9a7-a0cd-43c1-8175-1f44fb21993b"
        },
        "item": {
          "id": "331b7456-cc32-47d1-8439-7c30c0585a95",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9c0f3c79-3e0d-4d38-be52-228e40d99bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1c578979-2511-4cd8-a088-28d9dfb15fbd",
        "cursor": {
          "ref": "aea3d006-60be-4990-bbab-3a8d051059ba",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1dd3e8c6-68f7-4943-99b6-44129a8e8b1a"
        },
        "item": {
          "id": "1c578979-2511-4cd8-a088-28d9dfb15fbd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7ef53215-e4f3-433e-997f-58f82ae13fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "38ace9c7-da90-456c-9acd-301fc960b35e",
        "cursor": {
          "ref": "1770662c-3b19-4a9f-8792-70738d1d6c39",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e229d9b4-c96e-4482-beba-d22da4a36f37"
        },
        "item": {
          "id": "38ace9c7-da90-456c-9acd-301fc960b35e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d2d70015-7665-4ef0-aff7-8ecc92e2f43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1c685be0-d276-4ff8-8571-c96d08da37c8",
        "cursor": {
          "ref": "a47188dd-2ba8-4623-ad6a-43736bc2bc2e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8b9e86c8-a0dc-47a9-b5d4-dbf5b53335b2"
        },
        "item": {
          "id": "1c685be0-d276-4ff8-8571-c96d08da37c8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e6b03967-a5eb-460c-a10a-576fee1f9b21",
          "status": "Created",
          "code": 201,
          "responseTime": 636,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b2c8b127-86d1-49cd-a322-d3b7d26ef0fc",
        "cursor": {
          "ref": "4c607714-7cfb-49ca-9901-564d8526c7ea",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "16acb00d-e548-488f-98a9-52de7e2c1860"
        },
        "item": {
          "id": "b2c8b127-86d1-49cd-a322-d3b7d26ef0fc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e3cf6926-3eb0-401f-ad1d-c6849cedcc05",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ea542df6-8733-4c6a-9488-22748cbe3f46",
        "cursor": {
          "ref": "250590e3-7d72-4220-819c-c982f997bb6d",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2f96a7f3-b318-40eb-a7ba-baf8eb60b82c"
        },
        "item": {
          "id": "ea542df6-8733-4c6a-9488-22748cbe3f46",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6e57af0a-84bd-400d-b5d7-563a8bdf450f",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8dc01512-7074-42a6-9c74-e224b944e782",
        "cursor": {
          "ref": "08acf91c-71c7-4b74-8722-a4a119051a05",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "731210bc-eafe-4896-85de-18fb9f776fc4"
        },
        "item": {
          "id": "8dc01512-7074-42a6-9c74-e224b944e782",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "aaabb45e-7b08-44c0-8da7-8d664a53a846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "90424eb1-6d16-428a-9fb0-bd2d2a6e3976",
        "cursor": {
          "ref": "23c7bb3a-bdcb-43da-bb4f-1c71fa71e111",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5173e11e-6008-4c0a-b696-d2fe6cc3fd6c"
        },
        "item": {
          "id": "90424eb1-6d16-428a-9fb0-bd2d2a6e3976",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2e6e34b4-a77a-47ff-8310-0a943338db8f",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e62fae6c-97fd-427b-974c-8ac888a5a494",
        "cursor": {
          "ref": "eb4571ba-1d81-4403-9e1e-e12309be2e62",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "24913391-dfa1-4b49-8da7-bad334e7450f"
        },
        "item": {
          "id": "e62fae6c-97fd-427b-974c-8ac888a5a494",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2f339ffb-b940-4140-af0a-80f1babc143b",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3a2535e9-39ad-479e-86bc-44bd3a73b757",
        "cursor": {
          "ref": "7938ea8f-32ca-4e12-bc05-b282f5a996d8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f328c777-4b75-4b81-b376-805797221735"
        },
        "item": {
          "id": "3a2535e9-39ad-479e-86bc-44bd3a73b757",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0b1d28f6-a8d2-4948-9021-7f2c7781c304",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7915d5f3-4c64-4d8f-a02f-ccbfc640414d",
        "cursor": {
          "ref": "bba12937-140f-4a3a-a393-2fe7a413d635",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a7f7be60-7a38-4a7e-92ab-6978db3d776a"
        },
        "item": {
          "id": "7915d5f3-4c64-4d8f-a02f-ccbfc640414d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cac4ef8b-298c-4621-a044-1162079970e2",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "31ecc6c0-5f9c-45e0-b54f-84fa30a35047",
        "cursor": {
          "ref": "1ca2fb26-dfce-4cf2-9431-925104a7ca2a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a622362c-b98e-4c10-b91a-d177b541d2bd"
        },
        "item": {
          "id": "31ecc6c0-5f9c-45e0-b54f-84fa30a35047",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "da910688-ae66-4a9d-8bd3-c3ad3883afe9",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8d4fa8e1-5dd0-4bb0-bf88-22c0b219ffd0",
        "cursor": {
          "ref": "fb57e757-9d3d-4e20-8a9e-eb09fd45022d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5bbd6c84-b3b3-4413-ae1a-de7746ffb715"
        },
        "item": {
          "id": "8d4fa8e1-5dd0-4bb0-bf88-22c0b219ffd0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ad0f0602-0e41-44a0-a036-d32488be0aca",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6ffc3626-d8f7-4c5f-bc54-2abe211b6d2c",
        "cursor": {
          "ref": "88835d40-4253-408d-890f-ad5c8d2fe1f4",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "585b4645-bced-49a8-a461-1363d2588459"
        },
        "item": {
          "id": "6ffc3626-d8f7-4c5f-bc54-2abe211b6d2c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "71ad0a34-4ee2-463c-89c1-a924f113ef1c",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0c56ef7d-d01b-4c94-9fec-30b2c9f3ee92",
        "cursor": {
          "ref": "83e72a29-d8e3-4c49-98f7-a73b84980914",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c227e3d2-c576-4de9-ae05-ec111b6a8ac0"
        },
        "item": {
          "id": "0c56ef7d-d01b-4c94-9fec-30b2c9f3ee92",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f00ef3e0-0902-4de9-93be-170cf79b6908",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "31b932bb-c821-4410-9d0c-9bf8d79853e3",
        "cursor": {
          "ref": "c1f7c92e-9e27-471b-bad1-c27989343dde",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "962840f4-4825-4d28-a0d7-ce51a1c1bfd4"
        },
        "item": {
          "id": "31b932bb-c821-4410-9d0c-9bf8d79853e3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c3de2668-7d54-4356-b3a5-bf2356258aef",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e60cca80-5648-4d8d-afd1-eb3f07172a09",
        "cursor": {
          "ref": "3c113249-611c-42df-b2d8-f3735c1a5615",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "424520ba-b38a-4237-abf7-4e44e82e9911"
        },
        "item": {
          "id": "e60cca80-5648-4d8d-afd1-eb3f07172a09",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "73b7f431-bcdf-402a-a731-7e3ba9d81d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "38f813a4-2c63-4eca-8bbe-a803b3b98e24",
        "cursor": {
          "ref": "ddd43151-adec-4bcc-8a00-0e19de4436ff",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "31e1faed-9ec1-4d3e-8f5b-9c9e8acc68ad"
        },
        "item": {
          "id": "38f813a4-2c63-4eca-8bbe-a803b3b98e24",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "78220f0f-70ae-4cae-9f13-ee844bf825a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a69e01d7-1a47-4a9b-8b21-38e02fe51c08",
        "cursor": {
          "ref": "dca5644a-038d-498b-9989-ff39934dd353",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "204a8d40-b266-4a34-a7e2-0f86cc5be258"
        },
        "item": {
          "id": "a69e01d7-1a47-4a9b-8b21-38e02fe51c08",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "53fd67f7-c4ba-4aba-95de-024f0bcbf70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "47b9f470-b90a-4f85-bce9-edb31015697b",
        "cursor": {
          "ref": "9c8e3669-28e4-4d02-b4f9-211a79b3406e",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "684acad2-7729-431e-be63-7231d193875f"
        },
        "item": {
          "id": "47b9f470-b90a-4f85-bce9-edb31015697b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6a8e8168-d75f-4172-af48-e343e0a426f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b1ab90a0-61f3-4dc6-a842-5b09dcc21bf9",
        "cursor": {
          "ref": "10d5f373-b525-4ba0-bec2-b93144e69f67",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a2f69b35-5a9f-4a78-a957-f2c9cf390344"
        },
        "item": {
          "id": "b1ab90a0-61f3-4dc6-a842-5b09dcc21bf9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2ba09b8c-2ec2-42c9-9fa0-9a2e1be7877d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "445245ad-e138-44f3-9c5b-e354c99dcf5a",
        "cursor": {
          "ref": "af209aab-a2f3-4cce-99d9-8bf7388e5bff",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b106c6b6-d9cf-4b6d-a058-8ddedafc8928"
        },
        "item": {
          "id": "445245ad-e138-44f3-9c5b-e354c99dcf5a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ce9477d7-119d-4c66-a56d-d1125008e6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2f497b52-2073-4ea7-9205-153f05ee4c01",
        "cursor": {
          "ref": "e90ba9f0-b2e1-41d4-9c63-74b73e0f49ea",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8cc536a1-0ea4-44fb-9232-cce5c8f8470e"
        },
        "item": {
          "id": "2f497b52-2073-4ea7-9205-153f05ee4c01",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e4adf62f-a09c-46c6-927c-c36ba1771782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "17313a5f-869f-4db7-9fc1-54628519061c",
        "cursor": {
          "ref": "a85e36da-6e09-4503-a6d2-0c95518658d3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "09e71cbe-17d2-40e1-84cb-4bac4fc0f9a1"
        },
        "item": {
          "id": "17313a5f-869f-4db7-9fc1-54628519061c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bbd5e057-b8b7-4ce0-9f64-4dc6af7ea905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "334b7bed-4b86-460f-b5f6-b6fcf9c04b59",
        "cursor": {
          "ref": "cd9480ee-bbed-42da-b3ce-889e427213f4",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6b9662ee-08f4-45de-88d9-46a29f114eb6"
        },
        "item": {
          "id": "334b7bed-4b86-460f-b5f6-b6fcf9c04b59",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e7f459ec-f274-4ae5-baea-fe32803667ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "083d990e-b915-4302-ab02-2ff166c14c2a",
        "cursor": {
          "ref": "ae014640-6220-4eba-8688-b119b7991399",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1de1f368-ef16-4125-a7d3-d1875db6cfcc"
        },
        "item": {
          "id": "083d990e-b915-4302-ab02-2ff166c14c2a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e5606f05-b61c-477b-bbeb-828e80ee79d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "bbb7ab09-f05f-4320-9c73-7fe409bd2af6",
        "cursor": {
          "ref": "7b688aca-7de6-4f38-92b5-59ea3aab019b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9cdc6415-aae8-466f-a0d5-9cfff220eecc"
        },
        "item": {
          "id": "bbb7ab09-f05f-4320-9c73-7fe409bd2af6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bf3c041b-b852-4352-a36a-51e4cc3f0b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "48a7484e-e3cc-4689-9c87-7d69ee7d8fa5",
        "cursor": {
          "ref": "608f2e3a-8f4b-4278-8b75-424dea2234fa",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0e9876b0-0079-41cf-b2ba-aed3a6abe454"
        },
        "item": {
          "id": "48a7484e-e3cc-4689-9c87-7d69ee7d8fa5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5e00f3f7-54cf-4c6f-95a5-678d9c5ba8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "ee8f3dd6-5e32-4745-9742-17e216d19d60",
        "cursor": {
          "ref": "aa67dd42-6a7c-4c14-9004-65f7af4f5c62",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e854c238-14bc-41eb-b21e-6c74ea70aee3"
        },
        "item": {
          "id": "ee8f3dd6-5e32-4745-9742-17e216d19d60",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4515ac9d-6f9b-4be3-8865-620f2ea565ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "25b9f381-740a-463f-881d-0be49819ae9a",
        "cursor": {
          "ref": "14626e6b-ea01-4432-87d8-b239fe13273d",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "087eea24-89a6-45ab-b2be-a903b8c2d292"
        },
        "item": {
          "id": "25b9f381-740a-463f-881d-0be49819ae9a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f085bb40-9729-4bcc-8af0-906ae408c6f9",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d767c0a8-7699-4551-918b-70f16430c473",
        "cursor": {
          "ref": "2a3afbb2-5eae-4b1b-b27f-350cf9c25442",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9eccb0a4-b79e-49ca-8cc7-092e5b0b54df"
        },
        "item": {
          "id": "d767c0a8-7699-4551-918b-70f16430c473",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e06a74d3-1a4d-4ae8-94f4-7b819585311d",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5e738321-13f7-443c-b17a-4d29d99b2766",
        "cursor": {
          "ref": "7f6eb454-48ae-4c48-bbe3-b84d2f4bd158",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "89a1ce59-468c-4129-a3ad-cf3244805234"
        },
        "item": {
          "id": "5e738321-13f7-443c-b17a-4d29d99b2766",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "17e1e5dd-4853-4b24-9b6a-c3c1d3187eb8",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "bfffe65b-3bc2-4d8e-899b-af79cf4a1bde",
        "cursor": {
          "ref": "71cd9fdd-f1cf-4466-a932-2a91b377bbd8",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a74ec4ac-5265-4ed2-8122-3b4015e24930"
        },
        "item": {
          "id": "bfffe65b-3bc2-4d8e-899b-af79cf4a1bde",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6cc7dc70-879a-4b87-8e8f-2b575541d317",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "97e0f98f-b038-464c-b945-ab0a6fdb10e1",
        "cursor": {
          "ref": "1e638af4-3bf0-4c92-9cd0-94fd28bf7015",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1373848d-73ae-4f93-a0c7-591c7823a7c9"
        },
        "item": {
          "id": "97e0f98f-b038-464c-b945-ab0a6fdb10e1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f5d42552-0ce2-4680-bcd8-221a4d959239",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e48f5848-0d53-4f23-83e8-63f04c6de687",
        "cursor": {
          "ref": "87b3bda5-92a3-496a-b60b-0a337fb979df",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b4818eb8-e7f7-4c21-9ca4-46ad4371db31"
        },
        "item": {
          "id": "e48f5848-0d53-4f23-83e8-63f04c6de687",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cc741ab6-8b18-4377-9566-8f4e58c5dbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "40384cb5-c12d-44a3-bd95-1575fcd198fd",
        "cursor": {
          "ref": "e4b2973c-86df-4426-a877-798f27fd2ad6",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0fda6ce1-e50a-4c18-88b8-fae53bb2ca66"
        },
        "item": {
          "id": "40384cb5-c12d-44a3-bd95-1575fcd198fd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6a80276f-6c71-46df-a502-2e372f0bc686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "37c8d144-67e3-4685-8d58-cf873d0677c9",
        "cursor": {
          "ref": "cc41f106-7fa4-4723-a3c9-548dd0d2bf8a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d16bedcb-a0c0-429b-a589-2b733974b362"
        },
        "item": {
          "id": "37c8d144-67e3-4685-8d58-cf873d0677c9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "eff1530b-ce74-464e-8b08-ac269dfe2cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "dc2a5843-4393-4d58-99df-755531da439e",
        "cursor": {
          "ref": "594ea6ee-795e-4e34-84d2-0a96cdc446dc",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e6af7e37-40a9-4b4d-8761-3ebeb0961857"
        },
        "item": {
          "id": "dc2a5843-4393-4d58-99df-755531da439e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d4a973fc-fec4-44e6-b040-249ed09a1d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "630b3131-fbe2-4b38-bc7f-ef50f26007e5",
        "cursor": {
          "ref": "c7960884-fbae-41ed-9675-c8496bb2026f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "360fe35f-0df9-4bd1-8942-76db950899c9"
        },
        "item": {
          "id": "630b3131-fbe2-4b38-bc7f-ef50f26007e5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f93583b1-47bd-49f4-8f3e-5b12ad70403f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "299894ab-bfb5-4d14-abc8-19bc1da72b5a",
        "cursor": {
          "ref": "4e38dbb7-7f27-4c39-b429-cba9f2202d83",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f09b0601-fb20-4030-9940-6a0c2cad1b6d"
        },
        "item": {
          "id": "299894ab-bfb5-4d14-abc8-19bc1da72b5a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "28689a31-72dd-4cfe-a210-ae88d1847aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1670c102-b4d0-463c-a6af-687c296bbafb",
        "cursor": {
          "ref": "b81d7e37-fd35-4e3a-a8e8-710629dd1b45",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bea2d101-f084-4bfc-b8a5-cf2ce13d19c3"
        },
        "item": {
          "id": "1670c102-b4d0-463c-a6af-687c296bbafb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3e131b28-6955-4432-8adf-d989d1a03bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "131acd61-bf5d-4ac7-8a2e-85d7d616c83d",
        "cursor": {
          "ref": "e501e229-40ed-4fcf-892d-db262c139178",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "969bcba8-8559-4148-a8af-2ae8578a3c5d"
        },
        "item": {
          "id": "131acd61-bf5d-4ac7-8a2e-85d7d616c83d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "72ac0511-e472-4288-81db-47af83ed14a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "f3de75c1-8d97-4507-9b28-aba28dcc1a0e",
        "cursor": {
          "ref": "ee816391-68ff-4dc7-a9d8-0fd4644708cf",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ff93e8f9-a071-4988-a67d-b283b47822ad"
        },
        "item": {
          "id": "f3de75c1-8d97-4507-9b28-aba28dcc1a0e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9c0ebcf2-d2ca-4421-9d36-82b35dbdce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "4aa07007-87ce-485f-9bb5-c633cf656011",
        "cursor": {
          "ref": "13bcc819-43c7-46d0-8faa-5efc912acb75",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "84a7e479-bac4-4aa1-ae42-8f4615fa87a7"
        },
        "item": {
          "id": "4aa07007-87ce-485f-9bb5-c633cf656011",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7ba93cf5-51fd-4cfc-8640-63861fcc4c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "2ac3fdc6-9475-44a7-9ae3-e1c8c61e3df5",
        "cursor": {
          "ref": "5df3dfce-3791-4187-9c46-79519e68596b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fae48579-c8e4-4c63-a15a-3e26e0729829"
        },
        "item": {
          "id": "2ac3fdc6-9475-44a7-9ae3-e1c8c61e3df5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dd45a08f-19d5-49de-bfce-27ceae348daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "6c9cebe3-af57-4eb0-be39-5979bed31f22",
        "cursor": {
          "ref": "69bef51e-50cd-4a93-af7e-c6a1b56113b0",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0c4af446-68c3-4987-a04f-2f25e6e63487"
        },
        "item": {
          "id": "6c9cebe3-af57-4eb0-be39-5979bed31f22",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5c6c6b93-06db-46d3-8d9a-d72df280a60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e7ba220d-a608-4bfa-bebd-d96993a9d277",
        "cursor": {
          "ref": "b6144c98-b43b-404b-a117-1589530ec101",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4aee4cf9-7af8-4885-b03c-8e7397d3d94c"
        },
        "item": {
          "id": "e7ba220d-a608-4bfa-bebd-d96993a9d277",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cc106249-a5b5-41d1-b195-45b8fbbce115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "9ae5a1e3-8ac4-4def-9853-5f65a6633ec8",
        "cursor": {
          "ref": "6e9a4534-b62f-49e7-a251-472c1ab996d9",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e483b725-57fa-4949-9f52-4c075b1420f6"
        },
        "item": {
          "id": "9ae5a1e3-8ac4-4def-9853-5f65a6633ec8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f0895937-39c4-4901-8bf6-b5a616fb861e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "1895c93e-ddb9-4265-be1f-acbdfb0ad8f7",
        "cursor": {
          "ref": "322de28a-177b-40a9-8650-e2d7891ffd74",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0a2813e5-6946-45c6-a7ef-2be06b477bff"
        },
        "item": {
          "id": "1895c93e-ddb9-4265-be1f-acbdfb0ad8f7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "84c94d63-fd5d-40ef-839d-240bb888ead4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "da319095-269d-44ec-aa7a-f91af152c573",
        "cursor": {
          "ref": "aad4e25e-77ec-4390-9221-88e997c274fa",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "423dbc17-337e-4301-bf61-8711955f0e84"
        },
        "item": {
          "id": "da319095-269d-44ec-aa7a-f91af152c573",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bd887c7a-1045-4ae1-ae33-29f56323c0d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "bd9213c9-0b19-42f2-9c7d-67266fb47cb3",
        "cursor": {
          "ref": "e0672fdd-986e-4bef-813a-2a2de850a40b",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ddc6dde3-4f0e-4017-86bf-1d4048cffa56"
        },
        "item": {
          "id": "bd9213c9-0b19-42f2-9c7d-67266fb47cb3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "af322f62-a928-4da1-b91e-645e03291664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "64cf01c8-4dd6-45ca-bb3b-7b61445c43eb",
        "cursor": {
          "ref": "f7b056f1-eee9-43c7-8ddf-138032e0eabd",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b8d58fd9-fc34-4363-9a3f-b0882f5623c9"
        },
        "item": {
          "id": "64cf01c8-4dd6-45ca-bb3b-7b61445c43eb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "41854ed4-6494-4f4a-bd62-482c50d8186c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a0fa864d-2cbf-442f-a923-2b31aabba9c0",
        "cursor": {
          "ref": "4879e248-f312-40cc-91f8-b44b179465dd",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "93220b3a-c825-4cfd-be4b-659b1b966d57"
        },
        "item": {
          "id": "a0fa864d-2cbf-442f-a923-2b31aabba9c0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1d2f397c-2f5e-4c99-8320-242afb7f66a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "b425a348-1f71-4e09-8faf-e5fb76277cab",
        "cursor": {
          "ref": "3fc69fc1-6c6b-482b-8a28-e30649b738f2",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b6b7ec88-e585-484c-899c-6ad68778fbdf"
        },
        "item": {
          "id": "b425a348-1f71-4e09-8faf-e5fb76277cab",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "84fc84c9-8707-49c3-8d17-d4e4c9b2c7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "4accdc2d-bed6-4c5d-b8e4-bfb22c9f9210",
        "cursor": {
          "ref": "770290fa-1e41-4dda-b766-76263b5843a9",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a7285fe5-5314-4caf-b520-272215b6cf64"
        },
        "item": {
          "id": "4accdc2d-bed6-4c5d-b8e4-bfb22c9f9210",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "200c49be-aa28-400c-843b-0c289d1b57b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "8befd504-f86e-4152-9bf3-cad49b2a060d",
        "cursor": {
          "ref": "ddc49001-b099-4347-a4cc-bf044f71314a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "239727ea-f838-42c1-9520-6b04c2810d1e"
        },
        "item": {
          "id": "8befd504-f86e-4152-9bf3-cad49b2a060d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b23bd318-4770-4775-b9e9-20f2a6134554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "7199cb8f-ae69-46be-b30f-7bf0d9731a62",
        "cursor": {
          "ref": "8a6a8cdd-ef23-42f2-84b5-a982f0fb2779",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "61a9195d-3f63-4c5f-9435-f35be31fef41"
        },
        "item": {
          "id": "7199cb8f-ae69-46be-b30f-7bf0d9731a62",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "684ca453-6912-4894-8fcb-f77430fb067f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "0835503a-fa27-479d-a5a9-e1717b69215e",
        "cursor": {
          "ref": "c25c2823-3701-46af-b1d2-cacdd8498f0e",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a645c424-d1bd-4b15-b79a-c77967ff4eca"
        },
        "item": {
          "id": "0835503a-fa27-479d-a5a9-e1717b69215e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cd4fa01a-a89d-45f5-886b-4486430ff478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "896fce4c-bbad-41c9-84fe-8b70a5fb3cca",
        "cursor": {
          "ref": "f9450da3-eecb-49b6-94a2-9a5836aa1163",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a1eff5d9-da24-432e-a940-9568d131aef3"
        },
        "item": {
          "id": "896fce4c-bbad-41c9-84fe-8b70a5fb3cca",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "df4973ad-213c-4d6b-a14d-e3678695e635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "0e91d200-7169-4712-826c-5aaaf4179cb6",
        "cursor": {
          "ref": "2e05d6bc-916c-42e0-894f-dc936cc9eb9e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b5ac43b6-b831-413d-a985-64fd6430877f"
        },
        "item": {
          "id": "0e91d200-7169-4712-826c-5aaaf4179cb6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0af3bad0-39f0-4136-ad01-59d81d084866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "037ac30b-7931-4016-a661-93bd5c879f74",
        "cursor": {
          "ref": "2b57434e-4f6f-4a4f-b436-df79c428aba3",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3c9afa01-aaa3-4a70-8980-83f174d97969"
        },
        "item": {
          "id": "037ac30b-7931-4016-a661-93bd5c879f74",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f98af684-a5c8-4847-8ea7-ed2dd55e8e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "af49e84e-edfa-435e-8a70-a3e51a997437",
        "cursor": {
          "ref": "dfc7e5cf-16fe-4091-9af8-78bce97a1433",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "79c86aaa-a356-4364-8eea-6348bbed317d"
        },
        "item": {
          "id": "af49e84e-edfa-435e-8a70-a3e51a997437",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "56cf247b-fe6d-4750-b6af-9df23f5231b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "201cdd02-6c26-4451-b076-d0c329d2c375",
        "cursor": {
          "ref": "d04588fd-7bdf-45e3-b505-5b96c8543382",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "253a5658-b503-4065-8011-46af4e9eb96f"
        },
        "item": {
          "id": "201cdd02-6c26-4451-b076-d0c329d2c375",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b44aeef0-8fa8-4bad-a971-914205ae11f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "a1551090-2bf0-4f80-bca2-ecae1d2a4ada",
        "cursor": {
          "ref": "0950016e-965a-420b-818f-47f64c180c78",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c4fd97ec-ee63-49d7-b704-5f67a72fb020"
        },
        "item": {
          "id": "a1551090-2bf0-4f80-bca2-ecae1d2a4ada",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "175f4732-a207-4fe2-9a36-8a001299728b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "76200240-ae9b-45f9-81e5-a19a28f65e27",
        "cursor": {
          "ref": "06070741-e84d-41c2-9fdf-f254a16550a8",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f1207854-5441-4899-af66-45748d59ac65"
        },
        "item": {
          "id": "76200240-ae9b-45f9-81e5-a19a28f65e27",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2e8a4d34-3c44-43e7-a074-05f2b21bc795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "38ca1caa-5ff9-4f95-9bc6-d371f666a0e6",
        "cursor": {
          "ref": "01bbeb39-3ba6-4a5f-b3eb-668bfef82e1c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bc71b075-79aa-4474-a87c-270f8ea1379d"
        },
        "item": {
          "id": "38ca1caa-5ff9-4f95-9bc6-d371f666a0e6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4d01a5c2-00d3-4ab3-af43-795c71cabd01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60158a0-b2ba-44d0-8e0f-eff1b83cb5c3",
        "cursor": {
          "ref": "ef478e0d-a78b-4dbd-82fd-defa7b5f1216",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1abc12a2-5a3c-4f85-af26-6ab827e19148"
        },
        "item": {
          "id": "d60158a0-b2ba-44d0-8e0f-eff1b83cb5c3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "957704bf-1cf3-4312-b761-5dcf5f99f798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "397153c2-1564-4650-8593-e1c77d2191d8",
        "cursor": {
          "ref": "5af7551e-6148-4f13-81bc-9ecf67fe4144",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dbf8f47b-0122-4547-b9f5-8eaf0bdc4bb9"
        },
        "item": {
          "id": "397153c2-1564-4650-8593-e1c77d2191d8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e5c76d95-d952-44ac-ad0c-893d7ebeef52",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d59f42d-2600-4827-bdf4-35e841100dff",
        "cursor": {
          "ref": "65063324-f9fd-4b7c-9daf-8ff933c3c018",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1266a1f9-03aa-4ef1-a671-1907febfc7d1"
        },
        "item": {
          "id": "0d59f42d-2600-4827-bdf4-35e841100dff",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8e64bb16-ece2-472d-96b1-f93ef844b3e4",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0896ffb7-f9c4-47ca-911e-4bc5e2ec20cd",
        "cursor": {
          "ref": "bef08164-1d7e-4209-a1bd-15cb6d32dc33",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "46e0346e-6a63-4c28-b60c-73a05ccb2999"
        },
        "item": {
          "id": "0896ffb7-f9c4-47ca-911e-4bc5e2ec20cd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7f83982c-c6ad-46e3-930f-0cb8b6983e40",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f71bf02-5067-447a-a8cf-2ab08e6ca4ce",
        "cursor": {
          "ref": "f9343d72-0446-42a3-b27b-5f7b20d83b5d",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "655e6a6d-a2b6-4286-a1f6-b07e4b56e659"
        },
        "item": {
          "id": "9f71bf02-5067-447a-a8cf-2ab08e6ca4ce",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2c6d36b2-aeb0-4391-9390-399a4c67b539",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5bb20c-a548-4cfe-9ce7-a3fe2d491a87",
        "cursor": {
          "ref": "bcbeea20-4986-49b9-b285-5cdfb10c7102",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "02934b6f-394e-4c7e-b2b6-0fcd8a912e01"
        },
        "item": {
          "id": "ac5bb20c-a548-4cfe-9ce7-a3fe2d491a87",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6ec94b45-34b9-4f6c-8e1e-ffcb8019884b",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-05T00:38:37.795Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-05T00:38:37.795Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "505726ed-6c63-42f4-89fa-d031e7e4f326",
        "cursor": {
          "ref": "9aca08da-1861-4394-9962-037d5e9be103",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7ed92e4a-183c-4fd2-8479-2e5eebb8ee47"
        },
        "item": {
          "id": "505726ed-6c63-42f4-89fa-d031e7e4f326",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3a859404-d5e8-42bf-bba5-8e284926ce9f",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ecb4a8-d2ed-461d-aa68-cb2071073ab5",
        "cursor": {
          "ref": "16a5fae8-759b-40d3-a722-88b9b4b88087",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c89865c1-39fd-4330-9bd5-d79bbb282804"
        },
        "item": {
          "id": "d0ecb4a8-d2ed-461d-aa68-cb2071073ab5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "038b333b-c830-4936-baba-19768765a4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "ceea8eed-987b-4411-aa31-11d3da35c0f6",
        "cursor": {
          "ref": "cb5bea03-b3ae-48d5-91c1-d901c150a3c9",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e494a245-8da6-45b1-9984-0edcf4dee24d"
        },
        "item": {
          "id": "ceea8eed-987b-4411-aa31-11d3da35c0f6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0cb99c75-a3e3-498f-a394-a06554fb4d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5228cda9-ba0c-4cc7-8a5b-71cb018a0608",
        "cursor": {
          "ref": "2717967b-54e3-4134-9d36-98332f774a8e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ad66f698-4f3b-49de-8a22-d3a09e41647d"
        },
        "item": {
          "id": "5228cda9-ba0c-4cc7-8a5b-71cb018a0608",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "adaad32a-c310-4fbb-8013-ff7cae6d9fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "91706466-23cc-4c3c-9512-4e3ffe93b730",
        "cursor": {
          "ref": "1a4f5921-1b90-4e09-b931-295ee1959fef",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d675beac-ac0b-44cf-929c-847be9af52e1"
        },
        "item": {
          "id": "91706466-23cc-4c3c-9512-4e3ffe93b730",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "96718098-7737-4372-afe2-97683042d96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "174513d7-4b0c-49d9-9267-6ff83d9b9b7f",
        "cursor": {
          "ref": "6c8333f8-3f55-485b-8213-041d616011b7",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0210198c-f1b3-4354-8ea4-6ae55362e334"
        },
        "item": {
          "id": "174513d7-4b0c-49d9-9267-6ff83d9b9b7f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df507825-6f3a-4d8f-b65c-9c30e3521254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "603e147a-43b6-463a-83ed-ad73cbb7dd09",
        "cursor": {
          "ref": "27b5055c-c7dd-43ff-8f05-a07400597996",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cf12f497-8c6c-4e5c-ac90-1481f6b25dee"
        },
        "item": {
          "id": "603e147a-43b6-463a-83ed-ad73cbb7dd09",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e8f84642-0e30-460f-a54d-ec131f329ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "32f3158b-9462-48ef-b9ec-b7e9bdfb567b",
        "cursor": {
          "ref": "4ed9fdf4-ce78-41c8-a1b5-7efd8ed26629",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "de23721a-61e9-4b0c-afd0-b8232459b59d"
        },
        "item": {
          "id": "32f3158b-9462-48ef-b9ec-b7e9bdfb567b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "06bbd8a6-e6e3-412b-984b-618bb046503a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "89d2d1ae-ef8f-49f9-afee-64e43afe7bfd",
        "cursor": {
          "ref": "c1bb2100-9190-4bca-9988-1f07c9d940bf",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ddc8a1e2-4bbd-45d1-9e6d-7652c90dde44"
        },
        "item": {
          "id": "89d2d1ae-ef8f-49f9-afee-64e43afe7bfd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0db0d1ce-93bb-45ba-8f7d-f4f4dbb9c059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2adc1cd4-6000-43aa-b052-ed07363b3cca",
        "cursor": {
          "ref": "ef99f01f-29eb-4334-845c-503a9ee71846",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fc6769d4-9c49-43ca-aaa6-76b1f0da7d68"
        },
        "item": {
          "id": "2adc1cd4-6000-43aa-b052-ed07363b3cca",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "80969fe7-3b9f-4903-a1cf-b986950f183a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5d160707-6273-49a6-8d88-21573970b0ae",
        "cursor": {
          "ref": "f9a08384-1d5d-480b-975e-75ccfb4e1ec0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "929d1afb-b8e3-4334-ab28-542677412225"
        },
        "item": {
          "id": "5d160707-6273-49a6-8d88-21573970b0ae",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "25fc6556-0675-44d0-8299-e4a0e9454f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f32ce519-c426-4859-aba7-3369767c7abe",
        "cursor": {
          "ref": "16bba76f-a916-43b1-8640-f03b1b9ce8e7",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2aee9908-d6ea-4de3-ba68-27acab0063a1"
        },
        "item": {
          "id": "f32ce519-c426-4859-aba7-3369767c7abe",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b45ad7ad-0c12-4f29-8e2f-45120004af5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "51e18225-ccf0-44eb-926c-7dbec242806a",
        "cursor": {
          "ref": "0da828df-a39d-487c-a0d2-8d93c44bbb10",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a01cd513-ef20-44b7-9f73-42e5421054ff"
        },
        "item": {
          "id": "51e18225-ccf0-44eb-926c-7dbec242806a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a484a518-9f89-42f4-9ebf-9ac38cfd9e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "9ada6e04-f394-412e-839b-23e66bf54c47",
        "cursor": {
          "ref": "45848127-d508-44c0-b309-1361c9b30d76",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a3b1ebd0-a935-4b78-86a3-bd7aa24e0a29"
        },
        "item": {
          "id": "9ada6e04-f394-412e-839b-23e66bf54c47",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f38efc0d-24c9-4c55-bd0f-e34cdb206ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "b80be9c6-6459-4502-8f8e-6adce7fe4dff",
        "cursor": {
          "ref": "4921d2e7-fa14-4574-b25c-016af14ab0dd",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d248b4dc-d657-447a-ae45-8bdf7fa8bc72"
        },
        "item": {
          "id": "b80be9c6-6459-4502-8f8e-6adce7fe4dff",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "eb16636e-902a-4ee9-aa27-b0811056c532",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9240dfee-ca27-4288-b9aa-124eede14fc7",
        "cursor": {
          "ref": "0260e5b3-90a9-479f-9f0c-ad459b2f9412",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7dd24868-1a25-44cb-a36b-962325867843"
        },
        "item": {
          "id": "9240dfee-ca27-4288-b9aa-124eede14fc7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "45036c84-458c-403e-b478-e118689404f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a3c11c3d-4a48-4a4f-8878-1eba9fb5fa9a",
        "cursor": {
          "ref": "b9272b3a-b6dd-433a-848b-4bfb05ee121d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "807a9ab4-6cf1-4bd3-ba65-9f45e2d3177d"
        },
        "item": {
          "id": "a3c11c3d-4a48-4a4f-8878-1eba9fb5fa9a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a91010d7-734f-441b-995c-86e2f7c45776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a4e8534a-97ae-4a76-94cf-a5b7323ec13a",
        "cursor": {
          "ref": "2388087b-2625-434c-a51e-6489670c0233",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8c8cfeb8-73f3-41ed-a10e-195c3b213af3"
        },
        "item": {
          "id": "a4e8534a-97ae-4a76-94cf-a5b7323ec13a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "66e99d80-5a8a-422c-9916-8d4fb9e45bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "28575f58-face-48da-8d0c-9790dbed0bfd",
        "cursor": {
          "ref": "b6419b2a-71b2-4151-a4c8-d4e78e88f1ba",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9ad89648-ddca-40da-bad2-4fcb3b635616"
        },
        "item": {
          "id": "28575f58-face-48da-8d0c-9790dbed0bfd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ff029673-2b36-4868-ade5-cd64b97891a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "8a25c868-4733-4cd6-b9e5-ba7bbb0b2b37",
        "cursor": {
          "ref": "27c5f3c6-bdfb-42fe-b280-22a891bff96c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "98479d17-33a1-4a72-8cfb-009a4047e576"
        },
        "item": {
          "id": "8a25c868-4733-4cd6-b9e5-ba7bbb0b2b37",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7eadd521-ceef-4532-afda-29fad736f917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "82719b12-6f42-4663-a6f1-b67399bf6453",
        "cursor": {
          "ref": "dc899c21-baf7-4cfa-a4f2-f9f2b592d836",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3565bea3-8e2d-4986-95a9-c8b49cd23e96"
        },
        "item": {
          "id": "82719b12-6f42-4663-a6f1-b67399bf6453",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3a9ce81c-3ffb-40d0-b225-34cb25e59f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "cacf06d1-8eba-462c-8f5f-871d026819fc",
        "cursor": {
          "ref": "b8469c40-3c02-41e6-a4e2-7c7fa9ec4d44",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a8e3f1a1-7d6d-47f0-ad5d-69061db9a25f"
        },
        "item": {
          "id": "cacf06d1-8eba-462c-8f5f-871d026819fc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "961eced2-b214-4d00-848d-1abbec548ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c1463f0b-a2df-4456-a3c0-fb8bf95b0866",
        "cursor": {
          "ref": "27ed5f23-8a12-47be-8e15-1af9af19d5f8",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bc0b273b-8e3d-4216-bc23-62521409d19a"
        },
        "item": {
          "id": "c1463f0b-a2df-4456-a3c0-fb8bf95b0866",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "85e2608e-a147-4c37-9c5c-95d81c89273b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "673674a5-5f34-4d78-8b5b-78ab8ba2aac4",
        "cursor": {
          "ref": "855acc7b-c6ea-46ae-82c9-84e87bab1deb",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "001645f0-6f62-49be-a55e-1f89033ebb7c"
        },
        "item": {
          "id": "673674a5-5f34-4d78-8b5b-78ab8ba2aac4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a8053489-5a5a-4073-af7e-b595d0fb655f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0c34c176-6065-4014-a32a-f7b68ac17bce",
        "cursor": {
          "ref": "1549e61f-1f03-4207-9dae-eec777795180",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "dd853aef-11e7-412f-8212-fe2666b2126f"
        },
        "item": {
          "id": "0c34c176-6065-4014-a32a-f7b68ac17bce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5ee1036e-b842-47ff-8da1-e1a34c18f39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6bb54522-8697-4e3c-8fe3-b460324e4632",
        "cursor": {
          "ref": "5179e112-0059-4ee6-a1fa-3a1b29d9550a",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "aadbb37e-398e-48de-a818-5ef01986bf44"
        },
        "item": {
          "id": "6bb54522-8697-4e3c-8fe3-b460324e4632",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f081f154-cd07-43f2-a086-05ac9c0da951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "6b6ed1ce-88d1-4ff3-a905-fa59a5b6de5f",
        "cursor": {
          "ref": "b261a28c-78b0-4597-aa4d-5ef29ebcb74d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0a1dfba3-37ec-45e6-9b6e-91c0b1162cb1"
        },
        "item": {
          "id": "6b6ed1ce-88d1-4ff3-a905-fa59a5b6de5f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b6b7c2fc-ad97-47f6-bc15-791d1f0f4bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "96171ad3-2cee-4bff-9f1e-f62f4a312463",
        "cursor": {
          "ref": "59eeae30-1eab-44fa-ba55-961d67a8b183",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5c459e7f-a90c-435b-aaad-2cbcc23e48ab"
        },
        "item": {
          "id": "96171ad3-2cee-4bff-9f1e-f62f4a312463",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c6618bd0-89b7-4ef7-ad9c-3e8add890768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "c171fb15-4fdf-43bb-aacd-a1b987adee1d",
        "cursor": {
          "ref": "67b7886d-7eab-4740-b50a-5cfdad2b72d2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f4c4c061-1621-4d1e-9b9a-a2eefbaa0b29"
        },
        "item": {
          "id": "c171fb15-4fdf-43bb-aacd-a1b987adee1d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01605156-3775-4b58-a12d-97440fa8cb71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "14309fe7-dd1b-485c-a42e-6ee9a4f86730",
        "cursor": {
          "ref": "62a72157-7b79-4a5f-85db-29696701a644",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7a7ff9b8-ca83-4899-b147-f726945a90b8"
        },
        "item": {
          "id": "14309fe7-dd1b-485c-a42e-6ee9a4f86730",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "739fab08-0586-4169-97b7-30505420c6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2b47d40c-48ed-4f9c-9b21-8677b10c6963",
        "cursor": {
          "ref": "a204be69-6e4f-4539-8148-ed0fcc4b9421",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4dd5045e-c029-4e38-9518-045e421e1f8e"
        },
        "item": {
          "id": "2b47d40c-48ed-4f9c-9b21-8677b10c6963",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6d7c94b2-f456-4799-bada-061797cbf083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3d964e4a-31a9-4b57-bb5f-89127c4c04eb",
        "cursor": {
          "ref": "d9c34622-f105-46fc-9a70-408a4dc399c8",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "02f67024-99e5-4d3e-928b-5adc1e246e69"
        },
        "item": {
          "id": "3d964e4a-31a9-4b57-bb5f-89127c4c04eb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1d97cd5a-1180-4ed6-bc3f-1223652fde87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "97ced969-47fa-4722-86ae-d74a040e0f55",
        "cursor": {
          "ref": "a1eb9ad7-28aa-47d0-8b16-6a7484b69b75",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e12c8179-7579-49d7-87ee-366daad27e4c"
        },
        "item": {
          "id": "97ced969-47fa-4722-86ae-d74a040e0f55",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "dd061d95-aa56-4b46-9a8b-c90e4c2ac45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "fdb0294d-96d8-4a71-8121-9342a303f4a7",
        "cursor": {
          "ref": "d605d8d6-2775-4898-b1e6-6294a8627ee6",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "94ac2dba-79ff-46ca-88fc-4bc34c26708d"
        },
        "item": {
          "id": "fdb0294d-96d8-4a71-8121-9342a303f4a7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d08d55b2-083e-49b9-8463-97e98535bc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e60c8dad-a43a-42c0-803e-4b7796c602ea",
        "cursor": {
          "ref": "6ef9f074-777b-4522-b223-60c4588cc7cb",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3105b3bd-155f-4840-b6d9-8165b583f3b2"
        },
        "item": {
          "id": "e60c8dad-a43a-42c0-803e-4b7796c602ea",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c9c11aab-9e14-4ca3-a598-53ef27ef148f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ccd5b04d-1e54-4da1-8bfe-c2fce04553b9",
        "cursor": {
          "ref": "1dfb6ea6-eb88-41ab-9ea8-c400bf0d7274",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "462e4aba-fc97-4dcc-a2d9-99a7f78f51e1"
        },
        "item": {
          "id": "ccd5b04d-1e54-4da1-8bfe-c2fce04553b9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "efcb9c5c-2a0f-46dc-8d0e-4051d78fa1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "67667a98-2eba-4022-a4dd-6e536b3a9def",
        "cursor": {
          "ref": "78aacd01-6c77-4b81-98ab-8fd20f18a225",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7158c740-ed21-49ae-a0e4-8866a2d2336d"
        },
        "item": {
          "id": "67667a98-2eba-4022-a4dd-6e536b3a9def",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "263231f1-5b68-4487-ac32-0194e6cc9ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "ceaf8a06-948e-4f30-97f9-1e690bd7eb64",
        "cursor": {
          "ref": "b092a1d6-2087-45af-ad84-7ebd35f9ecac",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f3340379-c2ac-452e-8bef-a4832fa05fc0"
        },
        "item": {
          "id": "ceaf8a06-948e-4f30-97f9-1e690bd7eb64",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ae2e9e88-c255-428a-90a1-5515150ea034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "57c8128f-00c3-4eee-b02a-22460eedf719",
        "cursor": {
          "ref": "b3d54b2d-9bc8-4ae6-87f3-5a1bb064e591",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "44b04832-f387-44d9-aab4-4afa04900f57"
        },
        "item": {
          "id": "57c8128f-00c3-4eee-b02a-22460eedf719",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f8b6218b-dd28-4b6c-a798-6e889ab73cef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9666bc95-1566-43d9-9ef6-b9baa11e1217",
        "cursor": {
          "ref": "94d16398-8e54-4b33-8229-8fbd1935333a",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "28ab3301-0b7d-4e13-b475-a24296ec2409"
        },
        "item": {
          "id": "9666bc95-1566-43d9-9ef6-b9baa11e1217",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fb9d9966-76c6-44e0-bfe2-0bd1ef4d213e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "6f34db4f-d099-48f0-91c3-541e15a18c88",
        "cursor": {
          "ref": "3c927916-767f-4888-8e0b-928e562134b8",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "65ae4fd5-9935-4757-961b-e2e8deead42b"
        },
        "item": {
          "id": "6f34db4f-d099-48f0-91c3-541e15a18c88",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fba755e3-3397-41f3-8332-9caf60ef02b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "8589a084-3af6-4ab6-9138-ca0fb008eb53",
        "cursor": {
          "ref": "f3f15b1c-8c3b-4ddb-bfb6-8cd69c2a6bca",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5a5c6dd1-df26-4849-bfeb-dc93d084a2e1"
        },
        "item": {
          "id": "8589a084-3af6-4ab6-9138-ca0fb008eb53",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "84f90a61-637c-4309-95e6-1b69d4fc6b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "658509c5-3036-4ed6-b058-f744f70775a0",
        "cursor": {
          "ref": "81fc8b15-5a26-4a38-a333-1774d5fee954",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "afb5ec4f-e087-4b39-9e6d-3a38949dd2d6"
        },
        "item": {
          "id": "658509c5-3036-4ed6-b058-f744f70775a0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "14715355-f933-49e3-b9e1-c53fd1e62103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "96534adb-ef1b-452a-baa1-0a658f13fb62",
        "cursor": {
          "ref": "f510c599-093a-4b42-a90a-29fcd29bd4a7",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fe98a2e8-df21-4b2c-8925-1c3337d61512"
        },
        "item": {
          "id": "96534adb-ef1b-452a-baa1-0a658f13fb62",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "43dbd101-5ba2-462a-8d2b-a8c6c724b783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a1234ea0-7df7-4c8c-accd-9eaf1906c402",
        "cursor": {
          "ref": "a885195c-93f8-469a-b6f7-65ca57c688ed",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1498f6ae-2ff3-4227-a631-77c0f003bf4b"
        },
        "item": {
          "id": "a1234ea0-7df7-4c8c-accd-9eaf1906c402",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1783d1b3-ecbc-4f4d-9b72-708f0967437a",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d8a0ad29-9cfa-4472-a314-3929c7aeb5f5",
        "cursor": {
          "ref": "76a20b2d-3b91-4d2c-83e5-a39df0973b9e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cbd2eec5-205b-403a-813c-3ef620d1faed"
        },
        "item": {
          "id": "d8a0ad29-9cfa-4472-a314-3929c7aeb5f5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "00dc12e2-7251-4c3d-b895-ce6bd3287cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "90fe54ec-661f-4020-9a51-6a3144fecb70",
        "cursor": {
          "ref": "5ac1e3b6-c43e-4b73-af2e-5fdf2995bc02",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fe164e78-ae1e-4f6e-b28c-850177b4a433"
        },
        "item": {
          "id": "90fe54ec-661f-4020-9a51-6a3144fecb70",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "74329d34-060c-4d74-9b14-e9185f35ec58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e9b173aa-ad40-4dab-8f64-fed7ab999192",
        "cursor": {
          "ref": "00c59a60-f9fa-4654-a782-be8ac1b6150d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "387822cc-4f45-4a9d-b231-9bd0bbe22cfb"
        },
        "item": {
          "id": "e9b173aa-ad40-4dab-8f64-fed7ab999192",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "67b9cfc2-83fd-4475-90bb-7760c21fce00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "0caef224-c8f0-4836-a04e-510289f43fc2",
        "cursor": {
          "ref": "a2351090-32f3-4ea7-8e69-b8a5eea457ef",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a02ff904-86f8-4956-abbd-ee0373a60b3d"
        },
        "item": {
          "id": "0caef224-c8f0-4836-a04e-510289f43fc2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9759b078-6b5e-4487-b10d-f5c1f9a3e85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a710f8f7-baf2-4b4c-81bb-a81ec7f837c2",
        "cursor": {
          "ref": "46edf46f-2fc0-4678-97b1-3f21a2bc1dec",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1204cfad-1410-4e6f-b805-b6ef1c11e524"
        },
        "item": {
          "id": "a710f8f7-baf2-4b4c-81bb-a81ec7f837c2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "eb5cdbc2-1b33-4d2a-b69c-3aadb2c3106a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "f890e6e5-621d-49dc-ab69-076cd43008cd",
        "cursor": {
          "ref": "d4dba0ed-bd3a-493a-b475-04ab8412f689",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0fe354c7-0e2a-4fb3-a0da-4de9d4ecf4f7"
        },
        "item": {
          "id": "f890e6e5-621d-49dc-ab69-076cd43008cd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "abc59045-7fd3-4e60-8004-e56ec4b097e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d2f88d6c-8f4d-458e-98b4-225aa3bc825f",
        "cursor": {
          "ref": "8836af87-1e01-4814-b79d-a825f276a09f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bb1e06da-e34a-45c2-88c8-25dda1b28b27"
        },
        "item": {
          "id": "d2f88d6c-8f4d-458e-98b4-225aa3bc825f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eddddc7b-ce47-4d7b-9bc3-c781279fa555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "75656fb6-d100-41a6-a395-057e99fc5b0d",
        "cursor": {
          "ref": "e5d59849-ac56-4477-b0ee-f69da4cde5c2",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "240a26a4-d6a2-4daa-96c6-177b394fd511"
        },
        "item": {
          "id": "75656fb6-d100-41a6-a395-057e99fc5b0d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6d2020d9-2a83-49b8-8e06-3c90d5c8388d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "fe536ecd-9d1e-430e-9868-4d7d9698934e",
        "cursor": {
          "ref": "b85f57a2-0b34-4d83-9cbb-c2e373b2bb47",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fce6b990-456c-40ef-ace7-d60269f19d54"
        },
        "item": {
          "id": "fe536ecd-9d1e-430e-9868-4d7d9698934e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "92bd0fc6-ac4c-4a0e-aa57-19e9c4228a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "da987213-f881-4e0d-af8b-d9d33ab117d9",
        "cursor": {
          "ref": "cc11e89f-dc76-4885-91d9-4f73a9a15d55",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "315fe512-dc0b-450d-b184-5e6dc4019852"
        },
        "item": {
          "id": "da987213-f881-4e0d-af8b-d9d33ab117d9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7d69037e-ef54-4b9a-a12d-e897157b8892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "598cde8e-3f8a-4ff4-957d-c8075481ef4f",
        "cursor": {
          "ref": "b1edfdfa-def7-4ea7-9d9b-e0dfa25f1da1",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5520c338-5794-42eb-8db9-80eae4fb44d2"
        },
        "item": {
          "id": "598cde8e-3f8a-4ff4-957d-c8075481ef4f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "49a3f4c1-8486-4f91-952e-274a9c27ad33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "90d12ae9-9141-4f70-b2b3-80abdda7bc96",
        "cursor": {
          "ref": "39d8786c-0a3c-42a7-a41f-e0661d453371",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0332dc97-b91a-4c7c-a605-a17223803894"
        },
        "item": {
          "id": "90d12ae9-9141-4f70-b2b3-80abdda7bc96",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "284ba263-0ca6-4bc8-b0f9-5675f0900bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "cd737f29-a24b-416e-a099-f6444bde018b",
        "cursor": {
          "ref": "088e921f-7b23-4cd4-9d6b-98a48b9e7171",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "277a3564-19c5-4ea0-a07b-a9dbf747ca39"
        },
        "item": {
          "id": "cd737f29-a24b-416e-a099-f6444bde018b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "048e4709-633a-4318-b4b4-c90f9d3b9930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "862c821f-60e0-4ccd-a633-cd3ef18f9c76",
        "cursor": {
          "ref": "9f40f2bf-fdf9-4dae-ad5d-dff2ffddc551",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "989f6bed-f86c-461b-95ce-965306be9793"
        },
        "item": {
          "id": "862c821f-60e0-4ccd-a633-cd3ef18f9c76",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3adfd5c3-befb-461e-afaf-a1388884e408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "2cfea5e5-e4f4-48e4-91fc-ac6085742ca8",
        "cursor": {
          "ref": "ff7b4abb-2c33-4434-8581-16ef7911634e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1b738a15-b15e-42ce-a5fa-37ce50e8eb9b"
        },
        "item": {
          "id": "2cfea5e5-e4f4-48e4-91fc-ac6085742ca8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7ab8a113-9601-45cc-8fe0-0d21f40c0a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "311911de-92af-4be1-b119-b44b15ec488e",
        "cursor": {
          "ref": "f76133e6-17f3-47b9-97ab-d3206d1bf0c8",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "11ac807b-1e5b-4a1d-b26e-7c6b563bbf7c"
        },
        "item": {
          "id": "311911de-92af-4be1-b119-b44b15ec488e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2714c321-191a-4795-b106-0f75a9e23640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "7f5c0a59-afd1-4995-a2c3-01427f91ce1a",
        "cursor": {
          "ref": "d6275946-cdd4-4e66-8054-900b9bde0780",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2e28cecc-828e-4160-8064-d58b18faed4a"
        },
        "item": {
          "id": "7f5c0a59-afd1-4995-a2c3-01427f91ce1a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5ec47013-a2fb-4ff8-96cc-2978815be623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "359810ca-435e-4da1-9f90-95f306cb7897",
        "cursor": {
          "ref": "75993aeb-549c-49c3-bcf5-7ec7c34ce48c",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5f8f8475-dd39-427b-a66d-5db5ad80f9be"
        },
        "item": {
          "id": "359810ca-435e-4da1-9f90-95f306cb7897",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c88509b3-7ca2-478f-a035-d5cbbbbf9ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "3ecd992f-9ea9-4825-a18d-f86403b9648e",
        "cursor": {
          "ref": "a4afd04f-18ea-43e3-a30c-3e9002b9e084",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3c636e4a-7430-4404-b5b9-8eac87952d0a"
        },
        "item": {
          "id": "3ecd992f-9ea9-4825-a18d-f86403b9648e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e9e754c8-a278-4b38-ab37-b2658c5b38ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "86bd0087-d106-4da0-a63a-d2f96fdd4762",
        "cursor": {
          "ref": "ab6f4989-f1ed-4647-8f4c-e33da7385043",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5df9ab8c-9290-4f38-8f0a-38262aaa1906"
        },
        "item": {
          "id": "86bd0087-d106-4da0-a63a-d2f96fdd4762",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1d3a2e5c-4a4c-4a12-b263-9d420cbc59ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "3005346f-4d12-4c20-84e9-d479e39ab83a",
        "cursor": {
          "ref": "b6e9bc4c-f15f-4501-b833-27149a9e85bf",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "04076263-019a-4d6f-bcc9-0dc67da3e7ec"
        },
        "item": {
          "id": "3005346f-4d12-4c20-84e9-d479e39ab83a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "405e1714-7081-475e-8590-5f0349027411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d425706c-aa9f-4862-ab4c-2194922a59d1",
        "cursor": {
          "ref": "330a0a25-e819-40ac-a454-b0cc5a3f4df6",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ab8847b7-d9b3-4acb-9e2d-5803e556f486"
        },
        "item": {
          "id": "d425706c-aa9f-4862-ab4c-2194922a59d1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "804e9db1-7e75-47f8-8e85-4cb531c215c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "0e5c9c69-0f02-4cd0-af8e-410e48d25cbf",
        "cursor": {
          "ref": "9215fdd6-7105-42cb-8086-d034212ffc24",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "440f42ed-bf0f-404b-8521-45e441665aa2"
        },
        "item": {
          "id": "0e5c9c69-0f02-4cd0-af8e-410e48d25cbf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "67ddb012-e3be-432b-ae08-9440e98fdc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "78e82db6-d9c7-4951-8512-ac215b30f7ec",
        "cursor": {
          "ref": "315ddb16-0aeb-40a4-97eb-4ddae0f95587",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "529f86b2-eeb3-4e15-9e97-3a55cd5086af"
        },
        "item": {
          "id": "78e82db6-d9c7-4951-8512-ac215b30f7ec",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fdfd1617-30de-482a-98f8-a43d0d4d33c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "4c91d395-caeb-450d-bd9e-9dc16f36f604",
        "cursor": {
          "ref": "dfd33cf2-6f1f-46ab-9d85-52489b5d1a14",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "79391e2f-9b57-44f9-8294-d5d4137394cb"
        },
        "item": {
          "id": "4c91d395-caeb-450d-bd9e-9dc16f36f604",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8aab5219-f652-4cc8-b62b-b2216079e4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "0c074591-6afe-4687-926a-891c2c82c6d3",
        "cursor": {
          "ref": "c57ce4a0-d5cd-414f-b609-52b809175f97",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c2cc57a4-b675-4015-b781-d0fdbb4eb3d2"
        },
        "item": {
          "id": "0c074591-6afe-4687-926a-891c2c82c6d3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "704e4ee1-5459-4cd8-931b-0b480d5fee50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "fe94d982-81c2-4bf4-b225-c9c61931971a",
        "cursor": {
          "ref": "645e5830-f11f-4550-80e4-a0bf4251a6ad",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c0d7edd8-32c0-40ea-a9c7-c6bb38ac79d0"
        },
        "item": {
          "id": "fe94d982-81c2-4bf4-b225-c9c61931971a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b58d8744-ede8-41e5-adf1-59a59b9af02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "63b4dc98-4b6b-4c4e-b99e-995496299a60",
        "cursor": {
          "ref": "e463f1a2-ee2d-4632-9c04-029f095057be",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "efd3ec27-f922-4f86-a311-b9478168239d"
        },
        "item": {
          "id": "63b4dc98-4b6b-4c4e-b99e-995496299a60",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "87cd7eea-9ef4-4057-b77c-afbac86ed8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "36ad4d66-3899-406c-bab0-797b5f573231",
        "cursor": {
          "ref": "7c78d194-4948-4dd4-9897-48d42cf4bc06",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ac047fcd-42b0-4b95-bf13-c40258c7c0db"
        },
        "item": {
          "id": "36ad4d66-3899-406c-bab0-797b5f573231",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9cf15c87-cd7a-4ae7-a65c-1bfd80a079f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "ebbd53dd-b1ac-443b-a40d-335389be0cba",
        "cursor": {
          "ref": "6370dd90-6728-4b7c-97f7-89eaf168a4c6",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4c31f5d1-a393-491a-aa31-8b0c9f5dc153"
        },
        "item": {
          "id": "ebbd53dd-b1ac-443b-a40d-335389be0cba",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "33c0fc88-a5f0-43bd-a7d1-d783104f9412",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f154eba3-ac51-4f5b-80b6-a9652776dcfa",
        "cursor": {
          "ref": "4dd3dc1b-d10c-4cc0-ac33-7a9abbcf3d30",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "268318e0-ffd5-4a39-9256-67868499ff4c"
        },
        "item": {
          "id": "f154eba3-ac51-4f5b-80b6-a9652776dcfa",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e04a8312-0905-4e1e-8b6a-e49f17ea83f8",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "1f1e532e-e30e-4bfb-b7fd-8e0dfbcbb5e7",
        "cursor": {
          "ref": "9d43b705-35fb-4226-99f0-fc6045a86dd2",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8680217f-352e-4aa8-80f9-6fbf421d9f3a"
        },
        "item": {
          "id": "1f1e532e-e30e-4bfb-b7fd-8e0dfbcbb5e7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d60f420f-95f8-426f-bf93-8762b9eba593",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "eeb0eabe-f085-4b35-9af8-1b139ccf5b6d",
        "cursor": {
          "ref": "24032dba-3251-411e-8b50-deac3a5e1996",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "82e5dd5e-8d76-486e-a0bb-985a085b6560"
        },
        "item": {
          "id": "eeb0eabe-f085-4b35-9af8-1b139ccf5b6d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0fdf88c9-9a29-496e-abf1-f10c4c9c6abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9dc70643-1aaa-4cae-afcc-3f706378ec71",
        "cursor": {
          "ref": "a4cc7d95-05f1-4b51-a0d5-4ba05a0c655d",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ffbca8d7-ce04-48bb-b745-17e039891a50"
        },
        "item": {
          "id": "9dc70643-1aaa-4cae-afcc-3f706378ec71",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "932f5b46-1a50-4a1a-a7cc-233550773b94",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "bcc2d8ca-8e0d-40eb-b9ea-92b8593f3770",
        "cursor": {
          "ref": "2e1fa6e3-a5e8-46b1-a6c5-60964f1dfe04",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b082d81e-7f14-43df-9284-debcc88166c2"
        },
        "item": {
          "id": "bcc2d8ca-8e0d-40eb-b9ea-92b8593f3770",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0b420e1c-04c5-44c8-a597-444d6782c4dc",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "0f6221b8-4be0-4caf-b608-0bbe5008b49c",
        "cursor": {
          "ref": "814c2df5-84b4-4bfb-a8b9-d29d0c58a2b9",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "726551dd-d0d0-4179-8eeb-a199f4371c2f"
        },
        "item": {
          "id": "0f6221b8-4be0-4caf-b608-0bbe5008b49c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2adb858e-675a-4fc6-9ac1-b6d9bc1a21d1",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "e1f775c9-9407-4179-bc8c-2ab4b48ccf73",
        "cursor": {
          "ref": "16d9819f-068d-4899-934e-985a9615b0d7",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "146581a5-294f-44f3-8e89-2adbac4f1967"
        },
        "item": {
          "id": "e1f775c9-9407-4179-bc8c-2ab4b48ccf73",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d135a6d5-3f5d-4fcb-8175-9ff45d4fd0eb",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "3e577795-6d9d-49b7-b384-dc45c5735171",
        "cursor": {
          "ref": "7f166308-904c-4a2b-91ac-e7342c73c76e",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "486a787c-1e56-473c-99d5-1d0e3796e964"
        },
        "item": {
          "id": "3e577795-6d9d-49b7-b384-dc45c5735171",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f41ec99d-935c-49ca-9c97-e9ff86aa9c51",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ace0e183-1428-46a9-b0da-89c6a7ea3389",
        "cursor": {
          "ref": "3b950397-6f95-43f6-ba72-2b4cdcd7fc50",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7476363a-47c8-4455-906e-05e42e3a81c8"
        },
        "item": {
          "id": "ace0e183-1428-46a9-b0da-89c6a7ea3389",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f71d341b-ba12-41a4-8fe5-42088c3103b6",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1291be40-bdc8-4d82-8dc0-b2465f576a96",
        "cursor": {
          "ref": "3a58812b-9ee9-4a29-8acd-da3acfdeb348",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "afb9bcf4-10c0-4b6c-9795-80d3bc578ef3"
        },
        "item": {
          "id": "1291be40-bdc8-4d82-8dc0-b2465f576a96",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a017126d-885d-4dda-8abb-d94148133cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "222131d4-ad63-48c6-aaeb-2e2d0bb39da1",
        "cursor": {
          "ref": "a75056cf-1ad6-48b9-9b09-1159f06aad69",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b10fe882-5522-4cda-9a25-392ec2c0d908"
        },
        "item": {
          "id": "222131d4-ad63-48c6-aaeb-2e2d0bb39da1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "61915e50-e0b0-4096-aa16-bb46a091e9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "f61eb1ea-2723-4bb9-bbbe-35daefe29cc9",
        "cursor": {
          "ref": "ad055c7f-dfe0-4918-92d9-178148e73960",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ae413320-d3af-434d-9ff2-c7fce0e3c6ac"
        },
        "item": {
          "id": "f61eb1ea-2723-4bb9-bbbe-35daefe29cc9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3bf101c5-4349-4f49-9abf-163ef748c35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "f089ed89-b0b0-4c69-8269-d255c4367716",
        "cursor": {
          "ref": "39cb6f7e-95ee-47b8-9bcb-ad5b9c30568a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ad272c28-b93d-4ac1-956c-982a4c719f72"
        },
        "item": {
          "id": "f089ed89-b0b0-4c69-8269-d255c4367716",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3637400a-2667-4612-be64-a2e38bb34f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "f5d12c75-5d87-4948-8f1b-23c173a42751",
        "cursor": {
          "ref": "52914c7d-280e-4ed7-9552-5ec50eac5da2",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a29a5154-8e7e-4492-8b43-b478341f2612"
        },
        "item": {
          "id": "f5d12c75-5d87-4948-8f1b-23c173a42751",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "77460ee9-7cb0-4caf-9a0b-f30ef4ef2b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "c4ada78c-f3b8-49b2-81a3-25f8d021d25d",
        "cursor": {
          "ref": "0366e620-8f79-4d48-8f76-8c069ba2ed59",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "37c92228-fd42-4db2-94d1-c9c9affd509d"
        },
        "item": {
          "id": "c4ada78c-f3b8-49b2-81a3-25f8d021d25d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ac146422-60ef-48d9-aa20-8c1f9988845a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "4701a79f-9106-4aac-8b2d-57be2c340373",
        "cursor": {
          "ref": "1968c84a-4208-4aee-bf8b-ed6c0b0981f3",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa11958e-5dad-4839-bedf-ac98bf220f9a"
        },
        "item": {
          "id": "4701a79f-9106-4aac-8b2d-57be2c340373",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cd3a9fdc-dd75-4043-9570-60289e321353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "a9b1936e-3588-4fc9-9b75-ff09d6d02ab6",
        "cursor": {
          "ref": "501d2981-e968-4810-8266-dbf1df731cf0",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "eec96085-711c-4706-a750-9f8e6966d105"
        },
        "item": {
          "id": "a9b1936e-3588-4fc9-9b75-ff09d6d02ab6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "caa16cf3-f31c-437d-911d-2fb4b5bd4fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "2834ebbf-ae70-4fc8-a58d-1e2007f12c27",
        "cursor": {
          "ref": "953e95aa-1017-423c-9201-76a587b247ef",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a6d7c3c4-2905-4070-ac87-513b58e96fb9"
        },
        "item": {
          "id": "2834ebbf-ae70-4fc8-a58d-1e2007f12c27",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5d9564fa-9e34-4ac4-aa97-66a7b2637500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "96f0aeac-98ef-4be5-a495-bf2e022a1e60",
        "cursor": {
          "ref": "25fb068c-2ced-4212-8965-ae569d29b11a",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e0707bba-8019-4e6d-9231-a212ef98aebf"
        },
        "item": {
          "id": "96f0aeac-98ef-4be5-a495-bf2e022a1e60",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "43ec99b6-0f2d-46bc-a7f1-3956003de067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "271b5983-b01e-4fde-84e6-9a3a9e038b11",
        "cursor": {
          "ref": "3dc74c97-f5f8-42ae-b5fa-c6463735f7c6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a6d2d56b-0012-4307-8062-42eae2a7b210"
        },
        "item": {
          "id": "271b5983-b01e-4fde-84e6-9a3a9e038b11",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c8e52c6a-433f-469b-9e26-a53b4f178e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "a9c58164-9a97-4599-8398-a4e0578b6299",
        "cursor": {
          "ref": "f13defce-0d67-4f43-9c63-874ff02a5f65",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "75e906e3-033a-4f4e-9edb-5ea668306fb7"
        },
        "item": {
          "id": "a9c58164-9a97-4599-8398-a4e0578b6299",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7aa92843-1bd8-47ef-8b5c-d9593adabaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "604d7b77-0383-416c-9a9b-1c0a32539cf2",
        "cursor": {
          "ref": "47515142-9329-4fd9-81b1-efab603d5801",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7ec8ab39-6ccf-4b4d-93c1-c52926d743b4"
        },
        "item": {
          "id": "604d7b77-0383-416c-9a9b-1c0a32539cf2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7f1d1e5e-3d98-49bc-b1f6-c28c1c08a597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "da72eb58-dc72-4f25-a794-fe90ae05e226",
        "cursor": {
          "ref": "8cc83bfb-d511-4850-9aab-35c15d017544",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e8acb33b-3334-4927-bbf5-6119c0fb7696"
        },
        "item": {
          "id": "da72eb58-dc72-4f25-a794-fe90ae05e226",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3fd4d74a-edc9-4511-9776-0fa67a38f207",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "87ee1031-b2e8-4c66-89fd-4160e6733771",
        "cursor": {
          "ref": "d33bd61c-52b4-401e-99df-f0c83f2cf68a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1d1d4b94-7e44-47de-9497-3051387444ec"
        },
        "item": {
          "id": "87ee1031-b2e8-4c66-89fd-4160e6733771",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8c7afddc-1247-4adc-8827-3abaadedefd3",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7636dbb4-806f-41eb-a7ab-4089c6fe6321",
        "cursor": {
          "ref": "dc0577eb-903d-4216-bafd-0140380ac542",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1f89499c-9dde-4cc1-8605-9dd0cf1cdb95"
        },
        "item": {
          "id": "7636dbb4-806f-41eb-a7ab-4089c6fe6321",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "284e2627-0118-43dc-a5e1-99d06bc0ec35",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "37ee042f-c28a-4ed1-b3b7-11aa3f91bedd",
        "cursor": {
          "ref": "2862d8ce-7a12-44c0-a45f-0233ce5527b5",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "783a5785-43e2-4694-bc12-f82db0216c04"
        },
        "item": {
          "id": "37ee042f-c28a-4ed1-b3b7-11aa3f91bedd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9cc3f8ce-b64c-42b7-8db5-47e63f6f9bd3",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "2cf388c6-b024-47b6-95ce-04fd758f2143",
        "cursor": {
          "ref": "b25f6600-2ee0-48b8-8652-364ad046d6e2",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f61eb9f0-d176-4f86-bbb3-58586ee6758c"
        },
        "item": {
          "id": "2cf388c6-b024-47b6-95ce-04fd758f2143",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fe9acd11-05d1-49a7-a67a-0f5199a94474",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9dddb17c-a4c4-4125-9b49-54f82f1b215a",
        "cursor": {
          "ref": "3fe9facb-54c1-4ba8-9546-4b4984b93aa6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5097e7a7-0a69-4dd8-9e26-de0aa6c85cd2"
        },
        "item": {
          "id": "9dddb17c-a4c4-4125-9b49-54f82f1b215a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cc52320d-2f8e-42a8-a4a1-1412a871ffb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "28ce7310-69d7-4e67-9df7-51d0e65cf923",
        "cursor": {
          "ref": "753b2e1b-815c-4cfc-bbe3-671bbeab9b8b",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ac2dffe6-336d-4081-822f-100fce4b411e"
        },
        "item": {
          "id": "28ce7310-69d7-4e67-9df7-51d0e65cf923",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cc04bcad-c7ad-4be4-980b-66044ab51405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "1cdbe004-12a1-476e-92f8-b8f812426521",
        "cursor": {
          "ref": "1596e96b-bcce-4354-bb37-5c342e1fa98b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "21951bb6-18bb-400b-ba26-e44d826519cc"
        },
        "item": {
          "id": "1cdbe004-12a1-476e-92f8-b8f812426521",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9679fa8e-3507-4daf-9fa7-e660b0e4f765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "8b58eb43-d8bf-4d04-a181-571f345fafc3",
        "cursor": {
          "ref": "26a97a37-6a17-4bd5-8490-c76304af5ef6",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d225594b-ff9a-4211-b93a-2b798d1a6a87"
        },
        "item": {
          "id": "8b58eb43-d8bf-4d04-a181-571f345fafc3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c8e1a1d1-6bdb-43f8-ae5a-e21c5b665e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "f935f317-b940-4a1d-8186-9269263ad568",
        "cursor": {
          "ref": "4e064fb1-60ac-405c-a989-7a98cf481e11",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ca4ac34b-ff17-4bd8-8e66-cf173f98b980"
        },
        "item": {
          "id": "f935f317-b940-4a1d-8186-9269263ad568",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6e2dffee-4697-4b98-b789-bbf0e3f93394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "cae78881-dd38-4a0f-b0f8-5469daf3745b",
        "cursor": {
          "ref": "5e1e4ef7-d28d-4414-b421-efdcbc8ee843",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fb008872-0b3e-42b2-9f0f-1dd2e7a5cda4"
        },
        "item": {
          "id": "cae78881-dd38-4a0f-b0f8-5469daf3745b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "70456610-0579-44ec-a05c-6ab333fbc443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a9ab9db9-a666-42e7-89f4-95a149d30759",
        "cursor": {
          "ref": "cbbbdda9-06cc-462e-ba10-fd6ddae83bb0",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "afa1b948-53ca-459c-bd71-8635a99cca9f"
        },
        "item": {
          "id": "a9ab9db9-a666-42e7-89f4-95a149d30759",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8304562e-48ce-4f62-8ced-ccbb1bfe18cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "59efa406-22ff-48f8-8a38-f57b17e08ceb",
        "cursor": {
          "ref": "b973fe65-a3d2-4e0b-824f-17fe433a7093",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f34be4ee-40f3-4dd3-b92f-e937575b67b0"
        },
        "item": {
          "id": "59efa406-22ff-48f8-8a38-f57b17e08ceb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "82bdf905-4c43-44a2-8f89-1d4b699a53be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "64c86fe3-f373-4934-b2c4-2f503287590c",
        "cursor": {
          "ref": "285605d3-423d-4bac-9399-6a7f7eb8d8d3",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6fcae4bd-fb7b-4df9-9849-561a32a82022"
        },
        "item": {
          "id": "64c86fe3-f373-4934-b2c4-2f503287590c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8969e238-5464-472f-be29-7be760c9ee3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "d6d9e1fc-eb34-4153-b928-f439c7ce52ea",
        "cursor": {
          "ref": "0802159f-760f-45b5-a306-8fa36521588f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9d71bdf3-13f0-455e-a454-0637503a0e87"
        },
        "item": {
          "id": "d6d9e1fc-eb34-4153-b928-f439c7ce52ea",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fa7aa976-9afe-40d0-a6dd-14e1d2fdfc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "acf502bb-fccf-40a5-9d9c-e01d8ac2af97",
        "cursor": {
          "ref": "bc23a62c-1c8a-475c-8469-c26561178622",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0c5c704e-fa4f-403d-913d-de3d10e2c889"
        },
        "item": {
          "id": "acf502bb-fccf-40a5-9d9c-e01d8ac2af97",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "946a013c-82fc-4f42-9efc-5e428751d042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "854dad40-52b9-4ecf-810c-9f5d1156168e",
        "cursor": {
          "ref": "148dee48-107c-4976-8aac-eef14052eade",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "aefdd173-92da-4cc4-8a97-4b3f082c903b"
        },
        "item": {
          "id": "854dad40-52b9-4ecf-810c-9f5d1156168e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c5696392-efbc-44b3-9dea-b7efbb14eec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f1d8d820-2153-4fda-a143-ca282328afba",
        "cursor": {
          "ref": "3495ad85-a593-4889-912c-da5f2aadea59",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "96a28c72-3e7b-412b-a73c-8e8cc1cb0b04"
        },
        "item": {
          "id": "f1d8d820-2153-4fda-a143-ca282328afba",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "83b6f1b1-8eec-49a7-8cef-64ccd6a4874e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0d414aa7-c22d-4a44-9b10-e865744b9b18",
        "cursor": {
          "ref": "5d49647e-0cca-4ba7-a484-70a20d96957d",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b6e9a7a6-6a51-472b-a95c-43297f44e67f"
        },
        "item": {
          "id": "0d414aa7-c22d-4a44-9b10-e865744b9b18",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "197342a0-9fb9-4a7f-9d64-d0fca45293d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6d845bde-c219-400c-982e-a0c3f008c3af",
        "cursor": {
          "ref": "a8347420-9b0d-4f99-82de-7d51957367ac",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b14a89e8-600a-485e-b084-c9c6885ecef7"
        },
        "item": {
          "id": "6d845bde-c219-400c-982e-a0c3f008c3af",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e2369718-0ace-42ba-bc18-cb94df43fd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e73fcc97-07a0-46b2-8315-78b550374a03",
        "cursor": {
          "ref": "860a13cc-181b-4264-aa93-cf511331e2ed",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9d32e19f-d5df-4205-85d0-5d91d8bc9a55"
        },
        "item": {
          "id": "e73fcc97-07a0-46b2-8315-78b550374a03",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3e90a796-5b1c-470f-b123-2aab37a334a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "f826f002-fad8-4899-9a63-c442582131c8",
        "cursor": {
          "ref": "033f81ab-22ad-4936-ac77-8149c297eb24",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1aaf000b-ada8-48cd-a5b2-27b31de77c64"
        },
        "item": {
          "id": "f826f002-fad8-4899-9a63-c442582131c8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "329e50f5-6994-44fd-ad03-1e534c3651d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "b3b409a5-e86f-4036-bd08-11e488e89651",
        "cursor": {
          "ref": "9034090d-4c8f-4f36-a3b6-fab99d6e5f8b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0ef181ce-6f55-4eb4-940f-b0d0f21513bf"
        },
        "item": {
          "id": "b3b409a5-e86f-4036-bd08-11e488e89651",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "68ad52cd-3a33-471c-a674-cadbd3483715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "7e7df202-8c24-4885-9808-486704b5272c",
        "cursor": {
          "ref": "99b01d95-f3ed-46dd-8db4-976908c58c3d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c9cbb308-eff5-45bb-bfb0-a848d248d8e5"
        },
        "item": {
          "id": "7e7df202-8c24-4885-9808-486704b5272c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4e78d203-2a4e-49ff-9707-e6e433f8705a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "491c37b7-f5a7-4ea2-ad90-7d357b5723d6",
        "cursor": {
          "ref": "e4e5e2af-70a9-44a7-826a-db3a5bbe2342",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c537bc4e-0b0d-4e03-b135-ab72f465510f"
        },
        "item": {
          "id": "491c37b7-f5a7-4ea2-ad90-7d357b5723d6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0a98280d-dd6f-480a-bef8-415c96eb218f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e0ed5cbb-5a2b-42f5-9b80-d342cd5f2d28",
        "cursor": {
          "ref": "a4f3eab5-774f-40ce-8d1c-250310162e9a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "93f2d8d2-7027-4dc9-b632-60448c00a828"
        },
        "item": {
          "id": "e0ed5cbb-5a2b-42f5-9b80-d342cd5f2d28",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b4e3d8d5-fd00-4b36-b43a-58bd0ef59814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "2bd74d29-2d82-493d-91a1-413ce28e0b08",
        "cursor": {
          "ref": "4dd4873a-2a94-40a4-b255-a92f4c1c684c",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ff5051ff-ab56-4ac4-ab97-c4ad0b7424cb"
        },
        "item": {
          "id": "2bd74d29-2d82-493d-91a1-413ce28e0b08",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "06267064-4820-4d2e-85f7-b2c08eba8d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "5d1e4e16-ecbc-47c3-977b-df7c317f61ef",
        "cursor": {
          "ref": "4eb03577-d7f4-47ee-80ee-ff2eb26027d2",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "521daaa9-c374-417d-b24a-98ed7d96d260"
        },
        "item": {
          "id": "5d1e4e16-ecbc-47c3-977b-df7c317f61ef",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "71d7a097-66ca-44e9-987d-97ddfa356d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d5535b80-bf4a-4142-9705-f09d845ee7c4",
        "cursor": {
          "ref": "0b74c0b5-2e0c-4f60-b1f7-a4cee4568133",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ba736145-9dad-48fe-a17f-d69750f10c7f"
        },
        "item": {
          "id": "d5535b80-bf4a-4142-9705-f09d845ee7c4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a2713cf4-dc37-4b91-b795-858a6a59c73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "3d8cc6d2-7479-45b3-a0fa-188b3af2d101",
        "cursor": {
          "ref": "59815c43-01e2-4583-9643-1ef4ef45eed2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "872f1a39-99dd-480c-9dc9-e3bcc6f4d2b5"
        },
        "item": {
          "id": "3d8cc6d2-7479-45b3-a0fa-188b3af2d101",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "455e2384-76bd-4bb0-b01b-924264dacdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "b6cc0161-6dc0-419b-a053-d613c5f990db",
        "cursor": {
          "ref": "c96dbfd7-7204-4c85-a1d5-fda9d570a321",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e32690d3-affc-4e4e-9ef8-f6798b9cc5a3"
        },
        "item": {
          "id": "b6cc0161-6dc0-419b-a053-d613c5f990db",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bb5fb929-a3d9-4191-a1e8-9294baae4f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "dea3f8b2-5e94-4db7-9897-19ffbe89577c",
        "cursor": {
          "ref": "ab34bb51-ca2f-456a-8482-7a244cf0cef3",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0f77a7eb-64db-40fb-86b9-93129c8c6653"
        },
        "item": {
          "id": "dea3f8b2-5e94-4db7-9897-19ffbe89577c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f0b73c93-51fd-485b-9ad8-8be19dc8999c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "09981908-b036-4ba4-8b08-53d29db092ec",
        "cursor": {
          "ref": "55cc3db9-f952-4223-972b-420ec6bdbee0",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a43a963d-034a-448c-b46e-0807d281e98f"
        },
        "item": {
          "id": "09981908-b036-4ba4-8b08-53d29db092ec",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7d1fa5ba-e2a5-4a17-b23e-8c6337ed9b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b747874f-0ba1-4b68-a3ab-3093993fcc29",
        "cursor": {
          "ref": "829f3d0d-0d98-4e36-b8e5-478bbdbc84f9",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fece5dfd-75cf-4f12-a6d1-1e4b78dbddc6"
        },
        "item": {
          "id": "b747874f-0ba1-4b68-a3ab-3093993fcc29",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "dcbbbf83-4c49-4540-b5fc-ac81afa2a61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "eb68b9e0-cae9-4272-b34f-02f72b66f4ce",
        "cursor": {
          "ref": "85474d52-e1f4-4889-874a-2b97ece57030",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1dc24626-d4f1-47e6-be8b-3de8bad2f32e"
        },
        "item": {
          "id": "eb68b9e0-cae9-4272-b34f-02f72b66f4ce",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6f81aab7-5aa7-4a70-9b08-e4edea0bda0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2a2f18d0-d6d2-4794-9be8-78c53ba23681",
        "cursor": {
          "ref": "d3039a6c-11a8-45e5-a533-98f5caf33308",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "424c0530-b50d-4fe2-9686-fd9b9340f1c1"
        },
        "item": {
          "id": "2a2f18d0-d6d2-4794-9be8-78c53ba23681",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ae14268e-867a-438b-9da9-d29231478424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8c8e4b43-86f4-4226-9fcf-001982bd111d",
        "cursor": {
          "ref": "8b242344-3057-4cb7-8403-eba250ae1bf3",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "aabe1126-c38c-49ce-ba85-adfbf0390ebd"
        },
        "item": {
          "id": "8c8e4b43-86f4-4226-9fcf-001982bd111d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "453af2a8-e31d-4194-b196-c6c0e6b570c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5978433e-c8f2-442b-9885-b8173f22258d",
        "cursor": {
          "ref": "969ea6fa-dd39-487f-b647-241908bd210a",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7108fc4a-1637-4486-a7dc-e83b76f3fcf8"
        },
        "item": {
          "id": "5978433e-c8f2-442b-9885-b8173f22258d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e6310926-62e8-4a79-8aac-6352c8674988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ae55bdeb-ab26-49ec-a359-d935659d01f1",
        "cursor": {
          "ref": "b2482cb8-9634-40f8-90f9-d66e6e8257e9",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8b68c414-fbc8-40b2-aa41-25108b37fbee"
        },
        "item": {
          "id": "ae55bdeb-ab26-49ec-a359-d935659d01f1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5f97cecc-bfc1-4080-9206-41eba6b35f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "3c4f50df-de19-4ab8-b6be-76d07b7c48f6",
        "cursor": {
          "ref": "852c7d8e-9055-4795-adc0-bd1a5e88c8d8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f3d96d59-add2-4d01-9b02-b4f346c78b41"
        },
        "item": {
          "id": "3c4f50df-de19-4ab8-b6be-76d07b7c48f6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "89b1b3aa-8798-458d-9b42-6a7267a87056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822341a3-38da-4df3-8ca5-1ac3fff7d917",
        "cursor": {
          "ref": "b14874ff-10f6-4ae5-811c-e08fe61d4b12",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6d24c5de-4759-4d6e-b80d-0f97bdea8428"
        },
        "item": {
          "id": "822341a3-38da-4df3-8ca5-1ac3fff7d917",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f986fefc-2c9c-483a-b5fc-ad18e2e01499",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c72a0c6d-2b71-46e3-a070-b88f7f29ed1b",
        "cursor": {
          "ref": "3a0c61d8-46fe-4e70-a8b7-f9efe36619bd",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "24be3c97-76f7-412e-9840-1273b6db0ca0"
        },
        "item": {
          "id": "c72a0c6d-2b71-46e3-a070-b88f7f29ed1b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ccbb3fc1-4c65-4483-92dc-3db7284bf1a7",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7d9756-3795-4c54-9aae-f2c027f12344",
        "cursor": {
          "ref": "e0549704-b922-4680-a6d9-289765cfe2a0",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "942ccf77-cf0d-4ea2-8ff3-317789d0076f"
        },
        "item": {
          "id": "2f7d9756-3795-4c54-9aae-f2c027f12344",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8ee7613a-2fb5-4c7d-bd1b-c9bc4a183a39",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3798b662-5e02-4173-a5ea-e348ad3d1fb6",
        "cursor": {
          "ref": "61825277-9ced-4822-9202-6e5204d37e9f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "886b023b-33de-4ef8-bda6-eef10f08d75b"
        },
        "item": {
          "id": "3798b662-5e02-4173-a5ea-e348ad3d1fb6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6f69ec85-6766-4cb1-9c27-73b223005b08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3798b662-5e02-4173-a5ea-e348ad3d1fb6",
        "cursor": {
          "ref": "61825277-9ced-4822-9202-6e5204d37e9f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "886b023b-33de-4ef8-bda6-eef10f08d75b"
        },
        "item": {
          "id": "3798b662-5e02-4173-a5ea-e348ad3d1fb6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6f69ec85-6766-4cb1-9c27-73b223005b08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba3e088-42a5-45ef-a94d-c4a5a03f2142",
        "cursor": {
          "ref": "c57292cd-3ae0-4352-a0d5-fbbc263db684",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cdcd5e7b-8478-4edc-abe2-b952b5469b7f"
        },
        "item": {
          "id": "eba3e088-42a5-45ef-a94d-c4a5a03f2142",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0dc8a91a-8df6-4760-9f37-d3bdfb6be43c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c08519d-84c5-4b93-bc0c-8a53fb9e4a9d",
        "cursor": {
          "ref": "fc9560da-b6fd-44aa-a0a3-7ab1847093c6",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "44c0f6e4-1e0c-46af-9f20-8c835087a761"
        },
        "item": {
          "id": "0c08519d-84c5-4b93-bc0c-8a53fb9e4a9d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c548fef9-bdb1-4f21-b55d-3a9cfefd1c2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}