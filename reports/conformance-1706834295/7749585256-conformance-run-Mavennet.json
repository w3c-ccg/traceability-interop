{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "13e00e1a-e34e-4644-ad9d-35256696683d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dc2564c1-be9d-4ebc-b450-80837de11e6d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "025c53c6-d8f0-4291-b626-543252c976c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "70ab5e38-b833-4e1d-8d57-458d842d2b9d"
                }
              }
            ]
          },
          {
            "id": "58eae298-d8e6-446b-a9de-bdb407df7752",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13ac8c06-3833-41f8-af44-0b44c3aece2e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c23b4b5d-f1ce-46d7-a286-14a53895cabf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9e063a43-5d6b-49dc-8134-54ba23165ad9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "94716af9-fad6-42a4-bfd0-a9d40f236456",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fce09415-4883-412a-a755-318eb4814f5e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1453d4e0-ab10-471d-946a-ad862d710d77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47d74765-d0d3-4da8-a277-cc7b243660e2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e984ae3e-a4e4-4c5f-bfd6-a7950b5cd1bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae6debda-79fb-425a-967a-05d4709df87e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33b790f2-0983-4781-bf2f-3dcad46d9ed0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "304f4181-b015-4acb-8c6c-07b7d71c146b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3f0047c-8ada-41e4-b11a-ebfaaa631a9d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "18576810-50e2-4c89-885f-d0290dda460c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cdf5f43-32b0-47d7-b1f9-f95e8de5be15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7dbbbbfc-033d-40d6-a15d-61844afed9a0"
            }
          }
        ]
      },
      {
        "id": "13419a2b-6a57-474f-bc6b-8140feabe7ed",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "10ac957d-3550-477b-aa1b-d02c69f3fe4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8abdecf8-27d3-493f-aa79-f4bbeb4056ff",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8baf0fb4-aa88-487d-9cdd-e1f4c0924e32",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc44454-87f9-493b-a5c3-6ab8767eb534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08dbab28-b96c-4280-9f61-bbfab8c70c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a34996b-b3aa-45b6-b070-dc6b891a6090",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688eb6ce-2970-489b-b785-7a85548a7d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e05430b5-b578-4570-9c2c-b0554759fc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7fc39e-759d-421e-a1eb-6c951d1e9e3b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e872e6a4-c44f-442c-93e3-029d8feedf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "489ffaaa-5751-4a04-a7f6-24807d30a4e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c1ec2940-1d49-4da9-b185-10f368fa67d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bd5491c-14b3-4fa4-a836-0d571d9d9fb9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5bdcdf-ebd1-4282-ae9b-981f89193143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1da2ca88-218a-4954-8fd3-8f450a8f801f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4e74b9-f8be-4c78-b18f-d6d8a5a00fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fa8312-61c8-4870-93e0-83333acf8468"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "805074e0-accd-4f21-8db9-47781461ea98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3ac5e361-3f0d-4851-8291-7641ac164887",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4986bd9d-31bd-4af6-83f6-34c1e4529cac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9c264f9d-04a7-4316-89f8-4668c0b981a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d2e3cf9-c946-4c30-b4d5-43c6e79202a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9cd0e085-11af-4178-b1da-a5a729876d32"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f07bc5c4-92f8-4263-8046-b24138f05518",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f209644b-6006-4d25-8b79-05964c32e764"
            }
          }
        ]
      },
      {
        "id": "49e5c168-b45c-4e65-9df4-08f831bf3b40",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1ead068f-86c4-4f65-af53-741151cae8a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da61ebdb-35cb-4d39-ba96-8d1596683a6a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e08c7180-154c-4792-87d2-ac590c38366c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca642149-ebcd-4beb-aea6-b87aa48d288b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af0fc7a-aee5-4fdf-a687-6892c9d6f4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f097dd6-12df-4528-acec-288fb95049b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b20c602c-74a4-4842-ab4f-f4af5c37daab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9812bb7-b87f-4347-a0e0-5e1d79132fb6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f70560-38c7-4a74-aa39-9cf07d1929c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d3f5be-4f3b-4412-8cf9-4197fee99c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f32517-e39b-403f-8c46-aaea0e187941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afcb9744-04e2-41dc-83ad-d848e62e5cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0541b184-b5e5-4e68-8227-59c62bcb2fc4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6877b4-70d2-42f3-a3ae-1a0b9429df8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45196adc-8443-48b4-9e4f-986ff3ed5df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1394c107-aa5e-426e-80d7-762773b0cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5ca1e21-5f34-4cda-b033-ac2734b28849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eccdfe1-be99-4412-9d7d-ad88c11a8e4e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b741ca-5413-412a-84d9-d74599789540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8932fdf-03af-49fe-bfbf-18eaf8715705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964604a7-a078-46a7-8fdc-dced041db920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbf00020-1ade-4ef5-8237-43f5c84dc090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27b8da7-ed68-40f2-94a8-eaf4e951b974",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335d525c-1361-4f85-a469-0c9ee9c27951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e03d04e-58b1-4c3d-8afe-5e2c53e85fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fcb6fa-74c9-473b-a973-f76c737c70d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d03eb59d-40cf-4aae-9d0a-688a06165fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854a5af1-4ac3-4d1b-b59f-65e8033bee17",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008cfe1b-309c-4d65-bc67-3457a7b7aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e75a09-bc40-43b1-8cb8-de7c8a5faaf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e411f54a-077d-4fb9-af44-6c4dc0b13e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e30fe93-5cb9-4b9b-a72d-ab99aa8cd056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a4ff0d-1a50-437e-83bd-ae97bab98b59",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c16f04f-ceb6-4335-aa0c-99fe79e0b20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f770fa2-db93-44b7-83cc-e36a4aec4565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3895e7c-8633-416d-ab80-347cb705a817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4ab76b7-5bce-4110-8b43-ae4270ebbdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d7c548-7ebd-41b8-83ce-4c22235f6a72",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d52fce3-3d6f-4ec7-8fd2-37e0077bb854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4815a7-fffb-4a4f-bcb0-7c82f38cc90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cc9d55-1ec8-4b05-8e62-51930c0213af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cddee6c-8c55-4fff-8222-8a0c9f5032f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30df6746-82fc-48f5-b0cb-e6f69b957cb2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19616ca4-ed18-4936-8bb6-aed80a049ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89be180-8f38-443c-bbdf-5aa6d33bd794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c762f822-d9af-484d-8456-f8609e4ee092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39804d6a-6082-4204-b39a-aed5b24f2d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe9d9fa-e121-4988-84b2-6673d2546ab2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f6cfd7-74bd-444c-a5e3-cc694e83722e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa86e1b-1665-4dce-aa24-0b5cbed1ede7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a887ba9-406b-44fe-bd20-cbde99cb3ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e4b304c-c8ee-4d9e-81a9-1441bbe2120b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7cfa57-f4a7-4866-9218-03defc0cbece",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25927c2c-0595-4b2a-be06-d98004a56d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7e95fd-2dac-4560-af12-99ee8400b7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12325870-2d64-4ec8-98d6-62accf8fab60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4025364e-b7d1-4e60-84fa-7d9447aee5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122bc236-52ae-4d77-a101-74442bdda8ae",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d477d0b-4655-4db0-a228-ff556a72411d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84442cdb-851a-4631-97a6-215ab6258096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d15618-eaad-442c-87ee-3cde034ee8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "063d33f2-0267-4a26-af12-21f9e31facf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4616c478-c976-4906-8ba4-7b67041d258e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0f2f18-dd73-4296-bcaa-760c967b1444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c85c47c-3173-4858-b6c1-f6d27facf445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbf176c-547c-4e30-9caa-e97cb9e74b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60d115b8-f0d9-4f54-b487-28f0bd8257c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5333c0e-a421-41ee-9762-9c4d81216da5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "015335e3-0807-4cdf-804f-2dd513df1464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8dc05d-aa9e-48cd-b5e8-c5a5d781d191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc961d4-2ef5-4661-9635-ea07b0c6ff50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e533bd8-54fc-4435-91ad-b9fa31f1137d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10122552-e335-4f8d-a89d-e847c5cf5dc0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1140efb5-af9a-418c-9f51-093d41492b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966e283f-ebbf-4378-b9ad-b524136fb832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c1ba84-0de3-4c6e-bc14-aef1b9607f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86d34095-1f0d-4aae-97c8-fbb92a96174a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15c13d6-72d3-4f60-b737-79d2fcfaee1d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c66836-13ed-444d-8185-f8f699f23a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027f8085-8568-41f5-9863-777b4d9abc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c066e1d7-2f9e-4b61-9b67-0c8302d2dca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e81ab58-e34f-4e6d-acd9-0127aec0703c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b45275-021a-4e20-8c13-bf802385d56c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c80fa72-9ebb-4b80-8a76-4e8d95d564ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3432a7f-91c8-4e12-95d9-7cd75403dc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83239bb9-6ef9-414d-a1cd-8f11549e8e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f0e6b58-bc5f-4baa-a21d-492391ceb9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f823c29b-e86e-4d29-8f17-f85e7670e9d3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36e5eba-b8ac-4c4d-bffc-6137c58d49b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8dc9a8e-6493-4c9d-ae43-0b1538def60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d596619-f18e-41f8-91a4-554dd87564a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7e3497-b680-41ac-ae0a-3b0597706fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b534f6-da23-4598-be02-d9265a893c61",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7661b0-b6a6-4e6f-9d51-5834194d003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96663a0f-9155-4362-b9ae-80e6762e4f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a42ee3-982b-4b43-aee4-a4e06ee1fdf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f12fa289-5ea1-4c24-92f0-0db7865040ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1167654d-8dca-4cdf-aeca-5772f1b60bbd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a59231d-b06f-499d-96f2-b1bf1bda04df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94a7664-1d84-48e9-9639-0094c6a49d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71459d7f-052f-4b5f-a0ca-f225b06b2167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5788f641-e831-454b-b3f4-aab825480d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f0b98b-53a7-4fce-9a3b-5e73b5692d09",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45eff900-8418-486e-8903-842a7c83ce3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf2207b-6ac5-43cf-a3fd-f9e853142142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447b790a-9bc0-419a-80e8-400809c4c6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3553bb-6ce0-4714-90e7-0cab37762778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf2c9f8-c88f-4473-92f3-6108cc2b4a95",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359d0802-a7d6-4dfa-861a-4a8d0132188e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3006515b-2a9e-41ee-855c-d459753b61e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b85019-7fa7-4f64-900c-5655de6fc3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f98b8dd7-4450-401c-ba46-5b7e8c26dd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14a6161-d446-4ea5-8d12-3bac8d15000d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0381c230-e12a-4964-8ef5-ad474b06a040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce97b3e-7c87-41f0-85e4-58e5e6fbba80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52eb9897-26cc-4128-b0ed-394208e296b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b56d9a5-885b-4a6a-acf8-b20d1e6e8fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97471ae-649a-41b5-94e9-b541de462b2f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c1bb6a-3401-4383-af49-66fe124fe99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e786f1ec-3b6e-44fc-a51d-b2852b38de54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c26ac2b-1fe2-44d1-9df4-ddd5eaec5e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab678c54-0780-4862-a806-269bc5bfaf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e35cf18-de7e-4ae4-95d6-6481c1a2ce3a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36884559-c0f4-4f12-97ce-912da9ef033c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02574669-aa80-434f-8d5f-a6f9589e2c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a9e6c3-1d34-4f81-ab69-3265180a4c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd9f22a-584d-4234-9d66-df36fa6193c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db3d097-39b2-412e-a20e-7b1e69056358",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac245da-9b81-4c76-bb16-c62ebe5a894e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92580a0d-4dfc-45b6-90d3-efcbcb8c22ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902129cf-0e01-452e-a59f-4a5e23fa0c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32c885fd-fbc1-4708-8459-fd0c5bfbbe27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6574721f-6edb-4518-b1e6-a919d7736596",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f33468a-63f5-4bfd-9098-1792ffbf784e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7723e6e-acbe-436c-b824-2aaf2b8d0ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea96a50-2a07-415f-ac53-6f51c1cdf9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a619f949-c374-4c0d-a116-13689641d700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f602c0-650d-4c2e-a412-7b1fd6d90574",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d60d142-3942-43fd-85a2-7d90a921507b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e093b06-c191-4d65-83f6-52b4b8e51bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d5d4b2-ebb8-4b1c-a963-865525c9b1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00744c4e-16fe-40c8-b51c-ddea97ac0509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38e6c17-6255-4e4a-abc8-6ec95064b4a8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae788bde-8a6f-4ffa-b5bb-919406ebbed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4b267c-a20c-4d29-bb5f-069b54a185bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c450e64-922d-4e81-979a-bd55302f1126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba71ff4a-3b60-468b-8665-d43ee399df05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7af0920-8264-47c5-90a0-c2c9f36c4e14",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70434274-d59d-44a2-b611-f84cb13c815f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568d7c47-f035-4bd7-ade3-9222367b0bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4030a8ac-3b11-4226-bb95-b1748352d96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3db4a43-628f-44cb-9d91-ab746f77f299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4120f9e2-e874-4971-84f1-927400d557d2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2926b9-0097-4296-8bae-cc9d41921cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2bb3177-9dd5-4777-845e-884989a1178e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8cca70-735c-4287-813d-4c93e5ab78de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f22394a-30cb-4ff2-a056-1b3eaa2928fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2fcbab-5359-426c-8c44-4a39a88a0ed1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbe192b-5197-42ff-bf73-dbfc8822a6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428edcbe-7668-4d76-af42-eeb899aeb784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8241a1-29c4-4a77-a408-e33668ee00db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4670a429-a225-4e0b-b1c2-1f6986477dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd96fb8-f841-4540-aa7b-e5d8d802a903",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b4c6a4-a6e2-4fbc-a8ca-ae1301548ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58b7e57-0a8d-4cd4-8ed2-575ecf523b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1950fb-722a-4faa-91dd-288d43e11845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd77b71-4ab3-4543-b940-a177f029bd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08eadb0e-6cc1-4b98-9186-e24f0f45c4f8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3500a3a7-0db6-4f96-a071-a7b0e77d9268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd77c72-5c76-4493-94c9-11896cbcbac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353929f1-f626-4cf5-a744-98f5371bf445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "388076df-0d1a-43d1-a3d5-8fd7b83b1817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a683fad0-3623-4164-8f84-b9ce0066b27b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa51206-69d8-4b2b-afd2-e22ca2dc2895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ad2c13-b321-4901-b067-062d446ec609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ac2b57-23d7-4fb1-b31d-727d52ae6d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0211ae03-b6f2-4a63-ac30-d49a2e67228e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af71059-29f2-40c6-b1d4-1b7eda781a8a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25936288-72c1-4b3c-b3b6-cb1652ece458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "720c0c20-3834-40ee-8dcd-9bca8c70fa84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b59b145-7569-42db-a3b7-8172bd781e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e970b7f8-6157-4e4a-a6b3-b6dde973b084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bae1da0-2947-4ce7-851c-e532df636be5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a028343a-16ed-44d7-a531-80973b0f5d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c5ab3b-ded6-4581-a694-00e55f8ae3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d648cf0-84d7-41e7-b2f5-1f5f45f9ddcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3806a48-1594-4c7d-97df-4b6463e7ffaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e665520a-586e-4591-959a-092777d91308",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae59e9ea-7324-4e91-89e9-67658e5663e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024cc0d4-f085-43f2-a078-16cd46cbe123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46d49d0-41a4-47cc-aab0-d4ae63a7283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4eb5f06-993b-4086-a7fd-1e31bdafd345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377b81c4-06c0-4829-b3f7-fd0394717d37",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66dd0a83-bc90-49e4-a96f-897c384c65ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e92764f-cebb-4b6e-9089-6aa625cd983f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f02451a-353b-4a85-bab4-dbf494be2b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "09e2fc70-7fe9-4343-882f-a0af26360cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de749fa-27b6-4a27-9b92-62335bc9064b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ddef7d-4dfe-40c1-be89-69a3a8ffcea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6def1c72-2477-416a-90bb-d81f97a2f4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e470a59c-5d78-44e7-96e6-70312b02f24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "adcf4617-1c4a-4dbd-baad-9108c8a5e20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33188264-b48b-42fb-923f-e3af21d76c44",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5233991d-c3b7-40c8-95d1-ccdbb9c69542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c0c448-c33f-4fae-80c9-22ebc0a17fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a710b56-24a7-4b3d-8ebb-1949a43ef314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "54ddcfbc-1d4e-4476-9e93-0434381a3e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e348215-c473-46e4-a70d-871b555a2bce",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7522b634-993a-45d3-94ae-17f89632087d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a93f14d-c3e3-4745-830b-17fc06141cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ecf976-df5c-44d6-b725-51dfe2827181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7ceb276f-608c-41d1-b6d1-efe8904615cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfb0c8c-e024-4f54-ab62-b7625f940be9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d246fd-d693-4a41-8c88-11e232fdb75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61b00bf-2c0b-4313-98df-5583d33f108a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f8d70d-5e79-4feb-adc9-42ef1683720e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "62ee9b24-b801-494a-aa02-10f0398b9832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d1fb63-889c-4c80-bde7-507c7585e8e7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8189f4e8-9c87-42ad-b262-42474888afe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32082ecc-472e-4724-815c-408fa0ea9c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e444b6a-ec88-4600-8fcd-d6841e5a3ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1efed964-ef4b-4296-bdf0-0c5bd34f57e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc95029-f630-4283-9042-4b66d65686ac",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834f86d7-eca8-4758-9fe6-bca92a9f9360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4f106f-b3cf-4051-838c-c5fec07892e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4a3781-c408-45e0-b0fb-a59b05936944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7bd93d-89cf-40fb-b686-45bbce501d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e406a85-ede1-4ba6-9f0b-cb0daeae6235",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054dee02-5efd-4dcd-a2c6-7c99939f5dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94350df7-e781-491b-99c0-ba5c8ae1a96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9121696-b5bf-4636-9532-263753526ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0a2012-193b-4018-95e6-1338191b8102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0aeaf65-f25a-4993-8b69-dd0ee3189154",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5c386c-1312-43ba-8665-0d7bf6994017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e94290b-d1d1-4140-a26f-f3da77d0a662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e500f5ab-ed73-4894-956a-e95cc7da748a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edec6c93-d6c6-47f7-bb5a-257cad689053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601f407d-f382-4f14-893e-52e5ccc6dabd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b49c75-ea23-4d9e-938b-cd30fc70847f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca444df-fb8e-4252-b3a6-55017913739a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597f4db6-b44b-487a-82f1-34d478888717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9290df-2e04-45df-8a13-c1c0c0265e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b53ff0-3342-4fdd-9acd-63bac74cc95a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114290db-3175-4fa4-aa07-bfa4534267d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb58f34-8ea6-4644-b57c-bd6587a03513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae61b0c3-022f-4944-a1d8-afb43a8da39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e74d7c6-e233-41f1-9c4a-28086e4df9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb41035d-d412-4bb5-9f66-1303e0fd645b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a3d1ee-82d3-4f2b-a67d-6c2a7dc3fb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e4b7ca-b76c-4e5f-ace3-ede18e7b2914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf99956-873d-4a7a-b0dd-0273da36882d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d967e00b-3517-42c5-9382-445e0cc6c0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46670c87-0327-496e-86e6-3f491c0bf07e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce30ff24-f149-4813-b6ad-a283504645be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f763d66-cb7e-464a-b6c2-df9a0a2c4d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060f74ff-29ac-41cb-9aa0-6923919b624c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d96e973a-d745-4a96-8652-e1a602d3a440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da76ac8b-ffc1-4836-813c-9cf7156dac0a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a129b52e-42a8-46ea-a587-c02a6ea6a559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fe5f69-126b-448f-a20c-0f83d71521d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723cd605-8d82-4f0b-b14a-c3e3fd42deb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac73ba6b-ed09-4e13-b0e1-ddfb8310a3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f296e9c3-367e-42ba-94ea-cca31eac30bf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0aa577-31d8-4989-9bb0-b4273eee06bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262397c2-4e34-4062-9d38-a57979c2498f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076cdacb-f1c6-4c4b-968f-3567dd8b9658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff59bd2-710a-4537-bf8c-58d5a56e7b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d1ff2e-b5d5-41ad-a452-9901779759a2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bdb0f8-b94e-4af5-a5b1-0b7be4561d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c0ca25-c869-4d79-9790-77288069bcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56841ea9-76a2-4ebe-9f4f-0ca6424ed7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1da53b01-2630-4b58-93d9-ca65228ca6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08196741-791c-4bb4-8915-20a6de2ad2da",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b997ba-2d8d-4b33-8bf8-fbbe738f54c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bfd20d3-2f87-4277-8a4a-69fb5daa5453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c695adaf-71e4-4b47-954d-7aadae2b5c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd49b69f-c274-4892-bf61-5918f0251a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169bc75a-9f43-498d-bdb2-ea65fa647fbc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3139b48-8926-4be8-a5fc-83b631965591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e15e657-60f4-4c12-b40e-f65145780e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbf4289-b280-4444-a632-0010a9049bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc98aab-033f-4aa8-b772-5b14f33f79f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19b674e-2393-4a60-86cd-da03c3d52720",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bdc27b-fa09-4165-a10b-f3bd302257eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d854ce2-1b81-4eba-a533-cb5b8cc3ce6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f267f9-9eaf-4f5f-b606-53bc4801b140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3363b522-539c-42a1-8eb9-767652fbe070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed826e4-040c-4352-b582-4b1bd17be290",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d70bb05-aa79-4ca0-bb07-dd93e03189b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa19d40-b944-4751-bf9e-be763289f45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f583d90-016d-41b6-9bd1-4f48e8aea960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b35e1c1f-3ff4-4cdc-b641-5a054701e2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a390149f-a5e3-4fc5-a28f-6d16c8cfe559",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8460ac2-a74e-4a70-b5aa-829acb4a831d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e117c36-3620-45d2-af80-e8402a60e60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2f3fea-3bc9-4587-b35a-788fc288b8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7639c70d-a86b-4857-bad3-4b775611e524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f577d01f-1812-41c4-ad1b-651cec430051",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff40621-cd96-40ba-ac65-4daba75ea7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dac13bd-da11-4b65-b373-022a4f5307bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c29ea65-b783-4c8f-99dc-35d4405a4c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a72b54a6-33de-4cf5-a161-fb7568ca4da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494fc71e-800c-4b89-a706-ad48467ac578",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c24f70-5706-4823-9519-bfaeecae54b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37af97bb-c90b-4c02-a90f-dbe487c5bc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baacc69d-ee3c-4d95-883a-99da2f216557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5830ab15-20f6-469d-942c-31dc8e3e29a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb00ba3-8c11-476f-b1fc-b89ed9b90241",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec49721-5ae3-4847-b134-21fceecdcd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3dfd476-7636-4cb0-aec4-9cf954375e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f20f8c-8477-47a9-9b7d-ce9a1e577a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d161aa-8f94-40f9-986f-e34f6600e850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea2a6ad-25ee-4d3a-9e70-5af6c6b20ea2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c4a47b-0961-4a41-b0a5-8073b1a01d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3625db71-fa40-430d-9c5e-7909a459352b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d2f012-3cc7-4857-a8fe-f20a66b82f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7110a08-acd4-4692-9f3b-1f8c00320093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5e4a3e-acce-4a73-b18d-caf7caa30846",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b7e3c4-d033-45d6-9919-226432b88c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842c2f0f-7cb8-4149-a9a7-63f83f31b7ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3878edb6-c53b-40e2-8bd8-ddf0d9adaac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b58b9f1-7df9-4c33-8861-13142771b855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705a8c57-98f1-481e-9aca-b6b31253f50c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45016b31-dd30-4694-b466-ac45e9def60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110c7788-c8e8-4711-b820-9ea4f1281538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef73ff22-632c-47e7-8112-78035dc2a5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb716654-cbf2-4c2b-a909-c5ead6fb5853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0de8d20-8c6f-4f11-a320-669e4faf2786",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a88de5c-8b8f-4a2b-b16a-dc5818f806c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48900b6-baa5-467a-aa66-97adb269c992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea40002-49df-4a55-86dc-cede80172dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf00f1e-aab0-46f4-9921-20bbe431f20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c57d55e-3cc2-4af2-9317-eb7abc459f03",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3952d598-f4f2-4c56-80eb-7cedfdd3eeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f15a658-ded6-4fc9-8a04-a2c210d8d54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adc0a74-4a20-4c25-8651-2dd9fce3e537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2704054e-f22c-464f-bce6-3862d5355aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2490028-1078-4dee-9438-9906a4548925",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b1d05f-bc02-4bd6-b959-b508e1ed3314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356cd5ad-08ac-48d1-a501-477a12fcf77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e133f64-f422-4898-be96-97a74c7e4ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b21c2c4d-4f0b-4ba8-a5c5-cf2b8fd1c821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4035035d-b795-41c8-8e70-90134e089f2c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd32e19-57cd-43b3-a78d-45b3765a8d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbad70f-0102-4944-bc57-f899a2c1f90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3950cb4e-cc1f-4ea8-a4c5-b86167915419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a65bf79f-5e57-497b-8dd4-dc39aa634b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7378c0-5719-454c-8481-f0dd6faad3dd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc18e05-649e-4e95-a7f4-c6af53a379af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e77d26-51a9-4e21-911e-d953ad9961e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64897828-e11c-41c5-848d-3906d4cf47e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4dd601b-243e-48ce-b447-1b497a9181b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc0b828-9732-46e8-9ba9-4cc2111aa119",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f862971b-82c4-4af3-ae44-3c6514fa0b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca6ac0e-e72e-4744-b902-56882e85b6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26c0213-75fd-4cc6-b463-90338125a73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b900e7-72fd-4435-bed0-369ff1e39919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c24285-36ff-42d7-8f4d-39f3934f7e90",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bb4053-d80b-42ca-9ac7-2ab81ddc48ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871794b9-9a5b-4e92-acd3-89bf49c18087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b97c316-8d57-45b5-a21f-b724ee0b2c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92f62a54-8bb7-4d52-933c-f463b5e94613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9c1eac-8c63-47c1-b0eb-ffe99d822273",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7caac99-9e93-4b1b-b15f-4e5c90870aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baac5d15-ae37-4b2e-8d86-a628dd1199a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e4181b-5af9-42b3-a2c1-2f636f425005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b60b7092-750c-452e-9f4f-03a25a44a89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b4f96e-32fa-4ed1-9a70-2a5081d7b23c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fc7cf6-569d-46ba-b05d-5ef356780269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35310a1-8100-4081-abc0-3352922bbd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd2859d-9d63-4bb8-8b03-b2471fbb59d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88d1a1a4-f533-4226-a36e-6cf3c6f152d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06ad756-3c8c-48f5-9487-44f43d547eea",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9862a95-cb45-4dda-9645-302791660ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfd9287-6c2f-45f9-9027-88d772d29ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ccacc4-afd2-44ae-88d2-bfeee8d308fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "514b39c9-8dc0-453c-ade2-dd93f1d7b789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215668a2-1dbb-4060-bede-851bd00ddd6f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e5ab06-387d-4591-adcd-160b331bf4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae244b2-80a9-4665-a33e-3006bc538b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340926de-a04c-4015-ae05-89955f32e489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83fe2d05-99e5-4c66-b5b9-6c81f3fe540d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f572d31-8cd0-4e51-8218-d5df75a2d789",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77ce833-9575-4c1d-8728-a86a1ed045f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19903dd-dab2-4342-858b-354f15503460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d20ee7-73c5-4d3b-8444-d0a1d3c5a7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dba773a-62bc-487a-9272-d372ddad4559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9613b5-b023-4f77-bbed-92ba073345ba",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a4b529-ec82-4f1c-82d3-852cfc6b117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8cde0d-6940-437e-ad89-162cbb86a770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4963a8-7315-44e3-832e-4c6ab156bafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f44c985-3a16-4157-8110-49398fa84310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355b8f9d-8a58-4b5c-9cbe-229bf15e9d8c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4339e73-e611-41dc-8d25-b9b8564907de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d963a92-af43-4144-abd5-9db5b4cf5ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7914a44-dffb-427e-8651-7cfe2784a865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cda6774f-f6d9-4eea-91b6-2636fdec741e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e908e0-ff7c-479a-bbb7-df1c35adb5e1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b426a5-4249-4627-be76-1a886d5fb0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afab611a-63ed-4ac9-a199-3a4ce593ceac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40b7d6a-da5f-4b10-a13d-4626ae7136de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "693629f8-2d94-4ed5-9f5a-20e67799aaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32e76df-2f75-4a30-9bcf-2c45548598c9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba748ee-b357-415b-8771-728fba75a163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81af638b-de27-4f2a-b36b-9d64a47accd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1237b9-d99b-406a-a7b6-8a4f6d2544d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb15e8ab-370e-429f-bb76-91317aacb9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f448d8c-badd-454c-8be2-b1bc551438c7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a55fd9e-3f50-425e-bb8f-842b5af9e48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5f99c9-c6de-4f99-ae00-a4b9d48d27c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e1e98c-d85c-41ad-9b56-22d27c2cb98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a700b5d-5846-40c8-bad5-9240c87fd0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3941d8-7551-4585-a6ac-e55d46d875c5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8aeb54-bc8b-4f4f-96c1-84f0a356603e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ea14ac-91de-4a52-9b95-30b16e789297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25b3eeb-fc1a-4a03-b251-ead5678386a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24b01e27-b1da-44b0-951f-3d8f33982fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f11d7d0-af87-4595-b4ec-ebbacc06dde3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e461aec9-c7f7-411b-9420-f2bd1a98a37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7d317e-ccd3-4543-a67f-eea4e50f1f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0700ef-79f0-4832-8915-536830808422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c68e9a-2e9c-4830-920f-bb090ace90aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c5efec-59bc-4e67-96e5-5ec0cc3910ef",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d5debd-6394-4fcd-bcf3-c533a8ab9c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9240dc8e-bca5-4abb-bc5c-578c6df3b641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e659ba3d-c4c4-4651-a7db-e98f968544c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d80188b-9d19-468f-8373-863e273a1bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e210eb0c-159d-49ff-aa3f-3a8ac2446a39",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55a4187-5b5a-4dac-8a21-bedc49b8240a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e3f323-5a35-4981-98a6-35c3f9def921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bf6571-14c5-4b95-9a62-42c9d0906278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e95fca5-b69d-4861-8358-8b563d29908f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5b6e83-0742-4165-9ac4-9da6370fca60",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f3d7a8-ecca-4f64-8bb4-8d0f7cda5a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64e7ca7-61e0-4251-8d66-bfce12fb7d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34af9f19-e9e2-41c8-92ce-11e4b1c0440d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c94068e-23f5-4d47-a619-f054f167388f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236d63b2-fb65-4ecc-a071-62137148ef54",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f156e2-bd84-486a-a372-383e0888a71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d3dcc4-1b69-44cb-9337-770c27ac828c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d863ff-280d-4a4d-91b2-605b908f8fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "11cffdaf-2f74-417d-858a-0a8e91ee93bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672c17d3-4229-46f1-895e-606f6109dc84",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09214759-e289-493b-82d7-9f79cb05067b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edee88ba-6477-4e57-81c2-8ae1bf892caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a260e46b-cf5c-4e9b-809d-e07715b58377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7989fab4-1b0c-4088-b42b-c60a6af31f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6913ee-4164-4258-a2d4-cb2ff542796b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17a58d8-b627-46d7-b226-5136688040e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3bf682-aea1-4487-80d1-52e180ff834a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5499554-b348-4f62-a1ff-89a89c85eba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b80dee-3976-45ac-90bb-316dc42be186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dab343-daec-4b0e-8114-80ebe5c3bc21",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f251f84-4f06-4cf5-b552-4aaf6fb7e96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e43388-9062-4991-a278-1614147280a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bc8df8-7da1-473b-ae23-c4245b2b718c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "212e9435-3380-479c-beb0-992fa022e76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ca827f-f39f-4c5f-92cb-10a25dda904c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe840cb-afe8-4891-bfc0-7ad9e605274e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "595cb3ea-b1af-4929-8b05-76c792d7324a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7018ea6a-a9c0-4d73-87d6-7e18b97d58f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "43553e61-c685-42d6-b684-8176a2387421"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8190a192-ac3d-41ef-be81-f3e16135045f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cb1cc27-b7cc-48b5-8128-5973334ecd9c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfb5b6a-4c93-4d75-80e1-9ff1cb3d3bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29d07730-38e1-4d93-a339-053ad3e2939b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66e827d-5858-4222-855b-d480956651ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09cd75e5-b5bf-4a7e-abef-4c87e57de765"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e96a950-91d4-4e00-b654-dc0f20855794",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ac840b4-2c31-4a3c-ac8c-515b6992792e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "552ba449-5155-4a72-aa76-6286be74fc71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af57511c-d63b-4d4d-8e9f-e87324ad2d0f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f80bd36-4af9-42e9-a509-e70b91406d46",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16ec9c6e-7a82-4cd0-8991-4dad2b1aad9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f6174114-1060-47a6-b928-0263732ff5f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a58f4614-5aa4-4fb2-b16f-0697da090729"
                }
              }
            ]
          },
          {
            "id": "7fe9a9e2-3323-409f-a133-64cd04247dca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "92972011-4922-4923-ab4c-ddbfae7ff4e8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1bc8ecfb-c226-47e9-b18c-e6f522a09788",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0c7ce1-d196-44ed-b318-83579f4eea39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5044388b-b4d3-4d5c-a597-02637fe0d6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8c9c3e-5a63-4e34-912b-908e64ecca01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d61c40-b58e-4c23-beb4-73fede2283b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "719fba05-9e92-4b52-8466-76017aa25429",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3ffdede-b36f-4cf9-a077-418363968def",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8770e965-7d91-4277-bce7-4551579ffb1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5da5f661-ccfe-45f3-92d3-37fa263b391f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4df48bf9-a451-436f-a39d-08184297f2fa"
                    }
                  }
                ]
              },
              {
                "id": "741e6212-91d1-4a08-9e06-545a65cb1dc2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a524c23d-9df7-477d-9367-ea86457aa124",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f164936-20a1-4ffc-b472-3c67079682a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bddaa382-7068-45a3-9f73-3c1a9b543822",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02852dd4-ee08-4531-9143-5cbdd4f18b22"
                    }
                  }
                ]
              },
              {
                "id": "95753e1e-d626-4bc0-8136-55b62da272c2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b970d86f-c8b8-4b1e-9e63-5205b0902f93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7849cd0-1dae-42f5-a1aa-a3698e80c7f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78c45b90-a3f2-4144-a141-087edc6af2ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ed532248-ff4a-4ad4-ab15-0896aefddee5"
                    }
                  }
                ]
              },
              {
                "id": "60601cd0-b476-4eab-8f4b-0d170afad9cf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d174e1a1-53e7-41a7-b664-48eeec6744bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8fdc5ca-34de-4ea0-ba39-e397954e4e53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfd05880-77e1-4b55-8974-7a09a874d9d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b9397067-747b-40ba-93bb-be200f8e744d"
                    }
                  }
                ]
              },
              {
                "id": "0d7096f5-046c-4c43-a93f-0d0446a0668f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02094cd6-260b-4425-9118-573aafba34ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5035452b-d865-4d71-9131-e1e15c8e81e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a822e79b-71c6-4691-8bab-3f47dfeb56e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "464939af-5ce2-42f5-8c63-68be74d9ab1b"
                    }
                  }
                ]
              },
              {
                "id": "44b1b137-7592-46e5-95b5-84e9549e14e5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7259e898-0476-4edc-86e7-9c03d0de8bf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21b3e49f-8ed2-4995-9ec6-9dadb95ebf8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "296eb7ca-9dbf-4d62-81dc-6faba8e2e735",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71cf77c8-a772-43e4-bea0-5e4ed6d0c60b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21fb729b-5724-45f0-8385-7c519bf36fde",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc579c39-071b-4c42-9aee-0f75c0dea7eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "51b141cf-73fb-49c6-b5bb-6dc4bd671e58",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66fa82d9-ddfe-47f5-8b4d-f391b5a2e2c9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "833f177c-113c-4069-ae46-e9c263ab1721",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3ddcb93e-db8a-496d-83c7-1dc66a48c8a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b9040d9-4a34-474f-8911-04927254ddae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef980021-4ef8-4c06-b177-cbb5388d1c8a"
            }
          }
        ]
      },
      {
        "id": "86ac50a7-4da7-413a-96f6-356f7bd1a8f0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2171c55d-62f6-4cf1-b4dd-1e23836cc93d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "462a14d9-70a2-45a7-828a-34df0aeb06e8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e4ac306a-9925-4fb7-8d4f-9ff28ccee0c8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ca8bde-2dfe-48a9-b427-d84876295757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c7a008-fae4-4e1d-b886-f65a4adbe72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d75928-ec06-49e5-8e35-5c5ea7dbf047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "82ceadf1-f285-4364-a18a-6f15e6a4a44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79139e55-00d1-4b43-90b4-25dbe3ebd0df",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d734f9-f3f8-4dcd-a79a-1dea8e7a871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8013389e-df0b-414b-8d0d-c51c9f9823a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d18fc14-b534-4308-9a62-59136aee68ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91e32bef-bc4f-43d2-9a3a-4a8d7dccfc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25540eb1-b667-4716-b360-6305aeb1e029",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436f3d0d-0f2e-429d-aebc-2a8077e1badd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0aaccd-0666-4a61-8bbb-e60d89c03026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44bc5d0-ca2a-48df-90bf-5e55f0eefb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56e9c38a-70dd-4b98-8ed8-3d091ed0880e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74eff337-da52-45cc-8a2d-60609918e0f1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f5282e-602a-44ad-a024-e9316c3c57f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d648fe9-44af-4b77-8a03-5d3c4543c368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8fee4c-588f-4f7b-9ad0-25eeb077bd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee46cae-ea41-4be3-beb9-fcaf131cebde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd4f0de-7c8e-4dc2-b11b-6f434c2de03a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec1f8f4-591d-4452-880b-88f30c3a278d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9747bb5d-04a5-404d-b0c2-e2edf8e51e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07daa9b3-5bb7-46eb-bee9-ddb404749ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4323fd2b-1024-4fc9-ae4e-6eff5aabedf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6e18e6-08e1-4a11-a5f8-7b3fd9a69494",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc844412-129d-4aa1-8c84-79350214270b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143f7abe-9fed-4367-93b2-beae28ed715e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7987c97b-b1eb-4bab-a3a7-6e1c9c32f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35afdf8b-6379-47b8-a257-367266c61402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea75b03-42f7-4fa2-be83-85d9250bf526",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4867c7f-8032-4a8d-a682-ad405ba172b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbcf5d1-da28-4428-a561-c62039a7f590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d6fead-252b-4fd8-8ae4-195c3cd29052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "172a8b4b-82e1-4f94-a4e7-f9fcbd7b0b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec5c812-4ffe-4b3e-b6cb-3ae05e0829f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f35b22f-9fc6-4b52-b4a9-6eea254a189e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a82ce1-41f2-4792-af75-8f61c588763e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1a0091-f0d6-4ca2-a3da-dcd332059deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "444852c2-6573-499b-9bcb-ec4f104d2b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083e73fe-fb99-4b2f-aa84-c96bbbdde295",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0885ba30-6e9a-423a-854c-dd2c75ea2a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4382682-f572-410d-a616-fd4572b7c57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37b4d87-8207-45be-8d30-951aea3fe642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f041a33-b785-44c7-aca0-a4e3d03c96e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec411f3-8f39-47e6-b73c-b828745a1002",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5dc373-80b6-4393-b57f-581fb782c1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bac000f-3bfb-4ec2-8383-a22ed7f0232a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25aa5e44-29ac-4ad6-a398-606c07dc8425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d51fe92-2c7d-4d5c-8413-280f651f0cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b30af55-db50-45af-adef-5294aca64e80",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30623e49-4a32-438e-9a80-811af23e0484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d94ba1b-3a71-4091-8c4f-becaf4c8609e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0696ac08-d536-49af-abda-653006c93dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e366723d-4dd1-4e2d-aa68-f5f1295f44f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394d4fa3-9005-4101-a9bc-7fbebb98b009",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74c748f-3f23-4a41-a6d3-d103b37e025b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9cadca-9237-4de4-8424-529f7bf69b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325f1984-149d-4d5a-a796-061a187e22ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4e9734-ac1f-472c-a116-78b72212b263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1e36e6-ec06-49c0-8bbe-1c5db197caa4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2d1853-49e6-42fa-8517-10d1e9aa4476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cf7938-566c-40da-a1a9-6ffbdf89fe11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b24e180-4d1e-4ece-a38e-0eaf0a74db10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a842dfcf-7216-48a2-b3e0-8c0acc1bc71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e5bfd8-86ea-439d-9497-6be09996a9ba",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020eee88-7800-406a-801e-6201e05f1642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01b3adb-ea50-4bd1-9529-cdfdb414806b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc727381-237d-46e5-ae99-ecbaf0341f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d415fd3d-7efa-48bf-8bf7-b4b600f133b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2666916f-a843-4626-a1a7-b0f877bf2769",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8deee33a-f0c7-4669-86f1-c1af8af7df01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2289af2f-23e8-4e29-b2d7-f4b8e821164f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411d00f0-0b6f-4f1a-a9e9-8c472669eb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "30baf44a-a849-4e11-a533-c0820e855497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d324d01d-46d4-492b-98a8-100e3b4a4fdc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9971ee4-b9e2-4982-b93b-bfd3f30cd90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23077283-75d0-4dea-9923-dd1381dc007e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f789ec47-afb9-4844-9d4c-317aa49aa7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "09518057-9f4b-47bf-8e7b-bc865f202313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fd9075-f45b-4065-8dea-3a4426463f74",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a2c9ed-04bc-4a51-b37b-a0bd93c474ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a8cd67-0849-4ce3-99a6-001130d03510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3125498b-a12a-428d-9437-5a1404332976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "50b98e95-186a-46b0-a051-abad1c452e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4558aee1-d74c-4808-976c-7040b55b03cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049c4c77-810c-4ef8-a11e-a2076380b012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026081eb-e2fe-4f47-aea4-2567136a491f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172e2e91-cbb5-40ca-8f25-8aa842d2d638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "06728bbf-7599-4cb4-ae7f-b3b588dc4690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f0cb41-4ce5-415f-9ecf-2b85f99d446d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757eb6a5-f3b4-4e17-94f3-f670a02592dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d9ad7a-d307-4443-94e6-d70034e89b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f64c88b-4a63-4e07-8a80-ab2ce0c5d077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cec1f0-b146-4eae-9d52-fb23faabec81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934f796b-d869-481d-ade1-79d717da0d86",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a399b092-ffd8-4bbb-8fd7-7911e65a8f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d97fb8-0f85-4ae8-aabc-b378725f9e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d926f5b3-d318-4eb6-b2fc-3dfbc2d40a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e93875d-826b-488e-830c-6791bbec7549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e57e48-6eee-4dfb-870f-7198986ea23d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa41af2d-f175-483a-9fec-fd58245e2352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebb9ebd-f2ed-46d5-8917-1f14432c90d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9caa75f-7e92-48fa-8e19-389b9f067a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8cc94c-4483-4749-b21a-16a9681c205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17300e4-1ed0-4dee-b49d-71f08545c643",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64130dc9-0680-4488-aa09-8ab9b0acbe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63fc1fef-6b06-4498-86e4-4d28a28ca787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e807de-9c44-4b2f-a8a0-fc725dd8f5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e08510a8-6c8a-44b3-8cdf-e14ba82b8473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7141cd-70d3-4770-b5c9-30735cdd4d64",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f366c88-9e2c-4c9d-be1f-fa113270cff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a893c52d-1340-472c-bb30-a2a3c1a15c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0070ea-b39c-4d8a-a062-ac82104472e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "139ebbb1-1184-4407-9a06-884bb5e27b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f781b05e-354f-4e54-9643-4e5afe8b1038",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4880da-fd62-4082-8844-892a32fe9e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3ac646-53ae-47d4-b1d1-c106f442f851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53cd728-3240-4264-97d9-53f1d8a47c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b79fcd6a-2c5b-475e-86d9-cebc791e082c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893c2410-6479-48f6-8297-6045fb1686f6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbde0951-50f6-4ec0-9f34-7f0f58762dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cada872-ebbc-4a19-a8e1-010f81a8659e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4a0e2d-7c5e-4f16-b6b2-dc4ebaf6f92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb09b58-5bd8-43aa-85f0-1c74ef063c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a9eb25-f2dd-4ac2-8e92-65a863b05428",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "465feb8b-b17b-4ec1-9863-22b3698a2152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea29698-8a62-4943-9cf5-7a1af7eef9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e93165-a201-4665-a631-5198ddbfeaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1071e88-81d3-4c87-bc5e-41bb4140da3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2145e7d5-4cbb-473e-9ca9-31ef9a84ea9a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b84159-bce0-4773-a830-fb4f5c29a29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd1c0a9-d860-40a0-91a2-27a1919508f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8118c75-3eff-4beb-9e08-f73778b71ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3cfa6a-0f88-4e4e-a5b4-e8c57523fa37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42af7f9-bce5-483a-8349-615d1369a4dc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ba5018-bdde-47fd-a8d1-6da371c92d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273a1986-ebd8-4148-afa5-63f82042e35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a2b5bb-7863-4bd7-b9c5-d51ec36c1727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2449a3-998a-4ecd-9f26-38b3dabb2676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723fe47f-9309-4221-8ba1-6ee0babbdef8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36eb49fb-e226-4530-9108-1515007704c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c340815d-78ad-44af-8251-5855fd01f0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86be61f8-be63-4768-ac11-e83dc32e64ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9238f7dd-b944-4c5c-9e79-4d028ec1d733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7085cd-9436-4079-9e08-0e9c17159ad3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2e0232-fba2-4d10-b90b-19257a387910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4dae7c1-e74b-49d4-ab63-6c68d462bf1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba092ff0-19c1-46a2-87b4-3d6ae3eb0627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f70c62-f795-45be-a7ec-877b9bb54af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b70160-af56-45a7-80fd-998c29dce12d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ba95e0-012a-43a2-a36f-7007a8610a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab07e95-5dcd-4432-9279-fb7fe3ffa350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0d30cf-9408-493e-a0dd-82a0d2be9fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8be17043-ca4e-4f23-9bfd-38c9c404917c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cfe529-59c2-4a98-ac0c-19e341707b8c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6bf20c-39ee-4a93-836d-d151d57db32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a370ba2e-937f-4007-a047-bd9cd2232c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3acfa2-c45c-4a94-8815-b40c9521b16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1e677c-1a37-4d92-9b8d-ab3bed2368d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "47c74a9e-2515-448d-8be5-26aac5f889b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccee08f0-58aa-4b32-bb0d-4f395c7c70c2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb51bbc-bc3b-45c3-a920-4aa562fb6b70",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e81f1f-a47f-4374-a2d7-da497f208e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d48414-d04b-4e88-84a8-b262b75c5c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b75fcbde-92f1-44e7-9de9-c7e2c3cbad27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdeb7ebb-78aa-4d44-97a8-7456756b6e37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9fc53d1-a7b1-449d-9952-29aef6b9e0da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c183ab40-2189-496a-9157-6f75497e1d6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7b17fb1-3943-486e-a97a-43485882523c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31dce91b-28a5-40b7-8ec6-03177c0f0790",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "20199af3-ec44-4a1c-9617-a2d704a89e68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c8ea615-ca5d-454b-bcd3-c26e3713c8d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62c2c47b-71d8-4712-b601-6387229af9a1"
            }
          }
        ]
      },
      {
        "id": "370cc033-fe24-4177-a4a3-82d746c63db7",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2dea738a-e482-49e7-b63d-bf5bc86f7eba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b20e233-df21-428f-9df6-15cfa7fef00e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31cc682f-7c5d-45e3-86d7-de7ab0a8a928",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92a6377-bb39-447f-acd5-112fe7c38ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753e1a86-9073-4cda-a264-7f0aff2c7c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b792e5-850d-46d7-ab58-d0cbdedc9374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f286c87-0c7b-473d-ab57-78d01d390d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b4680e-254b-41dc-be05-bc677c8ab840",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29818a1-3d10-4075-8997-f9af69b4245e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058f7ded-754e-4c72-9b74-1d0a388557b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19369e37-41fd-4ca1-a05d-7cf4ae21f8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2644a66c-cac9-4c34-a972-3be40b3a1790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8866e249-edce-4297-a212-66a711d80447",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c097609-d627-4350-9f20-55efcbb2693c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fd0cc2-834e-456e-85f1-1a65128993a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17aff01e-7f2c-4b06-a839-f0b8b9453de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7043e54-f2b3-401c-87d3-12e721ca5a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b0c765-d757-44d1-862f-0920bdfe7e34",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68054d5d-c408-4209-83bc-625a0654b780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c269204a-bb8e-4b2d-a0d6-ea4b20971464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d83b700-5c39-442f-92c4-9bc3b9079994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c23340-ac7a-45aa-a136-e10a50254320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd810c7b-496e-49a5-875e-835296ae36bf",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a69de78-ba90-47b1-b278-e5e8a49c153c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66349541-573c-4ff5-9443-5c134d92e96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257ee688-9220-4584-9795-211a89514a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5af7e1d9-b58f-4d37-aba1-6bbd1c38e2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53544e58-4d08-43a9-b68b-58ff7e38d828",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f158ec-741d-417a-9c5d-8553a6e2736e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f7e67c-e859-477e-ae81-60683403b82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6932eca-3b16-4140-b0ec-d63cc9f63626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b9d1e8-154a-4de8-9805-66bbffd995e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a691949d-4ca9-4f41-b610-de60585b3ab4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa722513-335c-4e09-b62f-337c57e6fc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e412f66-3a0c-4db3-803a-ff52591face7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cb3ec2-b90e-4962-9ede-6af9470ec879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae9d143-29d3-4023-8701-9e71512c2857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcca04c8-c9e3-4842-9cf8-037b7392406a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3312d3-69f6-41f8-934f-0bbc6f685495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e152a4b2-7092-402c-87f3-ac9700a5bdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6992433-d247-401d-8ff2-2e8de11dae37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a39786c-ff13-4518-8b7d-ca700b375e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7dd735-f2fa-474c-8428-d89b9933f037",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592e1fca-24ff-43b3-a028-adb50fa0699c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb5253f-73f1-4a77-99d3-b0cfa3604f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78c2112-9dcc-4f55-9035-33ef0ab2fc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b544b08e-db9b-4538-8655-8db0e3ea1859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c15d07d-89ad-47b5-86be-15aca779cdb0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5054a8-407c-4393-9167-4301aef7375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c11881d-8d49-4970-ab6f-9cb0e54a1a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fddecb-e66b-47ef-9b62-8f1232a87e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eedf523-eda8-42f1-894e-1aa7fa2576aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a77cafe-a26b-4c68-a1a7-3d00f4e43a3c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ca8553-31dd-48e8-ac4e-c0116b6bda06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2415453-087f-4bff-b580-71d86e81e32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de33d4d-274e-4487-84b1-4235b676f5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4a17f1-df26-4181-987e-f9fb2e6a7d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d09777-4e7e-4ad2-a0da-7a7c66aba501",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399f2356-30e5-4e49-8c22-f7ea3314e29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f282649-54e9-4968-9e0d-e3518f4ee6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7466326e-8dcc-4e14-b10b-9b244f9ca171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66b568c1-15e6-4ec6-b6cd-9f7e33984eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce2764c-b465-4166-ba38-b9371d1f513e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3219c4-8de0-4276-b89a-0e83bed920aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad35a594-89c9-4901-91ca-1d4054f1f0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1506f38b-314b-4a5b-ad09-5d0260f0caa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db1cffd5-b384-4afa-8a1e-0c30ea20cb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bb5e66-ac69-4348-bb61-956f5041d2ca",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d247394d-f28a-43dd-865f-7d32fc389b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2621d07-f56e-4d35-8172-3673f4b84e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60e31a5-ca1a-4a9c-9ee6-2f21f2d9b668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4909f457-0d32-4144-b69b-6b6194845dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e49b4c0-a1d9-4e29-aade-58db2b34428c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8068189-2713-448c-9b9f-3fb98daa85c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b46f7d-aacb-439d-935e-f4c601aa1711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222d47d7-9be2-49d7-bdce-a759099b6f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b4a69c-d992-497c-85fb-31a32c81e14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750296ce-607a-47b1-982b-dc625c43046f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fe739a-e257-48a6-b8fe-fdfd66c840a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a59d488-616d-443d-b470-eb5fe53055a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62383f44-e564-4aae-8a65-b29e68092441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c00004e7-0a02-4e08-9d89-fd48e4a1dcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d18d556-4d69-4892-8884-d19580203bb7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe9060b-c5a0-4f33-8b27-54eaba608f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c312ffa-e530-41d4-8d5e-5e9ad4aeb4fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4b55fb-66f4-4a27-a01c-7abd8000fa3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b0c089-45c2-4354-972e-4ffcfd87386b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc671b76-38b4-42df-a5d0-cfe9d0ee65ff",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d774ce-d2b0-41d6-8046-fa5f53249017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381f101f-0bda-4861-817d-cd12e9083f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe222e3-185e-42e3-b788-79525839b512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9f6846-2852-43d3-8d28-ed179b6f6bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26d5cd3-ddf9-4ed3-b96f-598afb93315c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317e7c69-c28d-467e-a7b8-fd64266373f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9212c72e-c5cf-4d74-9e03-c14472d11edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220d703a-82b3-4ab5-82e9-5dd9c67618ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f303db6-ae5a-4810-b6bd-ac8e499c94fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43b622a-58c5-45db-ba2e-a78691231f2f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386dd791-faca-417f-9751-d7fdb2efcf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111747d9-b912-49f8-82c1-88e9934f0d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1c6557-2a5e-4886-be61-955e3b4a341c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10c41226-53f3-4260-92e8-b4190e7da232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95623154-5130-4d67-9a7e-a94cfad2b0a7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b077a5-6a87-4b14-92bd-11d911c873f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e476944-df26-4110-84aa-139764ac473d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d74eca-bd01-448e-8c40-7a3a3d51e02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89c0ecce-5ec5-4b00-8c80-6b8301408824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3ff4f4-25af-4401-8df9-05a908343c1f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0429df14-1691-4804-8a30-f2f55cc31bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4b14c3-37b8-4601-9c5e-ba635f46117f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6afadad-d1bd-49f0-9012-bf4eb2c53c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b82f04-6cdf-4cb0-8280-a7d13b8b3856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43abee5-27dc-44a0-b269-a42d164493e9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa8d835-6f3d-48a5-9b98-ba7d854a4ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badc25b0-998c-4338-9a4a-daaad071ce9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b8b452-a04e-4188-b249-2e6094a98019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a886ed82-8903-46f6-9367-95aaf612246b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f25bc80-42b1-4f4b-8697-8888e8ced5aa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0799bfc2-6307-4170-bc8b-ef8570db8467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aadd0ef0-558f-4866-bc2a-fa2efedc852f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d887af-d82a-48f9-82c4-276b10fc80c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "511e40f6-8ee0-407c-83fe-b39a9db18303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673bed9d-7f07-4cae-910e-1db8041541db",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ead7108-5d2d-4c83-8398-58fd76c38d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a8733b-2f4d-4064-a489-1f20ff9c16ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0243ed-990a-44bb-bbde-9ad8bbcd0431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f5c425-d2be-4209-91aa-9d03bf03be98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186d9140-3401-4cdc-9cf1-8c7a6b401dce",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc7146b-d98b-4f74-8558-10144d164bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8db100-77a9-4555-9725-aa0dd6aff2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54aa9291-fd92-4137-82fa-53f1ddb7da9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "502fc9c2-18bc-414e-9b8c-34fe180cb1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf32794-ee4d-4af9-861f-560e5893fa44",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec37a575-f55a-41c8-ab8f-189f6099494e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a303c0a-b8ff-4a78-8075-977ecf7a04e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c96efe4-c759-4709-9ea3-50057e7a684e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a054a6a5-d9af-4671-a63a-1e7f4633c24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fd628e-f0e8-4f20-9912-6993294a9047",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6cc6fe-a038-4db1-bb20-5c53eaaaa01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2302720f-d0ad-40f1-af60-c86395878040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed81f355-237c-4bbc-93b1-894e597b319b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fec01704-f508-492c-93d8-28e9cfb94388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8543f577-b66f-4943-a819-e317506e3329",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b6c1d7-6388-4855-b4ec-7fb870b48b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d29fb8-fc7c-4c25-9529-f25b960dbd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c4eae0-2396-4603-a988-9929d3714f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc6ae68-bc96-4c70-801c-23c3be57ae35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b002a19f-47b8-4d21-a520-740d2f0f7034",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b08fa7c-0995-4d11-9219-c8eb49194cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b2d17c-13d4-4836-9c67-0904d1ec6158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9371c1dd-6535-4d32-af84-d3892c960779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c9d626-ca5d-4d05-bc81-caecbb593f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b4a24e-9d55-430c-b9fd-814ae42ae2cf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111e5217-3d2a-4e13-952e-bdcf65f3abe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e40ff71-9c6b-4f93-9a06-2aec9ce17083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1c20db-f948-4be6-ac41-0a0c97869199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1403474-7f4d-4175-8fc9-f3d9b3e87ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b519f2e-d338-4a1f-b723-f2a28fd09b7e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41dd3ffe-666e-482a-a0dc-e38f43e09a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1772e499-00b2-41e3-88e5-c2a7baf504c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbac6be5-8dc9-4ef5-856a-1e9591abf8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8297a5-0198-4666-bac7-e82fb7a0af61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c04fe92-1609-4a02-9e1c-a3a0834a3f8c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e916f35-f1bd-42e5-a094-f57ca04738c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b08638-7d6b-489c-9c36-ea7515a7e417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59085dba-51cd-4649-bd74-ce693864712a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47c9f004-a2d8-486f-b6d7-c80a0a704d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514bbc42-24b2-44d9-ae2f-d2b21bd1c76d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0d036-8035-4b4c-a35e-245abe646912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd37d00-68a3-4d4a-be09-dcb4d4541069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c889150e-84b3-4541-ad2c-eaa84c50030b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a181c8c-a419-4fe9-a514-03a424672bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d34f28-3747-4729-8d47-980ae706de83",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162207fc-6311-499d-8fd1-6563ad58e20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8869f4-db24-45ab-806f-2db319c9a14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a666ec-8b4a-4107-94ca-3567f67e734a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31f5a421-16df-4490-ab66-550ad140c6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f012acff-63bb-4f1d-bfd0-10c9ea380ee2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185c6f24-5342-40be-8db0-8d30eaa02353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624d3230-143a-4c27-b57d-15c8c42ce6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18ffca5-7249-45de-b495-7e354d32eab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "347bc870-9ee5-44c4-88c5-b7b4ff299fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c84551b-3609-4e4a-a208-282bb6317704",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7751ee65-a8c8-426a-8825-8beddc11cc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691c3f36-ae9e-4d1c-9096-ce7fc4057703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c726d78c-6c8b-4397-8fb2-e45c1a387781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8e8efa-270e-4f8c-9864-7989d9ab5b85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b2a68d4-d016-499f-8421-d5dd8fcc4b62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9162bedb-5afd-44af-976e-f68f6860d87a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be4bd4c-2734-42da-80a0-e0e6cce05141",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9bb2f8-5c2c-4526-8c9c-4d09809446d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b6412f-b85b-4f49-8124-54404f28c870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbfad9d1-4122-4f18-be3e-ba07ee0e5a23"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "251040a2-415c-4bbe-98d9-c1fdf960b1c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae4a60c3-9d46-485d-8325-8f39142ee85f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e96f3152-da82-4173-ad57-17e463203c2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0601e84-2458-4b87-bc50-34b217a56941"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73b7cfbc-b82a-48d0-8ef1-9dbb594414d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "43859b14-469c-401a-93fa-c9c0869e9a08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "705789e5-de79-460c-a8cf-a4be031cda78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1792e3ad-2435-4933-b944-f041a0514a6b"
            }
          }
        ]
      },
      {
        "id": "bc22f39b-90cf-487f-89a9-cb0ab75f2260",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e3019da7-5030-45d8-905a-ff4f60428f05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27d9c94b-3416-422c-aa32-781281e42de2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eaf2a273-296f-438e-833a-f03dc66a7830",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28128b0a-f6ef-4e21-b7c0-993d1f130515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535b0112-f423-4051-b86b-af88b91c8144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80864251-65a1-459b-ae4c-899261387fe1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28505de3-09ab-4274-a135-bb08fceca609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea77db3-26ca-467c-98df-a6dbfca7902e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a398c75-e387-431b-84c6-9635a18965f2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a1b8eb-a4af-46a9-8804-dc6c4ed059d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd7d7e26-e38d-41e3-b38f-186b71952d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217ddb4f-a92b-40cc-b420-396a47a43a61",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d8c6c3-90e9-46a8-bdfb-735713b061ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70b9b73-a762-4721-87f8-e3deabad9c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6502faf0-94ca-41e2-89af-035c2ba96f15",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eada4293-59ab-4cd0-9780-bddfdaf1dabb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674502e9-699b-4149-bb5a-046e4dcb25ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a96e38-2ede-4b72-89e4-fdf4c1cf00c6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdc779d-9896-41f9-b13b-22c446375127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22809bf-9bc3-4707-9ec0-35505a1f08a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffca921-cbf3-4616-b70a-0e18f11147b7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ff5360-8b26-4418-9298-9bc269daf31d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8e1035-3a1c-40f3-abb5-a51cb992adbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b8920d-0472-4e14-9ea7-a6380bb077b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78d82af-9983-4732-9404-ad98ea00b4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f8994d-c027-4dce-8d28-209cd2028d77",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c145abd-b28a-443a-a6c1-83b6250580a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5219106-bf18-4860-9ae3-e35b4fed9add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51040574-8a3e-47f2-8fa4-6ab5c729cfc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5077c887-7ba1-42c0-a486-b547b4f23547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a42246-fbec-492c-94fd-cdfb427dbc85",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490cafb3-ad44-4391-b022-7f0ec8fafa52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d8df6b4-7398-46ee-b060-d0d69773d61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f4ae0c-9a36-4ad5-bbd1-a74f2e4fef8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6a90b4-0833-43cc-8f9f-3d5b5eb1ac19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13411e08-6b70-48cf-be85-3e689da9d534",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443923f8-7c87-46f2-9c2a-4f0a6ab61af0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00add830-5e2a-4b4c-8d6e-9cfea26c201b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bee26c4-cc7a-41d3-8d76-9fd90f294ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1483ec14-2eb0-48f1-9291-2b7ff8fb5507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e1bbef-35cf-4a18-bcf2-5af346b8dfd1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ae62ad-20f5-4393-a855-7fcaf6093e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63438d2-441f-48a1-aa4b-e1d1526887b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bc8ef8-6d38-42de-872e-81726859f661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d0ae42-9d7a-44dc-9698-1a93f5cf2f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0773ce77-a2e7-4b70-873a-64f36256aefc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df263965-0f15-4afb-81d2-db3c24c08aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2500d61d-7e39-4298-ab7d-9eafb80843ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251e8676-650b-43fd-bde7-0f9fc1b8f705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26000ad-ab56-48eb-bbca-7bfb904b49b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557d10d9-76a7-4c60-ac49-44763202d839",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bfac71-36f5-42e3-af36-8f82e4e11ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac91d3da-de3a-44ab-8f44-321762495fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed1fea8-e082-47d3-b024-08b2ee83df5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c54dec-c3fc-40d1-8910-1c656a563da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207552b2-fed3-4ec9-9c3d-147b14132678",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2830b6a7-7b80-4f57-8721-35e86ed9eb6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff0c14ec-b9bf-44b1-abb9-fee9cba236c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdecb7d3-f2b0-4d2c-9e6e-0c8eeb3c6901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50d6b78-ab9c-4593-877d-e2f6b1193e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3553c81a-2eba-4bc3-94de-c176f4af306b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b116fd4d-500b-43ee-b2b4-e60692a511fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f419cf0-3b72-44a8-bc60-0b31e6ec2a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b278c94-58a8-4844-8577-e81b1cbd0270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1082f856-44e6-43c3-85cf-81bee3255693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc5f224-f193-4a4a-ab39-36274b34164a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bb5092-baf3-4691-96be-5df7b23bd71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5358569c-242d-4191-b260-7f3db5864de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399f9b9a-a2e1-4e67-9e94-986a540fae92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b628c983-8f3a-4091-b2eb-4b1cb002abbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6c9462-7ce6-4d2a-a9ff-266e59c4a77c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985d82b4-415a-41f9-987e-6fd638f69397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32cd5dc-6640-4f47-95e3-ff08780a2f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743fb810-4fff-465f-9728-13c59e58ef51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058244d5-4bf8-4e41-871c-b127ca47c967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761e8e24-edc4-40fe-af44-3b61815ae10c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba992b99-a942-4b0b-8937-cd6a16da0600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a78909f-734d-49a3-aed8-b105811e537a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223f7503-dc04-4df4-a909-0bc521d80b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba35e8e-d661-4e6d-a72e-08a2b25a471a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcf921c-c49b-425b-b59c-ea05474bd314",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b962f003-724a-4d55-8f0c-6d2254a79243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239e013a-5f70-4e96-b952-f1f95b19930b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2f4829-4f86-4aec-9903-01e587f836e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443b1d5e-d8fc-413a-8fd6-4f2b545a2830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05e2d12-70b8-49ab-b878-6bc7b93e9500",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639754a6-d81b-494b-b377-f058e08a7597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1056f8dc-897e-46e8-b65c-945874f4a977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a91b4d7-9983-46ce-9d88-2d44637145cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eedc9984-1121-4ff4-b3a8-12d05a9228a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd9d7c3-8a1a-4fd7-95be-ba2e81625e27",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eef60b4-be34-4453-93a6-60b22f3d2d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3e0c74-a829-44ec-b0e4-eca25a45ef6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f15808e-d5ac-4660-b274-94fa0373181b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fcf74e0-cd0e-49b8-8e7e-f0f7a5705403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2b08d8-9c5c-4199-8013-3cb87e289a33",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b9f2c8-a9fa-4c47-af86-93d8ca6ba8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be16d26-b9d0-4086-8f10-c5995cfc5161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175c52be-dea2-4d3e-846d-60cee357ca39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b861aa92-e18d-49f1-ae3f-465371fbbc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff0ff06-e37f-46c4-85d5-a71dd560d2fa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e91a82d-df9a-4286-baa0-864e94a880ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936fb08b-b59c-473e-a0e9-d86abc1f7fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbfaf40-b0ab-451a-b614-132962d0d658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77c2d5f-bdf3-42f0-98d8-196b4c3cce0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6652cf80-20d8-4c5b-b23f-bfabd459d953",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6709e79c-02ad-4767-9634-4e72b04abe70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "494e7660-e56d-4389-8331-945823084abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57dbed1d-7290-4162-8bd3-3314826999f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65dd73e-2bb6-4159-b9d7-24134f8108a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac4fa69-e11f-468f-98f6-34e1974a7f3e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3fccb9-99c2-4e4d-a569-071c881b5608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dffb192c-70f5-49b9-a790-c06abba49a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbf0737-5a29-470b-8449-b725a03a4eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b25a5f0-a6db-4bc9-a971-022474af72b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3598f431-d05d-449d-b34a-3e6d4daafdde",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961f02e7-8c6a-4aa2-84bf-639ad447bfc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6380ea65-3c06-478b-8700-2e88791f3c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8367f5a0-a2a4-4d46-a6d3-9e2a0f06a9dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc20c18-88d2-4eec-9e4b-03c92e9db09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921f19ea-0c1a-4bb4-a74c-45ad086f251c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72363db7-3f11-4b3b-b726-dae3dd37fc37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d09eb5b-0592-4e93-91a7-215d732fba5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b1eb10-e204-4b04-bf66-f9acd2f27024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420b3ebe-6f3d-4c17-a7ee-8c64200a7a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a6b420-3d6d-438f-9961-d683159ebcd8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a6dcae-85e2-4fc4-b786-b81effbd7080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99641e88-11dd-4aa8-b2f9-ffa17a3f2ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84bc427-8bd8-4542-a02b-1e77ca86dfb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1314e360-db68-450d-be2f-f3a23afb024c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52546ac-33c0-4cb9-8e4b-9ed6e4b31384",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7002010f-5237-4ee8-8c47-2c9ed1fd4274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2486cdaf-8257-4a4f-bbc3-ca8be73d92aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d998e2ff-440e-4422-b5d2-c6bfa4e164f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a69b737-1f99-4e76-801a-5ccf668aed32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a65d5f-0316-46e8-9d46-c5ed3991f2cf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d267c9e-a906-46ed-9742-68146e4a81df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b5399cc-4415-4bf3-bad8-06155ffd4d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3abc9b-0fc3-48d9-9e08-d4bf6fd64a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a8eb5a-e8c0-469f-b30c-03ef83d802a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f852a9-ffa6-4894-9cbe-697ee306a603",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e15e8e-dd05-4272-b4db-e16e367f7c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c3717fa-d149-414d-a398-5448712cba2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7628de64-4cff-4f28-b6d8-63c19376e579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcbeae8-7d60-4f64-b42e-49a6c1d94478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a4a12f-0b26-4b45-9a42-965b2715820f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77320f25-4fc3-4c21-9774-4eea9ba44713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c80292-0689-4a84-a760-c9e53592e69e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa658fc-b446-457d-8155-9d704c62b288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe376ee-1ed3-42ee-b091-b2109016fe34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913f2f3b-5a8e-4b7c-8833-1785a46d4ccf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed986dd3-78f0-4d59-825a-960d33d45988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6504f1b-b208-41f1-ba05-9b7c1acfe543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62af90aa-0bec-4276-8bc7-5db4c40208b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf4d544-23aa-454d-a9de-151dc63b5ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a55bf45-0ef3-4e68-9622-052dba1a97a5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff058710-3a08-4f05-a858-d8b56521fd45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b871e6-6d6d-4277-97c8-2dcad7c29adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c4bf98-fa06-4867-a884-b65ae51ec1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c54710a-b92d-4404-9009-fd5a4c6bd680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3dafed-7666-4036-99ba-722fd7b83665",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43310d1-8ed2-41b0-ab6f-304458fc55be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d4d501-af91-4d0d-a407-de9803e103e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352db009-044e-449f-b00c-397908eb57e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8445ce9c-bb39-4b9e-84b9-f5f993c8430a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062519d1-e061-44af-bc23-5ec7c6179c1a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a408c764-8dd6-49eb-8fd1-d1d1ae29e5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01fdf155-2c5a-4744-9587-825ec5b38ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b16f89-93f0-48d0-9146-67d0f481df7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569c0443-eaab-485a-9c64-d081600fe268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1c277a-ee24-4a19-8e89-b19afe357375",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90bd182-8ea1-41e8-a082-6c078f1a8a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ad6cc7-3854-471b-97de-a5f950a76461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39b5a1a-0e9d-47f2-b1b3-007203b64dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11422b9-9474-4b1d-ae4d-53597e99debc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8302590b-7bb8-4923-9c0c-72707075523e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3672f5c-ee27-443c-b40a-61974cfb2564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd18d954-64b5-4481-869a-574ccddb8cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6191ab1-d212-4d7a-a5ff-efa3db5c9102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1630d54-756f-45d7-895c-74f955ef7f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae85d3cd-442e-4fad-a975-c31db4fe3548",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9390578d-752c-47d3-b0a4-8e62b64fc80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2075cad-b4c0-4c9b-8376-5154068685b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e16ccc2-1163-4856-9d24-b727c3b01788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9de76e9-c899-4758-ab2c-77c95462f544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ea5e57-ee69-4a9f-b648-1cbe4257100c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a5cef1-bff6-4ee4-aed4-3f08e90b1314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8ef300-14d3-49b1-bad3-0c60a5b19fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5f476b-5fbd-40fa-b849-6b89e5dc7b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e3a50a-e2aa-4731-bd31-7ad504f32621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e22f19-d078-49f4-8f2e-ad4f8a094164",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03c21d1-f38a-4692-be80-141fa19faadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47375889-d80b-46d9-9311-a0744d3e933b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af40526-8d30-4e3c-828f-541b741c596f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed348b65-5473-4201-b827-344c1436abe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38369bc-6b8c-4d03-86b1-6df8ccece1fb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dfbaed-1af7-4558-b0db-e53698ffeefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a71239-b642-4aa0-992c-60eb10ad4293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320f338e-c7b7-4540-952d-5a531f1e76d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d4dfd1-94ff-4838-b564-12b1609e52f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45baa92-4d75-428c-9a57-3bd563fca85e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db04ca34-a8e3-4c23-b26b-61049b5a8669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d8d00c-c19f-490d-a68f-3fb208876931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fda49cb-2079-4037-b74b-f7a5207ca934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95c00d6-7890-430b-8f3a-9f060358fa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a1498d-fa98-4d4f-bea6-513f35e59555",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01494ed9-2a5e-4712-aba3-efe6224f3c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdcb19b6-f30e-492a-a3db-a569761ee7f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd50e5bc-96a7-4be9-b95a-0439baac2ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e973b4-e754-4cb8-b8ac-83959f615026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4262c0d5-7936-49df-9158-d25d75e8bb39",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b71840-c938-46ae-9a78-1fa255359435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94fdb1d8-dfda-4ee4-9c09-29081f7c7d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c9854f-a031-4e01-aa62-84ba1f7afa11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de4e2f8-e2bb-46f7-b305-41c14a2807b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f91c1-e11a-4365-86a4-fed8678def46",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e466dd-8489-4fc7-a919-be8305d60582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be78171-c839-4a45-b557-4b728681f235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d779a75b-98e3-4829-b0d7-5e9c245ec570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170d2d63-f8b5-4298-a7d7-fb1e9f9103bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8763849-e948-4985-8bdd-15e72550e4fb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99d0d16-3712-4f5b-ba62-32c073635787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f08798-bdfc-46eb-9fa1-68eb178c4769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d6543b-2082-4e37-8879-9dcc11651eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16bb571f-a58a-446b-8167-80985e5db8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe82ae2-ef6e-4a39-a48b-8c2fdaf5cc96",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61de436b-7060-4def-985e-9e3a035f1aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54a8fbf-de88-4ea0-aff9-922d536c3733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fdda1f-e874-4092-9b3d-f990ae24bcd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a3cb72-071c-45b5-8f72-6018093d70ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2fd8fe-cd55-4840-867b-b2e1a1ca809f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0382e548-89e6-414c-8501-2312f34f8d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dca7d1-4963-4e8b-a46a-fa4cdc2c5692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c63cb98-0c22-4b22-992c-e91a8682137d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4ede23-9685-4bf6-874a-076fa3b080c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096f91c7-b41e-4880-bddd-92655ec76ec6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef81537e-a123-42d3-acf8-aac4392d9278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f00d8c-82c3-4453-9a52-2bd14d9b01fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95fb878-119e-4f2d-8fed-b84f712c2b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb66536a-53db-4348-8da3-2d8f95bac0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebbf6cb-2cb2-47ef-b2be-fa17e4b6a374",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afa966e-e413-4825-a837-b57af4b5fad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2ed298-0f0e-47f8-b5a6-acc7ca198afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777d590c-34c7-48f2-9d5c-23c03fbd58e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ac963e-c0a6-4486-9fee-ac562fa05f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffef855-1ddf-455e-b2bc-b267a531e481",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262cdbb7-d0ff-4bea-bfd3-9e140fed1f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8cf5afe-7c5b-4d4e-b260-eb0e028287f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab55ea81-e524-4165-b65b-61fb775769dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee864b1-ad2e-4976-8e78-27bf8a4591c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fdbd02-732b-4e09-8bb2-22425b059045",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9823f1b8-caf9-42cd-b134-c329bd981616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764f1bc8-6559-4e88-b2db-2e47ed7301bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e51c421-5039-474f-bcb7-7021c4bf7ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420bba90-23c9-4a84-9b79-144c1f99f152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef20a4b-d8f6-4f93-9837-f6b10e53b51a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f013b05b-5b19-436f-a762-0fc9cbd404cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8823c1b8-42a1-49ec-b0c9-ed6524a3b67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b091065-7762-4721-b0cd-0021f03eb05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be0b109-c8ef-4965-b5d0-f89726c30ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895b61ad-fceb-4e11-afc4-c7d0ea6b331c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a24840-e3bb-448f-a974-d8a0a7724a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed89613-a8fd-48b8-9a35-8bbff6cd5ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77524c4-e226-4fba-8795-57ebfc852159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e893306-00fc-47ef-8c1b-bceb5d44f5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4d3920-afd4-422d-b405-5f8c69d8e571",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ff5dcb-418b-4911-abe7-3e9446ad9903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52c1769-9c04-4c1b-97e6-f0a003414161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88ca2cd-79d1-4ec2-bc56-8e20946c9f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3e12c3-39a5-4740-b11a-24cae6c6c793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95e7ea0-efc6-4816-b881-a6d4129a7f0b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b57f72b-9815-4bed-9e33-94078df433b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8497be3b-0d93-4378-8524-cc874fd57334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a983a9bd-1a4a-4be7-a19c-e9b3ad505648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e7b52f-b206-48a2-8a53-d42375661485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f086dc-3677-409e-b24f-1bd5e91abd7c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a33c8a2-975c-477b-a291-7cadb110195e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f78bd6e-71f0-4ef5-ae32-3e56ecfab857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d195f3d5-97a5-488b-995e-d88d27111eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832ad393-f659-43a7-83c6-2606c460e213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2762d39e-d62c-4ce9-bf6f-9f46a63dce46",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9b4e62-6cf3-4851-b6af-96d3cb950d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb9950e-f06b-41bd-8e27-eff8b615da57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b313ee-d5ff-491f-a133-7067e4000d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb78fc69-a9d5-4587-9bbc-cc46be919fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabb1706-22ea-40d2-a901-2afc89c368aa",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be32ea17-7936-4d6a-b04c-35ebb76d2362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872ee150-247b-4e9f-a28a-6248cbe374e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4b0600-90fe-4e78-a2fb-ac6208dc9be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1db047-45cd-42a2-b568-36255809f0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7ef3d0-5caf-45bd-8771-be999c883e67",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89488d68-22b6-49fb-a91e-0b606e5daeb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b91ed37-9d18-486c-b0d8-39c6aa5f20ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74eef174-f034-4219-8d98-56c6087e50f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c952d7-b9e3-4108-8d5a-47080b10d409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d74b6cb-4d40-45a4-abd3-a47434125abb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1d0885-7ee7-4a6d-9fce-d39e6c888e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4657a687-8aa5-44d2-b262-dce051767bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d520f4e-0a7d-4724-9304-0a3bee9b9d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbccfdc-28c8-4e94-8ca3-d60ebb169f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411d9f1c-dc00-4fe4-b41a-efcfebc4d159",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c017925f-0300-4014-9a5c-a1ef3d182a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bd4b61-a6e5-4da5-925c-66d3a3133a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d919f917-021e-4d23-87f9-24d9f27470da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6e6dce-28cb-4815-be4d-db92d48135fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c97314f-3b93-4d2a-b085-955523f414c6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa667002-e192-4ce8-971f-0e6fcd6096d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6acecd0f-ef3b-4e32-84bd-e9d00a0aac2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d0936c-02dc-4aac-a1d9-addb32dc2f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f24808-dfd6-4cf6-9610-730f0ccb00b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8b0985-63f6-48ac-8651-e06505428ecc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6416c490-f9c8-4fc5-b66b-3527738aaabf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4565a0-865b-44de-bf11-e1bc45348103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d693863d-7391-4fce-9809-0dd75db39cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e26f68d-a132-4c20-a7ee-8bc8e6702cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911dbc38-c28f-444b-b1b0-bd0782554de4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fee1ff-3403-4b2d-8f00-8416debff7f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5ee5cb7-ae09-4a1e-b609-9b8a809edb80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291063df-9521-400c-9eca-d3d5e48a7912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4748b00-0f80-40ee-b91f-584cd721519b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50ab2d8-3881-4547-aaef-ced7137f07ea",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8839027a-18c0-436d-9296-46c198343d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2679936-b826-4111-a868-a71cd7d7458f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6488476c-2117-4a3b-b01b-cb50a64ab3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a481f7-cdf4-4f32-afbb-0c229af20365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8105122-7253-4dd3-b582-8a65cf317c71",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6865109c-afbd-42d7-ba53-ccaedbc49035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d20912f6-b274-45aa-8002-df4132ba3932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9497b0c-cf85-4980-9985-e68ae9d284ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c24f72-ab15-4f9b-9cfc-430a216c626c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496a17f5-7543-4f52-aacf-83342902fe07",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd88b3a-8654-414d-894c-90f46a43ad53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8145770-cd20-4e5f-a308-3cf55a6eb891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5630f9-9011-4561-a3f5-571189477f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1627f21c-2ba2-497c-995a-6b8fa74373a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43698d6c-aef6-44ce-ae45-198d25b61854",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9278d0e-b85d-4150-a933-bdf1ae42dc81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197066cf-851e-44cd-9586-8b4d8044e35e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3aee3f-23b3-4a03-80c4-8cc5c4d8a121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c411c39-5b69-4df3-a953-6abab7b61953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcb2415-a75b-4af5-af3a-30d6bb8c2b45",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b6d502-41e9-446f-a630-b3cfba310e44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61e54f13-51af-4dbb-8082-638bf08ee4b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5884690d-78a0-4843-8ade-842b3ff2fb82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2ee1e4-1c7f-42f4-b35c-8b7d36e8648d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742a49ba-064e-430d-be63-d603577067fa",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf200a2-a7a0-4ae5-8603-f203d4a4b874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99fd3f84-eeba-439f-b290-491cf5fae9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bad238-2f98-4772-a853-d979e653616b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91375ac-9dae-486c-9cdb-ac3da99e3cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71168d25-705b-4ea5-bed5-9da251e01070",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62954536-0ba9-4e11-b2b0-41cb682eb632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61ca44d6-b2b9-4f4e-a5a0-9bb01f8af44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa00cc8-84b3-4366-a24f-739fcd86e663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9394151-8577-431c-a595-8ca2da542979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efe8929-8ff8-43bb-b763-3fc67a9fb359",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a84105-9dbd-4077-8200-a3e127d869df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6be79fa7-650c-4047-ad24-92f1fcfdda7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7860ad40-6106-4b0e-9b0a-d538859535d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad9edf4-24ae-4bd4-8f94-f1138371de27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a4feaf-7358-45a6-bd36-aac0e294a86a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968d655b-8233-4d3b-8c50-2a37b83f82d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb7ae6a-bbd1-4b59-9fcf-550a6f5e9e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af773a1c-cec4-4f0e-889e-3610394ec38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c434d34-05a1-4328-ab9a-9742764edfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b956c6e2-20ac-4ad6-b016-3879ff89ff3b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba57b10-ea13-4a49-94ad-db8ea84c9dc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68484fb7-1fd8-4850-8360-da7014b95a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd827df-ca69-47b2-8504-6e8fd1ebf7a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffb27e8-2c68-4c99-8ced-71c67663e47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8724cad-c228-4c0c-8f02-d02f3ff210ef",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745fd7d0-4799-4755-a84d-2785cfef982a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d96b301-033f-4e83-9a46-c68b64750faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171d5061-30a5-4fd2-9fd9-c8e9614c2fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97daeb1-79d3-45c0-99b0-18c17b9fc4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d9800b-3330-4fd2-8ad8-a6f3d0419584",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacfbae0-bfdb-4bbb-bd12-e4264a6686c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d016285-d788-491f-91cc-0caa83bd6554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efccfbd9-fc27-485b-ad03-a2806bb541ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3bbbd3-6686-4b0f-bde1-34caaf9c254d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e86584-3acb-479e-acea-879c6ea5760a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838ad018-231e-42de-811d-2b17ed3ba2d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2ba2126-ad0e-4ab3-98e4-9c0861277fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a742455-5aa9-429b-9815-a596b9cdb987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d526bd3-a618-4d4b-ad86-2e60bf5e06f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9366f1f6-e07a-4385-9de5-849b433639d1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5db5abc-aeec-4059-81c0-1b4506011fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3151c5-979c-44de-a477-607f0c8c9245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69122d4b-7596-4abd-a53f-d776875d9f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e980366-2a7d-4e5c-b372-54d8e87703aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f55fbda-2c7b-4225-b63d-880b0335e162",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5678f6cd-36ad-43f1-85cd-87f1da364949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9870ab70-b284-4e81-a35e-9e82536f2dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae00abc1-b40f-46f6-a8c7-90b7bf866c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6d5372-9f85-448b-9139-f65ea33d868b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7271ed2-e905-476e-8df4-0060aa526cb3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0941ee79-1ee6-4677-892c-c0fb1499c08d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a4859c-a0b1-4cc8-b432-fd86693f5eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4d64ba-f01d-417d-b8c3-0b2ee7b70725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c86421-43b8-4847-8034-170248122baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c14eec-02db-4522-a00e-aeeb2c6ebc9b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bcb1eb-52da-4eae-999e-842141f62016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ddac03b-ca9a-4306-a8fc-10e267088743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5847e84c-255d-4089-a45b-fa35f5a9e3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f55114c-b9cd-43b9-95d6-2df11d022856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fac7b7-587a-4ac3-8e2b-a667ba438d68",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1900d906-4f3f-4788-aa38-152e75061475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b601d7-45b3-4cfe-b584-252af16adb6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c76ab9-bf32-4d04-98d6-5f192c33f6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec33f49e-0c2c-44c4-9ea4-f16f5e78b888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9f221f-2afd-4cb2-811e-8d352c0d9991",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0635cc10-e6fc-45de-9d32-17cfc29843b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f12c88-b3a0-4abc-ba5c-7bf6257bb80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e6da27-cf7d-4bf4-a5fa-fc0751fdf401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab5cde8-5d95-491a-8c7e-8a7979d69d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db05cf14-b367-4564-96ff-d82308642456",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c1543a-a65b-421b-a086-686a480bce92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f8ba5b-ee61-4d2f-b6f5-c60db2c4e237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2e83c7-7de8-4a8e-9a23-3872fe5d1118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40554d1-1af1-4ab3-a6d5-aad030b109b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98ff106-1ef4-47fb-9b03-66d6e6c1fb86",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd00a049-d54a-495a-974c-56caf1d7efcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b2f0d4e-26a7-4078-ac08-ff604378b7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3338f66e-e0a4-4bfa-b696-17ae67da16ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985dd92b-d19a-4047-8d13-9ca988c45ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2beab264-d96e-42dd-a492-96a3d9db4c85",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50158a2-2571-40fc-9548-cc6a321f2aee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8113ba4d-6980-4013-bdff-251abc8fa9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85297da2-e904-4a80-9c45-93b8847e4123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a73696-b5b0-4638-b971-5bb3ca9c5915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e33bb7-7175-4728-a788-dddfbbc4b2c1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a1e62b-3bf6-431a-aec3-cc3f277ecc7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9703b97e-9f04-42fd-ac46-334a5efa4365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0979f87-e4de-4673-89bc-67f70561ebe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5dc4b36-e4d9-4b53-8a43-dc85e4f62ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd77145-01b1-477a-89fa-a3c970f5d609",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c92f1dc-f3ec-4d82-85c0-631c90b7e418",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c4f0f5-2f17-4320-9288-4a3baca288cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d5e983-55bb-4d80-bdd9-4e10e6150a55",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b827285e-56f9-4660-9519-828430ab1dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b016f1f-7bc6-4fac-ad26-ff15fe1a7416",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d8aa4d-b25b-4dce-b093-f4a0bfa2a860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7fc19bc-5566-409c-89dc-b132dd347d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99493d8c-7975-48d5-b5aa-6d2d93e8070c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f25e42-2760-475b-ad83-c11a4dae581f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e1e271-1893-4811-8977-93ccc2001241",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7b80ad-aff5-4740-86db-5866f64c119b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d2c4d13-9bbe-4c09-a011-7b5aceb494b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef69d937-577b-4c56-a860-d3fb14fdc741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a9cbb3-4089-4ab0-ad36-505e1b4287ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29bbba5-1919-4436-b101-b805fd6dca0c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5088659e-f76a-4ce0-ae60-aeedcc81e3a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "459bb681-15cd-4714-8436-ffd065a30c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777a595b-6da5-4004-b9bd-10b59b7d91ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4642b266-5d49-4021-a529-4b87864c472f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65e0c5f-bc84-4506-a445-6cbeaaa583c9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e65470-f124-4514-98ef-73504f6cd5cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2faab5ad-9716-48c6-a490-5c0ac7f45afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d8f85a-9525-4d57-b3aa-051d98e8e9dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d724ba02-064a-4f7f-ace3-067b0e5c387a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28d414f-79f5-4448-aed2-7a23008576dc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11881f4c-d542-4a85-96d9-274a5b692d56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "313cb62c-c7af-4415-8a3d-166c5199a939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f15ed3-aead-438c-b70a-259abc0a23e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0641b09f-86e5-4b83-8a36-1ac7857eedfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98221280-bc6f-4db7-b448-4b87a8b37935",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e36519-722f-4860-9e0a-729b6a38f490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1123cd9-accd-4cb0-9073-8b2ffb2bdfe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2118ebe-44e0-45d3-97bb-2ab0b2390236",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6dec8e-9ebf-4154-8dce-265b77105869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81722177-0ef4-45e9-a1e3-8792a99383ca",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44de439f-a6ce-4082-9d25-4520a186bc3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a3517e-014f-4ef0-8373-318eb8be6c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440b65fb-ebde-430b-9590-c1a2f43d1bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0db04a-5524-48b6-8fdf-e996330e396c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "013438b0-cd47-4c91-812d-35610460a653",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "412d0661-e626-41fa-8e42-4cd86c9cd0ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68fa4d0e-65ae-4600-83b2-a485cf876402",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1822c1d-36ad-4105-b059-5797fb5f9bde"
                    }
                  }
                ]
              },
              {
                "id": "bc8f023f-cebb-4a8b-83c1-0f73388fa9c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28048d19-0cc6-4d90-a1c4-59dec04c4468",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7983c5-155d-4728-9642-c95b25eec509",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0f0cb543-d76a-42e0-a20a-5ed3e682882d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed73762-c0ce-4e0a-9d02-b0c7ac29968d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6cc764e-3b91-4d8f-ab69-b9048b971bc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4378800-41e4-4a9c-a314-28fa020b07ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23573b2d-78bf-43fb-bb1f-494b75fc2433"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6bec590-2c50-4c0d-ae83-5cebd62d0c4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16e091b1-758c-4b33-83fa-a41af0695108"
                    }
                  }
                ]
              },
              {
                "id": "4fd03e33-fdc6-4391-8991-42b409a78897",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "959a4722-1932-4e7b-b918-8fa94f2e0f6f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8910d0-e0d6-4d46-a851-cf615e48d4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1555c912-0e10-4860-8316-811a8823e053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ef9e46-d598-467b-99be-be4c1d6080d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77137488-2216-49f4-95c8-3534cdecf610"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1769b961-fe6f-4897-a888-57f359abf8b2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5145832-9835-4dec-a104-ae79c4c2ef9f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea8d940e-7778-4cba-9e54-882b1c46be5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b52c1832-6575-4dfa-ad55-9c382684e741"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92df1ad4-6335-4604-be8b-e89267224a7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a3269c0-e62b-48cf-8234-177f19cca720"
                    }
                  }
                ]
              },
              {
                "id": "662c6845-3a44-49a9-bbf2-cfb8831209d0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2abab970-3ba1-41ac-838c-8bd9139d620d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "947a2fd8-6f00-485d-bd15-a8372e2ac6c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "759ef765-3662-4812-9f41-311ac0a212ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28f97c67-bfd6-4376-8f6c-521a0b154a9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8e5a0b4-275e-41f9-978d-b1919350f375",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "53b5a6e2-ba7f-48bd-82ac-cecc973500a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02178cb1-ab7c-4c23-a7c7-1fcd66de5391",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d48f1ca4-7e3f-4672-a4d6-3e4e6624bebb"
            }
          }
        ]
      },
      {
        "id": "d1dff80b-c36b-4ec7-a0de-4c6da310f0c8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9345551d-d3f8-4e6a-9410-8c96f013ef9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f7e7f9d-3ddb-4ce2-bfd6-1e7ee2b84a5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b9d59e2-dae1-4099-a3ec-e89770913639",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743b3320-3624-44d3-9ad6-156f029d7947",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5f3b45e9-168d-4e5c-bb2a-688f77b9fae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406ba992-8d56-407d-9ecf-a0da19f1b367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb7e13f0-a3d1-4f82-8752-2614238daff2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76e03304-0e2c-453d-971d-b4e1af96e42c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11070958-dc86-49ce-9b48-74b26cb5b549"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aff8c043-0180-45fe-882c-612d3395e036",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51285d0a-2d2c-48d7-8332-83857783693c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18301ad9-6d9e-48fc-b505-ecb036eaa2ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "aa5668b5-dd99-4de9-8ce9-1d99f7a1f9ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8b39391-6294-48e2-a707-85aac4a790b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ceed10a-7ebe-4a17-bc56-2495f61daf20"
            }
          }
        ]
      },
      {
        "id": "634cc696-108c-41c7-81d4-a6078d973cc3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "af32d4b1-78fe-4dfc-8714-c504c14f5e66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "002f5d26-edd5-469d-86f0-15287d1e27dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e1ae691-4c3a-417f-9151-257d55612815",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08a505c-ca37-4e85-8d5e-d4d0854a5dd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "789fd86c-f121-4b42-8f86-aedaa5788409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d120f2c-cb56-45a3-b772-612cad6acd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8051318d-d59d-4491-8afa-48e10c7e30c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d4791da-502b-4345-8cc2-ae3977c44c35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f01fb04-3f6a-4ca1-8a9e-a134b4cacc65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3a7a3f6-5f61-4cbd-9092-a19140431652",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e192a41f-fb30-4d67-b98c-6abb2a52805f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9b35859-ed70-42d4-8d92-eb30ee3f8552",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "553de099-9f52-467f-b9ff-244a4eb49e7a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05fa4a57-6e37-4a49-8650-bb4a4ad45436",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dbbf9a5-63be-4e5e-ab49-f8d751081df8"
            }
          }
        ]
      },
      {
        "id": "058ee4f3-0b2e-4d42-bb12-90421951aa19",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0eb96112-8e49-4ef1-8f15-f579353f41a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f69e34d-6a95-4f96-9cf7-7bd8b95848e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3ca996e-ec27-479b-a975-5aa2ad1aa188",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6511322-7919-494e-acb8-6fe797cb4472",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce96237c-3926-4582-ac12-8344e7c75bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62e4500-a112-4381-97f0-82acca63b189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e42ee45-8abb-44ef-b0e1-3af194707df4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "178e8b06-0713-434b-bb00-a0b5c931aea4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "127da3f6-fda7-4952-9b29-bed56930dd04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ba6ebe8-c138-452c-b254-06865355f0c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90cfa730-a671-4244-8cab-80fc1ddd512a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31c3b88b-1892-456d-94af-bd5429c193e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "73e0d2f0-6c6a-4651-9875-77a7c2084046"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7facfa35-38bc-469d-bd54-53b3205a90b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30a43f04-568c-44e6-b5af-34092d07acfb"
            }
          }
        ]
      },
      {
        "id": "f2aaae70-dc10-429d-8753-f0f6393ed829",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb924fbc-0354-40f2-97b0-8e2403ff36d0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6aed2825-46fc-4622-9874-4eea3c9f3704",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4b25f7c1-5ef4-4a7f-84bc-b9e1a2fa4999",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00c09ca3-abf7-4cc0-aca9-3b642ac9784e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83b159fb-fcb4-4132-b298-722e37124637",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 126.25964912280693,
      "responseMin": 6,
      "responseMax": 983,
      "responseSd": 94.23335696444849,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706834076302,
      "completed": 1706834121701
    },
    "executions": [
      {
        "id": "dc2564c1-be9d-4ebc-b450-80837de11e6d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e6a40703-7723-4dbd-a480-779d1427d397",
          "httpRequestId": "467d0aac-502a-413a-a9aa-dc8ca271e7c3"
        },
        "item": {
          "id": "dc2564c1-be9d-4ebc-b450-80837de11e6d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "de383bff-856f-4e38-8124-81f91e52ea18",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "58eae298-d8e6-446b-a9de-bdb407df7752",
        "cursor": {
          "ref": "d9a8756c-455d-46a5-bf6a-05f7e9df7f23",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "07f7dd49-f0c0-48d9-a78c-82bd8d707a3f"
        },
        "item": {
          "id": "58eae298-d8e6-446b-a9de-bdb407df7752",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8a2b9c42-0f50-4c97-a986-06d568a5d503",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "fce09415-4883-412a-a755-318eb4814f5e",
        "cursor": {
          "ref": "7ae7c077-bb1e-42d8-817e-ea96f348c2cb",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7c01be40-3a4f-4bfb-9304-761b2e0df0c1"
        },
        "item": {
          "id": "fce09415-4883-412a-a755-318eb4814f5e",
          "name": "did_json"
        },
        "response": {
          "id": "6267ad40-619d-4765-8999-6155390eb98b",
          "status": "OK",
          "code": 200,
          "responseTime": 369,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8baf0fb4-aa88-487d-9cdd-e1f4c0924e32",
        "cursor": {
          "ref": "2143ff41-9568-4eb3-bba0-54800a83049b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "470b494b-7507-4212-99be-3b9a1d656b62"
        },
        "item": {
          "id": "8baf0fb4-aa88-487d-9cdd-e1f4c0924e32",
          "name": "did:invalid"
        },
        "response": {
          "id": "fdfbf4f9-152a-42e4-b56c-3c071dfcccd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8baf0fb4-aa88-487d-9cdd-e1f4c0924e32",
        "cursor": {
          "ref": "2143ff41-9568-4eb3-bba0-54800a83049b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "470b494b-7507-4212-99be-3b9a1d656b62"
        },
        "item": {
          "id": "8baf0fb4-aa88-487d-9cdd-e1f4c0924e32",
          "name": "did:invalid"
        },
        "response": {
          "id": "fdfbf4f9-152a-42e4-b56c-3c071dfcccd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a34996b-b3aa-45b6-b070-dc6b891a6090",
        "cursor": {
          "ref": "c87df502-7df5-4dcd-83a9-73da60977c3e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2114fecd-d852-487b-b417-b3fc99cfb4f5"
        },
        "item": {
          "id": "8a34996b-b3aa-45b6-b070-dc6b891a6090",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4663fab6-a603-4391-8a39-1e6488c82c57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 157,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7fc39e-759d-421e-a1eb-6c951d1e9e3b",
        "cursor": {
          "ref": "78a6d39c-5a63-4e63-a4f9-b61a6401f2d9",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "00e42b3f-b5e7-4767-bcc1-e22a799c30f0"
        },
        "item": {
          "id": "4e7fc39e-759d-421e-a1eb-6c951d1e9e3b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2bc1a3a1-4298-476f-a3bd-02451f2b881c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd5491c-14b3-4fa4-a836-0d571d9d9fb9",
        "cursor": {
          "ref": "dd7b9758-ca5b-461d-b92c-ce703a19f1ee",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dfb7cb56-fbd8-4bfd-8d3a-e68be43b7e27"
        },
        "item": {
          "id": "7bd5491c-14b3-4fa4-a836-0d571d9d9fb9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "400c8352-78f3-4c70-b771-9c56ce669467",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac5e361-3f0d-4851-8291-7641ac164887",
        "cursor": {
          "ref": "ae76b683-d1e3-4d3e-9973-597afb0d3820",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5b3e3d65-c49c-450d-b087-62d42bd30ed8"
        },
        "item": {
          "id": "3ac5e361-3f0d-4851-8291-7641ac164887",
          "name": "identifiers"
        },
        "response": {
          "id": "48a5e53d-ef43-43a4-b212-8aaeffa2fcc3",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08c7180-154c-4792-87d2-ac590c38366c",
        "cursor": {
          "ref": "825b0adb-135d-4d9f-a804-3308bb456c66",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4e151565-8094-45bf-a52a-67f559cd33fd"
        },
        "item": {
          "id": "e08c7180-154c-4792-87d2-ac590c38366c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "40fdf146-22d7-422f-9401-b7687d323738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9812bb7-b87f-4347-a0e0-5e1d79132fb6",
        "cursor": {
          "ref": "46a23848-56a1-4847-b8b3-c19884624bf0",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "99aa57cd-0225-4bf4-87a5-ada4e9ae9369"
        },
        "item": {
          "id": "d9812bb7-b87f-4347-a0e0-5e1d79132fb6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a0689720-409b-41cb-bac8-c2507eda9f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0541b184-b5e5-4e68-8227-59c62bcb2fc4",
        "cursor": {
          "ref": "3ce52fcd-622f-4f8f-8784-cbf301f5cb28",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6df4580c-21ce-40fe-9c94-66d22df7dfaf"
        },
        "item": {
          "id": "0541b184-b5e5-4e68-8227-59c62bcb2fc4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b9619aaf-b6d3-49ce-9ec1-03168e1ce60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eccdfe1-be99-4412-9d7d-ad88c11a8e4e",
        "cursor": {
          "ref": "0d7dc86a-1d7b-45b9-9196-ba243cad7fa6",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4271bf6c-853d-4859-9f2f-b47674f50707"
        },
        "item": {
          "id": "2eccdfe1-be99-4412-9d7d-ad88c11a8e4e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "51baad77-b838-4819-af79-c513428abe79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27b8da7-ed68-40f2-94a8-eaf4e951b974",
        "cursor": {
          "ref": "c40c4af7-ee01-4058-9cae-e349905bb015",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a78b2255-3461-4808-92cb-fe065f9f1d0e"
        },
        "item": {
          "id": "d27b8da7-ed68-40f2-94a8-eaf4e951b974",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "36a12bd8-b547-46f3-ab1b-5f055c2652e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854a5af1-4ac3-4d1b-b59f-65e8033bee17",
        "cursor": {
          "ref": "abf5def5-b139-4ff0-ac1e-387ca7e7e5c0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "730ae9e0-1e11-4769-9682-70e0d0972e03"
        },
        "item": {
          "id": "854a5af1-4ac3-4d1b-b59f-65e8033bee17",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5c06466a-3733-48aa-a62d-2274279b6b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a4ff0d-1a50-437e-83bd-ae97bab98b59",
        "cursor": {
          "ref": "f934b4c3-f7b8-4d0a-b903-cfe6efaa4615",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9c8eb4ab-d425-4944-b807-c5562e0b2313"
        },
        "item": {
          "id": "95a4ff0d-1a50-437e-83bd-ae97bab98b59",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "eac0dd18-13ad-4124-a775-e8295a368b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d7c548-7ebd-41b8-83ce-4c22235f6a72",
        "cursor": {
          "ref": "4f23e1e1-981a-4b33-a8dc-2c2f8670c154",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "103fc6c7-fc51-4b42-8f82-593250079ed1"
        },
        "item": {
          "id": "a6d7c548-7ebd-41b8-83ce-4c22235f6a72",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ff8e1c9d-d9c4-43e5-9619-62f0c238af21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30df6746-82fc-48f5-b0cb-e6f69b957cb2",
        "cursor": {
          "ref": "020144b5-e798-4187-8adb-8b71c9c48e54",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "296b4460-1282-4efd-a765-0e05672a5fd5"
        },
        "item": {
          "id": "30df6746-82fc-48f5-b0cb-e6f69b957cb2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ed46fa42-8ce7-4464-95af-785c82af0c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe9d9fa-e121-4988-84b2-6673d2546ab2",
        "cursor": {
          "ref": "7ee2a6ee-3db0-4949-a138-4e6943da326a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ecd717ef-37e7-4c9e-ba2c-43c888edf30c"
        },
        "item": {
          "id": "cfe9d9fa-e121-4988-84b2-6673d2546ab2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2d0ca8ec-0895-43b6-91d9-aee876068dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7cfa57-f4a7-4866-9218-03defc0cbece",
        "cursor": {
          "ref": "b1750ff0-1af6-4604-a407-5756477a65f4",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "115ffd1c-9295-4b91-b74b-a7fb65b1f8b7"
        },
        "item": {
          "id": "bf7cfa57-f4a7-4866-9218-03defc0cbece",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f269d34d-8539-4bfb-8444-ec6327b8981e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122bc236-52ae-4d77-a101-74442bdda8ae",
        "cursor": {
          "ref": "1c8b6e2c-f251-4faf-a22a-d1130a69de05",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c3853653-563c-4e39-8bd6-9f763c1b43be"
        },
        "item": {
          "id": "122bc236-52ae-4d77-a101-74442bdda8ae",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "33b41a9b-875a-4c66-a041-7d5a09e6f5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4616c478-c976-4906-8ba4-7b67041d258e",
        "cursor": {
          "ref": "d4b0f7e4-f608-4513-845c-c11f597034c9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "168e1316-9706-46aa-952a-183f0eedf6f7"
        },
        "item": {
          "id": "4616c478-c976-4906-8ba4-7b67041d258e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9161ed3d-9991-443e-a15a-9ba5d1d5333a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5333c0e-a421-41ee-9762-9c4d81216da5",
        "cursor": {
          "ref": "800ba303-d7f0-4857-bb73-41542709a4d5",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "df4cfad8-7b81-4d59-9ddb-a8de88e80781"
        },
        "item": {
          "id": "a5333c0e-a421-41ee-9762-9c4d81216da5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "17e50fae-3c69-4762-8696-d91f79d4cbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10122552-e335-4f8d-a89d-e847c5cf5dc0",
        "cursor": {
          "ref": "904df9f9-3f5f-42d4-a377-ccc1fb52be53",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "153aae2b-fdc8-42ca-886f-0033deb83510"
        },
        "item": {
          "id": "10122552-e335-4f8d-a89d-e847c5cf5dc0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c0b60f82-2258-4796-b68b-0804f702de05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15c13d6-72d3-4f60-b737-79d2fcfaee1d",
        "cursor": {
          "ref": "6b6bae59-4991-45b2-8d97-2e5a7a04e7b2",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aa01f91e-bcd0-4b0f-b6ac-d35186bab363"
        },
        "item": {
          "id": "d15c13d6-72d3-4f60-b737-79d2fcfaee1d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ed2e7c9b-d23d-40c4-9831-d13bdff247be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b45275-021a-4e20-8c13-bf802385d56c",
        "cursor": {
          "ref": "024c4e39-df24-40ab-94bb-ecd7d9243e41",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3ff2257c-0fcd-4b9e-a264-2741525ba86a"
        },
        "item": {
          "id": "b4b45275-021a-4e20-8c13-bf802385d56c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "61e3ea02-c4d0-4c47-a2da-cef33ef60293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f823c29b-e86e-4d29-8f17-f85e7670e9d3",
        "cursor": {
          "ref": "acf6fdf6-797a-4f9f-a639-ec61fbfd6165",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e932eaaf-4f4c-4648-bc10-f762c40b7263"
        },
        "item": {
          "id": "f823c29b-e86e-4d29-8f17-f85e7670e9d3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "218373f2-1676-4075-992b-3918001882bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b534f6-da23-4598-be02-d9265a893c61",
        "cursor": {
          "ref": "fbcfbe1d-14bd-4d9a-8727-c23d8053c874",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "54948ed2-df5f-45d4-bac9-107ac477f29f"
        },
        "item": {
          "id": "a4b534f6-da23-4598-be02-d9265a893c61",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "00ce266a-96bd-490f-a3b4-89f380b8cf23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1167654d-8dca-4cdf-aeca-5772f1b60bbd",
        "cursor": {
          "ref": "126c21dd-03c7-4457-93ce-a7a074eb843b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "82af2385-66c0-46ac-b9ad-c5df1955c8b8"
        },
        "item": {
          "id": "1167654d-8dca-4cdf-aeca-5772f1b60bbd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "420498e2-508a-46f0-a1e3-252ddb090a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f0b98b-53a7-4fce-9a3b-5e73b5692d09",
        "cursor": {
          "ref": "f3229690-45e9-4033-9e78-5280ab27f956",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a195e43e-6e4e-4c72-8af1-be91be5b6d27"
        },
        "item": {
          "id": "18f0b98b-53a7-4fce-9a3b-5e73b5692d09",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c6e0f824-2318-43b4-afd1-ba6ce0cf6158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf2c9f8-c88f-4473-92f3-6108cc2b4a95",
        "cursor": {
          "ref": "e629b173-dc44-46b7-8617-010f5879a877",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8dbbde9e-5249-45b5-8f10-89ed4952ddf9"
        },
        "item": {
          "id": "bdf2c9f8-c88f-4473-92f3-6108cc2b4a95",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fb3cc167-6a58-49f8-b813-39e1b6f9cba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14a6161-d446-4ea5-8d12-3bac8d15000d",
        "cursor": {
          "ref": "ce39a55b-aba4-4fe1-8798-724ee4ba8bd8",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ee9c5835-04bb-44d7-9500-5d6cd4bc9fcf"
        },
        "item": {
          "id": "c14a6161-d446-4ea5-8d12-3bac8d15000d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "05a45d48-47e5-4c02-87bf-3cff4a85a299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97471ae-649a-41b5-94e9-b541de462b2f",
        "cursor": {
          "ref": "e36eb1af-cd6b-46ca-a46c-7bc95a886bc4",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "12bf9419-4a6c-4a7f-9bea-ec05f77094d0"
        },
        "item": {
          "id": "f97471ae-649a-41b5-94e9-b541de462b2f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "891d58d5-40fe-4549-8085-6ea3ce78e543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e35cf18-de7e-4ae4-95d6-6481c1a2ce3a",
        "cursor": {
          "ref": "5901dd07-3af1-484b-91af-76ba4e8930eb",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f69199f5-e61c-41b4-9ccb-4e2529d13113"
        },
        "item": {
          "id": "8e35cf18-de7e-4ae4-95d6-6481c1a2ce3a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7b342004-afad-484a-8b6b-bf95ff4e0bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db3d097-39b2-412e-a20e-7b1e69056358",
        "cursor": {
          "ref": "e050a838-391d-42e3-9d5e-a1d577fe42bb",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1325d0ee-6c47-4ade-a2e7-b63d824b80bc"
        },
        "item": {
          "id": "0db3d097-39b2-412e-a20e-7b1e69056358",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8a2fa04b-1191-4acd-8698-0bcf0eb54e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6574721f-6edb-4518-b1e6-a919d7736596",
        "cursor": {
          "ref": "d65fbc70-9496-4c82-9840-f6a98adfd4ed",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "add14add-f288-4cca-83ac-db8ceda1ee8d"
        },
        "item": {
          "id": "6574721f-6edb-4518-b1e6-a919d7736596",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "be287e88-3d05-4c11-bd1f-999d7b1d7d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f602c0-650d-4c2e-a412-7b1fd6d90574",
        "cursor": {
          "ref": "9fa67f44-9d8f-465f-92b5-544d0de880fc",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "62c9f87c-e6a2-47be-9c85-699255c6888d"
        },
        "item": {
          "id": "57f602c0-650d-4c2e-a412-7b1fd6d90574",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dea2f3c8-ce5d-47a8-a7d1-3c145068efaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38e6c17-6255-4e4a-abc8-6ec95064b4a8",
        "cursor": {
          "ref": "54140f04-0712-4647-aeb7-bc935481299c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7cda7e87-4f7e-431b-8be7-05a8048fcae2"
        },
        "item": {
          "id": "c38e6c17-6255-4e4a-abc8-6ec95064b4a8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "88502ea1-cba7-4e05-972d-5f66732e0b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7af0920-8264-47c5-90a0-c2c9f36c4e14",
        "cursor": {
          "ref": "8d6b899c-9eeb-42f1-9372-731f2cb7cebc",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2c338504-f848-49c4-a424-8ef9cbabc5df"
        },
        "item": {
          "id": "d7af0920-8264-47c5-90a0-c2c9f36c4e14",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ef88f7f4-f8a7-47ff-9962-e21734a0ae59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4120f9e2-e874-4971-84f1-927400d557d2",
        "cursor": {
          "ref": "f83cb11b-6de3-48c3-9f87-a55c645d25d0",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "522fbbc2-50b6-4437-9738-8ba0f8b1f051"
        },
        "item": {
          "id": "4120f9e2-e874-4971-84f1-927400d557d2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "84d4e55c-5288-4200-9ed8-c68e15303e8f",
          "status": "Created",
          "code": 201,
          "responseTime": 983,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "cf2fcbab-5359-426c-8c44-4a39a88a0ed1",
        "cursor": {
          "ref": "b8a1c7f3-0a13-4f08-bf07-ab759a0889b7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7aec4624-6420-44b1-b306-8f4de0623346"
        },
        "item": {
          "id": "cf2fcbab-5359-426c-8c44-4a39a88a0ed1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2a336229-be89-4b71-b952-7e1eda6b934e",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2fd96fb8-f841-4540-aa7b-e5d8d802a903",
        "cursor": {
          "ref": "fe2bd269-3091-448c-8aac-c6f11840fcfa",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "84acdeb7-aa9e-4bb6-b380-fe4a89e9392b"
        },
        "item": {
          "id": "2fd96fb8-f841-4540-aa7b-e5d8d802a903",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0dc21804-e8e7-475a-abbb-9cdff2db866e",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "08eadb0e-6cc1-4b98-9186-e24f0f45c4f8",
        "cursor": {
          "ref": "be2f2a95-1125-44f3-9aa0-800bb44bdbda",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4b6756db-a6c5-4f25-a570-bcb3de95c93f"
        },
        "item": {
          "id": "08eadb0e-6cc1-4b98-9186-e24f0f45c4f8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9f8269f5-bee9-4a39-b59d-97715b8a9565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a683fad0-3623-4164-8f84-b9ce0066b27b",
        "cursor": {
          "ref": "f0fc62a3-de6a-4565-81b7-499dc7be84ca",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4e38740d-4419-4fa2-b13e-45f92b36a784"
        },
        "item": {
          "id": "a683fad0-3623-4164-8f84-b9ce0066b27b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a190c049-bcd7-479d-9fa8-1b020a891d61",
          "status": "Created",
          "code": 201,
          "responseTime": 464,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2af71059-29f2-40c6-b1d4-1b7eda781a8a",
        "cursor": {
          "ref": "03f117d6-dacf-44e1-993e-2757ce65da22",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2ad76028-d053-46e3-832a-8abc252155cc"
        },
        "item": {
          "id": "2af71059-29f2-40c6-b1d4-1b7eda781a8a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "af2b045f-d7dd-4122-88a6-7766754ddad5",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3bae1da0-2947-4ce7-851c-e532df636be5",
        "cursor": {
          "ref": "cfcd0821-8d6c-4c3d-b460-8e6d1a796017",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9997c2d0-da68-4006-be0f-56204c9107e8"
        },
        "item": {
          "id": "3bae1da0-2947-4ce7-851c-e532df636be5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7df3f289-4fc5-431b-8f98-aceb254c14a4",
          "status": "Created",
          "code": 201,
          "responseTime": 396,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e665520a-586e-4591-959a-092777d91308",
        "cursor": {
          "ref": "5a80ef94-99ae-4332-a3fa-b34c0954cf97",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5130ea36-9844-4ada-a7da-7fb6938f7029"
        },
        "item": {
          "id": "e665520a-586e-4591-959a-092777d91308",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "319d8a5d-e2c4-45c3-b221-e893e5d30a59",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "377b81c4-06c0-4829-b3f7-fd0394717d37",
        "cursor": {
          "ref": "a5069e39-1853-48db-9974-b69c2949b78f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7a6bd9cd-9ec8-4fb7-bc52-56b34dc41165"
        },
        "item": {
          "id": "377b81c4-06c0-4829-b3f7-fd0394717d37",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "87603538-b8cf-4c03-a074-d311cd1a8139",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0de749fa-27b6-4a27-9b92-62335bc9064b",
        "cursor": {
          "ref": "af10651d-b3b9-4265-9e93-5a846a474f7b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fbaaec06-33db-4675-aae0-26a9a8cf03a9"
        },
        "item": {
          "id": "0de749fa-27b6-4a27-9b92-62335bc9064b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a243bfba-8916-4c04-bdf1-d6d89ae365ef",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "33188264-b48b-42fb-923f-e3af21d76c44",
        "cursor": {
          "ref": "39d641cb-03af-40ee-b471-1c290b5a1b4c",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c668c1c1-b77c-49be-9bfa-0d29b302a580"
        },
        "item": {
          "id": "33188264-b48b-42fb-923f-e3af21d76c44",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "375b8508-f264-4957-9c32-c8ba4e3bd22c",
          "status": "Created",
          "code": 201,
          "responseTime": 396,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8e348215-c473-46e4-a70d-871b555a2bce",
        "cursor": {
          "ref": "57e226f2-a687-4b00-ac4c-ea7894572e94",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "76696842-1e3c-48b9-ae41-9020addc4d45"
        },
        "item": {
          "id": "8e348215-c473-46e4-a70d-871b555a2bce",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "979b46bc-9ed8-4737-b556-83ea7b34f8bf",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ccfb0c8c-e024-4f54-ab62-b7625f940be9",
        "cursor": {
          "ref": "906e5a3a-a98b-49fa-8f53-69798622d629",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7d3053b8-2348-4f19-8902-0932d09507b8"
        },
        "item": {
          "id": "ccfb0c8c-e024-4f54-ab62-b7625f940be9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9921dac6-6976-404a-9482-91edf1ae3949",
          "status": "Created",
          "code": 201,
          "responseTime": 395,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "65d1fb63-889c-4c80-bde7-507c7585e8e7",
        "cursor": {
          "ref": "e71d7268-7a79-4591-8058-f7c2626dbfdc",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "37e79128-3e8a-4295-8839-0b79ad1d86d8"
        },
        "item": {
          "id": "65d1fb63-889c-4c80-bde7-507c7585e8e7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d38357ad-e44b-4856-a522-2d47a66a28fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc95029-f630-4283-9042-4b66d65686ac",
        "cursor": {
          "ref": "6305dae2-e2d4-4ca0-b084-a9eb977eb2aa",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e41ec5c3-0a0b-4e09-aca9-6425903d6db4"
        },
        "item": {
          "id": "8cc95029-f630-4283-9042-4b66d65686ac",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6f5695ef-3cfa-44b0-bcc9-4781f15dd254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e406a85-ede1-4ba6-9f0b-cb0daeae6235",
        "cursor": {
          "ref": "e5f8a056-6579-4f64-9f12-631001c2e2df",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c7ba7b6d-aaf3-43bc-9655-1648d77ea68e"
        },
        "item": {
          "id": "9e406a85-ede1-4ba6-9f0b-cb0daeae6235",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0e717869-b865-46c5-a9f8-f08267e4bf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0aeaf65-f25a-4993-8b69-dd0ee3189154",
        "cursor": {
          "ref": "70518c5b-c78f-4c99-aad2-5a0b910887de",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "df985b0c-d2a0-45fd-8f48-ad202abf11cd"
        },
        "item": {
          "id": "d0aeaf65-f25a-4993-8b69-dd0ee3189154",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "38183625-7b6b-4190-b922-72f6c9dfa0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601f407d-f382-4f14-893e-52e5ccc6dabd",
        "cursor": {
          "ref": "4902e4f3-2287-4c28-beb3-1fd07e0bdfe8",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7fa18ecd-ea93-46f6-9d33-de4ce4925d02"
        },
        "item": {
          "id": "601f407d-f382-4f14-893e-52e5ccc6dabd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3f4903d9-4a28-4e1d-8e68-0d85a8254383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b53ff0-3342-4fdd-9acd-63bac74cc95a",
        "cursor": {
          "ref": "b553ad31-6063-4844-b2ad-cab926c6b56c",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2f655bb1-c401-41cf-b542-05708e01de5d"
        },
        "item": {
          "id": "65b53ff0-3342-4fdd-9acd-63bac74cc95a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d5902d7a-69ee-4c5e-82e2-46b9f8efc523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb41035d-d412-4bb5-9f66-1303e0fd645b",
        "cursor": {
          "ref": "2b660acd-eeb3-4bf0-aa98-769c05332cdf",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8e688bfb-3fe1-4a31-a0b3-8a1bd97b17b5"
        },
        "item": {
          "id": "fb41035d-d412-4bb5-9f66-1303e0fd645b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dd6ec312-4afe-4158-9919-8a5c084fe3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46670c87-0327-496e-86e6-3f491c0bf07e",
        "cursor": {
          "ref": "9553ffbc-db32-4775-a15f-60a90d763dfd",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f8c6ea45-039f-47f1-8184-5f246fca8961"
        },
        "item": {
          "id": "46670c87-0327-496e-86e6-3f491c0bf07e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5efb6c00-d92b-464f-a84f-ffaaa9469780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da76ac8b-ffc1-4836-813c-9cf7156dac0a",
        "cursor": {
          "ref": "ab387827-1e45-468b-aaac-2ee60dcdb177",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4dade615-a4a2-4a2f-b05f-b08043e66d3e"
        },
        "item": {
          "id": "da76ac8b-ffc1-4836-813c-9cf7156dac0a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2cfb95d9-9b1a-4e7a-a87e-e482d6f785f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f296e9c3-367e-42ba-94ea-cca31eac30bf",
        "cursor": {
          "ref": "6f9a4c21-15ad-40e8-af6c-d475139bb3fe",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8b89244f-750e-4186-83af-3d8cdf0524fe"
        },
        "item": {
          "id": "f296e9c3-367e-42ba-94ea-cca31eac30bf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b7820729-0247-480e-983f-e42f5e978d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d1ff2e-b5d5-41ad-a452-9901779759a2",
        "cursor": {
          "ref": "a7c4e865-bc32-406c-809c-27b6e8ff5e03",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "35aa1512-f225-49aa-8dc6-dc93a5f9bd71"
        },
        "item": {
          "id": "40d1ff2e-b5d5-41ad-a452-9901779759a2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a710400a-283d-4717-bf4d-d3f8e881f80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08196741-791c-4bb4-8915-20a6de2ad2da",
        "cursor": {
          "ref": "37159e04-3a14-4cf6-98bb-80ae73eb49de",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "de0adbb6-28ce-4d8e-b578-871ac1af6632"
        },
        "item": {
          "id": "08196741-791c-4bb4-8915-20a6de2ad2da",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9b110457-0063-460a-bce7-f8eae0052684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169bc75a-9f43-498d-bdb2-ea65fa647fbc",
        "cursor": {
          "ref": "eff4b86d-3271-4806-935d-b7b104b0e7b8",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b8134430-89ce-4232-952c-ef182313be9c"
        },
        "item": {
          "id": "169bc75a-9f43-498d-bdb2-ea65fa647fbc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "04272a3a-c843-413f-b433-bc0b71d408a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19b674e-2393-4a60-86cd-da03c3d52720",
        "cursor": {
          "ref": "87dac1db-6518-4f3c-936d-0330219a5b46",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "108000f5-e7a4-400a-90d7-77e08280ee6f"
        },
        "item": {
          "id": "e19b674e-2393-4a60-86cd-da03c3d52720",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c1624279-4824-4855-b480-e4f1bfcbd077",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "bed826e4-040c-4352-b582-4b1bd17be290",
        "cursor": {
          "ref": "27e1960f-3d8c-4a17-85b5-a78ac146e44c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9d1ddb71-6296-4667-8eaf-795709dfcd84"
        },
        "item": {
          "id": "bed826e4-040c-4352-b582-4b1bd17be290",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4938c731-a935-427e-aaaf-a659fe0e0463",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a390149f-a5e3-4fc5-a28f-6d16c8cfe559",
        "cursor": {
          "ref": "6695d4b3-3586-447e-b56f-0db4e3dd3867",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8ed087ea-72ea-445a-8f0e-318b26ad67ba"
        },
        "item": {
          "id": "a390149f-a5e3-4fc5-a28f-6d16c8cfe559",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ce9774bc-c598-4d65-9cd7-486817724679",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f577d01f-1812-41c4-ad1b-651cec430051",
        "cursor": {
          "ref": "766e0dad-2d8a-4adc-ac02-20d488495943",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "40abd0d1-4ede-4dee-b8ed-e1efda8606b2"
        },
        "item": {
          "id": "f577d01f-1812-41c4-ad1b-651cec430051",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ae39d11a-3dd4-4159-b98f-b7059b24d34d",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "494fc71e-800c-4b89-a706-ad48467ac578",
        "cursor": {
          "ref": "a810f328-37c0-45b3-ae8e-6dc8f9842a7a",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d74ec90e-cb7d-4636-80f2-ec60edd62e9d"
        },
        "item": {
          "id": "494fc71e-800c-4b89-a706-ad48467ac578",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e62a7461-0438-42f5-85e4-148e25d4fc3f",
          "status": "Created",
          "code": 201,
          "responseTime": 436,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "dcb00ba3-8c11-476f-b1fc-b89ed9b90241",
        "cursor": {
          "ref": "33fe3aa3-86d0-41a5-adc1-6d45f787423d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8c7843b0-03f4-41e6-b445-2ae44183dd19"
        },
        "item": {
          "id": "dcb00ba3-8c11-476f-b1fc-b89ed9b90241",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "34697063-4a54-4f49-b694-e6cefe38db98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea2a6ad-25ee-4d3a-9e70-5af6c6b20ea2",
        "cursor": {
          "ref": "598043a0-3050-4c45-b54a-680e69f3550d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b6bfd657-92d9-4bba-b8bf-c3d617983eb9"
        },
        "item": {
          "id": "cea2a6ad-25ee-4d3a-9e70-5af6c6b20ea2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8e118fa4-299c-47f9-a956-cd111a52c65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5e4a3e-acce-4a73-b18d-caf7caa30846",
        "cursor": {
          "ref": "3263df7f-d2c2-45e4-9163-ff43f40b6dc1",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9bf0168a-7f0c-4429-a4a3-34cac9d2e198"
        },
        "item": {
          "id": "ce5e4a3e-acce-4a73-b18d-caf7caa30846",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "307f803f-e245-4b51-8ffd-8a93b00d704e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705a8c57-98f1-481e-9aca-b6b31253f50c",
        "cursor": {
          "ref": "20070d15-0e6c-4948-b1fa-990afc1c703b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6c8373a9-f5b6-4447-8311-84dc2354da46"
        },
        "item": {
          "id": "705a8c57-98f1-481e-9aca-b6b31253f50c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c4b04ba4-cb28-4542-855b-6e2db2288118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0de8d20-8c6f-4f11-a320-669e4faf2786",
        "cursor": {
          "ref": "7a466bca-fea8-43ab-a681-d88024c0920d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8fa6e81c-ae19-497c-a4d7-ad1efa2da320"
        },
        "item": {
          "id": "b0de8d20-8c6f-4f11-a320-669e4faf2786",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "326f5b78-847e-4952-af5e-591d71d23d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c57d55e-3cc2-4af2-9317-eb7abc459f03",
        "cursor": {
          "ref": "c1b6ac6d-c68b-4e0d-bb02-5c6a58a5708b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2c61b0b9-3b35-4477-8d67-0dfe91ab1050"
        },
        "item": {
          "id": "1c57d55e-3cc2-4af2-9317-eb7abc459f03",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "37f5e2fd-74cb-4887-9cf6-58589ae06237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2490028-1078-4dee-9438-9906a4548925",
        "cursor": {
          "ref": "3c1e423c-5ff4-44a8-82fc-e21e0b222e89",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2090e2b5-4198-4c95-845e-883f1845bbf8"
        },
        "item": {
          "id": "a2490028-1078-4dee-9438-9906a4548925",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4b24f3e5-d4b8-4872-91fb-b66baa421fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4035035d-b795-41c8-8e70-90134e089f2c",
        "cursor": {
          "ref": "e467bc84-690f-4cfc-a341-eba02a676a5e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "60a0f8ca-c9de-45f6-abc3-103d8d52127f"
        },
        "item": {
          "id": "4035035d-b795-41c8-8e70-90134e089f2c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ba40bfac-6e94-4180-b7a7-730edbb9f7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7378c0-5719-454c-8481-f0dd6faad3dd",
        "cursor": {
          "ref": "149674a2-b65a-4219-a3a9-e569e52d4714",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "876d5770-2e52-4186-9c2a-cf58dfa3121d"
        },
        "item": {
          "id": "8b7378c0-5719-454c-8481-f0dd6faad3dd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d95bd36c-7fa8-4971-ab18-f75d2d5c4019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc0b828-9732-46e8-9ba9-4cc2111aa119",
        "cursor": {
          "ref": "18077f02-c643-4ea1-b9df-d2ea108c0633",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2b9cbcf9-f681-448d-8197-5d7f8393ff1b"
        },
        "item": {
          "id": "3bc0b828-9732-46e8-9ba9-4cc2111aa119",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "179177ed-dfd9-4ea7-9e8c-4b9f555c7cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c24285-36ff-42d7-8f4d-39f3934f7e90",
        "cursor": {
          "ref": "802cf91c-74b6-4447-83b5-29fd2bc7059a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ec33b9e5-c0c7-4304-bc70-3326eed3ff8c"
        },
        "item": {
          "id": "09c24285-36ff-42d7-8f4d-39f3934f7e90",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dde487cf-e4ee-4bf0-a459-84c8a760c16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9c1eac-8c63-47c1-b0eb-ffe99d822273",
        "cursor": {
          "ref": "945b08de-671b-41d0-99f8-f0cb1f42e822",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "57896451-a426-4fdc-81a4-cc605c5b9141"
        },
        "item": {
          "id": "1c9c1eac-8c63-47c1-b0eb-ffe99d822273",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0452a924-52d7-4aec-9f18-ee5ee7d3f06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b4f96e-32fa-4ed1-9a70-2a5081d7b23c",
        "cursor": {
          "ref": "6201d163-8735-48b8-b9ba-92c3e5b72e11",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0fc52531-5e5b-44c1-9ba2-6d9be9418efe"
        },
        "item": {
          "id": "a6b4f96e-32fa-4ed1-9a70-2a5081d7b23c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9a15fa1d-3318-4360-8561-22bf2b6927ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06ad756-3c8c-48f5-9487-44f43d547eea",
        "cursor": {
          "ref": "8df2b191-e955-4b7a-a137-7e51e2a17b02",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2191e840-a40e-46cd-93c7-c4f2d4400eb3"
        },
        "item": {
          "id": "e06ad756-3c8c-48f5-9487-44f43d547eea",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "280578b8-bb74-47c7-86bb-297b1a5f1982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215668a2-1dbb-4060-bede-851bd00ddd6f",
        "cursor": {
          "ref": "22741789-ed81-4584-b9f0-45990aff5b20",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "84e74a1c-cce4-48aa-8d88-2de95d44def6"
        },
        "item": {
          "id": "215668a2-1dbb-4060-bede-851bd00ddd6f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c695d2d3-5a4e-41a9-9638-e3397e2a266a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f572d31-8cd0-4e51-8218-d5df75a2d789",
        "cursor": {
          "ref": "cc76941a-5285-4a39-92c8-0f2f35a1a39f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "65e2cf38-66b5-4eee-8456-18e1fb6b1808"
        },
        "item": {
          "id": "9f572d31-8cd0-4e51-8218-d5df75a2d789",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6ddffad3-1c13-4d74-adb7-23485fec09c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9613b5-b023-4f77-bbed-92ba073345ba",
        "cursor": {
          "ref": "4be3810c-cb1d-4281-b94c-210eaa752dcc",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0c25ebaf-577e-4d1e-bb1f-27e693a15a77"
        },
        "item": {
          "id": "bc9613b5-b023-4f77-bbed-92ba073345ba",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8976e65a-d831-45ba-b58f-8068ce6729b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355b8f9d-8a58-4b5c-9cbe-229bf15e9d8c",
        "cursor": {
          "ref": "86efd8ce-33cc-4a25-b334-71df3ef712b4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "410fcce5-e123-4c5b-b380-58db36a721e8"
        },
        "item": {
          "id": "355b8f9d-8a58-4b5c-9cbe-229bf15e9d8c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2d14e0e1-2896-49c2-ba5b-4ecf7a26465e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e908e0-ff7c-479a-bbb7-df1c35adb5e1",
        "cursor": {
          "ref": "468cea68-04ad-4234-8485-c1413b172070",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "061eedbe-85dd-4072-8c57-0c0fc56a56ee"
        },
        "item": {
          "id": "e6e908e0-ff7c-479a-bbb7-df1c35adb5e1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "743ad3a7-aaf3-4187-b930-1063b6b5019e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32e76df-2f75-4a30-9bcf-2c45548598c9",
        "cursor": {
          "ref": "1830dcf3-1bf3-43d0-9844-97ccaffa8262",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5940c165-a920-4d5f-a659-16b381fc8703"
        },
        "item": {
          "id": "c32e76df-2f75-4a30-9bcf-2c45548598c9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e28d44c9-b4de-421f-866a-232938279fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f448d8c-badd-454c-8be2-b1bc551438c7",
        "cursor": {
          "ref": "6493aa73-1c33-4896-979f-92337d50c8c6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "149e80ea-5ffe-43d5-9013-a36643b79a9f"
        },
        "item": {
          "id": "0f448d8c-badd-454c-8be2-b1bc551438c7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b75af968-e5e4-4296-ac2e-013725f4cd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3941d8-7551-4585-a6ac-e55d46d875c5",
        "cursor": {
          "ref": "6ed9f857-d862-47ed-9556-327c0bc9ebe8",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4a7efbf5-17e7-45c8-84bb-48928f024839"
        },
        "item": {
          "id": "8d3941d8-7551-4585-a6ac-e55d46d875c5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "54d63706-0221-4a69-937a-7313dde646bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f11d7d0-af87-4595-b4ec-ebbacc06dde3",
        "cursor": {
          "ref": "fa66712d-5d85-4c2e-ab0c-1dd83105829b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1a0d1037-8134-4a83-aab1-2281e3f1e1b0"
        },
        "item": {
          "id": "7f11d7d0-af87-4595-b4ec-ebbacc06dde3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "820f4355-3286-4c22-a216-324e097419b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c5efec-59bc-4e67-96e5-5ec0cc3910ef",
        "cursor": {
          "ref": "921f469c-89ec-43ac-9c83-0b44cb1e3551",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1fd60b09-fc4e-4626-966b-3bb09e103de8"
        },
        "item": {
          "id": "13c5efec-59bc-4e67-96e5-5ec0cc3910ef",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0fd68305-8aa1-4c74-9bc9-e90c697b1129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e210eb0c-159d-49ff-aa3f-3a8ac2446a39",
        "cursor": {
          "ref": "a83a227c-5a1e-435e-8aa2-5c4e6844ae74",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3afde9fb-f20e-4e62-9494-26545f2145f7"
        },
        "item": {
          "id": "e210eb0c-159d-49ff-aa3f-3a8ac2446a39",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "88712f4c-40e8-44ea-8989-e617fdf8cb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5b6e83-0742-4165-9ac4-9da6370fca60",
        "cursor": {
          "ref": "aaa79e7a-8055-4f2c-bbb4-8b6764dc1096",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fc45a722-5a62-4ab9-bbb5-4944774819be"
        },
        "item": {
          "id": "8e5b6e83-0742-4165-9ac4-9da6370fca60",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c6d76e3f-6bb7-43cd-9fbe-ccfcf3a1c56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236d63b2-fb65-4ecc-a071-62137148ef54",
        "cursor": {
          "ref": "6215cc87-0f2d-48b3-a081-cb9aa43c3bd2",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d63b12fe-c3a4-489f-a637-b4415428e7fa"
        },
        "item": {
          "id": "236d63b2-fb65-4ecc-a071-62137148ef54",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8dc0fe7e-87b1-4a73-b675-58ee88f5d6dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672c17d3-4229-46f1-895e-606f6109dc84",
        "cursor": {
          "ref": "a0f86ed8-4a8b-488d-ab93-93904c5c8554",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1336df57-d2e4-4585-bba9-0ef8f856716e"
        },
        "item": {
          "id": "672c17d3-4229-46f1-895e-606f6109dc84",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "10150cc5-9977-48bc-8cd3-6842c6e5e674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6913ee-4164-4258-a2d4-cb2ff542796b",
        "cursor": {
          "ref": "d1c2c5d9-2f75-4d7f-b5ac-c09564a68e92",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ed6af004-56a9-473b-ab16-df48fa066fec"
        },
        "item": {
          "id": "3f6913ee-4164-4258-a2d4-cb2ff542796b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1f8298ec-3ec9-4b5e-9e97-891ed071828c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dab343-daec-4b0e-8114-80ebe5c3bc21",
        "cursor": {
          "ref": "88364ce6-3e44-4755-b2ca-59162b2bd46c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f4ecec8e-0ce1-4d6a-b02a-601bbd21a747"
        },
        "item": {
          "id": "17dab343-daec-4b0e-8114-80ebe5c3bc21",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1ad5e9e9-9468-4af6-9bc6-6208ceee1ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ca827f-f39f-4c5f-92cb-10a25dda904c",
        "cursor": {
          "ref": "5f681862-d0c6-48b6-8656-614504c5571b",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "655b84a9-c6ea-442f-a29b-d4c3021bbf0e"
        },
        "item": {
          "id": "f6ca827f-f39f-4c5f-92cb-10a25dda904c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "efa6844a-c1ea-40b7-8930-b2b0a1f5ebd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb1cc27-b7cc-48b5-8128-5973334ecd9c",
        "cursor": {
          "ref": "47879284-6aac-4a96-b33a-56d2f0371b93",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9894934e-31ed-47e2-8463-bb2c92056162"
        },
        "item": {
          "id": "8cb1cc27-b7cc-48b5-8128-5973334ecd9c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "16e5e03b-fae7-4db7-abbb-e5e43a4820b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc8ecfb-c226-47e9-b18c-e6f522a09788",
        "cursor": {
          "ref": "fab663d1-1f84-4b23-849c-5318db564dad",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "92203781-8637-4538-b6f1-3e6280b7d28f"
        },
        "item": {
          "id": "1bc8ecfb-c226-47e9-b18c-e6f522a09788",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "18202f29-ed2c-44b7-8a91-a08a30ad56e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "719fba05-9e92-4b52-8466-76017aa25429",
        "cursor": {
          "ref": "9212eb02-2278-49f4-a81c-6b153df822b9",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "316a1c4b-7a59-4f65-86a6-77b8711a64e1"
        },
        "item": {
          "id": "719fba05-9e92-4b52-8466-76017aa25429",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6f0950fd-0ab1-4d77-bb6e-558b1c7e874d",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "741e6212-91d1-4a08-9e06-545a65cb1dc2",
        "cursor": {
          "ref": "a9d071ad-25e1-4eee-8ffa-293603eb11f5",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6db29bb7-3026-4210-9394-71dd53bf51a5"
        },
        "item": {
          "id": "741e6212-91d1-4a08-9e06-545a65cb1dc2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d5333e32-74b4-4c5c-a711-1d945e2a4455",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "95753e1e-d626-4bc0-8136-55b62da272c2",
        "cursor": {
          "ref": "5d76547e-e524-45f1-bd12-1a39fd5b6400",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f684b1f6-8ce6-4254-8b85-e52799ad9076"
        },
        "item": {
          "id": "95753e1e-d626-4bc0-8136-55b62da272c2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "93e7e28c-6ff2-4642-9eb8-2ae6afbf801a",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "60601cd0-b476-4eab-8f4b-0d170afad9cf",
        "cursor": {
          "ref": "e346b34c-b9d9-45d5-8c84-7879f723d1c5",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "47bfd7d8-5fb7-4712-9724-d868c8d5bd2d"
        },
        "item": {
          "id": "60601cd0-b476-4eab-8f4b-0d170afad9cf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e3814f41-49c0-43e1-8ca5-e5039c29b00d",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7096f5-046c-4c43-a93f-0d0446a0668f",
        "cursor": {
          "ref": "70650735-eb11-42df-beb5-ab1e89cb9d70",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "27daad80-d637-49b8-b2dd-2fd33bf97fa7"
        },
        "item": {
          "id": "0d7096f5-046c-4c43-a93f-0d0446a0668f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1c09ecdc-a458-4cad-86e7-134992f2fea7",
          "status": "Created",
          "code": 201,
          "responseTime": 408,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-02T00:34:57.298Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-02T00:34:57.298Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "44b1b137-7592-46e5-95b5-84e9549e14e5",
        "cursor": {
          "ref": "a3b48635-a4c2-4b3f-b01f-236a4fda9ca6",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "66e3dcd5-e014-4ca0-ad9a-7012cd589e2f"
        },
        "item": {
          "id": "44b1b137-7592-46e5-95b5-84e9549e14e5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "51af9a25-bb7c-4de8-89a4-647fa5461218",
          "status": "Created",
          "code": 201,
          "responseTime": 381,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ac306a-9925-4fb7-8d4f-9ff28ccee0c8",
        "cursor": {
          "ref": "d8ebe799-c48f-459f-a25e-496ded7c7f13",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9fb3fb1d-f2e3-4b10-a587-8cb1bba7705a"
        },
        "item": {
          "id": "e4ac306a-9925-4fb7-8d4f-9ff28ccee0c8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7a0a5263-d230-4147-9cf4-b14515410356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79139e55-00d1-4b43-90b4-25dbe3ebd0df",
        "cursor": {
          "ref": "b00048d8-bd48-4c8b-9a94-a64c9d0ccfd7",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4b794db1-a5d7-4fc9-aec0-07f0d344e566"
        },
        "item": {
          "id": "79139e55-00d1-4b43-90b4-25dbe3ebd0df",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0cf09eef-4a94-4f3b-afd0-dbcfd634f542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25540eb1-b667-4716-b360-6305aeb1e029",
        "cursor": {
          "ref": "8ee05159-2966-4ebb-8715-44f1a97740dc",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f165c698-ebb2-42ea-9470-af83288d8572"
        },
        "item": {
          "id": "25540eb1-b667-4716-b360-6305aeb1e029",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "78a3e260-a278-416f-823e-4db75a955142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74eff337-da52-45cc-8a2d-60609918e0f1",
        "cursor": {
          "ref": "913a085f-51aa-4a07-9da1-9bf554b6eee6",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "81df3690-ad38-4c68-94fe-8bdfb41c107d"
        },
        "item": {
          "id": "74eff337-da52-45cc-8a2d-60609918e0f1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d7261c5f-ae67-432b-aeac-30aebbbf03fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd4f0de-7c8e-4dc2-b11b-6f434c2de03a",
        "cursor": {
          "ref": "1352efa1-2f7f-4da7-b19c-e27aaf53c694",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7b2a22de-35b5-42e6-b008-c71c746ca837"
        },
        "item": {
          "id": "7fd4f0de-7c8e-4dc2-b11b-6f434c2de03a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6df2a631-d47b-4de9-97e2-fe752d201cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6e18e6-08e1-4a11-a5f8-7b3fd9a69494",
        "cursor": {
          "ref": "fb36a38b-28f4-4b42-862c-dfbaec4a9fd2",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5f69dc87-9814-4132-b768-8dec8f86983b"
        },
        "item": {
          "id": "3b6e18e6-08e1-4a11-a5f8-7b3fd9a69494",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bfc9acce-82b8-4a78-a6de-0a8ee66af77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea75b03-42f7-4fa2-be83-85d9250bf526",
        "cursor": {
          "ref": "3c94f4bd-b29c-42c9-934c-f6711ca77261",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1bc3303e-33f0-49fd-afbc-66aa3811b556"
        },
        "item": {
          "id": "6ea75b03-42f7-4fa2-be83-85d9250bf526",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3f4efb98-cd01-4d25-8ca3-fa8cecbd8372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec5c812-4ffe-4b3e-b6cb-3ae05e0829f6",
        "cursor": {
          "ref": "07fb99ba-2eac-4a86-87e5-8618036a24be",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2c6e5080-f3f9-414e-9bca-841fa1c87685"
        },
        "item": {
          "id": "4ec5c812-4ffe-4b3e-b6cb-3ae05e0829f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd7c93ed-a2ac-4a5a-91f6-353de40d2eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083e73fe-fb99-4b2f-aa84-c96bbbdde295",
        "cursor": {
          "ref": "d95c2e7d-750e-40b6-96ac-de906b674080",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6cfc5908-ed91-4a33-9960-f07f81c7e127"
        },
        "item": {
          "id": "083e73fe-fb99-4b2f-aa84-c96bbbdde295",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f7c1679d-6907-4a0b-bb4f-c6230019f6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec411f3-8f39-47e6-b73c-b828745a1002",
        "cursor": {
          "ref": "9d92b817-3cbc-4dd9-a0ee-70dc4d149c4f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f954b2e1-310f-4279-a9a1-176bd7710a33"
        },
        "item": {
          "id": "4ec411f3-8f39-47e6-b73c-b828745a1002",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cf12a23b-e405-4c19-b964-967a2a91700d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b30af55-db50-45af-adef-5294aca64e80",
        "cursor": {
          "ref": "d5b2057d-cbbd-4c4d-af51-707a5a2f3a8a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1c85671e-a41a-4dfb-8ba9-6f550b6cb3a6"
        },
        "item": {
          "id": "7b30af55-db50-45af-adef-5294aca64e80",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "00211141-b1a4-45f8-a3e7-a915e1d362ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394d4fa3-9005-4101-a9bc-7fbebb98b009",
        "cursor": {
          "ref": "484a1d4d-2b6f-41d2-a1f0-a38fe41f133c",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a7ef29ad-ee26-4279-a600-946639793c4b"
        },
        "item": {
          "id": "394d4fa3-9005-4101-a9bc-7fbebb98b009",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "81b66e15-d01f-4108-a48f-57079954375b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1e36e6-ec06-49c0-8bbe-1c5db197caa4",
        "cursor": {
          "ref": "049a41a1-0550-4425-b520-c00b4b8f9fbe",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f1fb07e2-e259-4177-b802-58cb27dc2188"
        },
        "item": {
          "id": "5d1e36e6-ec06-49c0-8bbe-1c5db197caa4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1a7581d9-292b-417a-992e-66b6f8a583e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 143,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "b6e5bfd8-86ea-439d-9497-6be09996a9ba",
        "cursor": {
          "ref": "1a8c81d1-190e-42b9-8708-8b4f3d9d596d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e553c4b0-466f-4db7-8609-1b041e6da563"
        },
        "item": {
          "id": "b6e5bfd8-86ea-439d-9497-6be09996a9ba",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6ec18907-699b-484a-aa72-98afc759d0e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 133,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2666916f-a843-4626-a1a7-b0f877bf2769",
        "cursor": {
          "ref": "49767e6e-678c-4c91-9fb7-63bff9ed07fa",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "33aac4da-ae2f-48a0-9f57-2002492d817a"
        },
        "item": {
          "id": "2666916f-a843-4626-a1a7-b0f877bf2769",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "611d00b1-aa3c-4a18-851d-45543fa7dcc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d324d01d-46d4-492b-98a8-100e3b4a4fdc",
        "cursor": {
          "ref": "d319f553-eb37-4cde-9204-a4d9b03eb280",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "841f4f63-6f17-4600-82fb-2fbed96d7024"
        },
        "item": {
          "id": "d324d01d-46d4-492b-98a8-100e3b4a4fdc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7531adc8-50e9-45fe-a874-b02c3030cc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fd9075-f45b-4065-8dea-3a4426463f74",
        "cursor": {
          "ref": "54ce58b6-7bc5-47bb-b913-1392b98ac2ab",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8786a25a-8af7-4179-a316-dedfa8a07635"
        },
        "item": {
          "id": "97fd9075-f45b-4065-8dea-3a4426463f74",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "139d15fd-5d38-4506-97c2-6a82c50d4746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4558aee1-d74c-4808-976c-7040b55b03cb",
        "cursor": {
          "ref": "240cef16-c583-4d63-a90e-6c0d021fa703",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d831fdd5-a593-4a21-9161-030cb1894f8f"
        },
        "item": {
          "id": "4558aee1-d74c-4808-976c-7040b55b03cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "94153492-ec5b-497c-b08c-cbf9b2078ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f0cb41-4ce5-415f-9ecf-2b85f99d446d",
        "cursor": {
          "ref": "d535f966-51ea-458a-a1a8-2aebedad119e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5d929279-1d80-4f08-b417-1d0439a339e8"
        },
        "item": {
          "id": "50f0cb41-4ce5-415f-9ecf-2b85f99d446d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a64a9c2-0854-4a98-bc35-a592c29addd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934f796b-d869-481d-ade1-79d717da0d86",
        "cursor": {
          "ref": "a7b8e04a-a4d6-4bdd-b8aa-d3511b14e3e1",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6e712894-d73a-4383-a889-b49e8152be92"
        },
        "item": {
          "id": "934f796b-d869-481d-ade1-79d717da0d86",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d92bd37f-b8f2-4aa9-a893-e6de23934a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e57e48-6eee-4dfb-870f-7198986ea23d",
        "cursor": {
          "ref": "af6ab857-4213-4b38-9ded-afb324fdc4ed",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9dc70a3f-1807-4cc8-959d-d37045e815f3"
        },
        "item": {
          "id": "f4e57e48-6eee-4dfb-870f-7198986ea23d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "46b11712-f67b-48d9-ae2c-f492a86b656e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17300e4-1ed0-4dee-b49d-71f08545c643",
        "cursor": {
          "ref": "0647eb77-2511-4f76-887b-81f616f4df0a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "df81ef7d-02da-46cb-bff3-5e5046e62867"
        },
        "item": {
          "id": "b17300e4-1ed0-4dee-b49d-71f08545c643",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f1d516c6-e5be-4636-94ce-cf3c226fc624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7141cd-70d3-4770-b5c9-30735cdd4d64",
        "cursor": {
          "ref": "4614631a-ad78-468e-872d-8a361e7136a0",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "440938f2-98e5-4cfe-a458-5fc010f8fb9a"
        },
        "item": {
          "id": "2c7141cd-70d3-4770-b5c9-30735cdd4d64",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6c5d65a3-dfda-4138-829b-ab98007d1353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f781b05e-354f-4e54-9643-4e5afe8b1038",
        "cursor": {
          "ref": "0c67ceee-d620-42cf-b828-17ef65d66948",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a04a7c2e-b5db-4fed-bc4c-637513d480e2"
        },
        "item": {
          "id": "f781b05e-354f-4e54-9643-4e5afe8b1038",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "abc466f5-69a2-4c84-bbc7-016bdb37030b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893c2410-6479-48f6-8297-6045fb1686f6",
        "cursor": {
          "ref": "077f9f37-a736-424f-a549-8e4aa268eb04",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bad452d0-b32f-4517-8f53-4d9eff8ecfc8"
        },
        "item": {
          "id": "893c2410-6479-48f6-8297-6045fb1686f6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d553f821-eb69-46ca-82e6-a2030ff60e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a9eb25-f2dd-4ac2-8e92-65a863b05428",
        "cursor": {
          "ref": "03b02130-c989-4278-b4cc-eed7f9df82de",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "469d962b-a947-4d8f-8402-774032e72f60"
        },
        "item": {
          "id": "80a9eb25-f2dd-4ac2-8e92-65a863b05428",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "005c3ea6-e62c-4286-b73d-c5a5860a675f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2145e7d5-4cbb-473e-9ca9-31ef9a84ea9a",
        "cursor": {
          "ref": "1a064e78-de2c-40b5-9a15-487f7f1cef99",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "12a5dd27-4db9-4f8b-b41e-cc75a18bc354"
        },
        "item": {
          "id": "2145e7d5-4cbb-473e-9ca9-31ef9a84ea9a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "df6429ae-c4e0-4796-aee4-d770e2bca62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42af7f9-bce5-483a-8349-615d1369a4dc",
        "cursor": {
          "ref": "d24d7d1f-d958-468c-aba6-9a7514425b61",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "556e33ed-45ee-4a5f-bc84-bbb2c332d677"
        },
        "item": {
          "id": "c42af7f9-bce5-483a-8349-615d1369a4dc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1131fb20-9a41-481b-b475-ed791bc8542f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723fe47f-9309-4221-8ba1-6ee0babbdef8",
        "cursor": {
          "ref": "341001e8-3c10-4af5-ab6a-d5152db2d84d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f4ad902e-0c41-4807-adaa-9a44e06cf6aa"
        },
        "item": {
          "id": "723fe47f-9309-4221-8ba1-6ee0babbdef8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "83249217-bdc6-4c0f-ae59-5ce23102a62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7085cd-9436-4079-9e08-0e9c17159ad3",
        "cursor": {
          "ref": "b6e75e93-33a4-4a31-a3a2-97eb8b281410",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "35a13d00-7339-49e6-a6fc-bfb9bbcc904d"
        },
        "item": {
          "id": "da7085cd-9436-4079-9e08-0e9c17159ad3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2152e7c7-64e5-496c-a44b-a3b26e03a536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b70160-af56-45a7-80fd-998c29dce12d",
        "cursor": {
          "ref": "2d66071f-ebeb-4ba9-b9c6-57b553310189",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b10c6791-aa68-4137-9de7-62df1570b2e7"
        },
        "item": {
          "id": "31b70160-af56-45a7-80fd-998c29dce12d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4d5c0706-77c3-430b-a6dd-c94a6945692f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cfe529-59c2-4a98-ac0c-19e341707b8c",
        "cursor": {
          "ref": "aeaf8f14-034c-46c7-9258-e8aec641d474",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b34b2ff3-4817-4c4a-bce6-2579a6dba740"
        },
        "item": {
          "id": "30cfe529-59c2-4a98-ac0c-19e341707b8c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "351f6e26-1153-4050-93ec-39fa57f95f76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 145,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ccee08f0-58aa-4b32-bb0d-4f395c7c70c2",
        "cursor": {
          "ref": "6e6e803a-915f-47ac-a79e-2347c1866a1a",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6f29d1ba-3e0d-4bfa-ad7e-d9ebca6d85f8"
        },
        "item": {
          "id": "ccee08f0-58aa-4b32-bb0d-4f395c7c70c2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "044b296f-f14b-4f7f-b270-f5b6b7c13739",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cc682f-7c5d-45e3-86d7-de7ab0a8a928",
        "cursor": {
          "ref": "8065c2b0-842b-45ec-b070-5ffa24666a2f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "19008317-6114-4c97-98ff-8f245c086593"
        },
        "item": {
          "id": "31cc682f-7c5d-45e3-86d7-de7ab0a8a928",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e5b81f9f-bb05-4f2a-a927-059149fb6511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b4680e-254b-41dc-be05-bc677c8ab840",
        "cursor": {
          "ref": "9e30e047-ae6a-47c1-a8d8-e1a2d519dccb",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "50154fbf-e891-49be-9c61-4ff9a1808e37"
        },
        "item": {
          "id": "e4b4680e-254b-41dc-be05-bc677c8ab840",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "af257de9-ca5b-4a1c-8781-bcd175ea83a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8866e249-edce-4297-a212-66a711d80447",
        "cursor": {
          "ref": "354c5f2e-fc7e-411a-8aa3-23c13573eeeb",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fbdc45dc-95d7-4b02-807b-b7aebaefcf8b"
        },
        "item": {
          "id": "8866e249-edce-4297-a212-66a711d80447",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "93492769-eaa8-4f54-ace7-59812fcb89c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b0c765-d757-44d1-862f-0920bdfe7e34",
        "cursor": {
          "ref": "04e45a51-517e-4e47-af4a-5200bc239c6d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "63def020-7d67-4456-8446-e4cd621debe3"
        },
        "item": {
          "id": "51b0c765-d757-44d1-862f-0920bdfe7e34",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9114fd83-0851-4b23-9504-accb7a03de7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd810c7b-496e-49a5-875e-835296ae36bf",
        "cursor": {
          "ref": "6470910f-37ce-49dc-bf3c-d69a85020dc5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2d1c8d36-a761-4b7d-a2fa-c9ab21d6145e"
        },
        "item": {
          "id": "bd810c7b-496e-49a5-875e-835296ae36bf",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dddd4835-57ab-4e9e-ad16-cdc8ef63309d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53544e58-4d08-43a9-b68b-58ff7e38d828",
        "cursor": {
          "ref": "e9d79332-3ed9-4d2b-9fb4-3afed0bd7d8d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5420ce95-0c35-456d-8b5b-b65cf35d146a"
        },
        "item": {
          "id": "53544e58-4d08-43a9-b68b-58ff7e38d828",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "88efa510-f2d3-417c-b8f0-602053e1174d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a691949d-4ca9-4f41-b610-de60585b3ab4",
        "cursor": {
          "ref": "98168c6e-dd34-40ca-b0a3-6ac50ff9912b",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "384e0535-3380-490a-9049-76f6b7bb79ee"
        },
        "item": {
          "id": "a691949d-4ca9-4f41-b610-de60585b3ab4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "132e5a59-1ccb-4e6f-9999-cf841ae8de6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcca04c8-c9e3-4842-9cf8-037b7392406a",
        "cursor": {
          "ref": "70990d89-6024-4bf9-9c09-a33a8ce0a37e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9d23aef9-3da6-4564-a469-5732d450669f"
        },
        "item": {
          "id": "fcca04c8-c9e3-4842-9cf8-037b7392406a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5d40e5fe-fdf3-4904-a4df-5e3a55fc8776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7dd735-f2fa-474c-8428-d89b9933f037",
        "cursor": {
          "ref": "c419af06-0167-48cf-a7b5-2973356835e9",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "207e5a4f-7510-4a5f-92c9-62d3fa34c55a"
        },
        "item": {
          "id": "3d7dd735-f2fa-474c-8428-d89b9933f037",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a3e55d9d-18c7-461b-bc39-ade52014e55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c15d07d-89ad-47b5-86be-15aca779cdb0",
        "cursor": {
          "ref": "0ed0b1c2-8b21-412f-b0dd-ad150114f7be",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "09c9b35e-37ba-4b39-9c05-2a04675dd0a1"
        },
        "item": {
          "id": "5c15d07d-89ad-47b5-86be-15aca779cdb0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "824ae4ea-3648-4e81-990b-57ad39444429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a77cafe-a26b-4c68-a1a7-3d00f4e43a3c",
        "cursor": {
          "ref": "475fd432-7aec-4368-b93e-8a326eab2918",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b02206f5-1244-476f-8b8e-d7bc52a45342"
        },
        "item": {
          "id": "2a77cafe-a26b-4c68-a1a7-3d00f4e43a3c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6fff18ad-5cbe-49d0-8b22-83137e925da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d09777-4e7e-4ad2-a0da-7a7c66aba501",
        "cursor": {
          "ref": "aa392439-b45a-4a4a-bfc2-70ccedd63963",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "42f4e0c5-4174-4bfb-96f8-4685f73d5a60"
        },
        "item": {
          "id": "a2d09777-4e7e-4ad2-a0da-7a7c66aba501",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fb8eda41-956c-4d2d-afa2-b3c62b84d9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce2764c-b465-4166-ba38-b9371d1f513e",
        "cursor": {
          "ref": "f9e6ba60-4258-4ffc-81a0-92f54fffa217",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6780d7b2-579c-4a3d-a5fb-e8769c7e886b"
        },
        "item": {
          "id": "8ce2764c-b465-4166-ba38-b9371d1f513e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "65d035b1-3cc8-4a89-8d12-32701511891e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bb5e66-ac69-4348-bb61-956f5041d2ca",
        "cursor": {
          "ref": "df7e1c31-9430-4849-a215-4283699092d2",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "264e3f6a-570c-44a8-bddd-055bf4d68b59"
        },
        "item": {
          "id": "d5bb5e66-ac69-4348-bb61-956f5041d2ca",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "502c090a-159c-49cc-aef8-53bb436e07ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 160,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "3e49b4c0-a1d9-4e29-aade-58db2b34428c",
        "cursor": {
          "ref": "026b3822-af87-44a7-b9df-65c8f5a7ab47",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ac4dcfa9-655f-4149-959b-aa6811c5ee56"
        },
        "item": {
          "id": "3e49b4c0-a1d9-4e29-aade-58db2b34428c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "628a2402-421e-4189-97f0-618403d91726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750296ce-607a-47b1-982b-dc625c43046f",
        "cursor": {
          "ref": "c63d2fd8-14ef-4e9e-9c6e-320775257c08",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b6fc8f03-0e7e-44b7-93ef-aa002b6c88c9"
        },
        "item": {
          "id": "750296ce-607a-47b1-982b-dc625c43046f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "96e4e4f3-041c-45fd-a4f9-836f196aa934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d18d556-4d69-4892-8884-d19580203bb7",
        "cursor": {
          "ref": "1da767b1-ee8e-41de-ac2f-77f0bc0c17f7",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c3fb3897-fe36-44d8-94bd-07fb65bf1fd4"
        },
        "item": {
          "id": "5d18d556-4d69-4892-8884-d19580203bb7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f24383ca-2dcb-4c9e-b498-acf22736fbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc671b76-38b4-42df-a5d0-cfe9d0ee65ff",
        "cursor": {
          "ref": "4e6154bf-3279-4727-941f-2fc4e824f6e6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a8fa2dce-77d9-4b62-a339-9e68209f80a3"
        },
        "item": {
          "id": "cc671b76-38b4-42df-a5d0-cfe9d0ee65ff",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1431793b-b171-43c2-bb8c-b13efa11f97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26d5cd3-ddf9-4ed3-b96f-598afb93315c",
        "cursor": {
          "ref": "68ae45d0-1dec-4867-8b2c-70802ac8bbec",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cbb7212a-0f81-4271-ae0e-640e4b89b6df"
        },
        "item": {
          "id": "d26d5cd3-ddf9-4ed3-b96f-598afb93315c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "88db78a3-c6f7-4133-9168-06200c27572e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43b622a-58c5-45db-ba2e-a78691231f2f",
        "cursor": {
          "ref": "aa3273bb-b4eb-43b6-94b4-45a6784f0bc1",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "23c4f273-5f5d-4259-8f25-09499b8789dc"
        },
        "item": {
          "id": "b43b622a-58c5-45db-ba2e-a78691231f2f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7ef28224-fffb-49e3-bc14-7d9e10225f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95623154-5130-4d67-9a7e-a94cfad2b0a7",
        "cursor": {
          "ref": "c9c508be-4aa6-4180-bb8b-ed3232fb0738",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9486a935-2d83-4776-9419-d2b8ba37535d"
        },
        "item": {
          "id": "95623154-5130-4d67-9a7e-a94cfad2b0a7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1c54211e-6e15-4775-b276-78fd2d852855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3ff4f4-25af-4401-8df9-05a908343c1f",
        "cursor": {
          "ref": "b97dd4e1-e808-4efd-8903-d51e25bf2c5e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6a46a87b-a6ea-47d1-870d-6f749ace5532"
        },
        "item": {
          "id": "7a3ff4f4-25af-4401-8df9-05a908343c1f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "20ae84a7-4486-4049-97d1-de35c49a721e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43abee5-27dc-44a0-b269-a42d164493e9",
        "cursor": {
          "ref": "80cf6ff7-59ae-4160-9180-9ab9745e8132",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "315bfd36-d9ff-4fcb-b98e-4c62577eb0d0"
        },
        "item": {
          "id": "b43abee5-27dc-44a0-b269-a42d164493e9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9bacdd6b-bd4b-4b03-bacf-5ea02d84290b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f25bc80-42b1-4f4b-8697-8888e8ced5aa",
        "cursor": {
          "ref": "1f66d822-eec2-4fcd-b7ee-b9fd231b2d0a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c76dbaf1-008d-43b4-95a6-c12bb03b68ee"
        },
        "item": {
          "id": "8f25bc80-42b1-4f4b-8697-8888e8ced5aa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dc09c39b-2e10-47bd-af53-364edffcfb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673bed9d-7f07-4cae-910e-1db8041541db",
        "cursor": {
          "ref": "f987a0bb-fef0-4ec2-8bfd-86440de8cc36",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c66cdd62-d6aa-4158-a83d-1f55e32494c9"
        },
        "item": {
          "id": "673bed9d-7f07-4cae-910e-1db8041541db",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8894b5ea-90b0-4a2e-89d2-1b19dc59046e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186d9140-3401-4cdc-9cf1-8c7a6b401dce",
        "cursor": {
          "ref": "542e67dc-7831-40e4-a9c4-11de39c559ea",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "72a982a2-cd85-4240-85a2-b2d4a67bb73d"
        },
        "item": {
          "id": "186d9140-3401-4cdc-9cf1-8c7a6b401dce",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3e27686e-0ba3-40e2-8992-fbe74b523bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf32794-ee4d-4af9-861f-560e5893fa44",
        "cursor": {
          "ref": "301a6e4f-4d24-4c8c-b870-7c1bee77f931",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7024bb30-3423-4fc5-8d77-da624eaf5076"
        },
        "item": {
          "id": "adf32794-ee4d-4af9-861f-560e5893fa44",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0649137f-c69f-48d4-af5d-95c31cfefe56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fd628e-f0e8-4f20-9912-6993294a9047",
        "cursor": {
          "ref": "8fc08dbe-caea-49e0-9a23-c7b4f7de3bd3",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a67f3918-4ba7-4f48-97ef-1e9aed75b92b"
        },
        "item": {
          "id": "e3fd628e-f0e8-4f20-9912-6993294a9047",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c8d301da-6d00-4900-a857-ff298bd01b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8543f577-b66f-4943-a819-e317506e3329",
        "cursor": {
          "ref": "59d14ceb-5b6e-4273-a7fd-e03693749c49",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "58b46ffa-da9e-4d41-8efc-44d855a4ac6c"
        },
        "item": {
          "id": "8543f577-b66f-4943-a819-e317506e3329",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "06ea5c1c-7270-412f-8b88-0278644d4c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b002a19f-47b8-4d21-a520-740d2f0f7034",
        "cursor": {
          "ref": "b1121582-3b42-4e23-a16f-378338f96362",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "762aeb15-5725-46d3-ad3a-96ae5d17aede"
        },
        "item": {
          "id": "b002a19f-47b8-4d21-a520-740d2f0f7034",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b6c8a74c-83de-44e5-90b1-dc7b07ad3ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b4a24e-9d55-430c-b9fd-814ae42ae2cf",
        "cursor": {
          "ref": "e6400dfb-891a-4f8c-9131-96d6afbe1fae",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "970a7426-94fb-441a-9392-589ef19441d8"
        },
        "item": {
          "id": "c2b4a24e-9d55-430c-b9fd-814ae42ae2cf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "352bd852-fb3d-4d92-bb04-ba676b8cbe77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b519f2e-d338-4a1f-b723-f2a28fd09b7e",
        "cursor": {
          "ref": "eb7195bc-eae6-4408-b3f4-6de562a1d9ca",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2d80c2da-4d8a-4de7-9a2e-47d1e504574f"
        },
        "item": {
          "id": "5b519f2e-d338-4a1f-b723-f2a28fd09b7e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "cb30b3fb-5b54-4f23-8f02-42bfcfd27425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c04fe92-1609-4a02-9e1c-a3a0834a3f8c",
        "cursor": {
          "ref": "bde373bb-b221-4253-9ec9-e2e0665a119a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2fb029b2-96cc-42ed-8a7b-4291769f6558"
        },
        "item": {
          "id": "7c04fe92-1609-4a02-9e1c-a3a0834a3f8c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5aeba73b-64d5-49c5-aa49-c9052823a28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514bbc42-24b2-44d9-ae2f-d2b21bd1c76d",
        "cursor": {
          "ref": "352586ac-f179-4915-a660-dc966da4cffb",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1547ef46-9fa5-429b-a00a-d8b860732a5f"
        },
        "item": {
          "id": "514bbc42-24b2-44d9-ae2f-d2b21bd1c76d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8b0bbbb4-f291-443a-aa5b-8e798596de04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d34f28-3747-4729-8d47-980ae706de83",
        "cursor": {
          "ref": "57e4ff6b-b12a-4d54-8f3c-2f16202ee9bb",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d7e4c9d1-eb81-42e1-b623-ead8e139c8ec"
        },
        "item": {
          "id": "a6d34f28-3747-4729-8d47-980ae706de83",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3731ba23-ff66-4092-83c8-27e3341239c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f012acff-63bb-4f1d-bfd0-10c9ea380ee2",
        "cursor": {
          "ref": "555ad498-13db-4717-9b45-c70942e431b2",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e0fc5e2b-d2e4-4767-bd5c-784e8fdc1e20"
        },
        "item": {
          "id": "f012acff-63bb-4f1d-bfd0-10c9ea380ee2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0e2410ec-2a8a-4975-a6e4-0daee4696876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c84551b-3609-4e4a-a208-282bb6317704",
        "cursor": {
          "ref": "ddb1ab7e-40c6-4752-aa86-5e6569e08ba6",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3a573ee0-6afe-4343-8973-2fc2119c9f4b"
        },
        "item": {
          "id": "4c84551b-3609-4e4a-a208-282bb6317704",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8fad2c1f-36dd-467a-8596-9572d51f58c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9162bedb-5afd-44af-976e-f68f6860d87a",
        "cursor": {
          "ref": "3afdff42-d0b9-4f61-a697-7d8349571a7d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0605b237-ab70-455b-b700-f5ff18a35b2c"
        },
        "item": {
          "id": "9162bedb-5afd-44af-976e-f68f6860d87a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f7031dbc-7aff-4332-b12e-44075642bdf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf2a273-296f-438e-833a-f03dc66a7830",
        "cursor": {
          "ref": "f5958fc6-f066-4276-ab59-26ad671fc67c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5b9d7386-7f16-41bb-bf54-65818506b9cb"
        },
        "item": {
          "id": "eaf2a273-296f-438e-833a-f03dc66a7830",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "49bce7df-7659-404b-86ff-257a4df7c5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80864251-65a1-459b-ae4c-899261387fe1",
        "cursor": {
          "ref": "6f77246d-a3a6-4abb-9417-69b8698404e0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "81f846bb-8baf-474d-87df-ad0c4b1fd1bf"
        },
        "item": {
          "id": "80864251-65a1-459b-ae4c-899261387fe1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b0cb20da-3d8a-416a-810b-633798117b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a398c75-e387-431b-84c6-9635a18965f2",
        "cursor": {
          "ref": "816915e3-66d2-4329-945b-3255487e410e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e375b194-ba45-45e4-a1f5-b4bd57cacd02"
        },
        "item": {
          "id": "0a398c75-e387-431b-84c6-9635a18965f2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e95cb8a7-f997-41ce-8be2-003757663052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217ddb4f-a92b-40cc-b420-396a47a43a61",
        "cursor": {
          "ref": "0bc4cca1-87de-42b5-85ee-b212d77b681d",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "14d61289-f6b3-4ddc-8682-a1bd2704914c"
        },
        "item": {
          "id": "217ddb4f-a92b-40cc-b420-396a47a43a61",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "949dc50e-80f7-47c6-ad85-faa77c112529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6502faf0-94ca-41e2-89af-035c2ba96f15",
        "cursor": {
          "ref": "3263dc64-8eef-4cbf-aadf-0a3d708092c4",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b46f1fc6-79b2-414a-884a-c39ef97cbc69"
        },
        "item": {
          "id": "6502faf0-94ca-41e2-89af-035c2ba96f15",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c45f5789-5d7a-4089-abb3-50c592fee1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a96e38-2ede-4b72-89e4-fdf4c1cf00c6",
        "cursor": {
          "ref": "77c42de7-67ae-4df5-ac82-f7d9974252e4",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5d8c10d6-9751-415e-9c07-9392ead40196"
        },
        "item": {
          "id": "18a96e38-2ede-4b72-89e4-fdf4c1cf00c6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "26ce7f70-29a2-43ad-89c8-0acc11f59873",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "bffca921-cbf3-4616-b70a-0e18f11147b7",
        "cursor": {
          "ref": "7341f5d1-7023-4952-bb26-34238d0ebe73",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ede96a42-9e3c-41d4-9166-6c3e281d13fd"
        },
        "item": {
          "id": "bffca921-cbf3-4616-b70a-0e18f11147b7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3d60278e-cc78-4f75-b5f8-74a5f8cc3f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f8994d-c027-4dce-8d28-209cd2028d77",
        "cursor": {
          "ref": "39243ce2-0c03-419f-aeb4-8b392b1ab177",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "172562e4-e7eb-419f-b5e7-75994a2a7e76"
        },
        "item": {
          "id": "a4f8994d-c027-4dce-8d28-209cd2028d77",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "936bb66b-444e-4220-bbd9-b930a2df64b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a42246-fbec-492c-94fd-cdfb427dbc85",
        "cursor": {
          "ref": "be2b45bf-3cf7-48ee-9337-f66fbc38afb5",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9e0e1c85-ffa2-4e43-9eb5-a823ec6ea07f"
        },
        "item": {
          "id": "17a42246-fbec-492c-94fd-cdfb427dbc85",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "67e5d47a-cc4b-48cc-9abe-ff1297afb274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13411e08-6b70-48cf-be85-3e689da9d534",
        "cursor": {
          "ref": "9c0d06cb-7881-4a63-9576-e362f9ae1a1f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7c390a29-2205-4a86-a498-997a0c12b103"
        },
        "item": {
          "id": "13411e08-6b70-48cf-be85-3e689da9d534",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "86de35b1-91e0-46b5-b3d1-c1979ac4532b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e1bbef-35cf-4a18-bcf2-5af346b8dfd1",
        "cursor": {
          "ref": "3468b765-b976-498d-92b3-343da2c1b372",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2c460ddc-de0d-4c6e-bcc4-bfdc80e77329"
        },
        "item": {
          "id": "44e1bbef-35cf-4a18-bcf2-5af346b8dfd1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2bb34991-3b71-451d-9958-34f2c289cb43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0773ce77-a2e7-4b70-873a-64f36256aefc",
        "cursor": {
          "ref": "db47a2cb-8f26-48da-97c8-fb6d7b8e355e",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9f80be1e-8dc1-4683-994a-0f8e993ad2b6"
        },
        "item": {
          "id": "0773ce77-a2e7-4b70-873a-64f36256aefc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a6c0c4d5-b318-4dec-bd30-949a4b197a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557d10d9-76a7-4c60-ac49-44763202d839",
        "cursor": {
          "ref": "6454ca1c-5872-481c-a9a6-d86c25d55b3c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52be14d0-2ce5-4dda-966c-58757acfd792"
        },
        "item": {
          "id": "557d10d9-76a7-4c60-ac49-44763202d839",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "edac8d48-167f-41d6-95d3-4cab9ce6f522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207552b2-fed3-4ec9-9c3d-147b14132678",
        "cursor": {
          "ref": "a67c7f70-5105-471f-ae77-14559c98a0a2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b9f2f0f4-ec9e-4cd7-99cc-0ae56498fabb"
        },
        "item": {
          "id": "207552b2-fed3-4ec9-9c3d-147b14132678",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2616fd39-714e-4d44-b3a1-a8ff1bea88f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3553c81a-2eba-4bc3-94de-c176f4af306b",
        "cursor": {
          "ref": "9bcbae00-0d62-4c6d-abeb-2663e1490284",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "695f0eb3-d957-4c22-896b-0e01510ccb8c"
        },
        "item": {
          "id": "3553c81a-2eba-4bc3-94de-c176f4af306b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "98c7e348-6707-430a-8f82-248d88079813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc5f224-f193-4a4a-ab39-36274b34164a",
        "cursor": {
          "ref": "b80896b4-5bf9-47b9-9753-c707d1787306",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "baf0912f-b200-492b-8688-09c84a0213f1"
        },
        "item": {
          "id": "fcc5f224-f193-4a4a-ab39-36274b34164a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "83797418-70ef-4831-b2df-42787f4bb89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6c9462-7ce6-4d2a-a9ff-266e59c4a77c",
        "cursor": {
          "ref": "aa1021b3-fad4-45f9-8f9f-3455c4202c9c",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b90e7c22-3948-4c40-bf6e-a2e37e742995"
        },
        "item": {
          "id": "5f6c9462-7ce6-4d2a-a9ff-266e59c4a77c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0f043b6b-de30-45f9-9c28-a51606366d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761e8e24-edc4-40fe-af44-3b61815ae10c",
        "cursor": {
          "ref": "04868dea-126c-476f-9329-4c00071934fc",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0cad7b4a-3a2a-4805-8423-4461ccc26e54"
        },
        "item": {
          "id": "761e8e24-edc4-40fe-af44-3b61815ae10c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "45ecc951-899d-49b1-9d9a-60340c817996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcf921c-c49b-425b-b59c-ea05474bd314",
        "cursor": {
          "ref": "2c1866f9-6ac0-45a3-9142-7db605714c7d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cccf59bb-ac8b-42c0-9ea6-00a27b190c2e"
        },
        "item": {
          "id": "2dcf921c-c49b-425b-b59c-ea05474bd314",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7668f0fe-b654-444d-bad9-771979f2b25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05e2d12-70b8-49ab-b878-6bc7b93e9500",
        "cursor": {
          "ref": "25c306df-583c-48c9-82e6-d875b1398b46",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c1ce8d61-26d8-490b-bbd1-81e80ba771fc"
        },
        "item": {
          "id": "e05e2d12-70b8-49ab-b878-6bc7b93e9500",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c7971898-96b6-479d-8cab-d0f75f1761c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd9d7c3-8a1a-4fd7-95be-ba2e81625e27",
        "cursor": {
          "ref": "4796e2f3-c348-46bc-93b5-66530727213d",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "10600a77-2d73-44ab-8076-58494ecf4d18"
        },
        "item": {
          "id": "9bd9d7c3-8a1a-4fd7-95be-ba2e81625e27",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5a504005-a958-4d26-a9f5-ce742fe2b555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2b08d8-9c5c-4199-8013-3cb87e289a33",
        "cursor": {
          "ref": "99560cc0-efe8-4465-9da1-acc86d931a51",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a945389f-4c87-47ed-b0db-53a7464dbb8d"
        },
        "item": {
          "id": "cf2b08d8-9c5c-4199-8013-3cb87e289a33",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6ac61bf9-5258-4a99-b746-a8192613ba61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff0ff06-e37f-46c4-85d5-a71dd560d2fa",
        "cursor": {
          "ref": "d4ebd67f-5325-4644-8b01-9d2ea654b292",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7b4feb69-68f3-4405-bd92-f587ebdd6aba"
        },
        "item": {
          "id": "fff0ff06-e37f-46c4-85d5-a71dd560d2fa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "67fac60e-107b-49b2-ad36-4f52c74dcabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6652cf80-20d8-4c5b-b23f-bfabd459d953",
        "cursor": {
          "ref": "24169ccb-6046-496b-ab43-7d8d9efe9779",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6ced2755-1ff3-49ae-976f-bf19dd9816b5"
        },
        "item": {
          "id": "6652cf80-20d8-4c5b-b23f-bfabd459d953",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0e46a23f-0b7d-4363-912c-9e14ac33473d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac4fa69-e11f-468f-98f6-34e1974a7f3e",
        "cursor": {
          "ref": "5389efb2-f0fd-44a8-8d27-89c831977042",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2e99433b-884e-4074-8990-b3ad4cc5659e"
        },
        "item": {
          "id": "bac4fa69-e11f-468f-98f6-34e1974a7f3e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7de883ef-fa9d-451b-88c7-cbf4fe988580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3598f431-d05d-449d-b34a-3e6d4daafdde",
        "cursor": {
          "ref": "57fc9f54-cc24-4595-afff-3309f7229335",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b21bfdce-0522-4907-b5d5-de6750f2629a"
        },
        "item": {
          "id": "3598f431-d05d-449d-b34a-3e6d4daafdde",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3c4102c9-3a0f-4893-a378-2a650ad38143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921f19ea-0c1a-4bb4-a74c-45ad086f251c",
        "cursor": {
          "ref": "0c7a6619-d3ad-4f5b-8145-6eea834bfde0",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0af59b92-5726-400f-a219-3fa615b777eb"
        },
        "item": {
          "id": "921f19ea-0c1a-4bb4-a74c-45ad086f251c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "99c539fc-fd95-425c-b9c6-42a34f54c0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a6b420-3d6d-438f-9961-d683159ebcd8",
        "cursor": {
          "ref": "4a478246-342b-4f20-a54e-b061ddffd4cb",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9d8dac6b-4674-41ed-823f-a577d6e68886"
        },
        "item": {
          "id": "18a6b420-3d6d-438f-9961-d683159ebcd8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "31febd8b-ca10-491e-bd2c-6c61bf825961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52546ac-33c0-4cb9-8e4b-9ed6e4b31384",
        "cursor": {
          "ref": "152e9646-21e1-4b74-8063-80a44dbe86f6",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "29f1d18a-11bb-44ce-b7c1-ac8f0a63906d"
        },
        "item": {
          "id": "d52546ac-33c0-4cb9-8e4b-9ed6e4b31384",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a617d83a-3a6f-4299-91e6-390bd68e9caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a65d5f-0316-46e8-9d46-c5ed3991f2cf",
        "cursor": {
          "ref": "a2e19db1-df79-4da2-9419-2ec2a1022ae5",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "56d13c4d-37e0-4239-b1cb-26702b10f290"
        },
        "item": {
          "id": "06a65d5f-0316-46e8-9d46-c5ed3991f2cf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d102dd25-ae6b-4856-897c-6ad0247a569a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f852a9-ffa6-4894-9cbe-697ee306a603",
        "cursor": {
          "ref": "7ac04851-f0e7-4d28-aadf-b095162859c8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ed1d9d02-763a-4dd4-a224-f443003f2674"
        },
        "item": {
          "id": "d2f852a9-ffa6-4894-9cbe-697ee306a603",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5ff6706d-586e-48a4-ba9b-3179b84a404c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a4a12f-0b26-4b45-9a42-965b2715820f",
        "cursor": {
          "ref": "74f178cd-dc1a-4294-8e2a-336721e7bd62",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f1067789-5055-43c1-8b98-4f916e1b7654"
        },
        "item": {
          "id": "47a4a12f-0b26-4b45-9a42-965b2715820f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "436bae36-0920-4e5a-8e1a-0d9733f951ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913f2f3b-5a8e-4b7c-8833-1785a46d4ccf",
        "cursor": {
          "ref": "6941b11b-8f04-48a1-bed5-76a0d0de12b5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9dc19526-ecc1-4852-bc35-2ea1490f2e83"
        },
        "item": {
          "id": "913f2f3b-5a8e-4b7c-8833-1785a46d4ccf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "692828c9-c7d2-408e-a185-6d97f52353ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a55bf45-0ef3-4e68-9622-052dba1a97a5",
        "cursor": {
          "ref": "b7007b45-3a3a-4013-84e8-d57d15a356ec",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e2ac8a1b-2f04-49c5-90dd-605a26874b9e"
        },
        "item": {
          "id": "1a55bf45-0ef3-4e68-9622-052dba1a97a5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a2f7e1dd-b7e6-45c2-82ad-3339c13c3114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3dafed-7666-4036-99ba-722fd7b83665",
        "cursor": {
          "ref": "e7693ec5-1068-43ac-b6c8-9bca1c975f11",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6ee606a8-773f-4ef4-a669-80c6abf7ed7e"
        },
        "item": {
          "id": "7f3dafed-7666-4036-99ba-722fd7b83665",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b984302f-d82e-44fe-a890-00b4ac913db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062519d1-e061-44af-bc23-5ec7c6179c1a",
        "cursor": {
          "ref": "546797ae-a4a4-4da5-a8a7-ca61535fd9e9",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9989a9a9-c098-40af-83c4-68b3b8de13bf"
        },
        "item": {
          "id": "062519d1-e061-44af-bc23-5ec7c6179c1a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2ede1e13-2a55-4eee-89cf-3ff45a5f8f83",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "af1c277a-ee24-4a19-8e89-b19afe357375",
        "cursor": {
          "ref": "55259fe2-4ed8-4186-801f-54c06255215f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3eba5337-0893-4784-b9b8-b7bc8cda5957"
        },
        "item": {
          "id": "af1c277a-ee24-4a19-8e89-b19afe357375",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "02a0d74a-93f5-4742-a3ec-868052c3439e",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8302590b-7bb8-4923-9c0c-72707075523e",
        "cursor": {
          "ref": "6f844b95-798d-4b82-a051-5ca412a4c40a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "85f38756-2431-4266-9b21-f8dd867f32c0"
        },
        "item": {
          "id": "8302590b-7bb8-4923-9c0c-72707075523e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cb813be3-3980-4e22-ac51-c482f2a7bc2b",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ae85d3cd-442e-4fad-a975-c31db4fe3548",
        "cursor": {
          "ref": "bead2874-234d-48c1-93f0-45ac80aae0f6",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6c0aa2dc-3af5-4ab3-92a3-6f2284c8fb4b"
        },
        "item": {
          "id": "ae85d3cd-442e-4fad-a975-c31db4fe3548",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2d6241f9-e012-48bb-b6ce-351cfe808ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ea5e57-ee69-4a9f-b648-1cbe4257100c",
        "cursor": {
          "ref": "5ecf836f-4913-42e1-8ca8-d9cccbedde20",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "968e1edc-c73c-4d7a-9382-98ff658037e2"
        },
        "item": {
          "id": "78ea5e57-ee69-4a9f-b648-1cbe4257100c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "97a3f5e9-6732-408a-990a-2421b39f562e",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b3e22f19-d078-49f4-8f2e-ad4f8a094164",
        "cursor": {
          "ref": "626588c3-bddd-4956-9b2f-c373cd2782a2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f5700c21-d679-4cf5-aac4-e7105fa3b78e"
        },
        "item": {
          "id": "b3e22f19-d078-49f4-8f2e-ad4f8a094164",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8ce698c6-09d7-4601-a7a9-db62b7c89880",
          "status": "OK",
          "code": 200,
          "responseTime": 195,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b38369bc-6b8c-4d03-86b1-6df8ccece1fb",
        "cursor": {
          "ref": "e4360f03-deda-4df2-b964-493b0910e44d",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "406db90e-841d-4de7-852d-627f8090f59d"
        },
        "item": {
          "id": "b38369bc-6b8c-4d03-86b1-6df8ccece1fb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4ad8320e-cc03-4475-b143-f38b4194f6f7",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a45baa92-4d75-428c-9a57-3bd563fca85e",
        "cursor": {
          "ref": "2ad3c5b0-a88b-4c6d-b7d4-bd497d583d28",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "685afc7b-6609-43e8-b15e-0cc184052294"
        },
        "item": {
          "id": "a45baa92-4d75-428c-9a57-3bd563fca85e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "36b8cab7-be25-4ffd-9908-b94661e30550",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "34a1498d-fa98-4d4f-bea6-513f35e59555",
        "cursor": {
          "ref": "5920fcd8-43d6-4bf6-beb1-7f1c026782b1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "dd6a331c-f698-489b-a9c6-46dffeaee6d8"
        },
        "item": {
          "id": "34a1498d-fa98-4d4f-bea6-513f35e59555",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ba21786f-a40a-44bc-8c36-6979af37f512",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4262c0d5-7936-49df-9158-d25d75e8bb39",
        "cursor": {
          "ref": "5822be92-5eb6-4bd0-a6b1-af245f40daf9",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e065c961-80c7-4789-ac19-0d1d6c42340b"
        },
        "item": {
          "id": "4262c0d5-7936-49df-9158-d25d75e8bb39",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f1e7ec1b-a595-4ad6-8762-6a1eb238ffdb",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "191f91c1-e11a-4365-86a4-fed8678def46",
        "cursor": {
          "ref": "7f341c2c-7e97-4469-9cb3-5dc0178f2a2f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7d7b5196-4e1d-4046-b359-419f2629eb40"
        },
        "item": {
          "id": "191f91c1-e11a-4365-86a4-fed8678def46",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bd5e8545-335b-46dc-b038-c7ff2714d75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8763849-e948-4985-8bdd-15e72550e4fb",
        "cursor": {
          "ref": "50188de2-8dd0-4b2a-b14e-d01e5cc482a1",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "250c5168-f0b1-4cc1-b41e-5ef15d570f9e"
        },
        "item": {
          "id": "e8763849-e948-4985-8bdd-15e72550e4fb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2ea6eed8-cd31-4da1-956a-dbb313a00e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe82ae2-ef6e-4a39-a48b-8c2fdaf5cc96",
        "cursor": {
          "ref": "b43b643d-3124-4b3d-aa47-39cc4bff3052",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c03c96bb-5f15-4d30-9a14-9225e27b400d"
        },
        "item": {
          "id": "0fe82ae2-ef6e-4a39-a48b-8c2fdaf5cc96",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a779f3e2-c4f3-474b-94ec-169927a9f5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2fd8fe-cd55-4840-867b-b2e1a1ca809f",
        "cursor": {
          "ref": "a50e7d8f-e58e-4d73-852c-0f762bdf8e47",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "582ed2eb-b737-43c8-822a-d9c70bf20a70"
        },
        "item": {
          "id": "3e2fd8fe-cd55-4840-867b-b2e1a1ca809f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "42b4a2e9-f773-4d7f-a364-35c83e48dda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096f91c7-b41e-4880-bddd-92655ec76ec6",
        "cursor": {
          "ref": "8e8960bb-0449-410f-a324-a0f2d51bec70",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f82e4a28-5e89-48aa-be71-786c83e96155"
        },
        "item": {
          "id": "096f91c7-b41e-4880-bddd-92655ec76ec6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "715b32c8-bb96-41cf-9791-16263531b4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebbf6cb-2cb2-47ef-b2be-fa17e4b6a374",
        "cursor": {
          "ref": "d0bb91d2-6995-4ae0-8567-22bb8f87931e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1392758c-f5a7-4e01-89f5-28773cf2a2a1"
        },
        "item": {
          "id": "0ebbf6cb-2cb2-47ef-b2be-fa17e4b6a374",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b571b9be-63cc-4a8a-bb2a-a374bd9c6ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffef855-1ddf-455e-b2bc-b267a531e481",
        "cursor": {
          "ref": "854c9021-664f-4aa5-95db-110f46b9898f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c42f325f-0035-4bf8-9b5b-56919fca3701"
        },
        "item": {
          "id": "1ffef855-1ddf-455e-b2bc-b267a531e481",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "44fb9d5c-86a7-4207-a04c-c4a706e145e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fdbd02-732b-4e09-8bb2-22425b059045",
        "cursor": {
          "ref": "884a64d4-f693-42a9-a0c0-aa6bcb708a5d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6cc228a1-7a26-4e1b-afdc-eb27d18d6931"
        },
        "item": {
          "id": "c9fdbd02-732b-4e09-8bb2-22425b059045",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a11e3b7f-39fd-4c43-8883-97903f69d431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef20a4b-d8f6-4f93-9837-f6b10e53b51a",
        "cursor": {
          "ref": "d17d6988-a195-4bd2-9c67-111759f60e22",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "43c39aed-ccdd-404d-bf71-117d0c17e7e0"
        },
        "item": {
          "id": "7ef20a4b-d8f6-4f93-9837-f6b10e53b51a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "df6b47c9-1d12-4a41-990b-78f85d012edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895b61ad-fceb-4e11-afc4-c7d0ea6b331c",
        "cursor": {
          "ref": "d4eb3d4f-c5aa-434e-abeb-a927802ca00b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c66e36e8-e8eb-453f-b43f-aabd7dd21504"
        },
        "item": {
          "id": "895b61ad-fceb-4e11-afc4-c7d0ea6b331c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f3cfab4a-ddb9-42d1-97af-cb2379d9fafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4d3920-afd4-422d-b405-5f8c69d8e571",
        "cursor": {
          "ref": "0c251a96-3970-4d8f-b092-796dcfedd07b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "04010eab-48d0-4416-bb1a-5280a741f993"
        },
        "item": {
          "id": "ad4d3920-afd4-422d-b405-5f8c69d8e571",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "937a71ea-c4da-408f-b8db-4d8ab636340b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95e7ea0-efc6-4816-b881-a6d4129a7f0b",
        "cursor": {
          "ref": "0ef31888-db99-4c64-a530-b1858ad9262d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2f4126e7-429f-475f-8596-9962bbddd57d"
        },
        "item": {
          "id": "e95e7ea0-efc6-4816-b881-a6d4129a7f0b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "26442b5f-7f3d-49ab-a708-a5a08904feb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f086dc-3677-409e-b24f-1bd5e91abd7c",
        "cursor": {
          "ref": "c48bc70d-383c-418f-b8f8-2057d9ec134d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5119d324-08e6-4858-87a4-288d851edf54"
        },
        "item": {
          "id": "08f086dc-3677-409e-b24f-1bd5e91abd7c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fcca0041-e309-4fbd-a18d-e0ce24bce249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2762d39e-d62c-4ce9-bf6f-9f46a63dce46",
        "cursor": {
          "ref": "929fd577-3995-4e6b-bde9-8030bf38b1d5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2bd26dc9-0555-4224-b017-322a86840034"
        },
        "item": {
          "id": "2762d39e-d62c-4ce9-bf6f-9f46a63dce46",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4148ead5-9570-4050-ba84-dc7a43e6ca57",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "eabb1706-22ea-40d2-a901-2afc89c368aa",
        "cursor": {
          "ref": "28acbec0-7736-4993-a6f2-1689216130de",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "47f90441-a83e-4c34-8ae1-f8930653a761"
        },
        "item": {
          "id": "eabb1706-22ea-40d2-a901-2afc89c368aa",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2d5b6a25-4d8d-4cb3-8d2f-f4eda1824192",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3a7ef3d0-5caf-45bd-8771-be999c883e67",
        "cursor": {
          "ref": "875f80cd-7ddc-4ddd-b1fc-52ac7bc72013",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ccab66af-160a-48f4-8c25-a0db154d099e"
        },
        "item": {
          "id": "3a7ef3d0-5caf-45bd-8771-be999c883e67",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8b505c2b-71a6-4100-b44a-5add627e983a",
          "status": "OK",
          "code": 200,
          "responseTime": 198,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2d74b6cb-4d40-45a4-abd3-a47434125abb",
        "cursor": {
          "ref": "40f10bc2-dcaa-4816-bd8d-3ca0657fbafb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e9c23b5b-b7e2-4ea2-bf0e-6ea1f57a1fd2"
        },
        "item": {
          "id": "2d74b6cb-4d40-45a4-abd3-a47434125abb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5874b1ed-5679-483c-88e1-fade3fb26663",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "411d9f1c-dc00-4fe4-b41a-efcfebc4d159",
        "cursor": {
          "ref": "6832a4fe-da17-42f2-89bf-1fc8be2c941a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c853b663-bf68-426d-94da-bf50716cdece"
        },
        "item": {
          "id": "411d9f1c-dc00-4fe4-b41a-efcfebc4d159",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ab9a665e-3740-4a36-bf76-6b5c61f95a66",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6c97314f-3b93-4d2a-b085-955523f414c6",
        "cursor": {
          "ref": "68a689e6-2736-4e3d-97ed-b1029a8a5dc4",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3997f7a3-5827-440e-8956-9ca799c5731e"
        },
        "item": {
          "id": "6c97314f-3b93-4d2a-b085-955523f414c6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f74100ff-5b31-44b8-9e64-c93bb1704f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8b0985-63f6-48ac-8651-e06505428ecc",
        "cursor": {
          "ref": "202e7873-bf20-40ad-9714-0a8769d52478",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "64cc7a6f-9de3-4976-92b9-03dc1aac1350"
        },
        "item": {
          "id": "7c8b0985-63f6-48ac-8651-e06505428ecc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4de676c3-0195-4563-9c99-bdcb23b426e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911dbc38-c28f-444b-b1b0-bd0782554de4",
        "cursor": {
          "ref": "0f596687-ce57-4d55-9aff-0ce3a4139745",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c7f28c25-1b2c-4187-a19b-59bfafe8f83b"
        },
        "item": {
          "id": "911dbc38-c28f-444b-b1b0-bd0782554de4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "95234db3-23b2-46cb-b946-ffe7eb00dcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50ab2d8-3881-4547-aaef-ced7137f07ea",
        "cursor": {
          "ref": "5b011328-fba9-41fd-94fe-6978234077b3",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "653b0f7a-eb0d-46c4-849f-361e34610c59"
        },
        "item": {
          "id": "e50ab2d8-3881-4547-aaef-ced7137f07ea",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "180a426b-4b0d-4fff-9bef-953c02307d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8105122-7253-4dd3-b582-8a65cf317c71",
        "cursor": {
          "ref": "89b6503d-3cfa-466c-80c6-7ad849b2ab52",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3b436a97-17a4-401a-8086-77694091a054"
        },
        "item": {
          "id": "d8105122-7253-4dd3-b582-8a65cf317c71",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "41769c3d-90c2-482d-b84a-f99c1f7d3903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496a17f5-7543-4f52-aacf-83342902fe07",
        "cursor": {
          "ref": "88d3dc99-cad1-4226-9f81-a1d2348d240f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "63e83c97-e319-4e0f-bf80-14d354047c44"
        },
        "item": {
          "id": "496a17f5-7543-4f52-aacf-83342902fe07",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "41a3dbb5-df9e-47af-8b34-6947abbdedfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43698d6c-aef6-44ce-ae45-198d25b61854",
        "cursor": {
          "ref": "dd3093b5-6f1c-4867-9e2b-1a93b46e8f4f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "43d7b798-8dce-4cc1-aa6a-62e7ce0aad44"
        },
        "item": {
          "id": "43698d6c-aef6-44ce-ae45-198d25b61854",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "93ad3f89-111f-40c7-bc0f-fdeb38782b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcb2415-a75b-4af5-af3a-30d6bb8c2b45",
        "cursor": {
          "ref": "c60f8815-e9d1-4de5-bb12-7cae254a0008",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "08d65f86-d7a2-4c12-a65b-ffd0fa1d5f3b"
        },
        "item": {
          "id": "9fcb2415-a75b-4af5-af3a-30d6bb8c2b45",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "327fa235-a293-45b1-9b03-0e719f55fde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742a49ba-064e-430d-be63-d603577067fa",
        "cursor": {
          "ref": "23a92923-60ed-4951-b58d-147767c89165",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5b9d4788-bb63-4dda-b948-73a4b7f7d6f8"
        },
        "item": {
          "id": "742a49ba-064e-430d-be63-d603577067fa",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b6ec464d-5856-4227-ae91-70dff6d585bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71168d25-705b-4ea5-bed5-9da251e01070",
        "cursor": {
          "ref": "10200c0d-dc96-44f7-b10c-c6c9eab5baa5",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3ca67908-82ae-471d-90f8-af7fd90dc7e5"
        },
        "item": {
          "id": "71168d25-705b-4ea5-bed5-9da251e01070",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "420c4338-9026-487e-8f4e-7cb44cfe6999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efe8929-8ff8-43bb-b763-3fc67a9fb359",
        "cursor": {
          "ref": "b458a45d-a1fc-48c0-b43a-22bc30854fac",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "92dee6ec-f46f-4184-8183-4eb830c1aaf5"
        },
        "item": {
          "id": "4efe8929-8ff8-43bb-b763-3fc67a9fb359",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2f394f8c-f4c4-4227-9f23-fe28129f5d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a4feaf-7358-45a6-bd36-aac0e294a86a",
        "cursor": {
          "ref": "ca2ec607-7c07-4a6e-a4f8-991c8350a16e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "65d6d6e8-b3dc-4be3-90ed-7851b41b8627"
        },
        "item": {
          "id": "a9a4feaf-7358-45a6-bd36-aac0e294a86a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0c569d33-70c5-478d-8468-afb4ac3f1879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b956c6e2-20ac-4ad6-b016-3879ff89ff3b",
        "cursor": {
          "ref": "122a6335-d1e2-4c49-b137-20996f8d26ea",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "55726f1a-cf08-4991-a54e-2b90bda34261"
        },
        "item": {
          "id": "b956c6e2-20ac-4ad6-b016-3879ff89ff3b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ee998231-4f11-41da-872f-442ffb7393ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8724cad-c228-4c0c-8f02-d02f3ff210ef",
        "cursor": {
          "ref": "ec4f985e-da80-467f-ac2e-95708f869633",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "039e8479-8564-4d77-a199-9f6155a3fc35"
        },
        "item": {
          "id": "d8724cad-c228-4c0c-8f02-d02f3ff210ef",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4e7c0768-40b1-4ad5-8a43-db057b6167b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d9800b-3330-4fd2-8ad8-a6f3d0419584",
        "cursor": {
          "ref": "fb546825-7e4f-4c16-9185-ed14c7afeda3",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5230f15d-e107-465e-85fe-d12b937fd463"
        },
        "item": {
          "id": "59d9800b-3330-4fd2-8ad8-a6f3d0419584",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7c9dcecc-a975-4791-b9a5-a0e260d40f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e86584-3acb-479e-acea-879c6ea5760a",
        "cursor": {
          "ref": "37615a3c-7a97-456b-94cb-bd0c0ecfb909",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0bc15bd2-4ceb-4a66-8f28-49ce3c174be1"
        },
        "item": {
          "id": "a2e86584-3acb-479e-acea-879c6ea5760a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "db52b721-992c-417c-8972-1c6bdf2a5574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9366f1f6-e07a-4385-9de5-849b433639d1",
        "cursor": {
          "ref": "eb8c73ed-cc61-4ab5-96f6-787b3ff804b9",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "771182a9-7005-4727-84da-f76464d56429"
        },
        "item": {
          "id": "9366f1f6-e07a-4385-9de5-849b433639d1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "21a98f2b-3ffc-4495-8d1c-aa32a92dd5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f55fbda-2c7b-4225-b63d-880b0335e162",
        "cursor": {
          "ref": "83d528b4-3ca0-4c29-b5b9-bc62342bc1c9",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "74b06564-712c-4ff6-853a-83d40215e93e"
        },
        "item": {
          "id": "9f55fbda-2c7b-4225-b63d-880b0335e162",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "abddc165-3186-47b8-837f-765ea7221bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7271ed2-e905-476e-8df4-0060aa526cb3",
        "cursor": {
          "ref": "2a6751d9-ebd8-49a3-9559-070d8726f1e0",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "bdd54e32-b6f8-4bd5-b9a3-fcad19dd1676"
        },
        "item": {
          "id": "b7271ed2-e905-476e-8df4-0060aa526cb3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c6aec968-0563-404b-bffd-ad3981d83b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c14eec-02db-4522-a00e-aeeb2c6ebc9b",
        "cursor": {
          "ref": "657edb86-5aeb-49cc-9e8f-44470bec1925",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "a5eabd9c-19a7-4a0d-acae-c89ecb8e67ff"
        },
        "item": {
          "id": "b4c14eec-02db-4522-a00e-aeeb2c6ebc9b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8e2f715b-8bf6-42aa-9380-e1a12e9654fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fac7b7-587a-4ac3-8e2b-a667ba438d68",
        "cursor": {
          "ref": "5c2251d1-2541-4780-a290-65630f817d7a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ddcdcc12-926e-455a-a19a-b6d4d4503b76"
        },
        "item": {
          "id": "f8fac7b7-587a-4ac3-8e2b-a667ba438d68",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d2d1e75e-912b-4e70-be95-9021765ca088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9f221f-2afd-4cb2-811e-8d352c0d9991",
        "cursor": {
          "ref": "f9eb93c3-06a7-46af-be0d-733d10fc9421",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a6418f8f-a7e5-47b5-a05a-5fcdcd230810"
        },
        "item": {
          "id": "fe9f221f-2afd-4cb2-811e-8d352c0d9991",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ee975ba7-9e69-4fdf-b5a2-ce0e1065dde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db05cf14-b367-4564-96ff-d82308642456",
        "cursor": {
          "ref": "5a5e2594-f698-43b8-acb3-d70dbfbfaa9a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "232ee812-d2d5-4f28-ac1c-d21a8ff61881"
        },
        "item": {
          "id": "db05cf14-b367-4564-96ff-d82308642456",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6997af1d-d115-43d5-b2ee-5fd232f02270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98ff106-1ef4-47fb-9b03-66d6e6c1fb86",
        "cursor": {
          "ref": "4d9e3656-4438-4310-8941-1d8f00841e1b",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fa53bebd-5566-4734-86b5-4fd494aa7749"
        },
        "item": {
          "id": "e98ff106-1ef4-47fb-9b03-66d6e6c1fb86",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ecb27a61-b7d2-4e0d-8041-69c832d33b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2beab264-d96e-42dd-a492-96a3d9db4c85",
        "cursor": {
          "ref": "1b5bbe43-58b9-4c4a-90d4-eb01fe340c03",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "14239f3f-535e-48b8-ac4a-8b82e0d97abd"
        },
        "item": {
          "id": "2beab264-d96e-42dd-a492-96a3d9db4c85",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9456b202-5880-4a25-8eeb-78fb912a82cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e33bb7-7175-4728-a788-dddfbbc4b2c1",
        "cursor": {
          "ref": "81ea7cbe-8d26-4219-ad6a-bbedf1662b28",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "35fe086d-08e0-464c-9253-43aed6f7fc78"
        },
        "item": {
          "id": "47e33bb7-7175-4728-a788-dddfbbc4b2c1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9f2a8070-9ee1-465a-a751-e98b2bbdb1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd77145-01b1-477a-89fa-a3c970f5d609",
        "cursor": {
          "ref": "ef9ce77c-cc85-4797-a507-d0bdf46c7475",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "03534e20-1a01-47cd-84ed-709d973198ed"
        },
        "item": {
          "id": "3bd77145-01b1-477a-89fa-a3c970f5d609",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "714f9733-73f3-464a-82ad-c8d66a87d492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b016f1f-7bc6-4fac-ad26-ff15fe1a7416",
        "cursor": {
          "ref": "af10b924-6ca3-4c98-88eb-99414811b7da",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "33179367-6d78-4a62-a0a9-aa5f4721eb3e"
        },
        "item": {
          "id": "9b016f1f-7bc6-4fac-ad26-ff15fe1a7416",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5233ff59-5136-44e2-b09e-1e602608d8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e1e271-1893-4811-8977-93ccc2001241",
        "cursor": {
          "ref": "c1adff5e-9da4-4c22-94bc-aee12e813436",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "af835a20-5146-45d7-b780-c89afd6536b8"
        },
        "item": {
          "id": "b9e1e271-1893-4811-8977-93ccc2001241",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "59ba1266-df84-4a6c-aebd-1b2aca285a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29bbba5-1919-4436-b101-b805fd6dca0c",
        "cursor": {
          "ref": "81497193-0442-42f0-8e6c-c03c7499c853",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "374f4472-91fb-4b42-958b-e517e0748667"
        },
        "item": {
          "id": "a29bbba5-1919-4436-b101-b805fd6dca0c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cd13c697-cb6f-420f-a0f3-40d41c3ac432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65e0c5f-bc84-4506-a445-6cbeaaa583c9",
        "cursor": {
          "ref": "0712e168-b120-42ab-9a13-58ac28081dae",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "309f7487-82e0-4181-841c-07d7471ac579"
        },
        "item": {
          "id": "f65e0c5f-bc84-4506-a445-6cbeaaa583c9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "124704a1-d809-406d-9b64-48ea00beb6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28d414f-79f5-4448-aed2-7a23008576dc",
        "cursor": {
          "ref": "e25f49f4-3fc8-4985-ab1b-c129528a0669",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "728eb00e-1188-427d-986a-cf0b781c1174"
        },
        "item": {
          "id": "e28d414f-79f5-4448-aed2-7a23008576dc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4dcbdfb2-c451-4026-a4fd-715567a0039d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98221280-bc6f-4db7-b448-4b87a8b37935",
        "cursor": {
          "ref": "e38735ee-6fe0-4da8-82c9-90a5f0d7a394",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2775dd97-f342-418f-91a1-b889b26a7b6a"
        },
        "item": {
          "id": "98221280-bc6f-4db7-b448-4b87a8b37935",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "529af160-bb73-4d9d-8b76-54586aee0af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81722177-0ef4-45e9-a1e3-8792a99383ca",
        "cursor": {
          "ref": "fba0311b-3612-4b6a-88a6-c921354ca499",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c5a63be8-b87c-4345-a001-0b7ee3c42e90"
        },
        "item": {
          "id": "81722177-0ef4-45e9-a1e3-8792a99383ca",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9912e971-1541-4c22-a330-7cb8ede1f9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28048d19-0cc6-4d90-a1c4-59dec04c4468",
        "cursor": {
          "ref": "fe1db1e9-4fcc-4e25-9704-adb9eba296e6",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0e362379-1e8a-4457-8195-8219429605c9"
        },
        "item": {
          "id": "28048d19-0cc6-4d90-a1c4-59dec04c4468",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "55cdf494-e9a5-4039-b2d9-d17be4499c8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959a4722-1932-4e7b-b918-8fa94f2e0f6f",
        "cursor": {
          "ref": "c15c0264-de73-485b-9e73-5c57e7db5365",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "dd7571d3-d6d3-4552-848c-2e64d44e69b8"
        },
        "item": {
          "id": "959a4722-1932-4e7b-b918-8fa94f2e0f6f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1c5bd5a4-644b-4daa-8489-d88ec371a7b6",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b5145832-9835-4dec-a104-ae79c4c2ef9f",
        "cursor": {
          "ref": "7a5e2146-5db1-4590-a410-7851ce5bde56",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "197a9aea-54bd-43bf-bf85-db8d6af2e5cb"
        },
        "item": {
          "id": "b5145832-9835-4dec-a104-ae79c4c2ef9f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5acff86b-8821-4767-a312-41ff654c2e11",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "662c6845-3a44-49a9-bbf2-cfb8831209d0",
        "cursor": {
          "ref": "007a242e-0f96-4ff5-acd4-afb0085b9bfe",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "bfcb1de8-17c1-45ca-aa99-9dcd9be77aab"
        },
        "item": {
          "id": "662c6845-3a44-49a9-bbf2-cfb8831209d0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d162e41f-52c1-4f86-a45c-b3c26ac52e35",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9d59e2-dae1-4099-a3ec-e89770913639",
        "cursor": {
          "ref": "edd1e85c-216c-453b-b380-6f1943066830",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e197c77b-1adb-4038-b97c-ffa1430c8cc5"
        },
        "item": {
          "id": "1b9d59e2-dae1-4099-a3ec-e89770913639",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b0d8ea86-f79c-4624-9eff-43cb49102e91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9d59e2-dae1-4099-a3ec-e89770913639",
        "cursor": {
          "ref": "edd1e85c-216c-453b-b380-6f1943066830",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e197c77b-1adb-4038-b97c-ffa1430c8cc5"
        },
        "item": {
          "id": "1b9d59e2-dae1-4099-a3ec-e89770913639",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b0d8ea86-f79c-4624-9eff-43cb49102e91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1ae691-4c3a-417f-9151-257d55612815",
        "cursor": {
          "ref": "9b748d31-6e54-4835-9e64-b7ec2c180810",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "eb339a90-50fb-43b1-b4d1-9ef655eda2f8"
        },
        "item": {
          "id": "2e1ae691-4c3a-417f-9151-257d55612815",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c4129cb-6cb8-48f8-b5e3-bdf5a8bd0467",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ca996e-ec27-479b-a975-5aa2ad1aa188",
        "cursor": {
          "ref": "ab244be3-eb06-4e53-ab7b-a08bd21460a9",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "934eeb35-7458-44b6-a1c3-7b0d235671e9"
        },
        "item": {
          "id": "c3ca996e-ec27-479b-a975-5aa2ad1aa188",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "515012ad-2e6d-414f-bd24-1c629dae53e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}