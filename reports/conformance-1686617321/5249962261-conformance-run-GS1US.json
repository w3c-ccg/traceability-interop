{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ae3d2ce0-af96-4154-b0e7-e5697f88d6c0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b479dcd7-4375-45b0-aa5e-8b3f3af9b7c2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "332389cd-ae64-4211-a097-39c78dff3f1c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "87e11b0d-71c1-471e-8f23-a2299f05a777"
                }
              }
            ]
          },
          {
            "id": "767dcceb-9da4-472d-b6fb-1f00fa5369f7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f47b5f0-ca7e-422c-b906-b0cca9d87586",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9ed3f33d-139e-4e9d-b0ab-e64f56d7f404"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eb68e041-0053-4fc6-9b1f-b4aac42dd932",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "57b68112-0b73-4643-b193-7f521808ea9c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "015b4f0f-93a6-42d9-8936-0d08405a48c6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8726d5e-426d-46b9-843b-51fa2f2d8b83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81ebc455-cef9-451a-8f31-09ffcdcb6014"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9feffefd-45d6-43a6-ac90-e71c8d40cbb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "059ac6ca-b2a5-4df8-a5ab-8ae1a025f426"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5db4987-d4ba-4f9e-a3ba-9cadec9ae354",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c10386c0-7f23-475a-9e27-7038f286c079"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad1e5a91-9d87-4699-92ae-68154d3a1ef8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7f54db1b-1225-45ee-9cd3-18964d74a1fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f14cf073-1f09-4b31-a585-1309f1e23788",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a729731-627e-4806-be29-c970ce63b58e"
            }
          }
        ]
      },
      {
        "id": "c115d2a5-346b-4c17-81e9-41981d48f5db",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f6590baa-fce4-4563-8117-076bd91e2373",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9c38ba1-17f9-4670-877f-c476bd91bfe1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "33cd0ad9-548f-42c2-be3b-4a54fffec245",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91befd61-8cc0-48b5-a248-0c8b346421e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a19ea42f-1674-4b58-9b93-64a4bb106d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e7510c-5af4-40f3-883e-edaa38d45757",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f41c13c-dfed-4a89-bb8c-fec3e8d2e37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8304b718-6bd9-4c3d-ae7a-c771cdda67a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d595714e-6076-4e57-a1c6-412397202ef2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49763a3-b37e-4df6-91b6-e59fcc84a4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e501fce7-c0db-425a-9f4b-5730e243c529"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "accdc0fb-a8ad-49d6-b861-fa0ea9c3a4f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "851dfbfe-d035-4914-a025-678d416070b0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a225fd1-ea5e-4c40-b207-bf107713ff83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c86f871-1ff2-4439-9358-3a9b2101f132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7526ce57-0ca7-4513-820d-972f8445cf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd1f79b-82f6-453e-8c71-261bdcf1595d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "024dc97d-9493-4d9a-8e6c-0ad571af08be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0f0e0572-455c-4580-b751-d261341f0f9a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afdbbeba-4090-4987-ae71-f2c6bd2848af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "694473e4-92ac-4be7-97ce-257fc2bf85b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13dde6fb-0f4f-44a4-963d-e53eb98d6c6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fe18a064-f9e2-4b5b-8ba9-104bdf53322e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ceca47c-7ef6-48ad-9d32-ecb1dead0ef4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8d70f0b-5bfd-42bd-95c1-ce0e445c0783"
            }
          }
        ]
      },
      {
        "id": "b262878d-2690-4b9e-a7c6-c1e22399f4af",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a2c4e660-c047-4a78-879b-e6326da24174",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00b8e792-4c5e-4882-a72b-5f4cfcb5da24",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "684e995a-aed1-47a2-b4bd-75e29a3019db",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fac0f7-1932-49eb-89f8-9501525b87e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d27965-a910-4557-ae4a-2ff0909f5ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428b8474-9720-401a-ae8e-df1e8ebc41d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de940ab4-2402-43c6-9b98-8160a34a9c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3291a5-72aa-45bb-b131-8df77c5ca896",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af67fcdf-d1e8-416f-b320-bd1370e2b01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa64a865-356f-4fde-bebe-dc0a9a259db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e731683a-0f8a-49e2-9ee6-342f3ced6afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "591a203a-39d2-4f58-b201-b67bfb5227ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb2df3b-e6ac-4a58-b6f5-f76c7773fb82",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa042e9-c740-4746-aee9-b85939c34b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abbc48b-28f4-4cec-acbc-cd534d8c777b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5460d94-b1dd-4dd2-875a-8d986ce14411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43507c61-a0b0-47ed-aee7-f30bbdac8a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad2e7db-0e68-4129-ab75-a5d255a3c13a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5aab99-0c10-49c6-b6a5-e3ebdaa0e04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada2db4e-2020-4458-88e3-89c04dde9035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25613088-e5eb-43ba-b5dc-ee7c3989a319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2850887-b4f1-4303-90c9-b11e30df4fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d811266-abfa-4a6a-ac61-dd5411ce9bab",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4323d743-c457-4d6a-93f0-18b8be6f10b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83ad715-01f8-45b3-87b5-4303a83564ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4816bd45-7a20-418d-9eb6-f79041137d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "963a5e8b-a3a3-476e-98b1-9ecbdca9b957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a06fe0d-6b1d-48cd-9689-b8b34f930946",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a406ae5-1e00-4407-a4bb-8f292b9df3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e844d7-8919-47a7-a690-743c495cace6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba278c1-4756-415c-9cd7-25766cda3e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9f0d708-5f46-4119-8438-f4a06d0291ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5324f2db-a711-4e2c-a339-65bc5d744a98",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ce3c68-fe2e-4ff3-b21d-fcb67cbfdc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda63e1d-5534-4d68-9e3d-1fa20160bdc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a24351-6c10-407a-bbda-e87ed7fe32b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50be7d42-0708-447c-a484-577f418c8a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261cd4a9-5d41-49d0-ae41-3b99e2671b79",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa1b12f-ddc5-4840-9586-975dc13bba23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b9e9ce-d103-47e9-97e2-6e745d22f375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee88ea0-ba43-423c-9056-8e5f6738d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e4eaef8-8b2f-4ec5-9285-31f001fe215f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8659310-42a0-4a15-a55b-a157b4d65787",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86565d9-383c-4974-882d-e40b97ed0f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27ba2a2-3c7a-4fda-b554-cd558ed1a17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba632bdd-8c2b-4728-b05d-8b89f7f777b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a162b83-8349-4d30-889e-de49c1f2887a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bcaf52-9a2f-4ce6-a7dc-0fb2100f8cd2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29094b80-6bc8-4636-822a-26e4a259bc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babdc4b5-2675-4549-b67f-630fe4fb55a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f169f5-e2fa-4bb1-8542-597391c0f722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00b79e26-9805-48ee-97ce-9160db772b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07045d31-f83c-474a-9215-b27930833641",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f97cfa8-9829-47e3-bae9-a52065cd2f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d35305-a1ce-4b54-a901-9b7d6e8ecae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98b27bb-7dd0-4f12-a707-a9c889a3568a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1e2086f-331c-4fce-8899-15d0943b5056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd421d8-9418-4e13-8d10-d10a755f53d0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3030f5b-f7b1-44ef-918e-2e9f4c1b47f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3eff8c2-5228-431d-824d-1d0f6afe11f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faba8ec-fb1b-468c-8e0e-b12bbcef877d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18dcecc5-aad8-4f42-992a-9ec50c9c5dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd4d383-f057-47ad-964e-86bc6a5f504e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba95f58c-c4a5-4706-ad15-da9a9db1bc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2635187-2c1b-42d0-896e-d3e9c7ee30c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f95db25-995b-4ef6-b872-9cd4b51ced61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5d39820-75e6-4a35-ae97-f0cfaac18ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7141ad53-2f64-4ac1-8df9-0818de46235f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5909388-cbeb-4029-9a85-8db8e72c633c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898804f6-2b42-4369-9864-533b7768b26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91ead19-ded1-4e40-a18c-4741264b2d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e87a8140-c98e-4720-92c5-10cb248ba31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231719d2-9a44-4d1e-a4fd-e185c82e4d2d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad58eed9-0053-403d-97bc-0430b88fe495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc76760-f1e2-47d1-a53e-17f27d12f84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba164c48-c9b8-46bd-941b-c142c0189cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b07b29e5-1b86-42a4-a064-07fc881907f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c198b754-a35e-41e0-95eb-6e328c59491f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402b8f8a-04bf-4b5e-b329-1facb0899d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85e153c-a458-4b01-9cf8-b8751ee672fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9df92c-b60d-4867-9d72-84f79f27dc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d36ace6-0bcb-4676-81ae-967ddfb70338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d739589a-b055-4e09-8faf-a9da53331b70",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbe2e85-8936-4bab-98e8-55cd3de4e623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc4a518-9466-4ae0-9ea1-bce142e13eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705962f7-246b-4c0d-99d7-699820890a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ed20f7f-9161-4992-9732-9e0dcf29fda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e3ea66-c302-4157-bd5e-63da86610d93",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec04c81-3bd9-468a-a05b-0b1dc904fe0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4227508-041f-46b8-8462-e0084931b818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8153122-cd82-4864-9fa9-5ff9b372080f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6a02cd-3a80-495a-814d-c2e4c2cb624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9fed01-86e3-4ba4-b911-70b8effcd368",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afff855-44bd-4761-a9ed-48e09eb4fde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9eae9db-c8ca-42ab-92dd-187da4d6d32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83e813c-1995-4871-8781-71ad6543e104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "406a251f-620f-49b2-926a-401d3019ed90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d76fb5-7e0d-4f64-9d61-aa84af355d2a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029c9e10-305f-4976-b254-66b88337f2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4312174-f5ee-446d-895d-4d6609c7991e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3fdd6f-26af-424c-805a-09a6ee63a5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06edfb9a-f452-4034-ab91-52627c4cf7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d3fa1c-b639-4b6e-9385-c793f5c59b8f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec86e36c-b4e6-4765-985f-023ac1180f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1fe6fe-2660-42cc-a315-332dd99126bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd452fc-7628-4779-906f-d49b9563ea8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5342fb57-3ba6-46c4-b78b-2c60f7d0dc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca5ce05-692f-4a92-b982-3eb22aed7cde",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f728c1-dc2f-4b2f-89ac-faf2043788a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8cfb98-89a4-4841-8e04-07367adde6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21ae4a5-b1a0-47b0-be8e-c0a90cd989af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d971644-7e02-488e-96f0-321673add355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122344c3-4bae-499e-af1d-907817aa95a9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd941a9-8205-4469-8e3c-7929a41779c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c280ee-42fb-4a27-88da-dffae97a0fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da5c19b-e366-4b04-ba1c-354e61f899af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7301d863-c5f0-4d3f-9256-76285295a674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3099631-0e49-45ba-ac15-1c8007e495ae",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7eb605e-9fe1-4fcb-8adf-965c61ac604d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44328d69-a920-475a-847f-0ad50be0083e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4093a1c6-d2c6-4872-8882-6f38020bf4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1cc409-e3c1-4525-87a5-f85fa13a085e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc1298d-d34f-4763-8550-c31dd09f6005",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aad57fc-c8cf-423d-b800-4f7e6c6d9906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3082ea68-74da-4735-833b-734442a3acfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04171fa-ac83-461d-8bb6-5424374b0e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5f1901-9372-4539-994d-03433790c02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e371eb-e9a9-4910-9b1f-a3c4a57b9c53",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8009d223-fea3-4cb9-b32f-1c97e1b73687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5d48db-316a-4eab-8936-9699c579fbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a53901-95bf-436b-93c6-3c44a45c2bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33fbee32-71ca-4403-99d2-d8e6e0f58c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d199a0-ae97-47a1-a76a-ed9430ca4bf5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75dbb950-fdc9-4ee6-ac22-c55d1b7dd618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e2ff92-f098-429a-8f37-79cb32c85419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cc413d-32f7-476f-b850-89a6b2ac07c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a452903-81f0-4bb7-980d-f84f26c0341e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07741874-f1b0-4507-a587-3932433d5414",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5cd71f-9196-469b-87b8-ebd1031fd5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8302d88d-0dc2-4d3e-9a6f-4aa27f0618b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9c8b82-1cf1-4440-8b0a-afd91d3c9ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a73dc4d2-1e25-4780-ad5a-67bda0bfb844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be72f434-1c9e-4879-929e-d66c7b98cc5e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b7fa7d-5014-400d-88d8-6097e259bf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efed812-d5f3-4aff-b26e-98c86b66f9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fef0a9-2a21-4459-9a93-45586440ccb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43409477-26f8-4e26-afcd-be29fc2bd106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7f7ce2-3737-4c85-8423-da975ca2f7a2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4114a681-7a9c-413f-93c8-b2b45bf3dcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683663b9-95c7-4a09-a416-99d8125a1f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcf34c4-8263-41e6-ab89-f1a77739a604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e411c4a-9522-4054-84d3-b4f7b9ee5543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b860fa-e041-428c-ada3-a8554f034537",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb737bd-71ae-4f97-8966-b64a3022cba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0d4824-ebb6-40fc-be3c-b9ee9f548e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b09dbd-d641-4190-bd07-25b9d3bfba5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6225d183-9aa3-4e2f-b723-1824e3e93f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9349f15-aeed-4577-a4c0-207d6fb319f7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513045d3-b9d6-4dfc-9ca5-d2ab96ffe563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504acc9c-66c8-4782-9435-2668103fa761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a22546c-153d-4d7b-b358-1eb1ede9d6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d502ef-3de9-49a5-95af-cc893ef3b52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096dc9d2-7da5-42d3-83a2-cdb687c93243",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d69ad8-56eb-4667-b808-749aa6d8d91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97dc2130-90a4-4ddd-b3b3-f5ced75650df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f9382f-578c-445b-9e59-248a800342fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac29113-bc1a-4207-bd7c-89f1cbc6094e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142391d5-0562-4519-a90f-c8f539053499",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9171b9fb-9eb6-4e8c-9790-188260072cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ecfc8f2-69c0-43f3-bf76-2bc9c1332ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90813d3-40a8-4a3d-8c75-704ebfe17daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c993f0-0250-47e3-8500-dda25e8b772b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68903ba1-26a0-4ebf-b8a8-561bea8de5ca",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f97a0db-704c-4eaa-8b20-f2cfb87e0c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5be885-dc67-426b-80a0-ccfc4549ccc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2fdaee-e2d7-40bd-8d9a-47d628ed33c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c0471d11-386a-46df-94f8-873e15f50103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1d12f9-154d-45d5-9a45-4887cd111579",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2f5673-fd58-4579-aca0-faa48de542a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a290e714-554d-4fec-b13b-d61fd8a84e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7c1a59-a261-49ae-b205-8f45de174288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1318161e-ca50-4170-8674-80f144cbc5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb745ae9-b2ba-44d4-8409-50e0d7c167bd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171711f8-d9d2-4730-80fa-3bbcddb906de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2cae4f-88ca-4526-bdd1-7e067dd930c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96587346-75bf-49f0-8ba8-e61218acec18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db64a68c-4214-402b-b33c-68c1c13d861f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e586e9bb-eabf-42e9-90e7-68bf34523a44",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424e6481-902f-44a2-9408-fedf09968f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b4974a-d699-4535-8acc-6698efc0ae83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf96e73-f95f-4923-80b8-14aed12738cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c17faa-630e-4a11-9b51-1614add61e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cd204b-9f02-48ba-a041-df3eb8862316",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db052f7-99c3-4478-9b3c-9e8ce3914b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a07fc5-7d9d-471e-aabb-65d8461b8ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80b59e9-d199-4786-86be-d781195dd3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e72e0ce-412c-4522-abda-e1ce9c1ca56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d5107e-e771-4a77-bcc0-f0bfc61316c1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c900bb4-f813-49bb-ad88-56891c907ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f731c71-ce97-4fb0-a28b-017c0008a5d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aac8b37-2c03-459a-a870-8ccd1c0a99de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15885a5d-b0f8-42ee-8a51-6f8233efa90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6ddafd-6a18-40e6-8a68-fa0dfd6244ba",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0481472d-25ca-4f5d-b144-36fd395500b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c6ea48-5564-4b04-b1ca-ebb799a0d30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde5d60e-b88b-44ea-9d54-8003a0f8dcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "61807b97-da5a-4813-b1b1-42189fc88d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba97ad9-c553-4d6f-abc1-319917bf5d26",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71d17f7-84eb-480c-aa31-8db7bf17c1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67de54a-1754-475f-8df8-a41e84ad12d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a55dbb-8f33-4a00-95bf-00d2704c5fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa6dec6-0b99-4f6e-a7ce-68fbb2bcb8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b68d00d-8463-48ea-a056-e1dfebc6aecb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7da1e0c-cab6-4a87-b838-542cb41864e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb687d8a-9ba7-4387-8980-7862ff3b0338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28df170-f0a8-42c6-8c87-e6774316af33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9b380a-e226-44a1-8a5f-9a4f307a7039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78854a02-3c63-44a8-ab08-2ad21b24ca90",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34df4c28-5636-410b-af7e-fabb9dbcee45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72be38fc-b3c3-4cd4-8d79-6223eefdace8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eaed4c3-a45c-45aa-9d10-aa3840ed2860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c2413b-b017-4bbb-97cc-3b273f9acf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfa48a2-9976-4212-b087-5e0150f0b3bc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e3936c-ceeb-4c2b-adec-692d4a02da82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de432588-a5df-4fbc-aff5-2a3b4232a0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b18458f-2096-4839-8067-102272006f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "425bc923-74bc-4313-89b1-13b5e3c809a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78d894c-d835-4b9f-b336-6f1473714a71",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5bb963-e89f-4af2-922f-7ffbd380a80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84309401-0e18-42f7-ba16-262a63e250d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49fe723-d6d5-43d6-8d24-727c959fded0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "797e647c-6ba2-4e69-a1ac-e17f6082eebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcb4a18-7380-4192-9089-f1d91120d5ba",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdebd208-a232-40a6-80c1-7bade377f13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da764657-e8a0-492b-928b-81a0a4c7a8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2989a2f2-a4f4-4cb1-b2d7-e7e0d407b5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bcd405e-654a-4296-811a-b4e836791184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1025da-c249-4cab-8daf-95c9fb41e96e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851acdb8-6e8f-49d0-85ad-054bf1cc3c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8eea8c-e734-4d4d-9786-d6fbb1353822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13209f6e-c305-4c54-8697-c73b8d6aad63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a31b684f-8b93-4166-9167-5f702bc688fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c273aae-9454-4f77-9dab-b2e3d4726418",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b237106c-ed08-4753-9e6c-f1492f75aaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee5831d-ff1a-458d-867c-248600b852fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e061e9-285b-4adb-9d39-0874b12fef00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c9b4c9-a0b6-4d2b-939e-82d6004dbe7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b921eaa2-a414-490c-b840-8f6250ae7a78",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dae2c3a-ac1a-4a9c-8ec5-9f4f6e1b789e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27790bf-252e-4cc3-b950-99db030f1a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93709308-39ec-4692-9381-16e92b3ddb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a64de43f-9a9c-461e-b365-571b616aa261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b135b6bd-5a9f-48e3-92bd-bf3dd2c6c6a4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e234dba-409d-4adc-8840-71ee9672bfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221055af-6ddf-4cb8-9a33-f3b6ff423244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c79afd-cdb6-418a-b9e6-526285abfddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "57fc6d06-08b2-4780-b55c-ff679790bdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95980e4e-4e0f-4e61-a4ea-d6d8fd80cb34",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5be2bf-1ce0-45b5-982c-8b442d01175d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a20f8c-0ec0-466a-85ec-b84f57564a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c75efbd-81b9-49ad-ac08-5722cbd21357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d33585f-631a-47cd-bc46-344f1f0b7927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1d8a9c-ff96-49f1-ae4b-d186f0f913b8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea2ec60-47dd-4d1d-b133-df27d91507f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580b0686-4da3-4502-b436-39b6a64ccae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517c65b8-4bc6-40d8-9416-efceb1c676fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "686cb974-644f-4446-a82a-3237e494c12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbe16f2-2438-4564-becd-9dba5dd9480f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f25170-eceb-46f5-9f65-3212e430180f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83107220-5283-4930-9543-3f1463bd4a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53856794-e0a1-4fde-8379-5b86e5f9dd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e52bdb1-d182-4505-a17c-d3dddd7f636f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b235b5-5deb-4511-8dfb-32d7861080c9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8060af7d-f35f-4430-9864-4fc3fe2e7373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2923f320-bdf2-45d0-a72f-165a5a329aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3d4372-3d3b-4ccb-a7e1-bb5b4e155cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6514a72-724d-4d42-a6cc-37ebe17576ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c4bdf3-852e-4d24-8f27-45ac51c5b0c3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a04bb07-1b4c-4fce-8ffc-a5aed612fe41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41350cfd-15c6-4744-8470-99b33bd13674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d028ab1-f0ca-4cfe-96b9-669c0fc979e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5572bdc9-79c2-47bc-98b8-7ee9b6a96c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a03431-605e-49ff-a7c8-9782af95c2f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9175c724-ee28-46ae-b423-06a18439783f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfc159f-e7f8-42c9-a15d-4ccf4f5347a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3e011d-5e33-49c7-a7ce-631d4118a848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b2a19ff-3f10-436f-af2e-1f5f3a6a147f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a25595-59a2-44d1-a0bd-7fb4a8283b3a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee41f22a-08a3-4951-ac13-3088cba6ebf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa47a65-c3a6-4e0c-bdff-cf3a0b47f932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc189950-eca9-40aa-9b69-421dccf4e14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f619d06-1388-49e3-a363-7d1c491265f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e28d3c-dd05-459b-9856-6cc2b37b9ded",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3373b38-2a17-4150-a6cf-2dbc3e8e72d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d15fecd-47b6-4a3b-8939-ce4332483030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e88cc70-ae96-4429-96b4-aa30dddaf186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97a5c9a9-cf7c-49db-800d-95360e741cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ece8305-73e1-484e-959d-500a0b65f74a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5aa8a9f-97ef-4ba6-848d-40af10082e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82158473-564a-4bf7-9b3d-dee679aeb2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb7edb2-d45b-4578-9319-b82a42c20da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "70c37bde-91f6-4072-ab16-e8193576b247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8dde3d-227e-4bc9-b795-eebf97e0cd35",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb552be4-392e-49ff-b925-83fc21228e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775f53a7-2be4-4659-ac7b-2d54a2c81b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705ff3fc-4bc6-4ea4-b0a1-1a1cc72339a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b92b32-ba25-44e0-927d-52b888983a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb96d60-2c11-48ce-933d-c6a91439cc56",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4002ea0-53b8-4950-bb48-8570b79384df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997d32aa-7016-4402-9ef2-5a33d67ee729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7969be5-0e07-4685-b4d5-cf974759bfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f441b94-3947-4763-a100-788f579e6992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e730b4eb-8ca2-4406-aed0-58ee2d94c165",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1584a0-4d17-445f-87bc-1f6483eeca3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8429f24e-b5df-4cf0-88ea-8318629db048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6224c3b1-1b8d-4f7c-b2b0-759642550799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7afba9-7bd3-4a34-8fd0-a29ffd27377f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3673ad58-060f-47bc-adfd-278e7eaa06ba",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a9334a-3a3e-4109-8f3d-b56af40223fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040d2747-01ee-4878-a24b-4d9ff11c687b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8fbe75-950f-402f-be59-554534a3660c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "136c9910-160a-4edc-a025-9cc392b6c893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d7b318-62d7-4c32-8833-a8039a3aef57",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becf7dc9-c6c9-4695-bac7-2f838aff26b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3fee89-61aa-40de-93a7-96f3ae92f01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975d00a8-e279-4f76-a758-3d1a6b6649a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac3ed91-a08f-470f-95c3-a10cab6ac413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32b5b52-4b85-4697-bcb1-8ece4b305677",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e00642-7c22-4b13-819d-c1dc2356f4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aafa7e95-8d32-434d-89ce-3cb825670d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5be6dcf-0b75-48cb-bb16-4aa1cf2308d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2dd4344-8fd0-466d-a5ad-ce865ea6f6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ee0a04-497d-433f-a328-a17df1055d86",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a65758b-a06e-413e-8a0c-172cdeca21ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee72da19-39f8-4733-94e3-4fec8318bb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e13eb84-8445-41ed-a05e-d615c6f92a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1963649-5144-427d-9618-d1a7bd443f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0511c817-bda4-49a0-9033-ce137655ab4a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8a8404-c56f-4d7c-b667-f6fc3f3f23f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f82a50-2c74-4fb9-8d0f-5eee1b339578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b900b4b3-8fdf-445f-b497-412dd1d26cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeae0489-a581-4d8d-bc0f-7bf036bd85fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530cdfdf-460a-472a-be1e-ec112986e95c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12ccd6a-b36e-4756-b609-1b6678f4d563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d377d5d3-8630-412a-9957-02c0de4845a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5311a400-0fb6-4088-a8d8-c8c3d470fe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4aa29c1-e845-438c-9db2-f41a386a222e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324aee3d-25b5-4d00-b2fa-0c2f66f78e01",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697c06b0-6919-4db1-9779-e1b263425b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a20658-9541-408b-97eb-efd44dcec5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f806a102-cef2-444e-bd43-59c26a4f9449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9558dc34-0b34-474d-867b-30f4dc511610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1da7304-d09c-48ea-b939-27a98f6fb5f5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4242a9cf-2b51-49eb-a1dc-9b80fef8c8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60f76b75-d9d9-4415-8bf8-cadf6eca203e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a5840b-d012-46ee-bf54-7d5200b84865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2828c63e-73ab-4dbf-9202-83913303d77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b864c8c-1ede-44cb-9300-28d07445bcaa",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a86ad9c-6bfe-4822-892a-d981cfa4feb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a2654d-5df0-4b7f-9513-c97bd896fe21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c709f597-d879-4313-a3cb-280a15da7f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a62847-6dac-41f1-8806-737e9ded6aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a7faaa-ee94-44a9-baa2-b92f99e985da",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb5a0d2-980e-427a-9528-020c5c1d545e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2328d2-3a0d-4b34-a82b-44c6052dcb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a86a5d7-4bd5-471e-a2ce-20d7957ccb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5d476d-be88-4343-b339-df18625c6d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb772d1-d44b-46fa-ae3b-20a2c00a5e78",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a0856e-3ed7-4fdf-977e-50ed0422b91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed0da0b3-744f-40c7-a40b-477c0376157f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6830b6ee-7e1c-40ac-b7be-7f430c2a5ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00e82425-3b5b-42dd-9b09-a890b00f1a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6091443-dabc-4205-8e24-49aa0ce4fc0a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3a2361-bf4a-460f-8485-9244834452f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e50ea3d-5b60-44bc-9ab7-32c3596627c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72527c08-6a39-4df4-8bf9-e0deedf515b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5a90d0-8f00-4a34-8842-c713af7c151c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6c698c-1072-49b6-91a1-2dc751689b3f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff7863b-6474-454e-971b-5da6044a8483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b679a1d7-3da5-4992-924c-a1921c17b65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2b95f1-161f-4489-919d-bb5d925babf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd563dda-4f4b-44dc-8f56-ab21b3a7cffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce64ea2a-055f-4f84-a2c1-470d6883ea18",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a6e767-b23d-448c-8c32-3422c9058140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d3fd00-1b11-47fc-8af4-08cda9d9db8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae27b444-ff33-4b88-be1e-566c42c9c6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd29014d-fa8f-48fa-98c5-a82104e3a6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269b9c8f-b747-48d3-8662-81213b50e472",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684b9d63-ee47-4283-8c4a-c13fe101759f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05cf2172-9865-4145-bee6-71e4a61917c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c6e1a1-c8ff-4035-8dd9-9a8ebe31b847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0835ac-031d-4356-9a6d-2697082e8271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4c9bfa-37ab-4ca3-a2c8-cab29eb668b3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d823949-c4da-4af7-8864-cd13366c25aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8826a10e-2be5-49a5-8f3e-7a77c15145c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4969a61c-686b-4347-ae49-ca9814827d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0787ffbd-14ac-4959-ab03-164ee304aecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e8c590-7370-4774-884f-46df0fdce417",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961d1460-fb8a-4ec9-a871-689637d85303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac2dede-49d1-47da-af9d-a72a55ac22e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb16f22-ff42-4557-b571-e4c9b299f71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a98313b-c337-49cf-bcf3-f5249e3a5cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abc7506-65fe-4a1d-922d-ab0659f2e1a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8f8e3f-0192-4968-a185-3dc30cc25f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289fb137-dc3c-49fd-add5-e4ad149fcfee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bae6a7-d86e-41e9-92b4-772a29b6f088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94f1481b-5172-4795-8165-36482b7ce546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4da149-15d2-4d1b-a267-89159fff3f37",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c7ee4b-0104-4996-8e40-12590fdf088d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650e2c02-e912-407c-b4a9-feb4fffc294b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237b9654-3100-461f-ac87-89664043e29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa45c94-f9c9-4e92-af5d-f98d395c5c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fb9cf5-4bc8-4503-b6ed-d89fde8398af",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7281f6e9-eeda-4964-bb7b-7a28ae517347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c855d7-6f4c-4313-9090-f2b043d79ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cd0ad4-d0ce-4fa4-8e4e-df3ad20b478a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f57355f4-5696-46f8-ab47-33f6ae982c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31dc4d3-9076-4b75-9704-ef9260cda3e5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9271439b-0498-4a24-b9c0-33805c0ef70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454418f6-e5a7-4268-96a4-b9c0552a76de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61b2d0d-f32e-404a-a2ba-d50e21a34a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b90e95b-3d10-4896-952c-a95dbeaa3173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee460ea5-c14f-42e5-a057-b9b8f1fbee31",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e3583b-df4e-4765-babc-b52003614333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737b3667-2397-4795-b088-ed3375e8b385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43569e30-f013-48bf-a03d-ac93f50d2ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11108a1c-77b4-4bc3-b634-347a51a0b9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bf515d-ac3e-4700-b69c-2a13a546f64f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918f4e51-1fd4-4ced-9707-dc5ccb21ae86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b9ebd2-a587-4260-8697-e3ba0ce1075e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139e51ee-6415-46aa-96fa-7acbe0a33ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5cddbd-1281-4bfd-bde4-04682bae2ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45526a5b-62cb-4478-9e0d-a2beb14fee81",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e918d22f-92d9-4719-8362-a492fd1479c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be4d9d4-2a50-44d0-b63c-c83bcd3489e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cd410c-6c95-46e7-a408-2a253d849444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e03fdaf4-6455-41d9-a797-fbb4540239f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68deb453-9b8e-4f18-9e75-80e21a1cf06e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1058938-8d46-4524-aec0-98df2cd7a417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc346ce1-9c23-49fb-b6c6-9acf336d232a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35848f82-5759-4a7c-82be-f9567caa4d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "71824968-2d20-4046-b0d5-2e757dcaa891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ee5823-cab7-42c9-a86e-61e59574dcd4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0853c2ad-d6d0-436c-8986-efc74224587a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96adaccc-7f26-40a4-9cb3-f7a0b158421f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524a5cb1-3d39-4784-861c-3142d4698ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2a7b62-da76-4e94-bd82-8264bbec143b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b462b0d5-4e5c-4c84-b33f-cf92d1a6aa3e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9398af03-c07c-4675-8608-9c8a3f2e4ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d6cab8-a0bb-4077-9157-364d6ca47b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d86d0d-e4b6-4a93-a4d8-b2c470fcd0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38d407f7-0228-445c-b2c2-55fe115c5213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f126f8bc-8a58-4d51-ae6b-449a2bc8fea0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874ca669-7f64-403f-9e51-853caed42d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f925e5-0a80-469f-8367-06369c750e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0031b968-38d7-42cd-bb74-38999ded2334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d8bec6-d9e3-4f1e-aed2-75a546d5081f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86507272-3e6b-427a-84be-da19519cf961",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170dfd26-f6d8-4b87-bd2c-a05f56443142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "42e4f296-ee83-4a46-ba04-8c706fd4de82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e4dd40-d47b-4bb3-a14d-01ceb94667d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef39e5c-7de6-45a5-93c0-d08299607fde"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9910359f-7b14-4edf-9d1d-ada61e00f97d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c6c8ffb-f62f-4753-9746-7e913f8e8387",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2854b0d-6cb4-4092-bf76-6a8ceb55312a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b24bd48e-68e6-4d2a-bd9e-aa2662989736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c35f419-15e7-49fc-9a1a-1217913fa9e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b1d8fdc-15bb-44a4-ae5a-1011c13ab0c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f5ddbec-b00c-4548-b471-a153a84ab935",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9b87a80-9bb9-489e-87f3-beb4d39c9468"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f6a8cb0-96b4-4b06-9764-a2f9996ab3af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4afb355-88af-4394-8778-9d7c565cffd0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19c4d148-3584-4b7e-b325-ee0fba911e78",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "484428d6-3932-4273-a749-98e9581b2d83"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6467f9d0-f501-4cf4-bc88-1c28bf17c069",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42c4669c-ed87-4389-928b-16956be0f240"
                }
              }
            ]
          },
          {
            "id": "381b326c-4d0b-4749-b355-29e203471ae1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5f17e5a-42b2-4e64-a0df-a4b3552386fe",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbda876a-13cc-4060-8a11-9743e56330b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b91db55-0280-4d8b-8422-67fec8ec4ef2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ccb6231-246a-4062-acf4-6de83c686a27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "86364f71-a094-462b-a2ca-51e9fbedbb6b"
                    }
                  }
                ]
              },
              {
                "id": "6f2160ff-b404-44d0-aad2-a4ff0344f95e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5372995-d04d-4dc4-9f16-bf6122367bc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb8a01a4-1c54-4854-a6a9-d8e223feaba6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c55d307-f396-4244-bb92-b69daeb9a8e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1c21aeb6-b770-427f-be0d-4b801386b7d1"
                    }
                  }
                ]
              },
              {
                "id": "3b00608a-836f-4303-a231-89255b5b0718",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c1dfd08-5181-460a-be80-e79e8085c39e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6f6fcc1-5cf3-4038-bb4f-37d9b0182109"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4af7d407-f8d1-4ddc-820f-eca67e803bf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e23b82e2-6c7c-42d6-a371-1423805ada1e"
                    }
                  }
                ]
              },
              {
                "id": "60652a24-20e1-4325-9513-6e676e33562b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61deb0c0-175a-4098-af3a-1bbde0948ea2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97dd0653-178a-4626-a2ac-953df256cae3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b064e00-285b-4d0d-b83d-82b8c722bdee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ecb10948-2b56-4f6e-ad38-606d50db3f2a"
                    }
                  }
                ]
              },
              {
                "id": "04080548-11d2-4ab4-b2d4-f4276922b62d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7f48c4f-714b-49ec-bc46-1bd5bbeec3b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c4987fa-3064-4e8e-9fb6-a74d1c63891c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5db6ffd8-623b-44c9-b46f-d8c563a6372e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "185c1bd6-f9c4-4c65-9253-8c3dd0094ecf"
                    }
                  }
                ]
              },
              {
                "id": "5cc0896f-54dd-4d3f-add4-cdfb4c2edd0e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71b651a9-f7b0-474a-ae03-dbc7a2d8945f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d92811b-0da5-423d-95ea-ef80936b7495"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8587a878-7c27-416e-a441-3fa717cf6e4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7bba1d00-c087-4be4-9261-b012f6a9367a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87a758bf-52e1-4427-bed0-a751fbf10be2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2780a351-962d-4007-a6eb-b14f925e4c09"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0bb5aea2-8084-4377-afb8-2c7f4d9a3b1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eef35e04-3c1f-433f-a102-b9ad572643e8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40425d8a-dfcc-4f02-a0d2-3b565a866942",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "84f07112-11bd-47db-b651-8cfe86c5f01d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa3e922d-9853-4730-8670-08b2d575f46a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "104f9469-d6d1-4b83-be2d-7976f303858b"
            }
          }
        ]
      },
      {
        "id": "0761d4da-072f-49da-ae32-f551480f0ca6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "86376187-fe6d-4246-98d0-422e8503b21e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "407439f1-496e-454f-939b-2bc36a2a3d77",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "234439e8-2f76-4f62-8a1b-e2c0894f602f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5091dd28-9bd7-4fef-9516-3ca9de7f9432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23e91fb-7552-4846-8321-b5c6991fdf20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebf95e9-d4dc-4e7b-8fb5-233eb5b97230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1038b93c-b747-4a58-a322-deb25a6d5c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62d9664-d67e-45ac-9729-8fd434cdb663",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eea6875-85ee-4648-8946-19fb5f713c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c3a03d-78e6-4c50-b636-cb14161cfcb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29123c0a-fa22-4f51-a357-59470f99da54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46baf1e7-b7d6-4583-84b4-9af925d9fdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dedff3c-e8b2-42cc-9eaf-c3f3add5b428",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7e5dad-c10f-4a94-8b4d-f81d077de23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4b4f3d-92d3-45a5-a860-6f111658b691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b4c04a-161c-4bbd-a77d-942a2e323009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b347362-b103-41b5-8b64-5b79d18e984f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdbfc7c-58c6-4e34-bf49-450ebd98f2e8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8455c388-30d8-42ce-91f3-2d3b1af5b377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ba33ec-8b68-4afe-b8b4-c4c9e37c5d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ac376d-17f5-40f9-8c30-01f6dd5a5520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "847c7e45-915b-4a03-86f4-1a9f6bdd5494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29ecc3e-e020-4a08-958e-aa173fe1dca4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1459a295-c186-4ab4-bf7a-4a25d1527c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e55a6e-cb71-449f-921c-779bf190056e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a0f0a0-ef0f-4749-b60d-191d66f2e13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde5b2e6-f4b8-42ad-8b4a-59ad52915c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f90e6a-553f-43de-8bc1-a20f12078652",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49781893-9397-4477-9f28-2edc7a8ebee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbba09a3-493b-431c-8874-a9ad40af2421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4b9207-2022-4594-9216-6a374f33f9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97541331-162a-424a-9b9f-a59562210108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97426289-8820-45d8-8cdb-c66ceb5e7ddf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f375b5d8-9973-4190-930f-0246c47b1c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b980189-f78e-43d3-baa5-9e7397188a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d44c491-455e-44d9-8b58-e4d847acaf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f4118e-1162-43c5-a224-95a4cee121d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751740a9-c41c-46b8-b2ec-e18cb2e399c2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66a45ab-4375-4c8e-8709-97ce9f9252e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc85fa06-c47e-4d3c-9701-0dde1aa0d0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c0c9ba-3f3e-4469-935f-27ce1ff0f5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e73646-7d33-467a-b8be-b7fb2f746fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b220996b-da4c-40ce-b380-baa72e930352",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b16d97c-d6c1-49cf-aed4-791c1baa2ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63dc486-8cd9-4c00-935f-5ec94e124a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266faa0b-3833-4607-af61-98c4de31d5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6892a293-0186-406d-b437-f37cda8da000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2a6166-bfe8-4a48-bef5-18e0faf1f7b0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acecada-0dda-495a-9067-2d7d82ace5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07503bc6-a23b-4be8-a605-7bea050a0860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051d6049-5710-4240-a289-f00cbf63039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c324cbf-d505-4d37-b412-76b9346755d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc8b5af-4459-41ec-8713-d211277e853a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dde20bb-9f58-40e8-b7b6-f400b06f6dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1c071f-148a-4702-b3bf-eacccfae228c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddd0234-354e-4a53-a353-aa9c6b027d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ac14452f-aaa0-440a-b4c4-0b25633b1b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8380aff2-6977-4ac6-80a6-91dc5e9f027d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f4cf21-7880-4628-8e95-89083bc8e38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb842ca-b5e6-45a5-8dab-4a25995332fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d9e247-ee59-4abe-b213-c37159f5b138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "614545a0-25c0-4546-b661-f3e7587c2d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddf0262-bf12-40a3-983b-5bfc43df4b0e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e4f504-b61b-4f41-8c18-22a442768d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0d0fc8-7a76-4bdf-8aac-38c98e7dd059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23547935-fb94-4244-aed3-c42aa031ddde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2fbe672-a0b2-40d5-9f64-50d8cd8f138a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec63b387-b05b-474a-815b-4669452a7765",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765f8d0d-8ccb-49b5-a471-b12b73fb3804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73229bbd-d225-400c-9d7a-796754fbd87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889378b1-9913-46f7-88f5-7f6219706288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cf8f68-90f4-480a-a3b6-49053c651926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285e0f8c-49fd-4b8c-86a8-daddb2810b13",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7744f68f-1010-4260-a690-3d4b6a538fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ad3e19-8a4e-4b9f-b235-ea3860e94308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba15c3f4-1dc0-455c-a222-10d6e61c1554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0a1ba1-c3f4-4b81-8dc5-628fb05b65ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef95814-dcee-435a-8c96-bb74adceae29",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ba4cb5-d8d1-47a9-a3a6-40093ab61e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8789abf0-aafa-4f54-9c84-d793edb5271b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b84b950-3163-449c-a8dc-505153622651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb438eff-8483-48ad-b7c6-289c9e4563ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97237e3c-a2cc-400d-b011-3eb8d5adff2f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae783b7e-5bf5-435e-90cd-acc266ab1450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e95da58-585b-4362-87e4-462a9af06adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e410f0f4-cd76-4159-86be-4c4c59c34674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "900fd6c2-9c7c-48f0-950e-04af06d3d505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec95175-fac4-41c8-8d08-5fb212726631",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fea1c4-9a76-4863-b8b2-d509d44cd802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b19a02c-fa4c-4778-bf3e-e62fe8e7a6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2dc1ee-7f0d-4e77-92a3-0c31f3ba0ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c25e1d6e-417b-4711-8395-91be278c593a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c6c06d-0bcd-4906-abfa-78b4fa15a363",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69a8a74-391f-4911-8199-fc934e14ad6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3af9d0-53fd-457c-91b2-21436a93dc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba53fde0-3211-41f1-bf77-7244c40ffca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a97c2765-e197-4a44-a95f-e95f1d842ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd011d2-89d8-4e1c-b1b8-3d07a109465b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fed92a7-19ac-4786-81d2-8e202fafd757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff6063d-93ce-42ea-b971-cdcbc0f5677f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb1bb0f-29b3-4fbd-802d-49168d078ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb175221-104b-4f61-8a94-f730bf1eae8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9108858-f461-4f05-94ae-6ab8f60dd4b4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c296d19-a78a-4253-8186-3f1c3c600d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f669b0-3318-499e-a4f2-7157cbda1163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a722b5-feec-49fe-9824-1b94ba889dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0764194a-ccbc-4fd2-8f14-04541ab0c620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31efb106-4345-4d85-8cae-b107570a1b95",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0f193d-39da-411a-a0c8-d3259a798fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e784284-0450-4f9a-8da9-2720d3e2f808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2155892-4925-48cc-abf9-c6558637f981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26ccd6a1-49ef-4e4b-af47-b75fb8825166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e973d135-86a2-4688-88bb-1ac5e03fa1a1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398f1843-b3fa-4c9d-b6ca-68ba0be6b504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b463b9-5622-4524-a46c-4cfdd3046952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c53d4f-280f-442c-8211-0c6fdb24bd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10ca69c8-aca4-42cf-a69e-4b59b15c54d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3394a709-8050-499a-a24d-83641ae9a81a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99298a3a-e5fd-4a4d-9078-53aa727ddd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e6cddc-8dd3-4020-8d0b-26832bdd202b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0403c3de-2033-4d02-870e-811feee9b390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c46b552d-ceb8-4451-8bdb-36148c3ae698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d95a01-e967-4b6a-8834-d93794e01bf1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbb5324-5a75-480d-9dbc-d4c998c1a5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1067c274-f0cf-4f99-ac74-9af3f06d4aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9996e5f7-9d00-4e5c-bdaf-453fe009e5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc8a226-fdba-426a-9537-ca94588bba9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe38f7d1-c6e6-4f10-8674-04a55b4ae368",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66bfa1d-bac9-42ee-a2f1-3e0f44a88589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d59456-ebae-4105-a9ef-a7b7b4ec4b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4aa8c92-80f1-419b-9547-4478a6522035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "310eb3b4-345f-4eba-806e-7851cb0dfd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f98456f-73bb-4934-9d49-137d78d05840",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "338b8d04-ffdf-43e4-8c5b-7a90d19b5c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c142ab-8eb6-4a99-a189-17969e420a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf75315-1c42-458c-a3b0-45870eefb21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e13308e-86e7-49a7-b61b-97964725f8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812b40b5-c64a-4b42-ae96-bb1ba03a1209",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ff3dd4-6ab7-4241-8d72-2028a459df22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1665d86f-cbac-4597-b4c5-1e6a16534536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff12bb9c-6a3a-4d21-b24d-4945f0c37920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd63a46-75cf-4487-a3ae-51a44fdad262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75851dbd-a57e-48c4-9ef9-8b71fed3396f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdde480-2fb1-4933-8ac3-5c39bad9674c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfd91dc-ba4b-4aad-ab7b-1c4c59088e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9cb535-0804-4cb8-b462-85529671e026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c716f5-b09b-4cef-8f85-a67889edcc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719cfbcc-9d56-4269-9956-dc0f7eee60f5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e093f7-aead-4b1a-98c5-bf7ec5554784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59b11f5-cb4d-4578-9b6d-22dc3a1e674d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5636a9fb-1826-41e1-a6e6-68bbae8e9f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c06e40d-6d7b-41c7-94fb-bad480fc8319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091a1452-2105-428c-8bdf-674c0897c342",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5cca89-c92c-4413-88db-9810c0e027d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36e676d-5ea3-480f-a773-f2856e463c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87dc022-83bc-4fb8-8c98-cefab0cea74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7e7ecf-898d-4634-a1ac-693cbe239574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aee0a01-4819-4d9f-9ee6-77fb02218b97",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ca53b0-135a-4bb4-be94-d87a6525634d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ec3fa8-42f9-4320-9685-b91d3da02bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023b8734-3fb9-4bf4-bc59-b08425434b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c14b0f-1828-4b4d-aecb-46febacfc555"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "708b7007-8702-4b03-8b4e-a020ebfe7a15",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90707e78-74b3-4198-a479-95c51769f38d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d302c1b-14d2-4f3d-9ea2-71fcae77d95e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dc64fb33-3bdf-403f-8673-276fab81abb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "611906b1-e8bb-4f70-8917-99299ae357fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd684c20-9c10-4893-b34c-583bd9b09114"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e7c23c6-1146-4f10-9268-b632cecf0bb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "441bf37f-f368-4e8c-bbf0-9c99f2e52c46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "640bb9af-ceb2-4078-9822-8ec82d2083c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79b4de4f-71f8-4b1c-95d7-a8cc84312c31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7808ec9b-f647-4eeb-8cce-de99eac6c45e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ebf741f1-e484-4305-a786-0245c89b2f23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22989bb2-45a7-489c-be45-7f6c3d1cb390",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "176c5108-7c31-4832-ba5b-032d7972d02b"
            }
          }
        ]
      },
      {
        "id": "95c9ee12-cec0-42b0-b5a1-a49dd1d51342",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f5cb291e-7df8-4170-a604-640e5b0464a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a74af2a0-1117-44fd-8f97-4b8e5a0a8221",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ede6bc0f-5742-430d-849c-1812f0bab51b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880bed12-98e8-4cd6-81f7-d0669c20cf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce462a5-6c10-420e-85fd-5b7124e59694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef83b2dd-ff4c-4220-8067-a49cd8eaa051",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13dbcdd-1f77-41d5-b46d-38cc7bc9b71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d411c31-2521-4618-a0a0-69c9dafdd720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333bd424-87cb-4235-9804-a67f8b4df47c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba1fc2f-69c2-499d-b451-256137b86617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d9e84d-a7c3-4f57-bbff-a739c1e498ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cd4d67-4bbc-47e2-b5ee-ebdc724ccb2f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b19f33-a01d-4690-a060-e33f1972afcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04e6637-7960-49c1-ac6b-c20ffd3249af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db8cc06-cb24-4cec-835b-4fa0d78dcbe9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70edaeb3-aeaa-4c23-927f-a311f461219a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8114c72b-2b49-4b82-b0fe-dcc26d6939b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82294a4-7f71-482e-bc8f-c3546604a42e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3291bf98-eba1-45bc-8000-4ddfeb51710d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1582ba4-2c6a-4050-80ae-90521a8cd29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d320a6-2aae-4ded-9df9-5a801a4a45d5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d2da20-295e-4132-b693-3f3c0fe6eb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f91f8a3-7736-4291-a1e4-62a61e5548d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e8f5a4-bd41-464e-94ce-66515bcdea72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49dec99-c200-4cee-8e0a-69f7b1c1252c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d063e14-5ed3-4d3c-8129-2ea1a43508ae",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5d53ca-8bd4-48ec-9a8e-56cb14d34fd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec5ab52c-7f28-4b61-9098-b2dc2188ba69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616d0b17-fbe7-4fe8-8d92-65384935ebbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d7654d-9362-47fb-8872-4b0df8cbd4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda02f49-819e-4d8e-8bc3-eec6af87c1fb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53089b84-4754-4548-8d09-bceb38e98417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f51df1f7-fbf3-4e8d-b79d-097e0865f23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e19d58-dc72-4368-b64b-4ca246ceea20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82b03ca-c195-4a89-9401-55dd35bc17e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1195c4fe-2e74-4121-9ce2-d513b8a403ec",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ed5950-2917-404c-a9dc-b1dc1c97bf49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ef70364-855f-48e3-a3dd-9d3c83190965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b53f3d-d02d-44f6-81c5-0f3692721440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e900ede5-deca-422c-87dd-aeb48d5f2990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2d745b-83dc-4a44-bee4-e294d824db21",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb202b8-c061-4dc9-bd5e-50ee56dba9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3f1943-bd5d-4648-810b-ee31b763314f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff3fe97-9b06-4ddc-a759-e47c2ae8830c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6202f2f-80dd-4f89-80ef-65f262f3341c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3085192-7cff-4182-9cfa-5afcd539a340",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df298efe-8320-447b-a269-2a7efc59d3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2a13da-60bc-44f0-8cfb-7e77a7c76d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4c2481-2b20-43aa-99fa-cbb9ff4a792e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07926349-e469-4392-9b12-54f7d0fe4973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8401fab1-f31b-4401-895e-755fd75d29ae",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbb093c-b4a2-40f7-bf56-449ad70c2134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1632c642-fc70-46be-ade1-a34b1d7b335c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bd7ad9-b6c7-4a84-af80-0675f9f92491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07636b29-2bee-42c6-aefa-936eca99b3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467e5c2d-e77c-47a8-a775-7aa4d884b96b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b0185f-82b8-40d7-9be9-073973e6d16d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a4e4e00-a52f-4b29-8d91-c578caaf7a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e4ca8e-c311-45f8-9f4e-e12b24f4fb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d96336e-5a04-462e-bcf6-934d5d8c964e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315fa378-6804-4c5c-b6f3-7378f4aedc52",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5773237a-7498-473b-b2d5-5aa2629d3072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82489402-ac5e-4a13-b611-48c592fc1590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2e91b0-5216-4f8b-99fd-0a714120801f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50154d2-cb71-4785-9030-c00d9731ba1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e47124-e72a-4392-aad9-940a0cb49f71",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cdabbd-baa6-47e6-91bf-e7bc044dcb5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dd0fd2f-1c8a-44eb-a8ef-c8f53bd79f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4a4f52-9830-4525-9ef2-141c4c7a7c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455cea86-dde0-4c8e-a98c-bee8b326e432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3792f832-8d5e-4e48-8658-f290ee486fa2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f805084c-44cf-47e2-8187-cac0c0a31409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f218b88-f651-41ce-b624-5cbd7953501b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d9654f-e8a6-4b81-9382-5ef351821740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6b7ad3-85dd-4070-af1c-77cd5b4b11e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74a3e9c-df0e-49e6-bf1b-5209629db2b9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8388db25-2494-459b-8a0d-2dcf10bf3838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73f7d7f-22d5-4b0e-a1f1-c516c94812c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c315b16d-a78d-427c-9b59-eae3b0725ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3951240b-00ef-4117-99c9-f51f3236a6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda1b4d0-f58c-441d-808a-26f301ab1459",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa337cb-8247-4efc-ba38-fa50e880924d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb38e95-56fb-466e-9779-9cc4043757e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e24203-05a5-4063-b05c-5042a7c752f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a455524-1e70-452a-983d-a2e508dc370a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6316249-f997-41f4-944d-b361ed5afa52",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d202a15-0ec0-404b-abff-3d32a015905c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a22df9-1265-4b52-993d-b2d6950b1d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2a7619-d3c8-42bc-bd22-c0f17848e916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fb73f3-3e62-46f6-a767-ed39c228e1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa269c4e-55e1-407f-8005-811f758c6ee0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93a23c0-ff8a-4b12-9994-e81f19074b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e132e254-530c-41dd-b178-cf8e7842f4b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddd5ddc-3def-41b6-8e43-c3f5d3eb5255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8cd13ed-7943-4d76-83f1-464570d87d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64c395b-a65e-49d8-9991-618624262c53",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea730274-d02f-4054-8168-bc2d798c8fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898dc488-9265-493a-98b2-d440b1586720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2e779d-7edc-4831-8cc1-4210e5da155d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c9251b-3470-4601-8b29-f7191680ff0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bca8cf-23e2-41b0-bc9b-a309b42cd164",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a41ef4b-8b07-4be5-a246-b92cdd7c30ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34f2b25-0a29-4070-9e7f-d0bf5ad75722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90d6565-338c-4905-a716-12e77a962d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffaf1fe-33c6-46dd-a2c6-8c0f18b93577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65e58d0-5498-4ff5-ae35-5ceee3888a21",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5f5316-1441-4fa3-a7ce-e28da46e5d2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed3d12b1-8445-4818-a0bd-5d292c2952d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010d5e92-c2e0-408c-9242-87fb7222e667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a329d48e-d30e-4c14-9d32-a0f6183f7cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3985e62a-d64b-47fa-bfa7-8c2ae76ec3b0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29487cab-0986-4825-bdf8-171fa904c37f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c338f1-334d-4716-a281-b5eb0d22b315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a604c5c1-8c43-44b0-a572-07cf4e3dd6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677322fb-69d2-4cb0-bb0d-e2a5ccfd748d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09637813-146a-46f0-8bba-15e0500a47f0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04338d97-b244-47d8-b94f-1d59ac28963b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bc5dc38-509e-45d2-8799-f7f14445a5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a76d76-f344-4a6a-8593-d0fa62588b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a17c14-d7c0-4504-8c67-a0f853bc1bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330e680c-1d72-46d4-ad40-1755a28c0c4d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b132a0c-014d-47d1-83a4-fead7c249bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0d940a9-4dbe-473a-8e20-a586b48e0300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51dceb21-049c-4f73-8574-8f66d1fc6a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a039484f-b393-496c-934a-8520b188db26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6328740b-ed53-4c45-8aa5-91bef32fca55",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee474781-8471-4117-821e-13dae7e50872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e77ea86-127a-452e-8be5-e50668f79ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab04f00-7968-4c18-8700-bfefc127cdd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a0f0e4-d7e2-4b5f-a2b9-2e9e67d56ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268b95a9-56ca-424e-85af-586f865fb5e8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307e24d2-f582-459e-9901-d13b7fd59722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8d9bcc3-ec34-43c4-bc36-958d933147a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01da3852-7221-46e9-977c-332175bde433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0483bc-a4d1-41d1-8e3e-4dc0755d289f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b65c0ad-3e66-43e3-b71d-1a001db37922",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a80e10-3a2c-4e27-8c51-8e4f73ed67cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb34ee0e-fa8b-4b16-b52b-bdd1bce973e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b055aa-f0f0-4142-9769-d4818458481c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05264e5a-d034-4145-b2df-2887e897f42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2e6d71-cf1e-41bd-a52a-5d2e54ce5c66",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3351f78-5c1b-4597-9f71-89badb004308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bdb6fce-331e-4d2f-849e-a2a72861cc4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cbbc87-07b5-4708-a4ec-f36d4a48b9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72525432-6e83-4955-95f1-65484e35ba36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dfda8d-571c-4ae2-96ac-e49ddb8a7e3e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4ccf16-cf49-4589-8c53-391544136695",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "778e7f01-7405-4f2f-b1a0-b10dbefc3471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c30116-4faf-4ec1-8bf1-535c7cf8819f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404bbb23-1d64-429f-85e0-94786e76434a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e554c249-c7b0-4395-ba4d-b235d59494f5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf5c5cc-a588-4dbc-b356-06d8655c7933",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a994e0d0-573e-4a1c-a38f-7efeee6d7516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f26e846-ac82-458a-b35e-333269f6c4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacd7124-af8a-431a-8d3c-a5d75af383c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb82cd98-e993-448b-97d1-268e0cc35474",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e08700-ed08-4068-a5f6-6512a92d94ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da914312-8a7c-49cf-9b93-94e89e5e9172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b0ee44-4192-4b11-aace-3d4e1a86a047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790a9e03-f4e4-48cd-af57-6eb59c7524e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088afc83-8d88-4832-aeb3-937271c80ec4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1d3ace-2ca2-4909-b8fc-b06388b2b51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db07ddab-1d48-448d-9cc1-08344afc4dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0283845b-b3b9-4089-bf77-c043c9298b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3303760-25b8-4037-8fef-73d578cd24f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ad23b0-8e88-4d8d-939c-7129c3444061",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0432702-33ee-4b51-8e11-f9fbeb5c762d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2be661-5c9b-415f-8e89-15ceea9f473c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b6a5ce-ed0a-47a9-81cb-18a2a8e2a6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97f296f-8da2-4be8-b850-df0792fbfae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852d255e-b94f-48f4-b63b-de88cf97c249",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70906292-7463-4f8e-80c2-c7a1937fb8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c604657-c4c4-49ff-baca-b2b1cd63ef56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362dafad-77de-494f-859c-d250864fe6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161df914-b17b-469e-aed4-525324ef9046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f007115-b6cf-446c-b5b5-dbf2658726f5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edc0040-90ba-4c72-bd1b-21b367b31cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f251e8-96e8-450e-9ebf-44d7ea9782c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384b9a8e-3d13-4ad2-9632-a3aa8c9f4332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af93d3d6-8f30-41ba-b045-4bdb1bc4d461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6022c2-08f1-47d3-854f-214c8e6e8436",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74d3fe3-fb1e-493c-bdd0-19fdbc1309af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1408076b-4cad-4cdd-a4ca-a947b02b9078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14c610b-7b3f-48f2-af03-2e8d9d347095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8750272-145d-4dde-8134-89fa63c9155a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b775f2b-201a-418c-8178-e0f4b9fb7aa0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdaac40-7ac7-4dd6-9cd3-25810194f87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78eb836a-5fda-47c2-ad13-196caacd9007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b555152-4861-443c-8b2c-d62c8ecf5b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8dae23c-2b90-4a8d-8b7a-77afd2aa7136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b500fb0e-ac38-419a-a0b5-57af315ffdd5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86b1fec-dfd8-45f1-bc2d-7616a3e339a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b268074-bf17-4dbc-8704-511be2b326b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8aafd4-140f-44ad-817b-750f2a8e0649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9941a42e-2470-4d6f-9ee8-63dfbc4779f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad81e8f6-4587-4389-a862-1bf7da72a7b9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47f207d-dc89-47f7-9de5-9901ef9ec4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29da1e6c-ee2f-4022-b422-7032d8acb4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e3149e-6ddd-4a71-8ece-d77f31fc0232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de68256e-c616-4a97-88b8-3f4f906ccd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00804994-06be-4853-acc8-b053453a2687",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7704fed0-b611-4c22-95ef-60a72b27c1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e8ed8d-f89b-4c7d-9c2b-37e52dd86dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41874bd-4399-4b04-9beb-a1eeefdbfe2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ae8c06-c947-4035-a811-52a0151a959e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a4b83d-d31b-4990-b671-7bee1cfbc918",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c66a45-4ed0-43a2-89c3-38cb7328f8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ffc4c99-d3e6-4cd4-905e-4907fbd632f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f9c9dd-20d7-4858-b15f-b010624a2b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add3f0b4-651e-471e-966f-08912519d591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c8ff31-0f5f-47a8-a84e-4fdccce95115",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd42aebe-60e1-479a-9d07-617d2605987e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613ffa0f-a2fd-4f07-9fd7-56c236bc0bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9661dd-4947-49bc-8289-76deed67b204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a6d2e0-e275-48d1-967c-4bf54fd21b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad42b94-6ef8-432d-88f3-62ee6aa6f49c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5380d8-e813-4b9d-b1c6-12716fbf5e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c544dc7c-29c3-4a99-98d9-562676cf7fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7322071c-a5d9-451b-9dce-8254cc1374f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef2dc6a-9363-4a49-aded-5c3ee88f42af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa58868-7b8c-4cd8-914e-b051ee96ecf8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efd1fb3-501a-47f6-819c-f49533ecbd8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa68b34f-f21f-417e-8988-c921ca9f489c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8e3bb5-3d90-42c3-a59d-ccfe58b17cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8caa8788-c61a-4faf-a0f7-06547580917d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57ca742-4e54-4f41-994e-8179ef5bce9e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4144c44f-1b37-4818-b5b6-f2942017edd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033c173a-f228-41e5-9b38-3abfa3af80ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e1383c-c3b9-4f84-95ea-868eb6dd058a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8111ca8-92ac-4361-85fb-106c700d1ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbda1a76-95bc-4b3a-9c1d-8913c7cd4c0b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad41af8-4040-4c9a-86b4-a978537bceca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619acdda-49db-4b53-a938-6cd91ec21361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c06e510-5751-4e99-8ea4-e96715d95c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe735db-9741-4175-8461-54a7a9d02dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739c0171-2263-49bc-bee3-9b095a15e4ff",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b73cbe-0ad3-437c-94f1-18ed2c41d0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40bed02-42f3-4b0c-96b4-3ceafeee6bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb7622e-1448-4de0-b42e-82ecd0ac83a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62023040-9365-4c2d-a042-65f4f7186fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe5b7f2-3497-48b7-9ad6-fd5ac051e616",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d165cc8-419e-4132-84d5-ec360703f1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ac3606-471d-476b-9daa-339a4f0db9a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7665a5a-e25d-4f0a-8780-6086c53ab0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afeb549f-6e9a-4908-b204-e531dbded8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede0f60f-a885-403c-adc8-17e52d0e75b2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf7afac-8483-449a-8852-61f623793f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730bbbe5-6ef7-49cf-b76d-8285bc2953f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c31b762-d682-4987-ad01-cda86e48769b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef5616c-5f4f-4d51-9841-96c3de1650b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b54807-fdec-4bb6-8e89-99031676d0eb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2261d773-53f0-4a5d-ad16-2ccc35730bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994541fc-db6e-44ab-863b-cb03c0523f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dbf1e2-8651-4391-90c4-aab102ae5d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711fa203-1960-42c4-ba85-7bc4dff6fea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6774ec00-d5af-4964-83c5-533b13365e64",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ff977d-9edd-44e6-9e2b-0a50cdbb639b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b926cf-d407-461a-9009-c9ab25ecb445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d595a1a1-2d06-4d6b-9f3f-e226f3a7e864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b763b1a2-94b7-4887-b892-28fd4bd33b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e6382b-1e38-4553-9f95-dc9ab77134ae",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f709a4-17b3-49c9-9f83-1d523132e139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2f1b83-565f-4082-b24a-bd50336b0054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f21568-144f-4c21-a97c-3f00d18b9ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa95cd49-8eff-4621-a3fa-541889d9cac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8c2288-2dae-41f8-b8e4-9092c5019579",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3b5588-cffc-470d-9c1e-d4bf4e121b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12fb9732-7f8d-495e-af59-3641c996beb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4139d0-f832-460a-b5c3-861958a8052f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e53aa94-b797-45fb-a9d1-ee0531817f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18283be3-721c-45d8-a78c-352c201d6aae",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5b6824-dac7-46a4-b4b4-93734cea9b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72c8e30-7b21-483e-8f96-1b36691440d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778bf7c1-540c-4c5f-8029-bf00d16641c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e526ab-9db3-41a7-b904-dcb50d341c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8e2651-dbab-436c-80f6-134777fdede9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac47631-a1b4-41f0-b3fb-4b3598d9f1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3005669-8565-4d49-8c2b-f5be3f77e2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fefa9f3-700c-4888-a57a-3b26b6b06dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a82fab-f529-4ee7-958f-0b489023cc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cdf072-e20e-4bfb-81ba-91a758c20a48",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf2af5f-22e5-40ff-abc8-eafa3794c6f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b84dc9-754e-4120-8345-444e16ac3b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bd6056-9bd4-4e06-8ba3-889d3d800b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b92dc3-e9cf-4016-b314-0c0f420f5c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f9bd18-d2bd-413c-9e38-18b8014c2e06",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e23277-2646-4332-af00-9584373c39e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef84e86-3413-4567-a277-f0d8f06affdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8918d3-6731-43ee-8dc6-d316137d2505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6572baf6-0566-483b-a448-e51ed89590c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf62fc3-4701-4f8e-886c-fbadafc9a842",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6471add-de48-4b36-bcd1-282e297695a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e8009f-d649-4a51-b17b-1c24b67abc37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2aaa736-2e50-4b65-a4ea-18717a98ec41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5008f3d-a87d-453a-bcf2-ba7956feb186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2705ba-ba68-4bba-820e-6591d166af86",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a412c9ed-dd0c-4d9a-a81d-3f9a6f0af1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffacff82-bf67-415e-89b2-4dbeaa489a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d52efa-51a8-49d8-9836-e37db164d91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ffb69a-f696-4ae3-a5c8-362de95f1009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a56bdbb-d658-4cd2-8ac8-201d2bb3ca72",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42f8253-8897-4b7b-910e-03c79ed66e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd92322-660d-44d4-a137-1d02480250a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c56b5f-4c72-4130-808e-b4d9aed3c0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc154230-b20f-4451-b14f-ec85d1beaecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563e3aeb-323b-4757-a88a-8bfe67b1709d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d39379f-e2e0-4ead-a3b3-d659b42eb37c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c9cf32e-129a-4f18-b4f6-3ba41f45e8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6881c6-8364-495c-adee-8df25a585008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf52f50-7713-41a6-9d07-077b8cd095d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03798bd-f895-4cc3-b425-091e718b2915",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34bb623-97b6-465e-a127-3e03202a191c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe1bb47-62c8-4e54-b7e8-077c6844a45c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35302d61-7e0a-4282-b2c6-ca31fd7ee03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b50eee-8bf5-4de5-893a-d1fbc81f2880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4d16e1-32f3-4e5d-b334-932e0f132007",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c7a863-7d24-4b5f-b4e5-a1c9dcd0086d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c234f42-7eab-475c-9cee-3b678d7e8ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1711be46-ac85-43b8-9b18-7de0e537616f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699a880c-62b2-4cf7-9eb5-85e1537fc152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5992e9-4dbf-4fc0-93d9-a54a118b088b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e955cc03-2883-48fc-b060-74c0f93d8b3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c0ea61a-b732-46ce-acb9-2a43097a7c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91525b40-07bd-43e8-94e0-f7e7f9c9513e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57040557-0b8c-4969-b2f2-5c34558a819e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9d7646-256d-4371-bed9-020e2dbbb165",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e036582f-cb26-45de-ac39-3bafb5f6bb8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "741aa2df-1038-444c-8ccf-83f108d5f5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e605bb4-990f-40c2-a75c-10851305e4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e82b3b9-5c20-4778-afea-e1e5620be998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1ce21e-4725-4a36-b587-b6e03e87c261",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54d8dfa-478e-4e69-86b2-1c51c65e083e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2a27cbc-ce14-4ed8-8e65-b404a4abfb5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ef7ad5-5134-44e3-94e5-bf7a517a3433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c950792e-37cb-45fd-bcba-f9f9c8117c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f76507-c4e9-4589-80bb-050436f466f1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ba4c9f-224f-41ff-bb4e-f9d04a51d6a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c05731f-92bf-4092-9fc1-ad7217260199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5dc788b-5fc8-4323-9b87-f3f3679043f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f6b958-083d-44ad-ad10-8c70bdcbb2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9568b4-3d1c-40b3-8629-79581e89393b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1771923-fe64-437a-9554-029d939117d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01b32869-afda-4a09-844a-33dc2c23ffb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2818f229-da1c-4abf-bff1-4ea46cf6e4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcc726a-8d47-4302-a581-fa0393218f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ab0f96-a180-49a7-b2e2-54f6380a941c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb9bcb2-88db-4349-bea1-7c27532e5c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a701051-98b2-466d-a8fe-5e64c5a4c50d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1edd141-ebfa-4ffa-9647-8f8b91c5540f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966f6af0-a11d-4769-8c57-781d2e68fa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa076c1-9856-40ba-bbd0-150328f3d319",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daa844d-6195-4db9-8677-e311849372a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b52624-a006-40f9-993a-05a8f79e36c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06e5493-ee9b-4745-96f8-0f57bcca54f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75123f9e-2935-41c7-ba7b-135bffd14ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febd4ad8-b4d3-476d-bbc5-efed6d1d261a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe73107b-3d9b-440f-bb7f-a04a899e21a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b29116bb-51c0-4e96-a610-2b333a602e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23b49d1-e56f-4c59-bf07-98785babed61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b26b681c-4c65-4b97-888c-3f4cf7828c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6a4152-5514-464c-86cf-f3c3cc650522",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea9381f-30e2-483b-b38e-abeede892681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "841c6bd9-88b2-4877-bd1f-39b92fdb1098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6ecce0-716d-41bd-b5e4-11fa5b9bd069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca18051-7755-4b6f-a6c1-43614cd23926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6974ec83-3d9b-430e-b22c-2c0affccc808",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37502067-385c-4c53-a942-f9eaffbafb10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b0c4bc7-10bf-45f4-a5ac-b3d7af6eccfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe1814e-e200-4ba4-924b-38ee6137b52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1110e0-b777-4719-a116-c6ab6c56579d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ec74c6-da11-4596-b9f5-8265c6c5a9bb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a1df70-50c6-43c8-a70e-bed11462f1e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c88459-69d8-4025-b41a-6335046a7f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1004c07b-dbfe-443b-a81d-d50d15beccfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290a9153-b264-4f71-8060-cd234611bd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605f3f86-45fc-4198-ace7-cd13163f47d1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9930429a-88c2-47fd-9d7b-ab130327049b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39a2ae3e-31f2-4662-999d-c00d0c595598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5821429-57ab-41fb-8bf4-454cbfc31d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c149226-28d2-46a4-902c-66b73a607c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40939bd3-2cef-4dcb-acff-aa5f9fed64cd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d4cc19-dacc-4a8c-802a-08b337d76048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eeb3b56-f332-4b1b-9b36-5d6bbdfa079a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57aabc93-f401-436d-9a08-c7a961ce95b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f7d595-5c0e-4ede-b976-52dc229f37da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c08137c-e634-42f5-8db4-e99c05ff973e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2aa1e7-02f8-4512-8fd4-5ae12f515ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6d2dc45-a4fb-4df5-b0f6-dcc0ecf944a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf36e571-a9ed-4ebd-b31b-0c0a0bf9138c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4413ac-cc7a-44ad-9166-f126ee665504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8c543d-3217-4a43-a82f-39be62f13a07",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1c3cff-e894-4535-9cdf-23c33aa6bb56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48ee4ba3-7f9c-4008-a043-35d3474889d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc8bd35-1d1f-40ba-863a-77a6d2d46564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2b1196-0489-4b21-b005-6193b28c7adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571682c1-5f5d-408e-865a-55d1995efe6c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff9689e-e2f8-4386-8ac0-cd38f5e2d958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd08d43c-108d-4f4f-8fe4-49d4455b8c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8807ef7-21a1-44a3-949c-fd96fcb211bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f189c44-60fa-45db-baba-9d5434b2bd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5217ac6b-d704-4f59-beb8-7dc3e532edd4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e82a77-18a0-4b10-9c4d-340d34a9fe84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b17d9e-658d-48de-a2c9-13f30f4386cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f7ece9-c9f7-4ee0-a30f-62d8dcb684ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfee9a6-1f6b-46c7-921a-3a974cf13a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40bd666-772e-4d4b-942b-82d3a89d841e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a740b38-837c-4ada-a04d-dec417df0ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c7d658-1805-41ab-abfa-9ae0e2eb4dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a3c327-9a48-4dd2-9600-c162b474e95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe17ef56-d78b-413e-8186-d0d61a0ff8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcdff12-ae5d-43dc-9a29-bb31c94efb60",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a4fbb8-8675-4f55-8dff-a41be5a02f09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d86734d9-f712-49be-aa8d-4e3343978e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54c1f67-570e-4f1c-925d-a29c79ad73fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ad1eb3-9b19-4083-a7c7-73ba4b6b9517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a78f71-2179-4d99-9944-54a1cdd639d3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb328ae-5fcf-436d-9675-ad46515a019f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bb3883e-398f-4db3-9bf9-a7b5a57bded9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82854c40-53e1-43b9-8656-dc52f0513ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e734a4c-8833-44cf-a307-f45d58d8ef99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583c73b6-1df7-4825-aec7-4c7a2b7101ef",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5055133a-387a-4d86-becb-dd20ba35d7b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c23f1bf8-5833-49b1-8b40-a0378d21a279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a17fb6-b8b7-49e2-b0cf-2c75d4334472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65b4d8e7-48f1-4a49-a19b-3ed365b0f018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b3b44b-7d26-4e51-bfbd-f696e1916b71",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efc7be9-7126-438a-b503-27c4ef4ecf5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5371a311-839c-42d5-a07c-cd215b978f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75655508-cb9e-4a96-b49f-0288ea1cb450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514a3e3d-6881-4418-bf8a-a1034aa5e118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90f48f1-3b8e-4b90-aa18-5c9da169d40c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b333bec3-8c80-4a25-a891-cb3db8113df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "822774ae-ec45-4936-9e0f-2d594790a3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ed9627-8095-4275-9182-c2bd2ac5f403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dfe8cd-e47c-41a6-9a0f-5e9a152774ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7077a47b-a4a3-4346-8a3d-df68c35be5de",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0165764-1232-469d-a38c-cd59af97dcf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5a03d8a-b20a-4689-a999-9d5c38a6d6f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8d8911-605a-4079-b537-0ba8eba07913",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0c4706-d88d-409a-a27a-63fb04c40934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705fa90d-0853-4ee6-a6a9-6fcab16d707d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd922b17-0e2f-4560-bbed-4a3895f6934f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ada95d1-39f5-48ee-9871-d8d4fbfc0ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5001626-68ae-470e-b5f5-cd68c00cbc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd5a391-3905-4504-9002-e7001c038dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a0761d-52d4-4964-b351-9dd2c238e906",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa4ea53-f001-4b26-939a-5ca0c4a34cd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb65d53-81a8-4b84-aead-312f50c14fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c514c70-f96c-49fa-9e2e-7bd86b338e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ed606d-079c-4756-90a9-4a4b6eb8b583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23d5f2a-5880-46cb-b028-1af1b1a26909",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76592969-9ed5-4043-94c4-3b4044f781a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc79eebe-3b21-493f-a6b8-2f822c844f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2892866b-b9d9-44c4-9b3f-fa2d2b53d208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00581db6-1ee3-4194-bfeb-5e342997d7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26762637-516e-47d1-8eaa-52d62c8e734a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e16c56e-1fa8-4e7e-ad72-abed637d613c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0b1a526-6082-4286-baa1-994c78002aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "142dcb9c-1117-4aeb-8427-be325255c1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8cfd65-6fbf-43ff-813b-517716d080d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e90360f-bea9-4fa9-8e30-2c8eb266056a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee7166a-7867-4c29-a6e3-7ebb25c83235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1c39fc6-f35a-4e5b-900f-baee459848ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db72837b-94b0-4392-ad37-d66074cfde16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121701d8-4170-48f1-b1fe-8469005e7049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0effb4-cefc-4ed7-a49e-2241aa631029",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd3d012-3362-4b48-9ae2-623a4214cb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee24ef8f-7d02-4f49-a54e-2d020aba1b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb580ea-a33f-4906-b5d4-cc4629dd4688",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f04823-00c1-4262-b50d-f10b22c39696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01142d7-0f34-4984-bc9b-466dc1a18781",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91ca8dc-9c57-41ff-8817-cef7a00e480b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4bf4ae-5fc8-4aa8-b96d-b3b76511cd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf782b6-2014-43f9-8f6b-220656719168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b197d8b4-b02a-464b-93c4-2586f8a41cd5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c14926db-2f78-43a7-8240-b3230901e779",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64d32ed4-ee61-4207-b468-002bbcc0063b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d091c784-ee33-4c16-b55c-01ba19b0d30b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c040b3c-2478-4787-9f3c-71691c42f1e7"
                    }
                  }
                ]
              },
              {
                "id": "0032418e-11f5-40ba-9da6-07c85ecb5e64",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e531224-3d22-49c9-94a5-04f1779ffae9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620beb70-40b4-4647-b2dd-88ce5861a6c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3a415891-cf1c-4457-b031-db0da228971b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dfa4dc-229a-4661-8752-2b20faad5fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbeabaf5-85f8-4a58-9fd0-7eee581c517e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32862fce-2109-4fbd-9c5c-166061165155",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24a95bec-9ece-4a14-b0b2-05691f0d24f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ac9a952-e6aa-4bb5-963d-84f4383f0308",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e52fef02-bc63-48f2-863e-177962cdf32b"
                    }
                  }
                ]
              },
              {
                "id": "e051cadc-2526-493f-b7ff-6b3341ae87f9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "01c50377-c386-41c8-8859-d7c95bb64fd6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22ddee5-79b9-4b45-b7a2-347876fb9578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1da9c43f-0ed6-4018-94af-6f2d7af012bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c879c5-eaa4-4055-a8b3-330b3a676798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b70c17-a04b-4b48-ac10-2e4dc2dc258c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4c43d23f-c561-405b-9acd-111e2927d6b2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2415021e-f3aa-4555-bf7d-6aef046385a2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f69d2e6-6996-4585-a02e-6ce1ec6872fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "918aec82-0579-4f72-85eb-e690a9ad9e08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3d70f86-d032-4013-a5ea-c271f1ae128d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f66f4bf6-e82a-40b2-9be3-9dea2c67cbb5"
                    }
                  }
                ]
              },
              {
                "id": "1968b6c3-242c-4999-a1b4-1e2f770f2a93",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "097662e0-af4f-48d5-b49d-a8e1ecb99d3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8f14fbeb-5d27-431f-a308-9a461a269fae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95f5481a-2b70-4117-8b06-dd7a1dddd293",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "159f95d9-8907-4b05-ab87-a5b61be4db79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb81f145-6f85-4af5-8365-fd1d13b20571",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1b0a07a4-43af-4365-8aae-a3cd4ded4a2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfbda80b-d850-4cda-acd7-b4f53729c082",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e13a1ac4-0eac-40c7-9ecc-9453fd6d4edf"
            }
          }
        ]
      },
      {
        "id": "9c8f50e6-6175-4b32-a3fc-fed9a6f9b61b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8dd0c796-c75e-4b75-9318-42e1ac5c3fd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "015e2924-3325-4634-a196-7a476db41e65",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b959f77-69d9-4089-bba5-915a8b80d939",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf7a8c4-fc1b-4fbc-882a-e2caf125c6c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a63e6486-742c-4a3d-bbc3-5c4513129021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36ea54f-73b8-46a5-848b-5347b7504c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "226a545d-f52a-4c3b-ac30-a86975889310"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77c8c005-8d18-4beb-89e9-5af9256ae228",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c2e7143-64db-451f-872e-24e88c044657"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "995a63b0-ac99-4a18-aad7-da69e2cd326a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "255c9e3d-bd71-4af9-af63-3e228b2e7755"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e416922-2755-44e3-8b84-f28777dbaeb6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "62b510c3-a734-4189-9c89-9e2ab7284b35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1c7cf71-34a1-4e92-b0e0-4c50d160a3bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "560e3e19-2e5f-4b10-b42f-789365bfb45d"
            }
          }
        ]
      },
      {
        "id": "686b59da-cee6-4595-98d6-17ed41f7ab0c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "85eaf76d-8c9b-47fb-a0a4-1a8a88b918d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c387ff6-0854-40f6-857b-5b4de227459e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed3fcb77-6feb-4c59-a57b-e9eb8f7e7288",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d77b84-4c56-4b95-9004-95a3e1573182",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69dbdc15-da36-44b3-a374-c4c5969f507b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067c3f93-46bb-4069-8149-bcd037e7afe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd8c937b-9638-4820-926d-494b8f245852"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "605e3c47-979c-4ccb-bd65-ba2249e31ee5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3c7175c-6583-4d1c-a97b-d3b16cd92459"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "288dae9a-d0e7-4a65-be2a-b0f9b1e6b925",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc42b342-4600-42a8-87f6-5aef1f8679f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12969554-2d85-407f-a193-68f0f8cc606b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "50ca3485-d85e-4047-a090-1d4e332656d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5a6d1fc-2e67-4234-9751-c6e77dcfcdcd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2f84303-e499-4ffd-826e-9a844e562653"
            }
          }
        ]
      },
      {
        "id": "15d1828e-26e5-43e2-9e93-3916583d1151",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "35524303-d384-4648-a9a2-a92045177f46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2375654b-ec6e-4c5f-9464-859e7a016b98",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34aaa55a-439b-40e5-9e63-07bd16ce08aa",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db02a63-f9e2-48f2-a882-c5d3f14b48e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db271a61-facd-4f5e-b91b-6d6f297e0008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebab62aa-a6e4-4632-96d9-649cc1be20ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d38d930-20a8-4d8a-b27e-973e0b6b6a46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48a0d8df-2fb0-442b-8d10-83f837f0d49a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75fc2416-ae64-4580-a1e9-defb60dbee79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "238748bd-6802-4ade-993b-e8420a3f1368",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f6fd067-1dfc-4e2f-9f96-bf7b3ea232bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "baba4f60-f938-4590-b84b-69dfbe707502",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3607dadc-d378-4f86-b1c0-32d80d816b2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e92c613e-9dce-41e5-972c-752181f6f1cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8bee869-b678-4a15-81c0-6fb07d05e233"
            }
          }
        ]
      },
      {
        "id": "49a473f1-1ed5-4c76-863d-0fc6d191ef48",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0148ce17-dcbc-487f-95c2-6ef417cc51df",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb56725f-8881-4f4f-8d76-b006c8de4cdc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a60242fd-b5c9-4279-a323-bba0991aa86c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45970bf9-e6f6-4c1c-b5cc-abf13f02fe45",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b94826bf-a936-47e1-8cfd-be140af05ca2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 245.61382113821125,
      "responseMin": 12,
      "responseMax": 6698,
      "responseSd": 769.4246301198017,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686616966277,
      "completed": 1686617037445
    },
    "executions": [
      {
        "id": "b479dcd7-4375-45b0-aa5e-8b3f3af9b7c2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c6b9c810-dfe6-4ede-88b2-b099081aa159",
          "httpRequestId": "6550b92e-b6e6-4b15-9f8b-b440a8f5b6fd"
        },
        "item": {
          "id": "b479dcd7-4375-45b0-aa5e-8b3f3af9b7c2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "eeae6a87-3f29-4e7a-9d2b-0b2368c398d3",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 0
        }
      },
      {
        "id": "767dcceb-9da4-472d-b6fb-1f00fa5369f7",
        "cursor": {
          "ref": "3ada9ac2-4af3-4481-a119-fd56dfa48808",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f8a3c4c8-44fd-4b6e-a1fd-00a738bb0945"
        },
        "item": {
          "id": "767dcceb-9da4-472d-b6fb-1f00fa5369f7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0f41967b-e16d-4f55-b214-16ead84a9ecb",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "015b4f0f-93a6-42d9-8936-0d08405a48c6",
        "cursor": {
          "ref": "eef1a1f6-cbe3-429c-8333-602babb342c3",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f3b6b078-7261-4a72-b187-817666f3f425"
        },
        "item": {
          "id": "015b4f0f-93a6-42d9-8936-0d08405a48c6",
          "name": "did_json"
        },
        "response": {
          "id": "a5231728-9367-4b47-a68e-cdf87c9e9894",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cd0ad9-548f-42c2-be3b-4a54fffec245",
        "cursor": {
          "ref": "826bb3b9-4bc4-4ad3-9e66-8bf8fa164416",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c5f58a6d-ab38-4964-83fc-ea403a47224e"
        },
        "item": {
          "id": "33cd0ad9-548f-42c2-be3b-4a54fffec245",
          "name": "did:invalid"
        },
        "response": {
          "id": "885dc78a-1a5b-42ba-8450-deb17bd2e79e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 974,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "33cd0ad9-548f-42c2-be3b-4a54fffec245",
        "cursor": {
          "ref": "826bb3b9-4bc4-4ad3-9e66-8bf8fa164416",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c5f58a6d-ab38-4964-83fc-ea403a47224e"
        },
        "item": {
          "id": "33cd0ad9-548f-42c2-be3b-4a54fffec245",
          "name": "did:invalid"
        },
        "response": {
          "id": "885dc78a-1a5b-42ba-8450-deb17bd2e79e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 974,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a1e7510c-5af4-40f3-883e-edaa38d45757",
        "cursor": {
          "ref": "06812e8c-7e09-4c40-a03d-631f1deba567",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a64ae0d8-a261-4998-90c1-4a149b979d0b"
        },
        "item": {
          "id": "a1e7510c-5af4-40f3-883e-edaa38d45757",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "74af6f84-6571-47b1-96e4-8c2dff9a8039",
          "status": "Not Found",
          "code": 404,
          "responseTime": 22,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d595714e-6076-4e57-a1c6-412397202ef2",
        "cursor": {
          "ref": "787f184f-1e60-40a9-8383-224a69aac749",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "64300237-abed-4028-b32f-bc0a5e28c42e"
        },
        "item": {
          "id": "d595714e-6076-4e57-a1c6-412397202ef2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c6ef31d7-8246-488b-b50e-399059732509",
          "status": "Not Found",
          "code": 404,
          "responseTime": 21,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851dfbfe-d035-4914-a025-678d416070b0",
        "cursor": {
          "ref": "5aa67bc7-1df1-421a-a542-933fb6c67292",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c16ffc4d-457f-418a-824e-5cf3c8525ae9"
        },
        "item": {
          "id": "851dfbfe-d035-4914-a025-678d416070b0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9ebb6b7f-7f74-448e-9920-09f2562b63e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "0f0e0572-455c-4580-b751-d261341f0f9a",
        "cursor": {
          "ref": "37847b35-f8a9-48c2-9d3d-de4d5a386be6",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "df3f1c97-24d0-4eba-8767-898b1b532ba0"
        },
        "item": {
          "id": "0f0e0572-455c-4580-b751-d261341f0f9a",
          "name": "identifiers"
        },
        "response": {
          "id": "cf0f50ad-b96e-42ee-a5c1-22c224579bff",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684e995a-aed1-47a2-b4bd-75e29a3019db",
        "cursor": {
          "ref": "0ce1b0a7-3f1f-4bb6-802d-a7defaa11eed",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "54c06091-c5c9-49c8-8fda-20c5d7253cbd"
        },
        "item": {
          "id": "684e995a-aed1-47a2-b4bd-75e29a3019db",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "611083a5-045b-4007-aa78-d8dc76760848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3291a5-72aa-45bb-b131-8df77c5ca896",
        "cursor": {
          "ref": "23a1d330-2d8f-4189-9a6d-baea20f8b0a7",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3c1d3403-e344-49d8-b960-d12dd83529c6"
        },
        "item": {
          "id": "fa3291a5-72aa-45bb-b131-8df77c5ca896",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5dbb81fa-8e2c-4610-9c37-0d29a02a4bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb2df3b-e6ac-4a58-b6f5-f76c7773fb82",
        "cursor": {
          "ref": "62cffcb2-1e50-4673-a1a0-4d66c58510f4",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e4f08b96-8c8f-48fa-810a-0de9c1109aeb"
        },
        "item": {
          "id": "5eb2df3b-e6ac-4a58-b6f5-f76c7773fb82",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c6ed2714-3ba9-492a-9b6a-2b048d416bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad2e7db-0e68-4129-ab75-a5d255a3c13a",
        "cursor": {
          "ref": "4f1c6f7a-c2c5-403f-a0f4-d5eea69c3830",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9d385837-48ca-40ab-92ff-34cffc7b343c"
        },
        "item": {
          "id": "0ad2e7db-0e68-4129-ab75-a5d255a3c13a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c65deac3-335c-472f-954b-7f767a9ba9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d811266-abfa-4a6a-ac61-dd5411ce9bab",
        "cursor": {
          "ref": "c2403837-e70a-4569-94ad-9f95218f5698",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2e7839f3-37c8-4c34-8b31-c2477cb44700"
        },
        "item": {
          "id": "4d811266-abfa-4a6a-ac61-dd5411ce9bab",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a132c3f6-3aff-47be-b7ef-02d51438b841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a06fe0d-6b1d-48cd-9689-b8b34f930946",
        "cursor": {
          "ref": "57bc078f-6f54-46ae-a0b3-4afab077e5ab",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d17a4f8e-9e78-4bfd-908d-3240d56106c7"
        },
        "item": {
          "id": "9a06fe0d-6b1d-48cd-9689-b8b34f930946",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "da1e9c1f-710f-4a22-8ca8-a504d19feeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5324f2db-a711-4e2c-a339-65bc5d744a98",
        "cursor": {
          "ref": "a9beb876-397c-4abc-923f-495ebd6b53d0",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "87b3d5dd-3598-4ac0-831a-0b9c3b60b411"
        },
        "item": {
          "id": "5324f2db-a711-4e2c-a339-65bc5d744a98",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d5364e04-3fa4-43a0-be46-5dad90211cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261cd4a9-5d41-49d0-ae41-3b99e2671b79",
        "cursor": {
          "ref": "4b1f42b7-4f38-421c-9462-1c8da97f9ddc",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2ffaeaf8-19a7-419a-8626-5806ea34292d"
        },
        "item": {
          "id": "261cd4a9-5d41-49d0-ae41-3b99e2671b79",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2fb36b98-409d-4978-8b84-e8d3651065eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8659310-42a0-4a15-a55b-a157b4d65787",
        "cursor": {
          "ref": "79b92bbd-33eb-4a39-b4af-d10b97f31009",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "28850096-fb5c-4711-bafb-bc731f9c7164"
        },
        "item": {
          "id": "b8659310-42a0-4a15-a55b-a157b4d65787",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bfc8bb69-bb07-4fa5-a784-d330ef8f1fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bcaf52-9a2f-4ce6-a7dc-0fb2100f8cd2",
        "cursor": {
          "ref": "2fed8ee6-2ec6-48a8-a898-9e71e5e71ee7",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "262c0736-8cd5-4477-8263-4f7f09214a4a"
        },
        "item": {
          "id": "75bcaf52-9a2f-4ce6-a7dc-0fb2100f8cd2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "201f196d-f5ac-47c6-b179-9410b702b1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07045d31-f83c-474a-9215-b27930833641",
        "cursor": {
          "ref": "56cac2c0-17e2-4652-a692-568ef1a53a07",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9cc03312-ec1c-426b-bc81-7e787e1b41f0"
        },
        "item": {
          "id": "07045d31-f83c-474a-9215-b27930833641",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "396ea5c1-9c07-4600-98b1-397009eaa862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd421d8-9418-4e13-8d10-d10a755f53d0",
        "cursor": {
          "ref": "4e575ae4-4d61-4f47-927c-311417e8b9b3",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "aacf8a69-0415-44b2-b0cb-9bf18da730d4"
        },
        "item": {
          "id": "8fd421d8-9418-4e13-8d10-d10a755f53d0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d4d8c22a-3dc5-4956-b792-c448f0d97515",
          "status": "Created",
          "code": 201,
          "responseTime": 947,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6bd4d383-f057-47ad-964e-86bc6a5f504e",
        "cursor": {
          "ref": "c13a25c5-a3ba-4e39-8613-56717dc106ff",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "089897c9-bf52-4c75-884b-f5acc30a05e3"
        },
        "item": {
          "id": "6bd4d383-f057-47ad-964e-86bc6a5f504e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3efccc15-2307-4f07-a497-1433f797c79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7141ad53-2f64-4ac1-8df9-0818de46235f",
        "cursor": {
          "ref": "0f78d38c-578b-41fc-b3d1-96822dae6b5c",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e2bc90ab-334b-4996-8b85-10e912e63e06"
        },
        "item": {
          "id": "7141ad53-2f64-4ac1-8df9-0818de46235f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5f496688-303c-4cc3-a7e7-8a796505853d",
          "status": "Created",
          "code": 201,
          "responseTime": 6698,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "231719d2-9a44-4d1e-a4fd-e185c82e4d2d",
        "cursor": {
          "ref": "fdb00aff-08e7-48b0-a32d-7c59088f85a4",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a1d94761-452d-4498-af41-88b571769579"
        },
        "item": {
          "id": "231719d2-9a44-4d1e-a4fd-e185c82e4d2d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bfaafd21-acf2-4dbd-9f72-c6cd82c095cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c198b754-a35e-41e0-95eb-6e328c59491f",
        "cursor": {
          "ref": "81ff2372-047a-4545-ad29-4d9a1b7eafc4",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "45b8547a-aa36-4204-b301-8d86d70ca717"
        },
        "item": {
          "id": "c198b754-a35e-41e0-95eb-6e328c59491f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b7a31e1c-e085-4f2a-8053-856c4ac85a8b",
          "status": "Created",
          "code": 201,
          "responseTime": 3151,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d739589a-b055-4e09-8faf-a9da53331b70",
        "cursor": {
          "ref": "923b4321-d9ab-480b-8ae3-7da9038f4b0c",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2069f612-b62e-40c9-a5db-0f5b6b943cad"
        },
        "item": {
          "id": "d739589a-b055-4e09-8faf-a9da53331b70",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1880cdba-ab55-4628-a4f5-cee7f789735d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e3ea66-c302-4157-bd5e-63da86610d93",
        "cursor": {
          "ref": "5fe0db72-994e-4837-b592-64bab5e8fa6b",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3efacc01-861d-4623-88af-261e7a400f5a"
        },
        "item": {
          "id": "c2e3ea66-c302-4157-bd5e-63da86610d93",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "30ffdc42-7fb4-436f-adbf-1a92729ff1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9fed01-86e3-4ba4-b911-70b8effcd368",
        "cursor": {
          "ref": "a0c8da67-fdb9-4b11-bf60-91e3ab2adb46",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "12660954-c6a9-4621-9c99-2b0568943dec"
        },
        "item": {
          "id": "8c9fed01-86e3-4ba4-b911-70b8effcd368",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d3e52b8a-ae31-428a-bbdf-4d0acead7137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d76fb5-7e0d-4f64-9d61-aa84af355d2a",
        "cursor": {
          "ref": "cc6395e9-5829-488d-8caa-f5709aabbb2f",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a018835d-325e-4a49-b760-75b3b82966e0"
        },
        "item": {
          "id": "71d76fb5-7e0d-4f64-9d61-aa84af355d2a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5732771a-671b-488f-ae9b-74433c253ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d3fa1c-b639-4b6e-9385-c793f5c59b8f",
        "cursor": {
          "ref": "94bb05aa-f1ed-400b-bb46-9e822a461fab",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f8ea717c-18d9-4e18-8b34-bf6d56828979"
        },
        "item": {
          "id": "08d3fa1c-b639-4b6e-9385-c793f5c59b8f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "00846a29-d28b-4bed-9fca-a6dc2e2a4701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca5ce05-692f-4a92-b982-3eb22aed7cde",
        "cursor": {
          "ref": "57f704aa-580e-4bce-b9db-6ed47be1378b",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c11dfbdb-80db-4712-ba21-72a6814498bf"
        },
        "item": {
          "id": "0ca5ce05-692f-4a92-b982-3eb22aed7cde",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d896fbb6-bd0f-4820-af14-c85a3b005aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122344c3-4bae-499e-af1d-907817aa95a9",
        "cursor": {
          "ref": "5f3d8a54-c04c-477c-8c75-08212eeed479",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "847a1763-9371-448f-8b46-36176fdf7316"
        },
        "item": {
          "id": "122344c3-4bae-499e-af1d-907817aa95a9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3b325df7-2a5a-4ef7-a41e-bb97d288a88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3099631-0e49-45ba-ac15-1c8007e495ae",
        "cursor": {
          "ref": "44cdede7-8c92-468d-8fe1-1e7e4197b130",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1e7c5c06-3e18-46a6-9d8f-e270683df3bb"
        },
        "item": {
          "id": "c3099631-0e49-45ba-ac15-1c8007e495ae",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f275353e-b730-4a3e-882c-a81445a9b326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc1298d-d34f-4763-8550-c31dd09f6005",
        "cursor": {
          "ref": "7fbe448e-c240-49fa-81e3-21aa07dbbaab",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1f6b9744-9818-4399-a8eb-9be03e15b505"
        },
        "item": {
          "id": "7dc1298d-d34f-4763-8550-c31dd09f6005",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "788e6f91-daa8-4a6c-b5c5-6d0ff0fd82fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e371eb-e9a9-4910-9b1f-a3c4a57b9c53",
        "cursor": {
          "ref": "baea0298-2101-4b42-a0b6-fb1ab2f5f0fe",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "164f0c5f-a5cc-41c1-87b3-e7928239da48"
        },
        "item": {
          "id": "05e371eb-e9a9-4910-9b1f-a3c4a57b9c53",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "51efb957-06ef-4a77-83ee-8a40a8c378ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d199a0-ae97-47a1-a76a-ed9430ca4bf5",
        "cursor": {
          "ref": "fdb11070-2b23-4414-898d-814292c79540",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7bd4d087-72bb-4218-999d-c17e6fbc2253"
        },
        "item": {
          "id": "60d199a0-ae97-47a1-a76a-ed9430ca4bf5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c635ad35-7dc2-484a-90f8-1b1f5cc38b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07741874-f1b0-4507-a587-3932433d5414",
        "cursor": {
          "ref": "e9e3978f-df03-448e-af58-da99a8aeb6bd",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d8679628-fc0b-4766-aa6e-7da5a388793a"
        },
        "item": {
          "id": "07741874-f1b0-4507-a587-3932433d5414",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4ae5974e-e971-46d3-83d1-6799f9712f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be72f434-1c9e-4879-929e-d66c7b98cc5e",
        "cursor": {
          "ref": "74ff934c-2fe7-4af3-afc2-9b3f8035fd55",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9f1c57cf-c1a1-428f-b04f-4e3426e0bd05"
        },
        "item": {
          "id": "be72f434-1c9e-4879-929e-d66c7b98cc5e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "40609b57-2491-4b3f-9e8f-613652e8b316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7f7ce2-3737-4c85-8423-da975ca2f7a2",
        "cursor": {
          "ref": "ed9afdd8-f2e5-4566-a781-a3cd791c1778",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d1f52e3f-b0cb-4548-a6cc-17aecb7b86a1"
        },
        "item": {
          "id": "3c7f7ce2-3737-4c85-8423-da975ca2f7a2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2a115c3b-0017-4b2a-bced-dc4aa91c477e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b860fa-e041-428c-ada3-a8554f034537",
        "cursor": {
          "ref": "4070b6f9-10c5-44db-ad45-580948ef429a",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dac747b0-c62f-44fe-a5f8-d9688ce1ea88"
        },
        "item": {
          "id": "a9b860fa-e041-428c-ada3-a8554f034537",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "91550263-11a9-48ca-9f34-48d832f51f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9349f15-aeed-4577-a4c0-207d6fb319f7",
        "cursor": {
          "ref": "cf77c1ca-b755-4e03-a1b9-5184869d3823",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "524769b6-4914-4473-af02-84f37b253c9a"
        },
        "item": {
          "id": "f9349f15-aeed-4577-a4c0-207d6fb319f7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "181d9d87-34b3-4846-a7c6-e24d6b574500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096dc9d2-7da5-42d3-83a2-cdb687c93243",
        "cursor": {
          "ref": "4b3c902d-9af4-406e-bf0a-cc3557f91a9e",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "df8bd34f-26a9-492c-b606-12256672c875"
        },
        "item": {
          "id": "096dc9d2-7da5-42d3-83a2-cdb687c93243",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8a8c935d-3703-4f2a-bdca-d57b8a4bd5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142391d5-0562-4519-a90f-c8f539053499",
        "cursor": {
          "ref": "79a72ec7-cb9d-4366-801c-9442740c6c17",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6afa9908-8fc9-4879-b6da-ee96fe7ec144"
        },
        "item": {
          "id": "142391d5-0562-4519-a90f-c8f539053499",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bbc9e1ba-b134-4c73-934a-ea87353af86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68903ba1-26a0-4ebf-b8a8-561bea8de5ca",
        "cursor": {
          "ref": "668935ab-6d78-43b8-aa55-7273971176f1",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cd562ee3-0ae2-4294-a891-67cec3fbcc95"
        },
        "item": {
          "id": "68903ba1-26a0-4ebf-b8a8-561bea8de5ca",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2d88b964-09ff-477d-9af8-cd564c43fb04",
          "status": "Created",
          "code": 201,
          "responseTime": 2582,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5d1d12f9-154d-45d5-9a45-4887cd111579",
        "cursor": {
          "ref": "b0c16fbe-2de0-40f8-a800-9dba0e4bb40b",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4427d47b-ce98-4ae1-a5a6-471863612077"
        },
        "item": {
          "id": "5d1d12f9-154d-45d5-9a45-4887cd111579",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d7e44ed-710f-4572-b5f2-9416f50bc4da",
          "status": "Created",
          "code": 201,
          "responseTime": 2843,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fb745ae9-b2ba-44d4-8409-50e0d7c167bd",
        "cursor": {
          "ref": "49da56b2-8a51-436e-bb9b-99f57be6c2d4",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ffcc907d-5fc0-4e32-af84-3205b55ab3fa"
        },
        "item": {
          "id": "fb745ae9-b2ba-44d4-8409-50e0d7c167bd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a9a23353-71c7-426e-96af-450ce81e2b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e586e9bb-eabf-42e9-90e7-68bf34523a44",
        "cursor": {
          "ref": "64af3409-20bf-49bf-8a7e-8c4e17ba5901",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d73a2abc-cc2c-41b6-9221-7eaf6df96119"
        },
        "item": {
          "id": "e586e9bb-eabf-42e9-90e7-68bf34523a44",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a8d33379-94e3-4800-91a1-149f7f880a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cd204b-9f02-48ba-a041-df3eb8862316",
        "cursor": {
          "ref": "e658cac6-7ea6-4e7a-a92a-22602b2064af",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cd4733df-37c3-4805-b6f9-92575a2c59bd"
        },
        "item": {
          "id": "e2cd204b-9f02-48ba-a041-df3eb8862316",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "73ce490a-dfcc-420f-8dba-13b4c12db4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d5107e-e771-4a77-bcc0-f0bfc61316c1",
        "cursor": {
          "ref": "f9bc5ee1-f7dc-4eb7-ac5a-b0cc2bf4fe0b",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3a26ed62-9f5c-44d3-a913-113f13723012"
        },
        "item": {
          "id": "08d5107e-e771-4a77-bcc0-f0bfc61316c1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "262aa30d-8075-4a48-9351-75bc7ffcce42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6ddafd-6a18-40e6-8a68-fa0dfd6244ba",
        "cursor": {
          "ref": "391af08b-ec69-4941-bdc0-11f8e0a351f2",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "235e5fec-f6f0-4196-9060-d20ab8b23b37"
        },
        "item": {
          "id": "fc6ddafd-6a18-40e6-8a68-fa0dfd6244ba",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7a9d3685-811d-4da7-b017-0ffc90dfa917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba97ad9-c553-4d6f-abc1-319917bf5d26",
        "cursor": {
          "ref": "f943c6b9-bf4f-4f5f-b86b-29f207621c57",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3f4eb9ab-77a0-4014-82aa-5b944c8bbac1"
        },
        "item": {
          "id": "7ba97ad9-c553-4d6f-abc1-319917bf5d26",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1c7c2a9a-6570-44a6-bf8d-2c269030bfcd",
          "status": "Created",
          "code": 201,
          "responseTime": 2759,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0b68d00d-8463-48ea-a056-e1dfebc6aecb",
        "cursor": {
          "ref": "0d357cb4-e359-4fee-9441-eeb91e811860",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6fb207f5-cee3-4970-9683-353c2bced419"
        },
        "item": {
          "id": "0b68d00d-8463-48ea-a056-e1dfebc6aecb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c0dafdda-b10b-4e92-8275-043762a4e9d3",
          "status": "Created",
          "code": 201,
          "responseTime": 3390,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "78854a02-3c63-44a8-ab08-2ad21b24ca90",
        "cursor": {
          "ref": "935e1511-a4e6-4ba7-9cfa-64bc22926ab2",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b92320a5-0816-43cc-8d34-2ad72089bb86"
        },
        "item": {
          "id": "78854a02-3c63-44a8-ab08-2ad21b24ca90",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "46d681a4-4367-45ff-a7d7-9e6fc20082d2",
          "status": "Created",
          "code": 201,
          "responseTime": 2986,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2bfa48a2-9976-4212-b087-5e0150f0b3bc",
        "cursor": {
          "ref": "0e3e266b-7d4a-44d5-9a73-27151d2a9abf",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cffb6b53-cc40-4438-b0d2-c12dfbef6752"
        },
        "item": {
          "id": "2bfa48a2-9976-4212-b087-5e0150f0b3bc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f25121fb-df57-429b-af8b-33fc2ada9dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78d894c-d835-4b9f-b336-6f1473714a71",
        "cursor": {
          "ref": "232f205a-91c7-4be8-9d2f-b6611f26df68",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "85756af9-1b60-46d3-ad77-e505569466ec"
        },
        "item": {
          "id": "a78d894c-d835-4b9f-b336-6f1473714a71",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f55b05e6-e813-4a09-b12a-c5a1383eee8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcb4a18-7380-4192-9089-f1d91120d5ba",
        "cursor": {
          "ref": "a12bddae-d8d2-4bfa-841d-c75c18d89de5",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1c2ccbf3-1785-40ca-acb2-499e238a51d5"
        },
        "item": {
          "id": "cbcb4a18-7380-4192-9089-f1d91120d5ba",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "45fc9b43-f1a0-441e-a5c1-f901a9d5ffb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1025da-c249-4cab-8daf-95c9fb41e96e",
        "cursor": {
          "ref": "41bdea8d-8bf8-4d5f-8439-9f2ec971cf9a",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "695e1d44-44b3-4bd8-8ccf-1bae2919d249"
        },
        "item": {
          "id": "3f1025da-c249-4cab-8daf-95c9fb41e96e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5d96ad56-8079-438c-aefc-ba650511b393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c273aae-9454-4f77-9dab-b2e3d4726418",
        "cursor": {
          "ref": "b639d1d6-8d06-4552-85bf-5279cd160b3f",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8fc1949a-023b-4b30-bf97-f0929351fb2f"
        },
        "item": {
          "id": "3c273aae-9454-4f77-9dab-b2e3d4726418",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f59a4e38-9c07-4a96-8d0f-9fc0d51542af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b921eaa2-a414-490c-b840-8f6250ae7a78",
        "cursor": {
          "ref": "1bb5fc9c-6589-426f-b79d-7236d97352bb",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d4ebde04-5874-4911-b65e-99c86097c60d"
        },
        "item": {
          "id": "b921eaa2-a414-490c-b840-8f6250ae7a78",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4e5e64d3-c1a4-4c81-8f89-473475a22700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b135b6bd-5a9f-48e3-92bd-bf3dd2c6c6a4",
        "cursor": {
          "ref": "bd73e546-8ef0-4dfc-8c68-42bcfbfd779a",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "85a64715-deb3-411e-a560-b6f61d625642"
        },
        "item": {
          "id": "b135b6bd-5a9f-48e3-92bd-bf3dd2c6c6a4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f8876b1e-4eff-4eed-9eaf-478952d0119d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95980e4e-4e0f-4e61-a4ea-d6d8fd80cb34",
        "cursor": {
          "ref": "b1f41c00-c74f-42bd-b518-3b0e9fde3445",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4cad361a-5377-4953-80ff-e85c8962e3ef"
        },
        "item": {
          "id": "95980e4e-4e0f-4e61-a4ea-d6d8fd80cb34",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4b0fae33-1c07-4a69-814e-61f527c0492e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1d8a9c-ff96-49f1-ae4b-d186f0f913b8",
        "cursor": {
          "ref": "25126db0-d87b-4662-a712-8c795cc5d0fb",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e27e7e07-b8da-423d-b1fa-0729d22b5323"
        },
        "item": {
          "id": "ad1d8a9c-ff96-49f1-ae4b-d186f0f913b8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dff9520a-5720-4c1f-8431-e260b8b62ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbe16f2-2438-4564-becd-9dba5dd9480f",
        "cursor": {
          "ref": "c660763f-ed1b-4ae6-a1b9-501f867181f4",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "91d1ac5b-8eeb-4816-a39d-4623d0d42b29"
        },
        "item": {
          "id": "4cbe16f2-2438-4564-becd-9dba5dd9480f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "333800bd-900c-4e3d-8da9-54f7dd84ca68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b235b5-5deb-4511-8dfb-32d7861080c9",
        "cursor": {
          "ref": "a6a147cf-0a6d-4151-acd8-aa155f1e7392",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "38d89813-92b9-4ac5-a02c-a31f0b094b89"
        },
        "item": {
          "id": "e2b235b5-5deb-4511-8dfb-32d7861080c9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4a5339cf-faa5-470b-9087-342b62d88d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c4bdf3-852e-4d24-8f27-45ac51c5b0c3",
        "cursor": {
          "ref": "444e1966-d5f6-45bc-b2a4-66d382ab0ed5",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "401aa462-5b8b-4ef4-b623-4ce446413815"
        },
        "item": {
          "id": "81c4bdf3-852e-4d24-8f27-45ac51c5b0c3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e7c4871b-618a-4e41-91f3-c6a2cc7ea672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a03431-605e-49ff-a7c8-9782af95c2f5",
        "cursor": {
          "ref": "ce102020-3537-47ff-8f41-ed9dec43152a",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bf032fd9-a1cf-49f0-8be5-6e83f85d894b"
        },
        "item": {
          "id": "10a03431-605e-49ff-a7c8-9782af95c2f5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f98475f7-b737-4d6f-8cce-3db07310ebba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a25595-59a2-44d1-a0bd-7fb4a8283b3a",
        "cursor": {
          "ref": "2b082ffe-b2c2-44aa-a727-72e7026dd8d3",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "63673ad0-b7e9-4bbf-8066-7efa52325371"
        },
        "item": {
          "id": "a7a25595-59a2-44d1-a0bd-7fb4a8283b3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fbeb27c2-b918-4c0a-9376-efd28dc7f9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 852,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e28d3c-dd05-459b-9856-6cc2b37b9ded",
        "cursor": {
          "ref": "51450d55-98be-47ec-acbf-73619c6d8fdc",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a81f035f-82d1-4501-951d-93d4aa2a61e4"
        },
        "item": {
          "id": "71e28d3c-dd05-459b-9856-6cc2b37b9ded",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "adf869a5-695e-4fea-b332-552b1b88c982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ece8305-73e1-484e-959d-500a0b65f74a",
        "cursor": {
          "ref": "189e0089-73fc-4b08-9a90-51fc55cf9cd2",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e78b42b8-1431-46d2-b673-74f743b9520f"
        },
        "item": {
          "id": "6ece8305-73e1-484e-959d-500a0b65f74a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "75507f27-77d6-4a50-94fd-675ad6ac48a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8dde3d-227e-4bc9-b795-eebf97e0cd35",
        "cursor": {
          "ref": "f623c7cf-bfa9-4b3f-9780-b6c42090fd34",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3a7cd663-2074-40f5-9c62-c4b67d10f6d6"
        },
        "item": {
          "id": "fe8dde3d-227e-4bc9-b795-eebf97e0cd35",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5ddc9cfd-92b0-4e68-8a57-8367b02fc786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb96d60-2c11-48ce-933d-c6a91439cc56",
        "cursor": {
          "ref": "60e35a28-baa0-42e5-98be-0ddee6031bc0",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "eddd6999-16da-41a4-b44b-8b13cbd05432"
        },
        "item": {
          "id": "adb96d60-2c11-48ce-933d-c6a91439cc56",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "87d16943-e86a-429b-b27c-f4d74335f578",
          "status": "Created",
          "code": 201,
          "responseTime": 3194,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "e730b4eb-8ca2-4406-aed0-58ee2d94c165",
        "cursor": {
          "ref": "4353f2f9-f876-476a-bc22-cbd9592e86c5",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3bb4decf-c418-4496-99e6-a3b700956b2c"
        },
        "item": {
          "id": "e730b4eb-8ca2-4406-aed0-58ee2d94c165",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3be54996-1627-457e-bc51-15e4aed51f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3673ad58-060f-47bc-adfd-278e7eaa06ba",
        "cursor": {
          "ref": "666462f0-b407-462e-a941-7bc6f309f13a",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "66b60f4c-9285-4248-a42e-539fe1260c22"
        },
        "item": {
          "id": "3673ad58-060f-47bc-adfd-278e7eaa06ba",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "52a07557-a2e7-4ada-b8d5-faf770499ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d7b318-62d7-4c32-8833-a8039a3aef57",
        "cursor": {
          "ref": "e34cbf37-5cb6-4035-835d-6146f58d36b1",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ae83d1e7-298a-4039-adf0-8d991c30b463"
        },
        "item": {
          "id": "e7d7b318-62d7-4c32-8833-a8039a3aef57",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4832ee4e-ec0e-4539-8677-f59323bbee06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32b5b52-4b85-4697-bcb1-8ece4b305677",
        "cursor": {
          "ref": "c0196133-373e-4817-af61-cad88a8325f6",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1832510e-6a84-47e2-8e9c-8139c2cdf96f"
        },
        "item": {
          "id": "c32b5b52-4b85-4697-bcb1-8ece4b305677",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "92981c69-8f8d-47c4-8444-dfd7ddcf559f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ee0a04-497d-433f-a328-a17df1055d86",
        "cursor": {
          "ref": "d5a205bc-7109-4e44-92ce-0bb1bb3c67e1",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e7e2df45-a0ef-4886-a3d5-96abca909479"
        },
        "item": {
          "id": "38ee0a04-497d-433f-a328-a17df1055d86",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8cb59bb3-a057-4371-8343-cb2c7944b491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0511c817-bda4-49a0-9033-ce137655ab4a",
        "cursor": {
          "ref": "389e6f6a-be5f-469e-820b-05fbe4897f8f",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bd69a168-1b88-470f-80ee-3189ee07752c"
        },
        "item": {
          "id": "0511c817-bda4-49a0-9033-ce137655ab4a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "643b0df9-9d3e-4845-b56c-2e989baae370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530cdfdf-460a-472a-be1e-ec112986e95c",
        "cursor": {
          "ref": "0907bbbe-50fa-439e-9770-b62bc1214af6",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d988f919-adb5-4df9-9d83-4bc863f5a23b"
        },
        "item": {
          "id": "530cdfdf-460a-472a-be1e-ec112986e95c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6202008e-a696-4cb4-ba53-e539bbd5e2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324aee3d-25b5-4d00-b2fa-0c2f66f78e01",
        "cursor": {
          "ref": "453baf49-0a7f-49f3-8d65-06576c77c746",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fd6109bf-8ee1-4257-88db-2d82bbce23f8"
        },
        "item": {
          "id": "324aee3d-25b5-4d00-b2fa-0c2f66f78e01",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "fdfec5aa-0b96-4a4a-9460-d133afc78cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1da7304-d09c-48ea-b939-27a98f6fb5f5",
        "cursor": {
          "ref": "b73920b3-0506-45f3-a603-d2ef54284cd2",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2313f38c-1968-4d25-b9fa-e66e2c752d33"
        },
        "item": {
          "id": "d1da7304-d09c-48ea-b939-27a98f6fb5f5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e46d85bf-8a39-41d4-ab34-b1fdf6ed628d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b864c8c-1ede-44cb-9300-28d07445bcaa",
        "cursor": {
          "ref": "00eced67-c396-45ee-9ffb-4955926ef6a1",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4f4cfdb2-3fa0-4263-87bc-e197b9e0d0b1"
        },
        "item": {
          "id": "4b864c8c-1ede-44cb-9300-28d07445bcaa",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3c45f056-17b3-4e31-a786-819b66897995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a7faaa-ee94-44a9-baa2-b92f99e985da",
        "cursor": {
          "ref": "07015ee4-542a-4225-bf99-ee98115f98e0",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8f8c857d-e2a6-4107-9306-d8fc0afbe070"
        },
        "item": {
          "id": "05a7faaa-ee94-44a9-baa2-b92f99e985da",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "70d7e724-560e-4bf3-815c-864c74c5ddbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb772d1-d44b-46fa-ae3b-20a2c00a5e78",
        "cursor": {
          "ref": "852a7ec1-d33a-4537-ac7d-9b97a19bf2d0",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "12cd9ac4-c63a-43ec-9433-4f79134afb44"
        },
        "item": {
          "id": "1cb772d1-d44b-46fa-ae3b-20a2c00a5e78",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ae16263b-65af-468f-91d5-5ebc6118275f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6091443-dabc-4205-8e24-49aa0ce4fc0a",
        "cursor": {
          "ref": "c78efd75-507f-4d98-b50a-3953978876f8",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38d3072b-fbbb-46fb-9198-29d73dc6699d"
        },
        "item": {
          "id": "e6091443-dabc-4205-8e24-49aa0ce4fc0a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "07b53832-c14c-40dd-b6d3-a505a803b097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6c698c-1072-49b6-91a1-2dc751689b3f",
        "cursor": {
          "ref": "08051e34-5c90-4afa-8b09-272f5984c45b",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e433df97-7c8a-4c78-97e0-fe06556b9acb"
        },
        "item": {
          "id": "0e6c698c-1072-49b6-91a1-2dc751689b3f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7d2e7cb3-8308-4dae-aab8-a106a3a8796b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce64ea2a-055f-4f84-a2c1-470d6883ea18",
        "cursor": {
          "ref": "35b2d89d-da4b-4849-a1a7-5483f3d0fd80",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "496f35b5-06cf-4612-ac76-3537a72a78c5"
        },
        "item": {
          "id": "ce64ea2a-055f-4f84-a2c1-470d6883ea18",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d5e95e1d-9ed8-4bf2-ade6-1452622ec0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269b9c8f-b747-48d3-8662-81213b50e472",
        "cursor": {
          "ref": "e8323d7d-e212-4f01-9e98-0b41dc3756f4",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b6a0f920-86f0-4266-b5b6-7f8ca2438a88"
        },
        "item": {
          "id": "269b9c8f-b747-48d3-8662-81213b50e472",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7a6488ae-fa6a-4f9f-9af2-ffd8bdc3a83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4c9bfa-37ab-4ca3-a2c8-cab29eb668b3",
        "cursor": {
          "ref": "be8440c9-9efc-42e4-99b6-33fb4ec2ffe3",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "be9bc3a1-dd33-4fec-8a6e-d19b36785677"
        },
        "item": {
          "id": "9b4c9bfa-37ab-4ca3-a2c8-cab29eb668b3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "81135557-2ede-4ed6-ac5c-cebae7f8ee05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e8c590-7370-4774-884f-46df0fdce417",
        "cursor": {
          "ref": "03d2e969-65ab-4f54-8e75-e87c76b8282c",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ca8c0f81-d3ce-4a14-9db4-dc780ab6fbe4"
        },
        "item": {
          "id": "07e8c590-7370-4774-884f-46df0fdce417",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5f890710-481f-4e55-a9d5-ef6eb683e9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abc7506-65fe-4a1d-922d-ab0659f2e1a5",
        "cursor": {
          "ref": "090cdaca-0ee4-4b77-b714-6ff7e68cda8f",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "539c2562-0ccf-4636-b3ba-b6c4e8b61663"
        },
        "item": {
          "id": "4abc7506-65fe-4a1d-922d-ab0659f2e1a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b7a116d1-3cad-4222-a959-079bd0ca047a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4da149-15d2-4d1b-a267-89159fff3f37",
        "cursor": {
          "ref": "c6a0a407-0874-4ca5-857e-b4c6eda1533b",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e08ec350-c857-456f-9858-d695f7ec9b4b"
        },
        "item": {
          "id": "ab4da149-15d2-4d1b-a267-89159fff3f37",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f405d7e3-0270-4951-bef0-c9fb3c1e72b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fb9cf5-4bc8-4503-b6ed-d89fde8398af",
        "cursor": {
          "ref": "cc689be1-4114-40cf-be75-2b4fd14aa076",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0f2ab9c4-77f0-4d76-8802-63cc1a3c5995"
        },
        "item": {
          "id": "c3fb9cf5-4bc8-4503-b6ed-d89fde8398af",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "10bc05a4-e438-4293-9ea5-0a70ad226f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31dc4d3-9076-4b75-9704-ef9260cda3e5",
        "cursor": {
          "ref": "a212cdf8-3005-4954-8cad-04fcece5cfe9",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3c42e2ca-0abd-4767-a27e-44184f8632b7"
        },
        "item": {
          "id": "f31dc4d3-9076-4b75-9704-ef9260cda3e5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "22facc07-5ac5-40b7-b1e2-f1cfb0cbeab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee460ea5-c14f-42e5-a057-b9b8f1fbee31",
        "cursor": {
          "ref": "53bf6c46-59c0-4cc4-9d25-acadd223954c",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e9b911ec-1a57-4c03-ad14-720e2b421df2"
        },
        "item": {
          "id": "ee460ea5-c14f-42e5-a057-b9b8f1fbee31",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2fb1594a-134b-40e3-a946-872f836a9494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20bf515d-ac3e-4700-b69c-2a13a546f64f",
        "cursor": {
          "ref": "f21875cd-f997-4240-984d-06356f8d2d58",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b2ba542b-9217-4032-a1ce-726d5d91ecfc"
        },
        "item": {
          "id": "20bf515d-ac3e-4700-b69c-2a13a546f64f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "87d5ec70-62b0-49ad-afc6-5d37c9df3730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45526a5b-62cb-4478-9e0d-a2beb14fee81",
        "cursor": {
          "ref": "1123b218-bea1-4907-bddd-4fe0e0df867a",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b1081f13-3b2b-4f0d-868d-1b90c1e10fec"
        },
        "item": {
          "id": "45526a5b-62cb-4478-9e0d-a2beb14fee81",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1f7bc97a-557b-4382-aef7-12eba5022e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68deb453-9b8e-4f18-9e75-80e21a1cf06e",
        "cursor": {
          "ref": "b795c025-8330-490e-8802-91e1be8be119",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c53d1215-8aa7-4c7c-a6b1-e21ca15a270a"
        },
        "item": {
          "id": "68deb453-9b8e-4f18-9e75-80e21a1cf06e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a91ead4c-b7d6-40fa-94f6-3c7070d2b23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ee5823-cab7-42c9-a86e-61e59574dcd4",
        "cursor": {
          "ref": "523410ca-5f0a-43c5-84be-296daf503c6a",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3a2285c3-009f-4a72-a59b-0115e6f22e89"
        },
        "item": {
          "id": "b1ee5823-cab7-42c9-a86e-61e59574dcd4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cc80bd16-2979-4822-8595-c409983a8620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b462b0d5-4e5c-4c84-b33f-cf92d1a6aa3e",
        "cursor": {
          "ref": "b3a95331-b7af-4b12-8ccd-b0f67874cdee",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e53c43e8-ee28-4208-9c4f-2423d8058bd3"
        },
        "item": {
          "id": "b462b0d5-4e5c-4c84-b33f-cf92d1a6aa3e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8b1af150-bcc6-40c7-86b9-6e50379f349b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f126f8bc-8a58-4d51-ae6b-449a2bc8fea0",
        "cursor": {
          "ref": "f0fbb1fc-79e6-436d-908f-76d5ee781ffe",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4fedcf8a-d5f9-4152-a0ff-97da0f1815a5"
        },
        "item": {
          "id": "f126f8bc-8a58-4d51-ae6b-449a2bc8fea0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b2d4a3b5-3187-4cfd-888b-a3e1de60f926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86507272-3e6b-427a-84be-da19519cf961",
        "cursor": {
          "ref": "2853859d-093b-4286-b0b5-7a5005530c4e",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b4ae36bd-4bb9-4af8-a53a-07c47e57b6f5"
        },
        "item": {
          "id": "86507272-3e6b-427a-84be-da19519cf961",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "66526da3-7948-499b-8a2a-4e300ca749b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6c8ffb-f62f-4753-9746-7e913f8e8387",
        "cursor": {
          "ref": "9facd142-8fcc-4a53-9ef9-ff705fa929fc",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aea71be0-e130-4e65-b1c2-6cef39da4799"
        },
        "item": {
          "id": "7c6c8ffb-f62f-4753-9746-7e913f8e8387",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9f68b8bb-9997-4933-ab05-d6dc8743846a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "c5f17e5a-42b2-4e64-a0df-a4b3552386fe",
        "cursor": {
          "ref": "4b9c2611-cc82-4aff-a624-e8ad6cb17361",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1fd158e8-beb0-4ee8-b6f9-1ab7502ce85e"
        },
        "item": {
          "id": "c5f17e5a-42b2-4e64-a0df-a4b3552386fe",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9c112268-257c-452d-a381-90bc32c0f51d",
          "status": "Created",
          "code": 201,
          "responseTime": 2165,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2160ff-b404-44d0-aad2-a4ff0344f95e",
        "cursor": {
          "ref": "78d1dd63-3de0-4dc3-bb00-3f4c4bf1f74e",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5a8496a8-b3f7-4415-ac26-43b6064df5ea"
        },
        "item": {
          "id": "6f2160ff-b404-44d0-aad2-a4ff0344f95e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7b0a11ad-3430-471e-88b4-947254b06fc8",
          "status": "Created",
          "code": 201,
          "responseTime": 2321,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b00608a-836f-4303-a231-89255b5b0718",
        "cursor": {
          "ref": "43014d2f-db0b-470e-a831-ccd70924885d",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "77b13f54-1e19-4178-9c42-4d562ffa7310"
        },
        "item": {
          "id": "3b00608a-836f-4303-a231-89255b5b0718",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "87a1c9ad-1ab8-429e-8f22-722f5da54a38",
          "status": "Created",
          "code": 201,
          "responseTime": 2667,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "60652a24-20e1-4325-9513-6e676e33562b",
        "cursor": {
          "ref": "26657388-e7a0-4dae-9e1e-b3c878708c57",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d62322b4-9192-4f77-92d3-5f67e6b01d8f"
        },
        "item": {
          "id": "60652a24-20e1-4325-9513-6e676e33562b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8765f47c-396f-4a3f-8e1e-5bbe58ad941f",
          "status": "Created",
          "code": 201,
          "responseTime": 2372,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "04080548-11d2-4ab4-b2d4-f4276922b62d",
        "cursor": {
          "ref": "0ffb8d22-750c-4ccd-85c4-c53282dc664d",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "328201cc-ee04-48d2-9db5-02d851ea6c5c"
        },
        "item": {
          "id": "04080548-11d2-4ab4-b2d4-f4276922b62d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "29320ee6-9353-49a6-9c04-0aff66ee0f37",
          "status": "Created",
          "code": 201,
          "responseTime": 2556,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-13T00:43:37Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-13T00:43:37Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5cc0896f-54dd-4d3f-add4-cdfb4c2edd0e",
        "cursor": {
          "ref": "83a84644-23e1-4e7f-a941-88d7a96f4df8",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "01b6b666-5cdd-4cd0-bffe-3b916b4d1e31"
        },
        "item": {
          "id": "5cc0896f-54dd-4d3f-add4-cdfb4c2edd0e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e91d4568-c41d-4813-a766-5ee8a68c8e67",
          "status": "Created",
          "code": 201,
          "responseTime": 2372,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234439e8-2f76-4f62-8a1b-e2c0894f602f",
        "cursor": {
          "ref": "b2c75709-4abb-4a9f-8863-6d277a9404f9",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9a3c9361-5bb7-4287-be75-6d91d7a66b6a"
        },
        "item": {
          "id": "234439e8-2f76-4f62-8a1b-e2c0894f602f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e621ec58-2e45-4612-b839-5ff53b74eef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62d9664-d67e-45ac-9729-8fd434cdb663",
        "cursor": {
          "ref": "da9b4e56-b6f8-4e99-893d-813f677d8b6f",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "40e1da0a-d9a2-46b6-9e68-7f3dad3c2f04"
        },
        "item": {
          "id": "e62d9664-d67e-45ac-9729-8fd434cdb663",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b984968b-a97f-4bbc-a9a4-c5c59fc6afa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dedff3c-e8b2-42cc-9eaf-c3f3add5b428",
        "cursor": {
          "ref": "818c1ba0-b43c-488d-8a92-107cfa1385fc",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "429f66a2-b8e2-4ae9-aa72-d07132ccf036"
        },
        "item": {
          "id": "7dedff3c-e8b2-42cc-9eaf-c3f3add5b428",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "88afa9eb-9381-42e8-a2c6-206fb10aef13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdbfc7c-58c6-4e34-bf49-450ebd98f2e8",
        "cursor": {
          "ref": "90e18493-2224-462f-a323-dc302eae6b64",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a9e66aea-42b7-46e0-924a-bf6f2e430be8"
        },
        "item": {
          "id": "6bdbfc7c-58c6-4e34-bf49-450ebd98f2e8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "939af639-405d-4859-9bf6-0d607eda6e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29ecc3e-e020-4a08-958e-aa173fe1dca4",
        "cursor": {
          "ref": "2d5dbfaf-754e-49a7-8d2d-a317a7faf58b",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "608abd0a-726f-4637-b5a8-08e5861edf1e"
        },
        "item": {
          "id": "c29ecc3e-e020-4a08-958e-aa173fe1dca4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "29c60533-f5dd-49db-9284-be45f9cd168a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f90e6a-553f-43de-8bc1-a20f12078652",
        "cursor": {
          "ref": "11dc8f3d-f3e8-49d4-8e55-c407b2b5a764",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6a94269c-2d46-429c-9771-9509de4842cb"
        },
        "item": {
          "id": "56f90e6a-553f-43de-8bc1-a20f12078652",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3eedb356-3776-407f-84cb-9fb965b821f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97426289-8820-45d8-8cdb-c66ceb5e7ddf",
        "cursor": {
          "ref": "86714012-c205-4ec7-b1c7-138258c654d8",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8b04ffe8-b406-418e-8a29-a0f251627d3a"
        },
        "item": {
          "id": "97426289-8820-45d8-8cdb-c66ceb5e7ddf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "152324e9-9767-47b2-978f-e9dc3ea37e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751740a9-c41c-46b8-b2ec-e18cb2e399c2",
        "cursor": {
          "ref": "75c2a76a-e427-4a60-82ea-c314f9736250",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d9019f6d-80b3-46f4-9e6d-b81ad86c62ba"
        },
        "item": {
          "id": "751740a9-c41c-46b8-b2ec-e18cb2e399c2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d5af960a-9d48-4404-bafb-35389ccdc8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b220996b-da4c-40ce-b380-baa72e930352",
        "cursor": {
          "ref": "da1a1762-346c-4661-9718-93cfcfa5261d",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c4121170-5c4f-4ef4-b0b9-2d18baa6e25d"
        },
        "item": {
          "id": "b220996b-da4c-40ce-b380-baa72e930352",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d580ea9f-ac6d-47e0-82ec-d9416b145025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2a6166-bfe8-4a48-bef5-18e0faf1f7b0",
        "cursor": {
          "ref": "58a8b2e1-8ab4-49ba-9c27-421affff4937",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "372c3258-7a3e-4b0f-8df1-57f64a718b21"
        },
        "item": {
          "id": "ba2a6166-bfe8-4a48-bef5-18e0faf1f7b0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1f0110b8-0a85-464d-b6a2-dc7c68f6daa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc8b5af-4459-41ec-8713-d211277e853a",
        "cursor": {
          "ref": "38d174c4-8a54-441d-b388-92ede90a4e3d",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0b9776d9-7440-41a5-bcc6-73dd1febaf51"
        },
        "item": {
          "id": "abc8b5af-4459-41ec-8713-d211277e853a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4f69d69e-030b-4f26-b926-5d92b99e6751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8380aff2-6977-4ac6-80a6-91dc5e9f027d",
        "cursor": {
          "ref": "51173c65-d04c-41a4-963d-dc834a20cb6a",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4586f431-28c3-4fce-8d5e-8cd74ca6daf4"
        },
        "item": {
          "id": "8380aff2-6977-4ac6-80a6-91dc5e9f027d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0aeebe83-134c-4cd4-bf88-94225249d1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddf0262-bf12-40a3-983b-5bfc43df4b0e",
        "cursor": {
          "ref": "1c9e0a0b-079f-41bd-83e0-050588042528",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7b48067a-99c7-4529-b275-6bcc9f133b76"
        },
        "item": {
          "id": "2ddf0262-bf12-40a3-983b-5bfc43df4b0e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1da269d6-2173-430e-9ce4-95268d3f303f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec63b387-b05b-474a-815b-4669452a7765",
        "cursor": {
          "ref": "bd645b96-3736-4221-94a9-97b74ac8d21f",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "27806378-e7b1-4d5a-9b7d-de29c053bfe5"
        },
        "item": {
          "id": "ec63b387-b05b-474a-815b-4669452a7765",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "86d57c7e-1089-4deb-985d-395846ca8fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e0f8c-49fd-4b8c-86a8-daddb2810b13",
        "cursor": {
          "ref": "4270a786-a0c9-4c02-a702-1295eb778faa",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b5374800-aafe-4a96-bd31-a26fd214ad48"
        },
        "item": {
          "id": "285e0f8c-49fd-4b8c-86a8-daddb2810b13",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "052bc5f2-d7c6-4d9a-90f3-9d19f15dd1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef95814-dcee-435a-8c96-bb74adceae29",
        "cursor": {
          "ref": "30685b8f-937f-46bb-954a-163aad657dce",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c738192f-7347-4531-b94a-7d2c21c86766"
        },
        "item": {
          "id": "0ef95814-dcee-435a-8c96-bb74adceae29",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7006199e-ea5f-4359-b87d-32e1da1bf26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97237e3c-a2cc-400d-b011-3eb8d5adff2f",
        "cursor": {
          "ref": "c0bcf62c-e686-47fe-bf06-3da2913e13c9",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "14e532af-79e2-4844-a85e-88fbe6d5f249"
        },
        "item": {
          "id": "97237e3c-a2cc-400d-b011-3eb8d5adff2f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4cac80e9-d8c9-44d0-be24-6526d3239420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec95175-fac4-41c8-8d08-5fb212726631",
        "cursor": {
          "ref": "077f332e-5b9c-4dd1-93be-b292bd178c9f",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0873eb62-21ab-4fce-b29b-b15ca819728c"
        },
        "item": {
          "id": "cec95175-fac4-41c8-8d08-5fb212726631",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a226f26f-93bd-4a05-b49b-72e46d264ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c6c06d-0bcd-4906-abfa-78b4fa15a363",
        "cursor": {
          "ref": "fe8b2354-103d-4393-a6fe-e80bb27ca903",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c0f30166-7012-4a56-babc-304345fea84d"
        },
        "item": {
          "id": "a1c6c06d-0bcd-4906-abfa-78b4fa15a363",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ba67cd32-9ef1-48b7-b322-1fde6ace1aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd011d2-89d8-4e1c-b1b8-3d07a109465b",
        "cursor": {
          "ref": "aea1e85f-2347-43da-a543-0b144829c967",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1749699f-b715-4823-bb9d-ca418b1d7f39"
        },
        "item": {
          "id": "9cd011d2-89d8-4e1c-b1b8-3d07a109465b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c43bf386-f19a-447a-9297-da02ed536007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9108858-f461-4f05-94ae-6ab8f60dd4b4",
        "cursor": {
          "ref": "14078e1f-6a5d-4e6d-9b14-359eee36e783",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "372a1dc0-f19b-4b61-982e-5efdf461cfb0"
        },
        "item": {
          "id": "c9108858-f461-4f05-94ae-6ab8f60dd4b4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2689954b-86d2-4a5b-a73e-324198b4cbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31efb106-4345-4d85-8cae-b107570a1b95",
        "cursor": {
          "ref": "3ada557a-493c-4b03-9302-73c7b7a9a390",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a054ffba-6360-4d26-8773-ab9cc57fa094"
        },
        "item": {
          "id": "31efb106-4345-4d85-8cae-b107570a1b95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d2210e68-e7f6-4e7f-8460-961fba8d7ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e973d135-86a2-4688-88bb-1ac5e03fa1a1",
        "cursor": {
          "ref": "c50221d9-cba4-49a1-a6ce-9d7cc248811b",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "11e057e4-00c9-4bd1-8d22-eab463824b50"
        },
        "item": {
          "id": "e973d135-86a2-4688-88bb-1ac5e03fa1a1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "991c7a0c-81a1-46cf-b5f4-6e991fff3383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3394a709-8050-499a-a24d-83641ae9a81a",
        "cursor": {
          "ref": "90f3c24c-d6ed-461d-ab0e-c27b1210815e",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "641c2c07-4a83-4893-a8f3-51d6c9fc307b"
        },
        "item": {
          "id": "3394a709-8050-499a-a24d-83641ae9a81a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1adf1b0b-6b31-4547-952b-f73fe085c2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d95a01-e967-4b6a-8834-d93794e01bf1",
        "cursor": {
          "ref": "9705114c-91e0-429c-b432-0e73d15706cd",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f7b19746-ad85-4757-830c-b8ade1ea4c9b"
        },
        "item": {
          "id": "b2d95a01-e967-4b6a-8834-d93794e01bf1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bedcc955-c7b6-4fcb-b2b0-4d502d703f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe38f7d1-c6e6-4f10-8674-04a55b4ae368",
        "cursor": {
          "ref": "7300fdc4-c26f-4d1d-afe7-fc692c7fc808",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d29db7a7-0338-4301-9552-e2ae78e0d71b"
        },
        "item": {
          "id": "fe38f7d1-c6e6-4f10-8674-04a55b4ae368",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cd015718-2594-42a0-8f17-60a98ecb008b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f98456f-73bb-4934-9d49-137d78d05840",
        "cursor": {
          "ref": "93acb265-9ee0-4f66-bba5-6e3c90191789",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fda3304f-a3cd-4ff3-b3c3-968d78234e0c"
        },
        "item": {
          "id": "0f98456f-73bb-4934-9d49-137d78d05840",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "20499dc3-ae6b-4cd2-99a8-b533b4fd6eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812b40b5-c64a-4b42-ae96-bb1ba03a1209",
        "cursor": {
          "ref": "7e849598-3343-4614-b3aa-41f245b083c5",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8bf492ce-b689-4c7a-81a6-62d9efbd798c"
        },
        "item": {
          "id": "812b40b5-c64a-4b42-ae96-bb1ba03a1209",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "025daab4-89bf-49f5-909d-f8235ab78618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75851dbd-a57e-48c4-9ef9-8b71fed3396f",
        "cursor": {
          "ref": "67540b9f-f989-4cd5-b820-e3553da7fd90",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d696bd3a-9d4f-432b-8e40-d421c634968a"
        },
        "item": {
          "id": "75851dbd-a57e-48c4-9ef9-8b71fed3396f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c19f4014-fc7b-4322-bd52-d4acd53b416e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719cfbcc-9d56-4269-9956-dc0f7eee60f5",
        "cursor": {
          "ref": "52777b4a-a3c8-4b13-8feb-e0fad6e2696f",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "19acf3dc-3d56-49cc-9cda-148e9850c61e"
        },
        "item": {
          "id": "719cfbcc-9d56-4269-9956-dc0f7eee60f5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "52ee8f5c-72c2-4a3c-ae16-6fcda7561610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091a1452-2105-428c-8bdf-674c0897c342",
        "cursor": {
          "ref": "db25142c-bd32-429b-a2d6-0530b2b33c38",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "eb340dd6-9928-4325-834e-950c503a9575"
        },
        "item": {
          "id": "091a1452-2105-428c-8bdf-674c0897c342",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "39f46b3f-fd40-452a-88be-1ce1694d96cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aee0a01-4819-4d9f-9ee6-77fb02218b97",
        "cursor": {
          "ref": "bc6ac013-b7a9-4e10-9a9c-61350a0de9de",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "59bc877f-561f-4960-87e1-006933bda95b"
        },
        "item": {
          "id": "5aee0a01-4819-4d9f-9ee6-77fb02218b97",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "04c8dd8d-0c92-4a37-a91c-17087e39bd67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 736,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90707e78-74b3-4198-a479-95c51769f38d",
        "cursor": {
          "ref": "d1a17d2a-879c-4f7a-965c-58f2fa12c8aa",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a1091433-0cab-4219-820f-665cccf48c4b"
        },
        "item": {
          "id": "90707e78-74b3-4198-a479-95c51769f38d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "37fe2799-f8e7-4605-8572-76712314fc66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ede6bc0f-5742-430d-849c-1812f0bab51b",
        "cursor": {
          "ref": "f2b3f87e-dd45-4b29-b73c-ab50b1201755",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "60dc1d73-9e9b-4ee4-b997-40ad0f463683"
        },
        "item": {
          "id": "ede6bc0f-5742-430d-849c-1812f0bab51b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f7e05a5b-cfdf-44ec-a7c9-f95bcf525637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef83b2dd-ff4c-4220-8067-a49cd8eaa051",
        "cursor": {
          "ref": "889edddd-da75-4394-ba81-4c56e2295771",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a28fb224-e849-4bbb-a37e-ec0a57e7f3d3"
        },
        "item": {
          "id": "ef83b2dd-ff4c-4220-8067-a49cd8eaa051",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "af08296c-4fb2-4a60-88a6-0ad2e47b47a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333bd424-87cb-4235-9804-a67f8b4df47c",
        "cursor": {
          "ref": "708a97f7-219e-45af-8a6c-e6908793c3f1",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d97a74f5-dae9-4016-a4b0-cc5c23cbc55b"
        },
        "item": {
          "id": "333bd424-87cb-4235-9804-a67f8b4df47c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e8bf60a6-8e06-40e1-908e-dfa52419cd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cd4d67-4bbc-47e2-b5ee-ebdc724ccb2f",
        "cursor": {
          "ref": "7682ddf0-5468-438c-828b-c0d220d670f8",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "857d6f97-cca1-4355-8859-31e088f32e29"
        },
        "item": {
          "id": "70cd4d67-4bbc-47e2-b5ee-ebdc724ccb2f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9815fea2-9e1e-4dfe-8ad5-509a050f7d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db8cc06-cb24-4cec-835b-4fa0d78dcbe9",
        "cursor": {
          "ref": "b58656f2-4d37-4dad-83fa-e5fd6e8b7882",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dfa2a53c-4668-4133-8b3b-218e30719bce"
        },
        "item": {
          "id": "2db8cc06-cb24-4cec-835b-4fa0d78dcbe9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ea9fd678-21f8-41b3-a2ea-4b7d85dcbc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82294a4-7f71-482e-bc8f-c3546604a42e",
        "cursor": {
          "ref": "a4d5c08e-03e4-40df-8390-469883d32ab4",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2a005423-5d3d-4ea4-a241-fd3b05ab568a"
        },
        "item": {
          "id": "c82294a4-7f71-482e-bc8f-c3546604a42e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5e8a7755-8e0f-4dae-a0f0-2921e3c01bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d320a6-2aae-4ded-9df9-5a801a4a45d5",
        "cursor": {
          "ref": "2edd77a1-b2a3-4691-8d18-005f510666ff",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cf0eb2c8-742e-401a-bbfd-4f55770dcdd7"
        },
        "item": {
          "id": "04d320a6-2aae-4ded-9df9-5a801a4a45d5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ab0b7ddd-998a-4f0f-b70b-6db5e3d015df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d063e14-5ed3-4d3c-8129-2ea1a43508ae",
        "cursor": {
          "ref": "ce1c585e-16fa-447c-9f3f-e35fa233ded0",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ce073f60-7afb-4451-a04c-1c16a9e74dd5"
        },
        "item": {
          "id": "9d063e14-5ed3-4d3c-8129-2ea1a43508ae",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4b161105-f0b2-4ff4-a8e1-00bfbe4e307b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda02f49-819e-4d8e-8bc3-eec6af87c1fb",
        "cursor": {
          "ref": "d75e7e8a-907b-43ff-94b2-6e8a5256f6c9",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "182cac54-96ae-4b05-9e97-001148e1b4b2"
        },
        "item": {
          "id": "bda02f49-819e-4d8e-8bc3-eec6af87c1fb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "de68ddf2-9b74-4ce2-b68b-34391aa9043b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1195c4fe-2e74-4121-9ce2-d513b8a403ec",
        "cursor": {
          "ref": "9683b701-1f90-4d59-a82d-9057fdc2fbf1",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1f4abd40-737f-4fc7-b843-c97a77e09cbe"
        },
        "item": {
          "id": "1195c4fe-2e74-4121-9ce2-d513b8a403ec",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "19adfe82-ae5a-42c4-affe-c3f5d14eedef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2d745b-83dc-4a44-bee4-e294d824db21",
        "cursor": {
          "ref": "e657dcf5-0fa6-4217-9b1e-6ff561549ed9",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2ba60bdf-fcd9-4021-b89c-6e1796ed0a7a"
        },
        "item": {
          "id": "0d2d745b-83dc-4a44-bee4-e294d824db21",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "955bc261-cbde-4c5e-8273-0721e08c38fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3085192-7cff-4182-9cfa-5afcd539a340",
        "cursor": {
          "ref": "4e1db971-e3cc-4eda-b606-f66c1681aba8",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "081f970e-91ea-48fd-b32c-86bac992ce3e"
        },
        "item": {
          "id": "e3085192-7cff-4182-9cfa-5afcd539a340",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8e9d79e2-0431-4114-bccb-1e20d2753ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8401fab1-f31b-4401-895e-755fd75d29ae",
        "cursor": {
          "ref": "bf092855-cd4e-46f5-ab53-a232a8c15d27",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "068c0059-75d4-4db1-bd0e-821dbf0dd21a"
        },
        "item": {
          "id": "8401fab1-f31b-4401-895e-755fd75d29ae",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b395e38c-8b15-45a7-9cbb-398b6932eea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467e5c2d-e77c-47a8-a775-7aa4d884b96b",
        "cursor": {
          "ref": "b80bea4f-beb7-4b3d-99f9-b3a286464a85",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "219ac9d7-3655-4e27-bfe3-b048bfa46f0f"
        },
        "item": {
          "id": "467e5c2d-e77c-47a8-a775-7aa4d884b96b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b03beaa5-2640-4ec5-a410-4c17927c0e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315fa378-6804-4c5c-b6f3-7378f4aedc52",
        "cursor": {
          "ref": "5642af29-3606-45c9-b585-835455f5d66a",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "678194c4-65b7-4575-a655-3c864dd5fed1"
        },
        "item": {
          "id": "315fa378-6804-4c5c-b6f3-7378f4aedc52",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f3082af3-c254-481c-a621-218e51a81a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e47124-e72a-4392-aad9-940a0cb49f71",
        "cursor": {
          "ref": "ed3c4a2d-b46a-4f62-8701-6b197b1139f5",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "169c5cbd-384f-436e-8dde-2b5e9e1afdda"
        },
        "item": {
          "id": "76e47124-e72a-4392-aad9-940a0cb49f71",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1379d952-a769-4bce-82ed-552f57defe21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3792f832-8d5e-4e48-8658-f290ee486fa2",
        "cursor": {
          "ref": "9afab66b-329e-49ad-b718-27c3946d644d",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b80f8dc-de4e-4603-b31f-411950d714e2"
        },
        "item": {
          "id": "3792f832-8d5e-4e48-8658-f290ee486fa2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c7a43bc5-2f51-47a2-b5c6-ed0d94a74365",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "e74a3e9c-df0e-49e6-bf1b-5209629db2b9",
        "cursor": {
          "ref": "e9d54dd8-0409-4a98-87c0-7abf7f268198",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e32ac63e-d3a0-4c5c-9892-64e35ac2fabe"
        },
        "item": {
          "id": "e74a3e9c-df0e-49e6-bf1b-5209629db2b9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d01bfe90-1f14-4717-ba7f-7fce70992b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda1b4d0-f58c-441d-808a-26f301ab1459",
        "cursor": {
          "ref": "50bc20a2-0f92-4b3f-8d05-5e57a5e48451",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "85a742cb-3a23-40ad-ae34-02463a7f222d"
        },
        "item": {
          "id": "fda1b4d0-f58c-441d-808a-26f301ab1459",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "01f49438-6ecc-4dfd-96b1-3fd60c7fb1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6316249-f997-41f4-944d-b361ed5afa52",
        "cursor": {
          "ref": "e024b2e8-e568-4fe5-b338-953e70c6a47b",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ef3cc94c-b66d-4a1c-9d08-3c2079214001"
        },
        "item": {
          "id": "b6316249-f997-41f4-944d-b361ed5afa52",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a6ab5714-1b6c-41bd-8c20-9211aee07b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa269c4e-55e1-407f-8005-811f758c6ee0",
        "cursor": {
          "ref": "e52a6ff9-deca-4c52-bf23-797d4be27b05",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4451fc78-7188-4f3d-b7f4-95463cdd7c2c"
        },
        "item": {
          "id": "aa269c4e-55e1-407f-8005-811f758c6ee0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "778abb82-3b84-4907-b47a-aa5f99c9442c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64c395b-a65e-49d8-9991-618624262c53",
        "cursor": {
          "ref": "e4a1e91f-d8b4-434f-b0c7-60d1b932c10b",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cf342553-52ed-48d9-89af-0997c6616c9d"
        },
        "item": {
          "id": "c64c395b-a65e-49d8-9991-618624262c53",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2465d955-eee5-4e14-9bbe-b642ea399a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bca8cf-23e2-41b0-bc9b-a309b42cd164",
        "cursor": {
          "ref": "80af8ab5-bd4b-4948-a9f0-f6bfb37112e4",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "10b9f6de-9974-45f3-8bfe-7f964c6741e5"
        },
        "item": {
          "id": "d3bca8cf-23e2-41b0-bc9b-a309b42cd164",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6e7ead98-09dd-4997-a646-6674cc347edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65e58d0-5498-4ff5-ae35-5ceee3888a21",
        "cursor": {
          "ref": "d1d8e53e-2975-4728-9658-94175e97b52b",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d40a693e-c167-4a89-98b8-31687612bcf7"
        },
        "item": {
          "id": "b65e58d0-5498-4ff5-ae35-5ceee3888a21",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "61c564ac-c478-4712-8149-a02bce97fdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3985e62a-d64b-47fa-bfa7-8c2ae76ec3b0",
        "cursor": {
          "ref": "ac536500-fb46-437e-a26c-6e84e5ece5f3",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1f201eda-bc23-49db-8125-7991394807fb"
        },
        "item": {
          "id": "3985e62a-d64b-47fa-bfa7-8c2ae76ec3b0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0154a317-d75c-405f-9a21-c76b3ef07238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09637813-146a-46f0-8bba-15e0500a47f0",
        "cursor": {
          "ref": "031f1c67-4116-41e3-bf00-4aec96b6ea46",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cb11f754-3194-4f68-93cf-391cd4e759ed"
        },
        "item": {
          "id": "09637813-146a-46f0-8bba-15e0500a47f0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5bcce3ac-e9f5-43e5-a025-2c4f695fdcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330e680c-1d72-46d4-ad40-1755a28c0c4d",
        "cursor": {
          "ref": "14cab285-670d-4089-8b84-8093ed83bf5a",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "87a238a7-8ea7-467f-91c4-faa2fb5bad05"
        },
        "item": {
          "id": "330e680c-1d72-46d4-ad40-1755a28c0c4d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "613efb12-01b3-4282-934e-50b124e15618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6328740b-ed53-4c45-8aa5-91bef32fca55",
        "cursor": {
          "ref": "51387019-eb3b-4ef2-9b1d-bb5c3b3364e4",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "49f7d7ac-d537-491f-b0e3-187b874cbf0d"
        },
        "item": {
          "id": "6328740b-ed53-4c45-8aa5-91bef32fca55",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4f56c9e7-8b0a-408e-80fc-2b27fe8ff36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268b95a9-56ca-424e-85af-586f865fb5e8",
        "cursor": {
          "ref": "481e6cb2-cdfe-4eff-9509-52e9b89ccfe2",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f14287fc-1b96-4ed2-880f-1b07e329a255"
        },
        "item": {
          "id": "268b95a9-56ca-424e-85af-586f865fb5e8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5cdb89e7-6b96-45ed-9692-4c516622f6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b65c0ad-3e66-43e3-b71d-1a001db37922",
        "cursor": {
          "ref": "997f9179-d1b2-40af-82d1-64a9f3755bb7",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "75900483-d48e-48fe-ad1f-292be64185f2"
        },
        "item": {
          "id": "2b65c0ad-3e66-43e3-b71d-1a001db37922",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0890ba16-a978-400f-865a-ef068d4d07ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2e6d71-cf1e-41bd-a52a-5d2e54ce5c66",
        "cursor": {
          "ref": "8f2d75a8-2210-468c-a903-cda37cfdc834",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "174eb9ad-2fd1-43e7-bd88-8b0c28fbb4b0"
        },
        "item": {
          "id": "cd2e6d71-cf1e-41bd-a52a-5d2e54ce5c66",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f48d9a4e-43a6-4d76-8f62-5a70b046ba1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dfda8d-571c-4ae2-96ac-e49ddb8a7e3e",
        "cursor": {
          "ref": "706bdb93-7657-4bdb-9624-4fd72da374d5",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6767ddf2-ae24-4ce6-85d2-9593ae6ee89d"
        },
        "item": {
          "id": "d8dfda8d-571c-4ae2-96ac-e49ddb8a7e3e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "41f37395-6b03-49a8-8ebb-afe06d8696ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e554c249-c7b0-4395-ba4d-b235d59494f5",
        "cursor": {
          "ref": "9a59cf1c-2565-4c9a-b6c3-b8dc2aee2eb4",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "87d508ee-4cd7-416e-8438-891c03386c97"
        },
        "item": {
          "id": "e554c249-c7b0-4395-ba4d-b235d59494f5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "048efc4b-2742-4b5b-ab11-a08d391042e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb82cd98-e993-448b-97d1-268e0cc35474",
        "cursor": {
          "ref": "178169a9-c080-4f9e-9674-ed77f98d4993",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "81945b17-dee4-496c-a813-5f3d44bf1366"
        },
        "item": {
          "id": "fb82cd98-e993-448b-97d1-268e0cc35474",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "00eb244b-b2a0-462f-a3e4-051f9d854699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088afc83-8d88-4832-aeb3-937271c80ec4",
        "cursor": {
          "ref": "524c8a94-2d2f-4f20-b483-393a5ce5aad1",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c1300878-5ca5-4a9a-bee9-293b3f521c9a"
        },
        "item": {
          "id": "088afc83-8d88-4832-aeb3-937271c80ec4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "650ba583-08f1-4907-8934-6be426ef8028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ad23b0-8e88-4d8d-939c-7129c3444061",
        "cursor": {
          "ref": "b52583c4-8c67-4892-8b56-9579f58cc1aa",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dc4fe9d9-26bb-4baa-bc00-ef0c63ccf513"
        },
        "item": {
          "id": "31ad23b0-8e88-4d8d-939c-7129c3444061",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "527d5c35-f2cb-41ab-991e-e923b207a377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852d255e-b94f-48f4-b63b-de88cf97c249",
        "cursor": {
          "ref": "65f19ce1-7231-465e-8aa5-b5b02e0ff913",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "951f7c69-547b-4697-af2e-a149d58cae2b"
        },
        "item": {
          "id": "852d255e-b94f-48f4-b63b-de88cf97c249",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "533373e5-8977-4d3c-8f28-05467cd8a59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f007115-b6cf-446c-b5b5-dbf2658726f5",
        "cursor": {
          "ref": "fd37caa3-bb63-4edf-91a8-3f319a01547d",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "168d6da8-4ce9-41db-aabf-35aecc3683ea"
        },
        "item": {
          "id": "0f007115-b6cf-446c-b5b5-dbf2658726f5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e8fbd996-9eb5-4f28-9eba-58e0782a70e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6022c2-08f1-47d3-854f-214c8e6e8436",
        "cursor": {
          "ref": "eb76e941-b6b8-4688-b6e1-7dd37cbb8eb5",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4e3935db-02e6-4929-84c6-c9322e6fac75"
        },
        "item": {
          "id": "dc6022c2-08f1-47d3-854f-214c8e6e8436",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8fa6d117-a6ff-4dc4-9e96-0fc480e4b11f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b775f2b-201a-418c-8178-e0f4b9fb7aa0",
        "cursor": {
          "ref": "76f16a80-f877-49dd-83b8-212ff69c4fe7",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "85d87fb6-3446-43f0-9e4f-267e999effd2"
        },
        "item": {
          "id": "1b775f2b-201a-418c-8178-e0f4b9fb7aa0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e3b33ee6-3249-4f78-8ad9-481c25764a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b500fb0e-ac38-419a-a0b5-57af315ffdd5",
        "cursor": {
          "ref": "bcabfdff-d2f7-458d-beb5-b8cb7101c3f3",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "673f9b0a-7811-4d9e-85a1-131b19ae75f6"
        },
        "item": {
          "id": "b500fb0e-ac38-419a-a0b5-57af315ffdd5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0118526b-d0f2-4300-b76a-4335abe1ca2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad81e8f6-4587-4389-a862-1bf7da72a7b9",
        "cursor": {
          "ref": "70784796-dad8-4d6a-81c8-5f5f890e3662",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9aac71c0-85d1-42f9-98e2-0700202be20a"
        },
        "item": {
          "id": "ad81e8f6-4587-4389-a862-1bf7da72a7b9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "015668c1-a184-47bc-9660-a2c937f1b85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00804994-06be-4853-acc8-b053453a2687",
        "cursor": {
          "ref": "4a1d0967-0b6d-4055-a3e7-e97adb74851c",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f3d98c39-4a52-47f7-bf4f-ac9b65081d9f"
        },
        "item": {
          "id": "00804994-06be-4853-acc8-b053453a2687",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5651caa2-2e4b-4997-993c-820ad95433aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a4b83d-d31b-4990-b671-7bee1cfbc918",
        "cursor": {
          "ref": "4adfce0d-56dc-4bc2-82bf-194d388092e9",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b29d307c-ffc5-4dc3-a63b-527193b5a702"
        },
        "item": {
          "id": "d9a4b83d-d31b-4990-b671-7bee1cfbc918",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "91854e9d-586a-4843-885f-e6ba8e1e04ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c8ff31-0f5f-47a8-a84e-4fdccce95115",
        "cursor": {
          "ref": "9ac4790b-0977-49f9-a3cf-11888248187c",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "53a7bfe9-08e7-453d-a85d-80e19135d893"
        },
        "item": {
          "id": "82c8ff31-0f5f-47a8-a84e-4fdccce95115",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "36c8e572-622d-4df2-9271-ad722b227002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad42b94-6ef8-432d-88f3-62ee6aa6f49c",
        "cursor": {
          "ref": "b72ec41a-53d5-49e5-904b-050c89933800",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3098c4db-00bb-46ef-99c5-da4c62a576d8"
        },
        "item": {
          "id": "bad42b94-6ef8-432d-88f3-62ee6aa6f49c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6687e390-1e4c-4716-a1d5-922abebe49b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa58868-7b8c-4cd8-914e-b051ee96ecf8",
        "cursor": {
          "ref": "ebe72da3-7ea4-4e13-b001-72a132620196",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b1760b03-8ca7-4e4e-ad4a-3a54e1b696dd"
        },
        "item": {
          "id": "9aa58868-7b8c-4cd8-914e-b051ee96ecf8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a96dbe96-9c0c-4bb5-b7eb-5be53d7a85b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57ca742-4e54-4f41-994e-8179ef5bce9e",
        "cursor": {
          "ref": "2890a816-1767-4933-99b1-93fd8dbd9ba3",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9bed945a-11ae-4cd5-80a0-6568d4c9a8eb"
        },
        "item": {
          "id": "f57ca742-4e54-4f41-994e-8179ef5bce9e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "63b528d2-c5fe-47aa-8fc8-7439fea82137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbda1a76-95bc-4b3a-9c1d-8913c7cd4c0b",
        "cursor": {
          "ref": "2a26472a-eceb-4032-ad0b-8de5cd664275",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "79d6f197-8b11-4027-961d-f6f5f9a00af4"
        },
        "item": {
          "id": "cbda1a76-95bc-4b3a-9c1d-8913c7cd4c0b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e041c6b4-fbea-4ba7-a966-8ebc6bc07e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739c0171-2263-49bc-bee3-9b095a15e4ff",
        "cursor": {
          "ref": "0520efd9-16fe-4222-9be1-4e87c133c23b",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9190adb2-4aa0-4a13-945d-3a138031d8de"
        },
        "item": {
          "id": "739c0171-2263-49bc-bee3-9b095a15e4ff",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "865203b7-eec3-4cff-b103-a5c8c2d525cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe5b7f2-3497-48b7-9ad6-fd5ac051e616",
        "cursor": {
          "ref": "6057c5f0-db3e-4610-b597-337397be1161",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "12769ea2-eafa-478f-869e-d124655afd27"
        },
        "item": {
          "id": "dbe5b7f2-3497-48b7-9ad6-fd5ac051e616",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1e204104-3162-48ad-bb90-0fadcf719b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede0f60f-a885-403c-adc8-17e52d0e75b2",
        "cursor": {
          "ref": "3dbf4e8c-f7a0-4259-9808-8bf7d24e539b",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bc0bea17-12c9-4444-a2e1-564bfc2f8ef4"
        },
        "item": {
          "id": "ede0f60f-a885-403c-adc8-17e52d0e75b2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "711c3252-ddeb-4796-bd83-87ab029f468b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b54807-fdec-4bb6-8e89-99031676d0eb",
        "cursor": {
          "ref": "ed320a1a-de4c-44b0-b4bf-e24bf3793e47",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "18f077db-90ea-4601-b92b-1454fe67dc6f"
        },
        "item": {
          "id": "38b54807-fdec-4bb6-8e89-99031676d0eb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ca499936-7384-477d-9ac0-3f5bd7f7a3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6774ec00-d5af-4964-83c5-533b13365e64",
        "cursor": {
          "ref": "5c829e7a-19d9-47c1-89ec-f815abe7f529",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f533554f-1166-4570-9371-1a251b1b4c09"
        },
        "item": {
          "id": "6774ec00-d5af-4964-83c5-533b13365e64",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ce8eac0e-42f4-498e-8a39-dad9d1381987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e6382b-1e38-4553-9f95-dc9ab77134ae",
        "cursor": {
          "ref": "f1123b87-ac0d-4808-a068-be99b53d72e9",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fc75ba25-08e1-4cae-89d4-9e896b716a16"
        },
        "item": {
          "id": "51e6382b-1e38-4553-9f95-dc9ab77134ae",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9a6c7ef0-88e5-4b53-931d-bf0aa35e3439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8c2288-2dae-41f8-b8e4-9092c5019579",
        "cursor": {
          "ref": "8e154d9f-0108-4dd3-a81c-7311385472b4",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e1ef5f6c-0bf4-47be-8eb8-2cca5ca8e2b5"
        },
        "item": {
          "id": "0f8c2288-2dae-41f8-b8e4-9092c5019579",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "97d2b940-3915-41de-90a2-e257f6c956f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18283be3-721c-45d8-a78c-352c201d6aae",
        "cursor": {
          "ref": "deea1372-708f-4e77-b3ff-300ae5f14812",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9e4b3df0-acdd-496a-b200-e82d9df4bafa"
        },
        "item": {
          "id": "18283be3-721c-45d8-a78c-352c201d6aae",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8eea048c-5ff9-4f7d-8fec-f4f3a5fc2ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8e2651-dbab-436c-80f6-134777fdede9",
        "cursor": {
          "ref": "c6d7e1b5-51d3-4db7-8df8-294f280e88c4",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1a0fa9e0-a5c2-4ef6-9949-0b80c2f8ad46"
        },
        "item": {
          "id": "3d8e2651-dbab-436c-80f6-134777fdede9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "98e3b962-315f-4b7b-a90f-ce434c125eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cdf072-e20e-4bfb-81ba-91a758c20a48",
        "cursor": {
          "ref": "96a53f90-afd0-4a96-8ef9-0d29234f1b97",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "94f80eae-22c7-4812-904c-ff7de17bd17a"
        },
        "item": {
          "id": "03cdf072-e20e-4bfb-81ba-91a758c20a48",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "594039a7-7d96-4e12-8db3-fea4944edb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f9bd18-d2bd-413c-9e38-18b8014c2e06",
        "cursor": {
          "ref": "83614549-c841-4412-853c-1caaffa531db",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "eecdd0ad-33e8-415a-8c9a-93ec0b4ae81a"
        },
        "item": {
          "id": "d0f9bd18-d2bd-413c-9e38-18b8014c2e06",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3c2da5f3-8980-42f5-8dd0-bcf4bf6207ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf62fc3-4701-4f8e-886c-fbadafc9a842",
        "cursor": {
          "ref": "8f4d71f8-a7ae-42a2-9c3a-6a1352c386df",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9c309a0b-90a6-4c01-a82e-b20808911dba"
        },
        "item": {
          "id": "bdf62fc3-4701-4f8e-886c-fbadafc9a842",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6a0e42b1-6346-4b3f-86bf-484d80a5cfd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2705ba-ba68-4bba-820e-6591d166af86",
        "cursor": {
          "ref": "ebebbc48-49b8-41d1-bf9d-e43f3aebc68e",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "208cea0c-4cd6-4468-b05b-994712ec747f"
        },
        "item": {
          "id": "ae2705ba-ba68-4bba-820e-6591d166af86",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "db8f2861-9e59-4138-8ba9-559d35e97b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a56bdbb-d658-4cd2-8ac8-201d2bb3ca72",
        "cursor": {
          "ref": "9917454b-643b-46c6-acff-1b6e977a2bbd",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3ad4ab16-da7a-47ab-b18f-f9b83e73a7d7"
        },
        "item": {
          "id": "4a56bdbb-d658-4cd2-8ac8-201d2bb3ca72",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "21ec3a18-3fa6-480c-99ba-c2e4d32457f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563e3aeb-323b-4757-a88a-8bfe67b1709d",
        "cursor": {
          "ref": "ad37cb2a-54f9-438b-b9e5-5d02115ad934",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cedba3e5-efd1-44e3-a06e-916edb69d43a"
        },
        "item": {
          "id": "563e3aeb-323b-4757-a88a-8bfe67b1709d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2e3782a4-a909-4cb7-8097-722bdca020b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03798bd-f895-4cc3-b425-091e718b2915",
        "cursor": {
          "ref": "5c981f87-b309-45b5-9853-517b06ee96e3",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "101ff6c8-4776-465d-9b9f-820da95b7b72"
        },
        "item": {
          "id": "c03798bd-f895-4cc3-b425-091e718b2915",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "425ce20b-f8e1-4941-b832-721ef8cb7862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4d16e1-32f3-4e5d-b334-932e0f132007",
        "cursor": {
          "ref": "946183cd-7224-459e-bd7f-ed3243bce8ac",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "52a1f1e9-bcf6-427d-a2a7-1e801bb0644b"
        },
        "item": {
          "id": "af4d16e1-32f3-4e5d-b334-932e0f132007",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "43604c30-e639-42d1-9abb-f184bb386550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5992e9-4dbf-4fc0-93d9-a54a118b088b",
        "cursor": {
          "ref": "4a8204e9-1275-4210-9e7e-87245943e55d",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7031a1e4-eee0-4f50-a8b0-36f91eebd985"
        },
        "item": {
          "id": "1e5992e9-4dbf-4fc0-93d9-a54a118b088b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cd1ab441-e55b-4a83-8675-8eba0fe44ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9d7646-256d-4371-bed9-020e2dbbb165",
        "cursor": {
          "ref": "d94bbcd5-0f5f-4bd5-accc-15872744b029",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f3f73f23-d7e7-4c1a-a225-e2d1deedd4ca"
        },
        "item": {
          "id": "da9d7646-256d-4371-bed9-020e2dbbb165",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e2c02840-4d35-4491-9a5c-55d171121497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1ce21e-4725-4a36-b587-b6e03e87c261",
        "cursor": {
          "ref": "e81268de-1316-4e7d-8dea-514eed45a46b",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a7aa7e02-25f9-4aa3-ba6e-d05e66bd0381"
        },
        "item": {
          "id": "dc1ce21e-4725-4a36-b587-b6e03e87c261",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6f790d57-b55c-431e-b249-36345ef41238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f76507-c4e9-4589-80bb-050436f466f1",
        "cursor": {
          "ref": "611fb9f5-52af-44e0-9aae-4cb79344e955",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1f25777e-baf5-4e91-95b6-1ee6bae228ae"
        },
        "item": {
          "id": "d3f76507-c4e9-4589-80bb-050436f466f1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4184cf09-cfb6-424f-b25a-4b5f4ce5280a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9568b4-3d1c-40b3-8629-79581e89393b",
        "cursor": {
          "ref": "8ef6f86f-0d30-43e3-bdcd-8d169e11d57e",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "29a0c2f5-f78e-42e9-971b-7c95fa9d86b8"
        },
        "item": {
          "id": "0c9568b4-3d1c-40b3-8629-79581e89393b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "69473330-6d7c-4e66-b10f-8d55be59d4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ab0f96-a180-49a7-b2e2-54f6380a941c",
        "cursor": {
          "ref": "705bbb2c-4a7d-4c1f-8942-944ecdb87af6",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "92779177-8df1-41d1-88b0-14e6216dcd4b"
        },
        "item": {
          "id": "83ab0f96-a180-49a7-b2e2-54f6380a941c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cdba73d3-6273-486b-9eb2-b5aca19d1227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa076c1-9856-40ba-bbd0-150328f3d319",
        "cursor": {
          "ref": "59b8ffdd-b5ac-45aa-8920-2617d0b43c93",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "628b769e-d967-44d1-a0b7-46988efa4761"
        },
        "item": {
          "id": "4fa076c1-9856-40ba-bbd0-150328f3d319",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cfe467ea-afc4-4b9b-b588-c8e8a71dd041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febd4ad8-b4d3-476d-bbc5-efed6d1d261a",
        "cursor": {
          "ref": "aad94ce7-bc85-4f87-8007-3a155ca12068",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bfec9947-3421-480e-85a1-56ec799f83c8"
        },
        "item": {
          "id": "febd4ad8-b4d3-476d-bbc5-efed6d1d261a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d75d13c1-badc-4469-870b-56ce8903ba7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6a4152-5514-464c-86cf-f3c3cc650522",
        "cursor": {
          "ref": "0aa9994e-ec49-43e0-8098-bc941e05ea52",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "867094ea-7c53-4c1e-8f36-b696aa342aa2"
        },
        "item": {
          "id": "bb6a4152-5514-464c-86cf-f3c3cc650522",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2737f28e-0a07-4425-a1fb-09f3f01cb2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6974ec83-3d9b-430e-b22c-2c0affccc808",
        "cursor": {
          "ref": "7486c29c-ce8e-4d0c-9362-09604f939867",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "750b816d-03b4-4cd8-8d5c-97e5334273bc"
        },
        "item": {
          "id": "6974ec83-3d9b-430e-b22c-2c0affccc808",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3f3c5b7e-b79a-4962-81d0-80dc6bfef14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ec74c6-da11-4596-b9f5-8265c6c5a9bb",
        "cursor": {
          "ref": "ea1e6295-8abe-429d-accc-755363b2f273",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "517e274c-6914-4839-a339-6a284bca764c"
        },
        "item": {
          "id": "d2ec74c6-da11-4596-b9f5-8265c6c5a9bb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2d28237d-3f03-4e9d-a6c5-85c2fe71d167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605f3f86-45fc-4198-ace7-cd13163f47d1",
        "cursor": {
          "ref": "f2343422-2441-4cb4-a8c8-3fe39ebe466d",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "016c57ee-eae9-47bb-9434-60a53125557a"
        },
        "item": {
          "id": "605f3f86-45fc-4198-ace7-cd13163f47d1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2de2993c-7ad4-4159-8796-cf54fc0aae24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40939bd3-2cef-4dcb-acff-aa5f9fed64cd",
        "cursor": {
          "ref": "e699ff84-c592-4528-a60e-b57c81e3e63b",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fcd32723-f79f-49ca-aeef-731ad6e2bc5b"
        },
        "item": {
          "id": "40939bd3-2cef-4dcb-acff-aa5f9fed64cd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "840082cf-5584-45b3-a3dd-972170df4b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c08137c-e634-42f5-8db4-e99c05ff973e",
        "cursor": {
          "ref": "c8107a5b-60a8-484c-afe0-04a563be6e28",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "95c9d46d-2a42-4f6d-b561-36fd87f0199d"
        },
        "item": {
          "id": "6c08137c-e634-42f5-8db4-e99c05ff973e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dbe53b34-3e09-47b1-b0ed-033558cf8ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8c543d-3217-4a43-a82f-39be62f13a07",
        "cursor": {
          "ref": "9011312f-0026-4c01-8a8f-942195b1d903",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6380dada-8c62-41be-93b5-75d0e3b0dd30"
        },
        "item": {
          "id": "3f8c543d-3217-4a43-a82f-39be62f13a07",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ce2bb3fd-bbb9-4340-8876-4c450d0d5176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571682c1-5f5d-408e-865a-55d1995efe6c",
        "cursor": {
          "ref": "f2daf1c8-e94d-4fc7-8ffc-e2f77f7bcc02",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1a2b451e-3ce1-4021-a3f5-5bcf15b6cffd"
        },
        "item": {
          "id": "571682c1-5f5d-408e-865a-55d1995efe6c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "455d0c46-996c-47a9-97c4-c11f941c4880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5217ac6b-d704-4f59-beb8-7dc3e532edd4",
        "cursor": {
          "ref": "c0f9b848-fc78-44be-beea-bd789187771f",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "dd9ef2ef-7456-413c-8d6d-81b18a781165"
        },
        "item": {
          "id": "5217ac6b-d704-4f59-beb8-7dc3e532edd4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c9a00605-9567-4fec-9d08-79b7e769bd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40bd666-772e-4d4b-942b-82d3a89d841e",
        "cursor": {
          "ref": "b0f6c0ef-7008-4bf8-bd3a-9ebb56b42101",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5cb2897b-3a19-4bae-9101-6411fdb9edcb"
        },
        "item": {
          "id": "c40bd666-772e-4d4b-942b-82d3a89d841e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bb86fc9a-1c91-4b9e-a1ec-9eb374db417b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcdff12-ae5d-43dc-9a29-bb31c94efb60",
        "cursor": {
          "ref": "4b6b050c-9688-4b07-bffd-85ae83195ef4",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "db598139-578f-4621-bac9-e61a130112b5"
        },
        "item": {
          "id": "6bcdff12-ae5d-43dc-9a29-bb31c94efb60",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dd37687c-d00c-412a-bac7-9e77ef9b289e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 748,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a78f71-2179-4d99-9944-54a1cdd639d3",
        "cursor": {
          "ref": "8fda3f7e-d978-42e2-acb9-0be8a6257990",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "558b8d6d-2173-49f3-b235-5122aad19efe"
        },
        "item": {
          "id": "c1a78f71-2179-4d99-9944-54a1cdd639d3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "74387834-4f7f-4975-a48a-ad8a26d40e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583c73b6-1df7-4825-aec7-4c7a2b7101ef",
        "cursor": {
          "ref": "06b408aa-5009-47c1-9300-20c2c4e3d071",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "65a69dfb-a410-40bd-adda-57d6e4b4311e"
        },
        "item": {
          "id": "583c73b6-1df7-4825-aec7-4c7a2b7101ef",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6ccff11c-1a14-4bf5-9ba5-55862d7d0916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b3b44b-7d26-4e51-bfbd-f696e1916b71",
        "cursor": {
          "ref": "adae5800-bf41-498f-8041-ab2990bbe285",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2af73285-4a02-4989-b15f-daaca8cfb47a"
        },
        "item": {
          "id": "31b3b44b-7d26-4e51-bfbd-f696e1916b71",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fc04c356-237c-469c-914a-a6b258226722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90f48f1-3b8e-4b90-aa18-5c9da169d40c",
        "cursor": {
          "ref": "2bc3de1e-964e-48ff-b6a0-4b01c01d97d9",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9dc215ea-ea4a-47ea-a3c5-0a7de7068b91"
        },
        "item": {
          "id": "c90f48f1-3b8e-4b90-aa18-5c9da169d40c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a58165ef-c5e7-4276-8a30-ff994c3d91fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7077a47b-a4a3-4346-8a3d-df68c35be5de",
        "cursor": {
          "ref": "4f56ab46-d801-493a-b03a-22a097fea738",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "db799a39-2302-4818-8552-cc4abb923bf2"
        },
        "item": {
          "id": "7077a47b-a4a3-4346-8a3d-df68c35be5de",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e549ead5-a042-497a-9e6e-b2e0734cc956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705fa90d-0853-4ee6-a6a9-6fcab16d707d",
        "cursor": {
          "ref": "42cc05e8-9ba9-43b0-969f-98541b312905",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e4750a87-6e5e-4e57-a6a1-f88e662e60a6"
        },
        "item": {
          "id": "705fa90d-0853-4ee6-a6a9-6fcab16d707d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "90a3d27c-7d14-4947-94b4-7509a7809cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a0761d-52d4-4964-b351-9dd2c238e906",
        "cursor": {
          "ref": "7fd3da56-4076-4966-9344-3c46fcaa8f2f",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "30481ef5-f360-4825-9ffd-13efdcb299f6"
        },
        "item": {
          "id": "82a0761d-52d4-4964-b351-9dd2c238e906",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2784c5e0-5965-4587-8e76-e1cefdd292ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23d5f2a-5880-46cb-b028-1af1b1a26909",
        "cursor": {
          "ref": "62995afc-7d8e-4fa1-a6cc-c0d49b2924f7",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e4756028-ce35-4983-ab74-ebdb42d4fee6"
        },
        "item": {
          "id": "b23d5f2a-5880-46cb-b028-1af1b1a26909",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "302474f1-04e5-43cb-933d-068d3058f243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26762637-516e-47d1-8eaa-52d62c8e734a",
        "cursor": {
          "ref": "8ca30be0-e74b-43ff-ad96-a9dc30bb5d3e",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2d47f5ab-5091-47e6-b650-8bb985bf8349"
        },
        "item": {
          "id": "26762637-516e-47d1-8eaa-52d62c8e734a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9ca0c1ff-abce-4944-87c0-31d66ccbea14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e90360f-bea9-4fa9-8e30-2c8eb266056a",
        "cursor": {
          "ref": "664275a6-7344-4ba1-89f9-e33becc6c2b2",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a6d8a78c-7cc5-4f67-b16e-931150c4c0a5"
        },
        "item": {
          "id": "4e90360f-bea9-4fa9-8e30-2c8eb266056a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "da106a87-094a-4cbe-becc-887dacc45e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0effb4-cefc-4ed7-a49e-2241aa631029",
        "cursor": {
          "ref": "1a201b4c-262b-4b69-935e-8c5c75ca12cd",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "482c7ab5-3849-4de0-ab9b-82f055398593"
        },
        "item": {
          "id": "af0effb4-cefc-4ed7-a49e-2241aa631029",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d002dca3-7d3c-4c2c-8ae5-c69aa2eca002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01142d7-0f34-4984-bc9b-466dc1a18781",
        "cursor": {
          "ref": "69bca464-4f76-4f3d-9379-e62158e9b354",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a8c6e706-fc27-4d31-b9ce-665256019849"
        },
        "item": {
          "id": "d01142d7-0f34-4984-bc9b-466dc1a18781",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f1aefba9-a385-4e33-a2ee-3ab53123ae3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e531224-3d22-49c9-94a5-04f1779ffae9",
        "cursor": {
          "ref": "2646be79-d509-433e-be25-9ec276062365",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d2b743e9-8a75-4bb4-a765-d872fa0342ab"
        },
        "item": {
          "id": "8e531224-3d22-49c9-94a5-04f1779ffae9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7855ad60-3d28-4f75-a6a8-7fe18eb159ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "01c50377-c386-41c8-8859-d7c95bb64fd6",
        "cursor": {
          "ref": "3d7fd7dd-a883-4eb6-b3dc-af233d462b96",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ef5c0fbf-0655-4717-811d-f2ab60c38331"
        },
        "item": {
          "id": "01c50377-c386-41c8-8859-d7c95bb64fd6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "08770c66-75b9-4ae1-baea-1db10e413c6e",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "2415021e-f3aa-4555-bf7d-6aef046385a2",
        "cursor": {
          "ref": "f8d99af5-37b0-4e9f-b8f5-1d2d04759a05",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "04e00388-a6b9-42a6-8ec6-5fb3bb85474f"
        },
        "item": {
          "id": "2415021e-f3aa-4555-bf7d-6aef046385a2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3da0bae7-aa69-4258-b394-c9daa9aac5e8",
          "status": "OK",
          "code": 200,
          "responseTime": 1864,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1968b6c3-242c-4999-a1b4-1e2f770f2a93",
        "cursor": {
          "ref": "6f34090b-24cd-4380-a9a0-098c04e7dcd6",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e3131e92-aa46-40cd-89dc-d8b049f82e86"
        },
        "item": {
          "id": "1968b6c3-242c-4999-a1b4-1e2f770f2a93",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "82f54695-7f5f-412d-b770-71a29c789944",
          "status": "OK",
          "code": 200,
          "responseTime": 2586,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b959f77-69d9-4089-bba5-915a8b80d939",
        "cursor": {
          "ref": "0ca3408b-a35f-4986-9c51-b7d8413062f0",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6d2dc638-b8fe-4176-9b82-43e459baf8e0"
        },
        "item": {
          "id": "1b959f77-69d9-4089-bba5-915a8b80d939",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "80cb0ab2-75a5-4957-90e8-3cf833512b4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1b959f77-69d9-4089-bba5-915a8b80d939",
        "cursor": {
          "ref": "0ca3408b-a35f-4986-9c51-b7d8413062f0",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6d2dc638-b8fe-4176-9b82-43e459baf8e0"
        },
        "item": {
          "id": "1b959f77-69d9-4089-bba5-915a8b80d939",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "80cb0ab2-75a5-4957-90e8-3cf833512b4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ed3fcb77-6feb-4c59-a57b-e9eb8f7e7288",
        "cursor": {
          "ref": "f50d0ff2-0207-4e59-b154-9556f47aac99",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f04d9203-20cb-4d8c-99da-9ed2621a2ea5"
        },
        "item": {
          "id": "ed3fcb77-6feb-4c59-a57b-e9eb8f7e7288",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "13ed49ab-a8de-4d9e-869c-02db5eb93322",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "34aaa55a-439b-40e5-9e63-07bd16ce08aa",
        "cursor": {
          "ref": "8da96a7e-5345-4a2a-960b-8809afe5a902",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4b5158c7-eec6-4689-98dd-9ce95f23bd84"
        },
        "item": {
          "id": "34aaa55a-439b-40e5-9e63-07bd16ce08aa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6887398a-54a0-4b1e-869f-d5bcccc6dec9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}